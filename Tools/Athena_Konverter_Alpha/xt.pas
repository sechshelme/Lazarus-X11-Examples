unit GTK4;

interface

uses
  cairo, pango;
// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/ShellP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/ShellP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/ShellP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XtShellPrivate_h}
//// {$define _XtShellPrivate_h}
//// {$include <X11/Shell.h>}



//// (* error 
//// typedef struct {
in declaration at line 79 *)

//// (* error 
//// } ShellClassPart;
in declaration at line 80 *)




    type
      TShellClassExtensionRec = record
          next_extension : TXtPointer;
          record_type : TXrmQuark;
          version : longint;
          record_size : TCardinal;
          root_geometry_manager : TXtGeometryHandler;
        end;
      TShellClassExtension = ^TShellClassExtensionRec;

    const
      XtShellExtensionVersion = 1;      

    function XtInheritRootGeometryManager : TXtGeometryHandler;      

    type
      T_ShellClassRec = record
          core_class : TCoreClassPart;
          composite_class : TCompositeClassPart;
          shell_class : TShellClassPart;
        end;
      TShellClassRec = T_ShellClassRec;
//// (* error 
//// externalref ShellClassRec shellClassRec;
 in declarator_list *)


//// (* error 
//// #define _XtShellPositionValid	((Boolean)(1<<0))
 in member_list *)

      TShellPart = record
        end;

      TShellRec = record
          core : TCorePart;
          composite : TCompositePart;
          shell : TShellPart;
        end;
      TShellWidget = ^TShellRec;




      TOverrideShellClassPart = record
          extension : TXtPointer;
        end;

      T_OverrideShellClassRec = record
          core_class : TCoreClassPart;
          composite_class : TCompositeClassPart;
          shell_class : TShellClassPart;
          override_shell_class : TOverrideShellClassPart;
        end;
      TOverrideShellClassRec = T_OverrideShellClassRec;
//// (* error 
//// externalref OverrideShellClassRec overrideShellClassRec;
 in declarator_list *)


      TOverrideShellPart = record
          frabjous : longint;
        end;

      TOverrideShellRec = record
          core : TCorePart;
          composite : TCompositePart;
          shell : TShellPart;
          override : TOverrideShellPart;
        end;
      TOverrideShellWidget = ^TOverrideShellRec;




      TWMShellClassPart = record
          extension : TXtPointer;
        end;

      T_WMShellClassRec = record
          core_class : TCoreClassPart;
          composite_class : TCompositeClassPart;
          shell_class : TShellClassPart;
          wm_shell_class : TWMShellClassPart;
        end;
      TWMShellClassRec = T_WMShellClassRec;
//// (* error 
//// externalref WMShellClassRec wmShellClassRec;
 in declarator_list *)



      TWMShellPart = record
          title : ^char;
          wm_timeout : longint;
          wait_for_wm : TBoolean;
          transient : TBoolean;
          urgency : TBoolean;
          client_leader : TWidget;
          window_role : TString;
          size_hints : record
              flags : longint;
              x : longint;
              y : longint;
              width : longint;
              height : longint;
              min_width : longint;
              min_height : longint;
              max_width : longint;
              max_height : longint;
              width_inc : longint;
              height_inc : longint;
              min_aspect : record
                  x : longint;
                  y : longint;
                end;
              max_aspect : record
                  x : longint;
                  y : longint;
                end;
            end;
          wm_hints : TXWMHints;
          base_width : longint;
          base_height : longint;
          win_gravity : longint;
          title_encoding : TAtom;
        end;

      TWMShellRec = record
          core : TCorePart;
          composite : TCompositePart;
          shell : TShellPart;
          wm : TWMShellPart;
        end;
      TWMShellWidget = ^TWMShellRec;
//// {$include <X11/VendorP.h>}


//// (* error 
//// typedef struct {
 in declarator_list *)
//// (* error 
////     XtPointer       extension;          /* pointer to extension record      */
 in declarator_list *)

//// (* error 
//// } TransientShellClassPart;
in declaration at line 233 *)
    type
      T_TransientShellClassRec = record
          core_class : TCoreClassPart;
          composite_class : TCompositeClassPart;
          shell_class : TShellClassPart;
          wm_shell_class : TWMShellClassPart;
          vendor_shell_class : TVendorShellClassPart;
          transient_shell_class : TTransientShellClassPart;
        end;
      TTransientShellClassRec = T_TransientShellClassRec;
//// (* error 
//// externalref TransientShellClassRec transientShellClassRec;
 in declarator_list *)


      TTransientShellPart = record
          transient_for : TWidget;
        end;

      TTransientShellRec = record
          core : TCorePart;
          composite : TCompositePart;
          shell : TShellPart;
          wm : TWMShellPart;
          vendor : TVendorShellPart;
          transient : TTransientShellPart;
        end;
      TTransientShellWidget = ^TTransientShellRec;




      TTopLevelShellClassPart = record
          extension : TXtPointer;
        end;

      T_TopLevelShellClassRec = record
          core_class : TCoreClassPart;
          composite_class : TCompositeClassPart;
          shell_class : TShellClassPart;
          wm_shell_class : TWMShellClassPart;
          vendor_shell_class : TVendorShellClassPart;
          top_level_shell_class : TTopLevelShellClassPart;
        end;
      TTopLevelShellClassRec = T_TopLevelShellClassRec;
//// (* error 
//// externalref TopLevelShellClassRec topLevelShellClassRec;
 in declarator_list *)


      TTopLevelShellPart = record
          icon_name : ^char;
          iconic : TBoolean;
          icon_name_encoding : TAtom;
        end;

      TTopLevelShellRec = record
          core : TCorePart;
          composite : TCompositePart;
          shell : TShellPart;
          wm : TWMShellPart;
          vendor : TVendorShellPart;
          topLevel : TTopLevelShellPart;
        end;
      TTopLevelShellWidget = ^TTopLevelShellRec;




      TApplicationShellClassPart = record
          extension : TXtPointer;
        end;

      T_ApplicationShellClassRec = record
          core_class : TCoreClassPart;
          composite_class : TCompositeClassPart;
          shell_class : TShellClassPart;
          wm_shell_class : TWMShellClassPart;
          vendor_shell_class : TVendorShellClassPart;
          top_level_shell_class : TTopLevelShellClassPart;
          application_shell_class : TApplicationShellClassPart;
        end;
      TApplicationShellClassRec = T_ApplicationShellClassRec;
//// (* error 
//// externalref ApplicationShellClassRec applicationShellClassRec;
 in declarator_list *)

//// {$if defined(__cplusplus) || defined(c_plusplus)}
//// {$else}
//// {$endif}
    type
      TApplicationShellPart = record
          c_class : ^char;
          _class : ^char;
          xrm_class : TXrmClass;
          argc : longint;
          argv : ^T_XtString;
        end;

      TApplicationShellRec = record
          core : TCorePart;
          composite : TCompositePart;
          shell : TShellPart;
          wm : TWMShellPart;
          vendor : TVendorShellPart;
          topLevel : TTopLevelShellPart;
          application : TApplicationShellPart;
        end;
      TApplicationShellWidget = ^TApplicationShellRec;




      TSessionShellClassPart = record
          extension : TXtPointer;
        end;

      T_SessionShellClassRec = record
          core_class : TCoreClassPart;
          composite_class : TCompositeClassPart;
          shell_class : TShellClassPart;
          wm_shell_class : TWMShellClassPart;
          vendor_shell_class : TVendorShellClassPart;
          top_level_shell_class : TTopLevelShellClassPart;
          application_shell_class : TApplicationShellClassPart;
          session_shell_class : TSessionShellClassPart;
        end;
      TSessionShellClassRec = T_SessionShellClassRec;
//// (* error 
//// externalref SessionShellClassRec sessionShellClassRec;
 in declarator_list *)

      TXtSaveYourself = ^T_XtSaveYourselfRec;



      TSessionShellPart = record
          connection : TSmcConn;
          session_id : T_XtString;
          restart_command : ^T_XtString;
          clone_command : ^T_XtString;
          discard_command : ^T_XtString;
          resign_command : ^T_XtString;
          shutdown_command : ^T_XtString;
          environment : ^T_XtString;
          current_dir : T_XtString;
          program_path : TString;
          restart_style : byte;
          checkpoint_state : byte;
          join_session : TBoolean;
          save_callbacks : TXtCallbackList;
          interact_callbacks : TXtCallbackList;
          cancel_callbacks : TXtCallbackList;
          save_complete_callbacks : TXtCallbackList;
          die_callbacks : TXtCallbackList;
          error_callbacks : TXtCallbackList;
          save : TXtSaveYourself;
          input_id : TXtInputId;
          ses20 : TXtPointer;
          ses19 : TXtPointer;
          ses18 : TXtPointer;
          ses17 : TXtPointer;
          ses16 : TXtPointer;
          ses15 : TXtPointer;
          ses14 : TXtPointer;
          ses13 : TXtPointer;
          ses12 : TXtPointer;
          ses11 : TXtPointer;
          ses10 : TXtPointer;
          ses9 : TXtPointer;
          ses8 : TXtPointer;
          ses7 : TXtPointer;
          ses6 : TXtPointer;
          ses5 : TXtPointer;
          ses4 : TXtPointer;
          ses3 : TXtPointer;
          ses2 : TXtPointer;
          ses1 : TXtPointer;
        end;

      TSessionShellRec = record
          core : TCorePart;
          composite : TCompositePart;
          shell : TShellPart;
          wm : TWMShellPart;
          vendor : TVendorShellPart;
          topLevel : TTopLevelShellPart;
          application : TApplicationShellPart;
          session : TSessionShellPart;
        end;
      TSessionShellWidget = ^TSessionShellRec;
//// {$endif}

//// (* error 
//// #endif /* _XtShellPrivate_h */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/CallbackI.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/CallbackI.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/CallbackI.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    PInternalCallbackList  = ^InternalCallbackList;
    PXtCallbackProc  = ^XtCallbackProc;
    PXtPointer  = ^XtPointer;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




type
  TCallbackTable = ^^TXrmResource;

const
  _XtCBCalling = 1;  
  _XtCBFreeAfterCalling = 2;  
//// (* error 
//// typedef struct internalCallbackRec {
in declaration at line 62 *)
      var
        is_padded : char;cvar;public;

        call_state : char;cvar;public;

//// {$ifdef LONG64}
        align_pad : dword;cvar;public;

//// {$endif}

//// (* error 
//// } InternalCallbackRec, *InternalCallbackList;
in declaration at line 69 *)

    type

      T_XtConditionProc = function (_para1:TXtPointer):TBoolean;cdecl;


procedure _XtAddCallback(_para1:PTInternalCallbackList; _para2:TXtCallbackProc; _para3:TXtPointer);cdecl;external;

procedure _XtAddCallbackOnce(_para1:PTInternalCallbackList; _para2:TXtCallbackProc; _para3:TXtPointer);cdecl;external;

function _XtCompileCallbackList(_para1:TXtCallbackList):TInternalCallbackList;cdecl;external;

function _XtGetCallbackList(_para1:PTInternalCallbackList):TXtCallbackList;cdecl;external;

procedure _XtRemoveAllCallbacks(_para1:PTInternalCallbackList);cdecl;external;

procedure _XtRemoveCallback(_para1:PTInternalCallbackList; _para2:TXtCallbackProc; _para3:TXtPointer);cdecl;external;

procedure _XtPeekCallback(_para1:TWidget; _para2:TXtCallbackList; _para3:PTXtCallbackProc; _para4:PTXtPointer);cdecl;external;

procedure _XtCallConditionalCallbackList(_para1:TWidget; _para2:TXtCallbackList; _para3:TXtPointer; _para4:T_XtConditionProc);cdecl;external;
//// (* error 
//// _XFUNCPROTOEND

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/ResConfigP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/ResConfigP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/ResConfigP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    PXEvent  = ^XEvent;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _RESCONFIGP_H}
//// {$define _RESCONFIGP_H}
//// {$include <X11/Xfuncproto.h>}

//// (* error 
//// #define RCM_DATA "Custom Data"
in define line 65 *)

    const
      RCM_INIT = 'Custom Init';      


procedure _XtResourceConfigurationEH(_para1:TWidget; _para2:TXtPointer; _para3:PTXEvent);cdecl;external;
//// {$endif}
//// (* error 
//// #endif

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xfuncproto.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xfuncproto.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xfuncproto.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XFUNCPROTO_H_}
//// {$define _XFUNCPROTO_H_}
//// {$ifndef NeedFunctionPrototypes}

const
  NeedFunctionPrototypes = 1;  
//// {$endif}

//// {$ifndef NeedVarargsPrototypes}

const
  NeedVarargsPrototypes = 1;  
//// {$endif}

//// {$if NeedFunctionPrototypes}
//// {$ifndef NeedNestedPrototypes}

const
  NeedNestedPrototypes = 1;  
//// {$endif}

//// {$ifndef _Xconst}
//// (* error 
//// #define _Xconst const
in define line 47 *)
//// {$endif}


//// {$if !defined(NARROWPROTO) && \}
//// (* error 
////     (defined(__linux__) || defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__))
in define line 53 *)
//// {$endif}
//// {$ifndef FUNCPROTO}

    const
      FUNCPROTO = 15;      
//// {$endif}
//// {$ifndef NeedWidePrototypes}
//// {$ifdef NARROWPROTO}

    const
      NeedWidePrototypes = 0;      
//// {$else}


    const
      NeedWidePrototypes = 1;      
//// {$endif}
//// {$endif}

//// {$endif}

//// {$ifndef _XFUNCPROTOBEGIN}
//// {$if defined(__cplusplus) || defined(c_plusplus) /* for C++ V2.0 */}
//// (* error 
//// #define _XFUNCPROTOBEGIN extern "C" {	/* do not leave open across includes */

in define line 71 *)
//// (* error 
//// #define _XFUNCPROTOEND }
in define line 72 *)
//// {$else}
//// {$define _XFUNCPROTOBEGIN}    
//// {$define _XFUNCPROTOEND}    
//// {$endif}
//// {$endif}


//// {$ifndef __has_attribute}


    function __has_attribute(x : longint) : longint;    

//// {$endif}
//// {$ifndef __has_feature}


    function __has_feature(x : longint) : longint;    

//// {$endif}
//// {$ifndef __has_extension}


    function __has_extension(x : longint) : longint;    

//// {$endif}

//// {$if __has_attribute(__sentinel__) || (defined(__GNUC__) && (__GNUC__ >= 4))}

    function _X_SENTINEL(x : longint) : longint;    

//// {$else}
//// (* error 
//// # define _X_SENTINEL(x)
in define line 94 *)
//// {$endif}


//// {$if (__has_attribute(visibility) || (defined(__GNUC__) && (__GNUC__ >= 4))) \}
//// (* error 
////     && !defined(__CYGWIN__) && !defined(__MINGW32__)
in define line 100 *)

    function _X_HIDDEN : longint; { return type might be wrong }

    function _X_INTERNAL : longint; { return type might be wrong }

//// {$else defined(__SUNPRO_C) && (__SUNPRO_C >= 0x550)}

    const
      _X_EXPORT = __global;      
      _X_HIDDEN = __hidden;      
      _X_INTERNAL = __hidden;      
//// {$else}

//// {$define _X_EXPORT}    
//// {$define _X_HIDDEN}    
//// {$define _X_INTERNAL}    
//// {$endif}



//// {$if defined(__GNUC__) && ((__GNUC__ * 100 + __GNUC_MINOR__) >= 303)}

    function _X_LIKELY(x : longint) : longint;    

    function _X_UNLIKELY(x : longint) : longint;    

//// {$else}


    function _X_LIKELY(x : longint) : longint;    

    function _X_UNLIKELY(x : longint) : longint;    

//// {$endif}


//// {$if __has_attribute(__cold__) || \}
//// (* error 
////     (defined(__GNUC__) && ((__GNUC__ * 100 + __GNUC_MINOR__) >= 403)) /* 4.3+ */

in define line 127 *)
//// {$else}

//// {$define _X_COLD}    
//// {$endif}

//// {$if __has_attribute(deprecated) \}
//// (* error 
////     || (defined(__GNUC__) && ((__GNUC__ * 100 + __GNUC_MINOR__) >= 301)) \
in define line 136 *)
//// {$else}

//// {$define _X_DEPRECATED}    
//// {$endif}

//// {$if __has_extension(attribute_deprecated_with_message) || \}
//// (* error 
////                 (defined(__GNUC__) && ((__GNUC__ >= 5) || ((__GNUC__ == 4) && (__GNUC_MINOR__ >= 5))))
in define line 144 *)
//// {$else}

    function _X_DEPRECATED_MSG(_msg : longint) : longint;    

//// {$endif}

//// {$if __has_attribute(noreturn) \}
//// (* error 
////     || (defined(__GNUC__) && ((__GNUC__ * 100 + __GNUC_MINOR__) >= 205)) \
in define line 153 *)
//// {$else}
//// {$define _X_NORETURN}    
//// {$endif}


//// {$if __has_attribute(__format__) \}
//// (* error 
////     || defined(__GNUC__) && ((__GNUC__ * 100 + __GNUC_MINOR__) >= 203)
in define line 161 *)
//// {$else}

//// (* error 
//// # define _X_ATTRIBUTE_PRINTF(x,y)
in define line 163 *)
//// {$endif}

//// {$if __has_attribute(nonnull) \}
//// (* error 
////     && defined(__STDC_VERSION__) && (__STDC_VERSION__ - 0 >= 199901L) /* C99 */

in define line 171 *)
//// {$else __has_attribute(nonnull) \}
//// (* error 
////     || defined(__GNUC__) &&  ((__GNUC__ * 100 + __GNUC_MINOR__) >= 303)
in define line 174 *)
//// {$else defined(__STDC_VERSION__) && (__STDC_VERSION__ - 0 >= 199901L) /* C99 */}
//// (* error 
//// #define _X_NONNULL(...)  /* */

in define line 176 *)
//// {$endif}

//// {$if __has_attribute(__unused__) \}
//// (* error 
////     || defined(__GNUC__) &&  ((__GNUC__ * 100 + __GNUC_MINOR__) >= 205)
in define line 182 *)
//// {$else}

//// {$define _X_UNUSED}    
//// {$endif}


//// {$if defined(inline) /* assume autoconf set it correctly */ || \}
//// (* error 
////    (defined(__STDC_VERSION__) && (__STDC_VERSION__ - 0 >= 199901L)) /* C99 */ || \
in define line 193 *)
//// {$else defined(__GNUC__) && !defined(__STRICT_ANSI__) /* gcc w/C89+extensions */}

    const
      _X_INLINE = __inline__;      
//// {$else}
//// {$define _X_INLINE}    
//// {$endif}


//// {$ifndef _X_RESTRICT_KYWD}
//// {$if defined(restrict) /* assume autoconf set it correctly */ || \}
//// (* error 
////     (defined(__STDC_VERSION__) && (__STDC_VERSION__ - 0 >= 199901L) /* C99 */ \

in define line 206 *)
//// {$else defined(__GNUC__) && !defined(__STRICT_ANSI__) /* gcc w/C89+extensions */}

    const
      _X_RESTRICT_KYWD = __restrict__;      
//// {$else}
//// {$define _X_RESTRICT_KYWD}    
//// {$endif}
//// {$endif}

//// {$if __has_attribute(no_sanitize_thread)}

    function _X_NOTSAN : longint; { return type might be wrong }

//// {$else}
//// {$define _X_NOTSAN}    
//// {$endif}


//// {$if __has_attribute(nonstring)}

    function _X_NONSTRING : longint; { return type might be wrong }

//// {$else}
//// {$define _X_NONSTRING}    
//// {$endif}
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/CoreP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/CoreP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/CoreP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef XtCoreP_h}
//// {$define XtCoreP_h}
//// {$include <X11/Core.h>}
//// (* error 
//// externalref int _XtInheritTranslations;
 in declarator_list *)

function XtInheritTranslations : TString;  

function XtInheritRealize : TXtRealizeProc;  

function XtInheritResize : TXtWidgetProc;  

function XtInheritExpose : TXtExposeProc;  

function XtInheritSetValuesAlmost : TXtAlmostProc;  

function XtInheritAcceptFocus : TXtAcceptFocusProc;  

function XtInheritQueryGeometry : TXtGeometryHandler;  

function XtInheritDisplayAccelerator : TXtStringProc;  































type
  T_CorePart = record
      self : TWidget;
      widget_class : TWidgetClass;
      parent : TWidget;
      xrm_name : TXrmName;
      being_destroyed : TBoolean;
      destroy_callbacks : TXtCallbackList;
      constraints : TXtPointer;
      x : TPosition;
      y : TPosition;
      width : TDimension;
      height : TDimension;
      border_width : TDimension;
      managed : TBoolean;
      sensitive : TBoolean;
      ancestor_sensitive : TBoolean;
      event_table : TXtEventTable;
      tm : TXtTMRec;
      accelerators : TXtTranslations;
      border_pixel : TPixel;
      border_pixmap : TPixmap;
      popup_list : TWidgetList;
      num_popups : TCardinal;
      name : TString;
      screen : ^TScreen;
      colormap : TColormap;
      window : TWindow;
      depth : TCardinal;
      background_pixel : TPixel;
      background_pixmap : TPixmap;
      visible : TBoolean;
      mapped_when_managed : TBoolean;
    end;
  TCorePart = T_CorePart;

  T_WidgetRec = record
      core : TCorePart;
    end;
  TWidgetRec = T_WidgetRec;
  TCoreRec = T_WidgetRec;


































  T_CoreClassPart = record
      superclass : TWidgetClass;
      class_name : TString;
      widget_size : TCardinal;
      class_initialize : TXtProc;
      class_part_initialize : TXtWidgetClassProc;
      class_inited : TXtEnum;
      initialize : TXtInitProc;
      initialize_hook : TXtArgsProc;
      realize : TXtRealizeProc;
      actions : TXtActionList;
      num_actions : TCardinal;
      resources : TXtResourceList;
      num_resources : TCardinal;
      xrm_class : TXrmClass;
      compress_motion : TBoolean;
      compress_exposure : TXtEnum;
      compress_enterleave : TBoolean;
      visible_interest : TBoolean;
      destroy : TXtWidgetProc;
      resize : TXtWidgetProc;
      expose : TXtExposeProc;
      set_values : TXtSetValuesFunc;
      set_values_hook : TXtArgsFunc;
      set_values_almost : TXtAlmostProc;
      get_values_hook : TXtArgsProc;
      accept_focus : TXtAcceptFocusProc;
      version : TXtVersionType;
      callback_private : TXtPointer;
      tm_table : TString;
      query_geometry : TXtGeometryHandler;
      display_accelerator : TXtStringProc;
      extension : TXtPointer;
    end;
  TCoreClassPart = T_CoreClassPart;

  T_WidgetClassRec = record
      core_class : TCoreClassPart;
    end;
  TWidgetClassRec = T_WidgetClassRec;
  TCoreClassRec = T_WidgetClassRec;
//// (* error 
//// externalref WidgetClassRec widgetClassRec;
 in declarator_list *)

const
  coreClassRec = widgetClassRec;  
//// {$endif}


//// (* error 
//// /* DON'T ADD STUFF AFTER THIS #endif */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/xpm.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/xpm.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/xpm.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    Pchar  = ^char;
    PDisplay  = ^Display;
    PPixel  = ^Pixel;
    PXColor  = ^XColor;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}






//// {$ifndef XPM_h}
//// {$define XPM_h}


const
  XpmFormat = 3;  
  XpmVersion = 4;  
  XpmRevision = 11;  
//// (* error 
//// #define XpmIncludeVersion ((XpmFormat * 100 + XpmVersion) * 100 + XpmRevision)
in define line 63 *)
//// {$ifndef XPM_NUMBERS}
//// {$ifdef FOR_MSW}

//// {$define SYSV}    
//// {$include <malloc.h>}
//// {$include "simx.h"		/* defines some X stuff using MSW types */}

//// {$define NEED_STRCASECMP}    
//// {$else}

//// {$ifdef AMIGA}
//// {$include "amigax.h"}
//// {$else}

//// {$include <X11/Xlib.h>}
//// {$include <X11/Xutil.h>}
//// {$endif}

//// {$endif}


//// {$if ! defined(_XtIntrinsic_h) && ! defined(PIXEL_ALREADY_TYPEDEFED)}
    type
      TPixel = dword;

//// {$define PIXEL_ALREADY_TYPEDEFED}    
//// {$endif}


    const
      XpmColorError = 1;      
      XpmSuccess = 0;      
      XpmOpenFailed = -(1);      
      XpmFileInvalid = -(2);      
      XpmNoMemory = -(3);      
      XpmColorFailed = -(4);      



    type
      TXpmColorSymbol = record
          name : ^char;
          value : ^char;
          pixel : TPixel;
        end;




      TXpmExtension = record
          name : ^char;
          nlines : dword;
          lines : ^^char;
        end;







      TXpmColor = record
          _string : ^char;
          symbolic : ^char;
          m_color : ^char;
          g4_color : ^char;
          g_color : ^char;
          c_color : ^char;
        end;







      TXpmImage = record
          width : dword;
          height : dword;
          cpp : dword;
          ncolors : dword;
          colorTable : ^TXpmColor;
          data : ^dword;
        end;









      TXpmInfo = record
          valuemask : dword;
          hints_cmt : ^char;
          colors_cmt : ^char;
          pixels_cmt : ^char;
          x_hotspot : dword;
          y_hotspot : dword;
          nextensions : dword;
          extensions : ^TXpmExtension;
        end;


      TXpmAllocColorFunc = function (_para1:PTDisplay; _para2:TColormap; _para3:Pchar; _para4:PTXColor; _para5:pointer):longint;cdecl;


      TXpmFreeColorsFunc = function (_para1:PTDisplay; _para2:TColormap; _para3:PTPixel; _para4:longint; _para5:pointer):longint;cdecl;








































      TXpmAttributes = record
          valuemask : dword;
          visual : ^TVisual;
          colormap : TColormap;
          depth : dword;
          width : dword;
          height : dword;
          x_hotspot : dword;
          y_hotspot : dword;
          cpp : dword;
          pixels : ^TPixel;
          npixels : dword;
          colorsymbols : ^TXpmColorSymbol;
          numsymbols : dword;
          rgb_fname : ^char;
          nextensions : dword;
          extensions : ^TXpmExtension;
          ncolors : dword;
          colorTable : ^TXpmColor;
          hints_cmt : ^char;
          colors_cmt : ^char;
          pixels_cmt : ^char;
          mask_pixel : dword;
          exactColors : TBool;
          closeness : dword;
          red_closeness : dword;
          green_closeness : dword;
          blue_closeness : dword;
          color_key : longint;
          alloc_pixels : ^TPixel;
          nalloc_pixels : longint;
          alloc_close_colors : TBool;
          bitmap_format : longint;
          alloc_color : TXpmAllocColorFunc;
          free_colors : TXpmFreeColorsFunc;
          color_closure : pointer;
        end;


    const
      XpmVisual = 1 shl 0;      
      XpmColormap = 1 shl 1;      
      XpmDepth = 1 shl 2;      

      XpmSize = 1 shl 3;      

      XpmHotspot = 1 shl 4;      
      XpmCharsPerPixel = 1 shl 5;      
      XpmColorSymbols = 1 shl 6;      
      XpmRgbFilename = 1 shl 7;      

      XpmInfos = 1 shl 8;      
      XpmReturnInfos = XpmInfos;      

      XpmReturnPixels = 1 shl 9;      
      XpmExtensions = 1 shl 10;      
      XpmReturnExtensions = XpmExtensions;      
      XpmExactColors = 1 shl 11;      
      XpmCloseness = 1 shl 12;      
      XpmRGBCloseness = 1 shl 13;      
      XpmColorKey = 1 shl 14;      
      XpmColorTable = 1 shl 15;      
      XpmReturnColorTable = XpmColorTable;      
      XpmReturnAllocPixels = 1 shl 16;      
      XpmAllocCloseColors = 1 shl 17;      
      XpmBitmapFormat = 1 shl 18;      
      XpmAllocColor = 1 shl 19;      
      XpmFreeColors = 1 shl 20;      
      XpmColorClosure = 1 shl 21;      

      XpmComments = XpmInfos;      
      XpmReturnComments = XpmComments;      

//// {$ifndef FOR_MSW}

    const
      XpmUndefPixel = $80000000;      
//// {$else}


    const
      XpmUndefPixel = $8000;      
//// {$endif}


    const
      XPM_MONO = 2;      
      XPM_GREY4 = 3;      
      XPM_GRAY4 = 3;      
      XPM_GREY = 4;      
      XPM_GRAY = 4;      
      XPM_COLOR = 5;      

//// (* error 
//// #define FUNC(f, t, p) extern t f p
in define line 278 *)
//// (* error 
//// #define LFUNC(f, t, p) static t f p
in define line 279 *)



//// {$if !defined(FOR_MSW) && !defined(AMIGA)}
//// (* error 
////     FUNC(XpmCreatePixmapFromData, int, (Display *display,
//// (* error 
//// 					Drawable d,
//// (* error 
//// 					char **data,
//// (* error 
//// 					Pixmap *pixmap_return,
//// (* error 
//// 					Pixmap *shapemask_return,
//// (* error 
//// 					XpmAttributes *attributes));
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     FUNC(XpmCreateDataFromPixmap, int, (Display *display,
//// (* error 
////     FUNC(XpmCreateDataFromPixmap, int, (Display *display,
//// (* error 
////     FUNC(XpmCreateDataFromPixmap, int, (Display *display,
//// (* error 
//// 					char ***data_return,
//// (* error 
//// 					Pixmap pixmap,
//// (* error 
//// 					Pixmap shapemask,
//// (* error 
//// 					XpmAttributes *attributes));
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     FUNC(XpmReadFileToPixmap, int, (Display *display,
//// (* error 
////     FUNC(XpmReadFileToPixmap, int, (Display *display,
//// (* error 
////     FUNC(XpmReadFileToPixmap, int, (Display *display,
//// (* error 
//// 				    Drawable d,
//// (* error 
//// 				    const char *filename,
//// (* error 
//// 				    Pixmap *pixmap_return,
//// (* error 
//// 				    Pixmap *shapemask_return,
//// (* error 
//// 				    XpmAttributes *attributes));
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     FUNC(XpmWriteFileFromPixmap, int, (Display *display,
//// (* error 
////     FUNC(XpmWriteFileFromPixmap, int, (Display *display,
//// (* error 
////     FUNC(XpmWriteFileFromPixmap, int, (Display *display,
//// (* error 
//// 				       const char *filename,
//// (* error 
//// 				       Pixmap pixmap,
//// (* error 
//// 				       Pixmap shapemask,
//// (* error 
//// 				       XpmAttributes *attributes));
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// {$endif}
//// (* error 
////     FUNC(XpmCreateImageFromData, int, (Display *display,
//// (* error 
////     FUNC(XpmCreateImageFromData, int, (Display *display,
//// (* error 
////     FUNC(XpmCreateImageFromData, int, (Display *display,
//// (* error 
//// 				       char **data,
//// (* error 
//// 				       XImage **image_return,
//// (* error 
//// 				       XImage **shapemask_return,
//// (* error 
//// 				       XpmAttributes *attributes));
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     FUNC(XpmCreateDataFromImage, int, (Display *display,
//// (* error 
////     FUNC(XpmCreateDataFromImage, int, (Display *display,
//// (* error 
////     FUNC(XpmCreateDataFromImage, int, (Display *display,
//// (* error 
//// 				       char ***data_return,
//// (* error 
//// 				       XImage *image,
//// (* error 
//// 				       XImage *shapeimage,
//// (* error 
//// 				       XpmAttributes *attributes));
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     FUNC(XpmReadFileToImage, int, (Display *display,
//// (* error 
////     FUNC(XpmReadFileToImage, int, (Display *display,
//// (* error 
////     FUNC(XpmReadFileToImage, int, (Display *display,
//// (* error 
//// 				   const char *filename,
//// (* error 
//// 				   XImage **image_return,
//// (* error 
//// 				   XImage **shapeimage_return,
//// (* error 
//// 				   XpmAttributes *attributes));
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     FUNC(XpmWriteFileFromImage, int, (Display *display,
//// (* error 
////     FUNC(XpmWriteFileFromImage, int, (Display *display,
//// (* error 
////     FUNC(XpmWriteFileFromImage, int, (Display *display,
//// (* error 
//// 				      const char *filename,
//// (* error 
//// 				      XImage *image,
//// (* error 
//// 				      XImage *shapeimage,
//// (* error 
//// 				      XpmAttributes *attributes));
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     FUNC(XpmCreateImageFromBuffer, int, (Display *display,
//// (* error 
////     FUNC(XpmCreateImageFromBuffer, int, (Display *display,
//// (* error 
////     FUNC(XpmCreateImageFromBuffer, int, (Display *display,
//// (* error 
//// 					 char *buffer,
//// (* error 
//// 					 XImage **image_return,
//// (* error 
//// 					 XImage **shapemask_return,
//// (* error 
//// 					 XpmAttributes *attributes));
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// {$if !defined(FOR_MSW) && !defined(AMIGA)}
//// (* error 
////     FUNC(XpmCreatePixmapFromBuffer, int, (Display *display,
//// (* error 
////     FUNC(XpmCreatePixmapFromBuffer, int, (Display *display,
//// (* error 
////     FUNC(XpmCreatePixmapFromBuffer, int, (Display *display,
//// (* error 
//// 					  Drawable d,
//// (* error 
//// 					  char *buffer,
//// (* error 
//// 					  Pixmap *pixmap_return,
//// (* error 
//// 					  Pixmap *shapemask_return,
//// (* error 
//// 					  XpmAttributes *attributes));
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     FUNC(XpmCreateBufferFromImage, int, (Display *display,
//// (* error 
////     FUNC(XpmCreateBufferFromImage, int, (Display *display,
//// (* error 
////     FUNC(XpmCreateBufferFromImage, int, (Display *display,
//// (* error 
//// 					 char **buffer_return,
//// (* error 
//// 					 XImage *image,
//// (* error 
//// 					 XImage *shapeimage,
//// (* error 
//// 					 XpmAttributes *attributes));
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     FUNC(XpmCreateBufferFromPixmap, int, (Display *display,
//// (* error 
////     FUNC(XpmCreateBufferFromPixmap, int, (Display *display,
//// (* error 
////     FUNC(XpmCreateBufferFromPixmap, int, (Display *display,
//// (* error 
//// 					  char **buffer_return,
//// (* error 
//// 					  Pixmap pixmap,
//// (* error 
//// 					  Pixmap shapemask,
//// (* error 
//// 					  XpmAttributes *attributes));
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// {$endif}
//// (* error 
////     FUNC(XpmReadFileToBuffer, int, (const char *filename, char **buffer_return));
//// (* error 
////     FUNC(XpmReadFileToBuffer, int, (const char *filename, char **buffer_return));
//// (* error 
////     FUNC(XpmReadFileToBuffer, int, (const char *filename, char **buffer_return));
//// (* error 
////     FUNC(XpmReadFileToBuffer, int, (const char *filename, char **buffer_return));
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     FUNC(XpmWriteFileFromBuffer, int, (const char *filename, char *buffer));
//// (* error 
////     FUNC(XpmWriteFileFromBuffer, int, (const char *filename, char *buffer));
//// (* error 
////     FUNC(XpmWriteFileFromBuffer, int, (const char *filename, char *buffer));
//// (* error 
////     FUNC(XpmWriteFileFromBuffer, int, (const char *filename, char *buffer));
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     FUNC(XpmReadFileToData, int, (const char *filename, char ***data_return));
//// (* error 
////     FUNC(XpmReadFileToData, int, (const char *filename, char ***data_return));
//// (* error 
////     FUNC(XpmReadFileToData, int, (const char *filename, char ***data_return));
//// (* error 
////     FUNC(XpmReadFileToData, int, (const char *filename, char ***data_return));
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     FUNC(XpmWriteFileFromData, int, (const char *filename, char **data));
//// (* error 
////     FUNC(XpmWriteFileFromData, int, (const char *filename, char **data));
//// (* error 
////     FUNC(XpmWriteFileFromData, int, (const char *filename, char **data));
//// (* error 
////     FUNC(XpmWriteFileFromData, int, (const char *filename, char **data));
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     FUNC(XpmAttributesSize, int, (void));
//// (* error 
////     FUNC(XpmAttributesSize, int, (void));
//// (* error 
////     FUNC(XpmAttributesSize, int, (void));
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     FUNC(XpmFreeAttributes, void, (XpmAttributes *attributes));
//// (* error 
////     FUNC(XpmFreeAttributes, void, (XpmAttributes *attributes));
//// (* error 
////     FUNC(XpmFreeAttributes, void, (XpmAttributes *attributes));
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     FUNC(XpmFreeExtensions, void, (XpmExtension *extensions,
//// (* error 
////     FUNC(XpmFreeExtensions, void, (XpmExtension *extensions,
//// (* error 
////     FUNC(XpmFreeExtensions, void, (XpmExtension *extensions,
//// (* error 
//// 				   int nextensions));
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     FUNC(XpmFreeXpmImage, void, (XpmImage *image));
//// (* error 
////     FUNC(XpmFreeXpmImage, void, (XpmImage *image));
//// (* error 
////     FUNC(XpmFreeXpmImage, void, (XpmImage *image));
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     FUNC(XpmFreeXpmInfo, void, (XpmInfo *info));
//// (* error 
////     FUNC(XpmFreeXpmInfo, void, (XpmInfo *info));
//// (* error 
////     FUNC(XpmFreeXpmInfo, void, (XpmInfo *info));
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     FUNC(XpmGetErrorString, char *, (int errcode));
//// (* error 
////     FUNC(XpmGetErrorString, char *, (int errcode));
//// (* error 
////     FUNC(XpmGetErrorString, char *, (int errcode));
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     FUNC(XpmLibraryVersion, int, (void));
//// (* error 
////     FUNC(XpmLibraryVersion, int, (void));
//// (* error 
////     FUNC(XpmLibraryVersion, int, (void));
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)

//// (* error 
////     FUNC(XpmReadFileToXpmImage, int, (const char *filename,
//// (* error 
////     FUNC(XpmReadFileToXpmImage, int, (const char *filename,
//// (* error 
////     FUNC(XpmReadFileToXpmImage, int, (const char *filename,
//// (* error 
//// 				      XpmImage *image,
//// (* error 
//// 				      XpmInfo *info));
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     FUNC(XpmWriteFileFromXpmImage, int, (const char *filename,
//// (* error 
////     FUNC(XpmWriteFileFromXpmImage, int, (const char *filename,
//// (* error 
////     FUNC(XpmWriteFileFromXpmImage, int, (const char *filename,
//// (* error 
//// 					 XpmImage *image,
//// (* error 
//// 					 XpmInfo *info));
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// {$if !defined(FOR_MSW) && !defined(AMIGA)}
//// (* error 
////     FUNC(XpmCreatePixmapFromXpmImage, int, (Display *display,
//// (* error 
////     FUNC(XpmCreatePixmapFromXpmImage, int, (Display *display,
//// (* error 
////     FUNC(XpmCreatePixmapFromXpmImage, int, (Display *display,
//// (* error 
//// 					    Drawable d,
//// (* error 
//// 					    XpmImage *image,
//// (* error 
//// 					    Pixmap *pixmap_return,
//// (* error 
//// 					    Pixmap *shapemask_return,
//// (* error 
//// 					    XpmAttributes *attributes));
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// {$endif}
//// (* error 
////     FUNC(XpmCreateImageFromXpmImage, int, (Display *display,
//// (* error 
////     FUNC(XpmCreateImageFromXpmImage, int, (Display *display,
//// (* error 
////     FUNC(XpmCreateImageFromXpmImage, int, (Display *display,
//// (* error 
//// 					   XpmImage *image,
//// (* error 
//// 					   XImage **image_return,
//// (* error 
//// 					   XImage **shapeimage_return,
//// (* error 
//// 					   XpmAttributes *attributes));
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     FUNC(XpmCreateXpmImageFromImage, int, (Display *display,
//// (* error 
////     FUNC(XpmCreateXpmImageFromImage, int, (Display *display,
//// (* error 
////     FUNC(XpmCreateXpmImageFromImage, int, (Display *display,
//// (* error 
//// 					   XImage *image,
//// (* error 
//// 					   XImage *shapeimage,
//// (* error 
//// 					   XpmImage *xpmimage,
//// (* error 
//// 					   XpmAttributes *attributes));
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// {$if !defined(FOR_MSW) && !defined(AMIGA)}
//// (* error 
////     FUNC(XpmCreateXpmImageFromPixmap, int, (Display *display,
//// (* error 
////     FUNC(XpmCreateXpmImageFromPixmap, int, (Display *display,
//// (* error 
////     FUNC(XpmCreateXpmImageFromPixmap, int, (Display *display,
//// (* error 
//// 					    Pixmap pixmap,
//// (* error 
//// 					    Pixmap shapemask,
//// (* error 
//// 					    XpmImage *xpmimage,
//// (* error 
//// 					    XpmAttributes *attributes));
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// {$endif}
//// (* error 
////     FUNC(XpmCreateDataFromXpmImage, int, (char ***data_return,
//// (* error 
////     FUNC(XpmCreateDataFromXpmImage, int, (char ***data_return,
//// (* error 
////     FUNC(XpmCreateDataFromXpmImage, int, (char ***data_return,
//// (* error 
//// 					  XpmImage *image,
//// (* error 
//// 					  XpmInfo *info));
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     FUNC(XpmCreateXpmImageFromData, int, (char **data,
//// (* error 
////     FUNC(XpmCreateXpmImageFromData, int, (char **data,
//// (* error 
////     FUNC(XpmCreateXpmImageFromData, int, (char **data,
//// (* error 
//// 					  XpmImage *image,
//// (* error 
//// 					  XpmInfo *info));
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     FUNC(XpmCreateXpmImageFromBuffer, int, (char *buffer,
//// (* error 
////     FUNC(XpmCreateXpmImageFromBuffer, int, (char *buffer,
//// (* error 
////     FUNC(XpmCreateXpmImageFromBuffer, int, (char *buffer,
//// (* error 
//// 					    XpmImage *image,
//// (* error 
//// 					    XpmInfo *info));
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     FUNC(XpmCreateBufferFromXpmImage, int, (char **buffer_return,
//// (* error 
////     FUNC(XpmCreateBufferFromXpmImage, int, (char **buffer_return,
//// (* error 
////     FUNC(XpmCreateBufferFromXpmImage, int, (char **buffer_return,
//// (* error 
//// 					    XpmImage *image,
//// (* error 
//// 					    XpmInfo *info));
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     FUNC(XpmGetParseError, int, (char *filename,
//// (* error 
////     FUNC(XpmGetParseError, int, (char *filename,
//// (* error 
////     FUNC(XpmGetParseError, int, (char *filename,
//// (* error 
//// 				 int *linenum_return,
//// (* error 
//// 				 int *charnum_return));
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     FUNC(XpmFree, void, (void *ptr));
//// (* error 
////     FUNC(XpmFree, void, (void *ptr));
//// (* error 
////     FUNC(XpmFree, void, (void *ptr));
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)


//// (* error 
//// #define XpmPixmapColorError  XpmColorError
in define line 445 *)

    const
      XpmPixmapSuccess = XpmSuccess;      
      XpmPixmapOpenFailed = XpmOpenFailed;      
      XpmPixmapFileInvalid = XpmFileInvalid;      
      XpmPixmapNoMemory = XpmNoMemory;      
      XpmPixmapColorFailed = XpmColorFailed;      

    function XpmReadPixmapFile(dpy,d,file,pix,mask,att : longint) : longint;    

    function XpmWritePixmapFile(dpy,file,pix,mask,att : longint) : longint;    


    const
      PixmapColorError = XpmColorError;      
      PixmapSuccess = XpmSuccess;      
      PixmapOpenFailed = XpmOpenFailed;      
      PixmapFileInvalid = XpmFileInvalid;      
      PixmapNoMemory = XpmNoMemory;      
      PixmapColorFailed = XpmColorFailed;      
      ColorSymbol = XpmColorSymbol;      

    function XReadPixmapFile(dpy,d,file,pix,mask,att : longint) : longint;    

    function XWritePixmapFile(dpy,file,pix,mask,att : longint) : longint;    

    function XCreatePixmapFromData(dpy,d,data,pix,mask,att : longint) : longint;    

    function XCreateDataFromPixmap(dpy,data,pix,mask,att : longint) : longint;    

//// {$endif}

//// {$endif}

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xwinsock.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xwinsock.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xwinsock.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$undef _XFree86Server}
//// {$ifdef XFree86Server}
//// {$define _XFree86Server}
//// {$undef XFree86Server}
//// {$endif}

//// {$define _NO_BOOL_TYPEDEF}

const
  BOOL = WINBOOL;  
  INT32 = wINT32;  
//// {$undef Status}
  Status = wStatus;  
  ATOM = wATOM;  
  BYTE = wBYTE;  
  FreeResource = wFreeResource;  
//// {$include <winsock2.h>}
//// {$undef Status}

const
  Status = longint;  
//// {$undef BYTE}
//// {$undef BOOL}
//// {$undef INT32}
//// {$undef ATOM}
//// {$undef FreeResource}
//// {$undef CreateWindowA}
//// {$undef RT_FONT}
//// {$undef RT_CURSOR}

  wBOOL = WINBOOL;  
//// {$ifdef _XFree86Server}
//// {$define XFree86Server}
//// {$undef _XFree86Server}
//// {$endif}

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xos.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xos.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xos.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XOS_H_}
//// {$define _XOS_H_}
//// {$include <X11/Xosdefs.h>}

//// {$include <sys/types.h>}
//// {$if defined(__SCO__) || defined(__UNIXWARE__)}
//// {$include <stdint.h>}
//// {$endif}

//// {$include <string.h>}
//// {$if defined(__SCO__) || defined(__UNIXWARE__) || defined(__sun) || defined(__CYGWIN__) || defined(_AIX) || defined(__APPLE__)}
//// {$include <strings.h>}
//// {$else}
//// {$ifndef index}

function index(s,c : longint) : longint;

//// {$endif}
//// {$ifndef rindex}

function rindex(s,c : longint) : longint;

//// {$endif}
//// {$endif}

//// {$if defined(X_NOT_POSIX)}
//// {$include <fcntl.h>}
//// {$if defined(USL) || defined(__i386__) && (defined(SYSV) || defined(SVR4))}
//// {$include <unistd.h>}
//// {$endif}
//// {$ifdef WIN32}
//// {$include <X11/Xw32defs.h>}
//// {$else}
//// {$include <sys/file.h>}
//// {$endif}
//// {$else}

//// {$include <fcntl.h>}
//// {$include <unistd.h>}
//// {$endif}


//// {$if defined(_POSIX_SOURCE) && defined(SVR4)}

//// {$undef _POSIX_SOURCE}
//// {$include <sys/time.h>}
//// {$define _POSIX_SOURCE}
//// {$else defined(WIN32)}
//// {$include <time.h>}
//// {$if !defined(_WINSOCKAPI_) && !defined(_WILLWINSOCK_) && !defined(_TIMEVAL_DEFINED) && !defined(_STRUCT_TIMEVAL)}


type
  Ttimeval = record
      tv_sec : longint;
      tv_usec : longint;
    end;

//// {$define _TIMEVAL_DEFINED}
//// {$endif}
//// {$include <sys/timeb.h>}
//// (* error 
//// { \
in declaration at line 113 *)
//// (* error 
////     struct _timeb _gtodtmp; \
//// (* error 
////     _ftime (&_gtodtmp); \
in declaration at line 114 *)
//// (* error 
////     _ftime (&_gtodtmp); \
//// (* error 
////     (t)->tv_sec = _gtodtmp.time; \
in declaration at line 115 *)
//// (* error 
////     (t)->tv_sec = _gtodtmp.time; \
//// (* error 
////     (t)->tv_usec = _gtodtmp.millitm * 1000; \
in declaration at line 116 *)
//// (* error 
////     (t)->tv_usec = _gtodtmp.millitm * 1000; \
//// (* error 
//// }
//// {$else}
//// {$include <sys/time.h>}
//// {$include <time.h>}
//// {$endif}


//// {$if defined(_XOPEN_XPG4) || defined(_XOPEN_UNIX) /* _XOPEN_UNIX is XPG4.2 */}
in define line 125 *)
//// {$else}
//// {$if defined(SVR4) || defined(__SVR4) || defined(WIN32)}

    function X_GETTIMEOFDAY(t : longint) : longint;    

//// {$else}

    function X_GETTIMEOFDAY(t : longint) : longint;    

//// {$endif}
//// {$endif}

//// {$ifdef __GNU__}

    const
      PATH_MAX = 4096;      
      MAXPATHLEN = 4096;      

      OPEN_MAX = 256;      
//// {$endif}

//// {$if defined(X_NOT_POSIX) && defined(SYSV) && !defined(SIGCHLD)}

    const
      SIGCHLD = SIGCLD;      
//// {$endif}
//// {$include <X11/Xarch.h>}
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/PassivGraI.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/PassivGraI.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/PassivGraI.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    PXButtonEvent  = ^XButtonEvent;
    PXEvent  = ^XEvent;
    PXKeyEvent  = ^XKeyEvent;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _PDI_h_}
//// {$define _PDI_h_}

const
  KEYBOARD = _TRUE;  
  POINTER = _FALSE;  
//// (* error 
//// typedef enum {
in declaration at line 66 *)
    type
      T_XtServerGrabRec = record
          next : ^T_XtServerGrabRec;
          widget : TWidget;
          flag0 : word;
          keybut : TKeyCode;
          modifiers : word;
          eventMask : word;
        end;
      TXtServerGrabRec = T_XtServerGrabRec;
      TXtServerGrabPtr = ^T_XtServerGrabRec;

    const
      bm__XtServerGrabRec_ownerEvents = $1;
      bp__XtServerGrabRec_ownerEvents = 0;
      bm__XtServerGrabRec_pointerMode = $2;
      bp__XtServerGrabRec_pointerMode = 1;
      bm__XtServerGrabRec_keyboardMode = $4;
      bp__XtServerGrabRec_keyboardMode = 2;
      bm__XtServerGrabRec_hasExt = $8;
      bp__XtServerGrabRec_hasExt = 3;
      bm__XtServerGrabRec_confineToIsWidgetWin = $10;
      bp__XtServerGrabRec_confineToIsWidgetWin = 4;

    function ownerEvents(var a : _XtServerGrabRec) : dword;
    procedure set_ownerEvents(var a : _XtServerGrabRec; __ownerEvents : dword);
    function pointerMode(var a : _XtServerGrabRec) : dword;
    procedure set_pointerMode(var a : _XtServerGrabRec; __pointerMode : dword);
    function keyboardMode(var a : _XtServerGrabRec) : dword;
    procedure set_keyboardMode(var a : _XtServerGrabRec; __keyboardMode : dword);
    function hasExt(var a : _XtServerGrabRec) : dword;
    procedure set_hasExt(var a : _XtServerGrabRec; __hasExt : dword);
    function confineToIsWidgetWin(var a : _XtServerGrabRec) : dword;
    procedure set_confineToIsWidgetWin(var a : _XtServerGrabRec; __confineToIsWidgetWin : dword);
    type
      T_XtGrabExtRec = record
          pKeyButMask : ^TMask;
          pModifiersMask : ^TMask;
          confineTo : TWindow;
          cursor : TCursor;
        end;
      TXtServerGrabExtRec = T_XtGrabExtRec;
      TXtServerGrabExtPtr = ^T_XtGrabExtRec;

    function GRABEXT(p : longint) : TXtServerGrabExtPtr;    


    type
      T_XtDeviceRec = record
          grab : TXtServerGrabRec;
          grabType : TXtServerGrabType;
        end;
      TXtDeviceRec = T_XtDeviceRec;
      TXtDevice = ^T_XtDeviceRec;

    const
      XtMyAncestor = 0;      
      XtMyDescendant = 1;      
      XtMyCousin = 2;      
      XtMySelf = 3;      
      XtUnrelated = 4;      
    type
      TXtGeneology = char;


      TXtPerWidgetInputRec = record
          focusKid : TWidget;
          keyList : TXtServerGrabPtr;
          ptrList : TXtServerGrabPtr;
          queryEventDescendant : TWidget;
          flag0 : word;
          focalPoint : TXtGeneology;
        end;
      TXtPerWidgetInput = ^TXtPerWidgetInputRec;

    const
      bm_XtPerWidgetInputRec_map_handler_added = $1;
      bp_XtPerWidgetInputRec_map_handler_added = 0;
      bm_XtPerWidgetInputRec_realize_handler_added = $2;
      bp_XtPerWidgetInputRec_realize_handler_added = 1;
      bm_XtPerWidgetInputRec_active_handler_added = $4;
      bp_XtPerWidgetInputRec_active_handler_added = 2;
      bm_XtPerWidgetInputRec_haveFocus = $8;
      bp_XtPerWidgetInputRec_haveFocus = 3;

    function map_handler_added(var a : XtPerWidgetInputRec) : dword;
    procedure set_map_handler_added(var a : XtPerWidgetInputRec; __map_handler_added : dword);
    function realize_handler_added(var a : XtPerWidgetInputRec) : dword;
    procedure set_realize_handler_added(var a : XtPerWidgetInputRec; __realize_handler_added : dword);
    function active_handler_added(var a : XtPerWidgetInputRec) : dword;
    procedure set_active_handler_added(var a : XtPerWidgetInputRec; __active_handler_added : dword);
    function haveFocus(var a : XtPerWidgetInputRec) : dword;
    procedure set_haveFocus(var a : XtPerWidgetInputRec; __haveFocus : dword);
    type
      TXtPerDisplayInputRec = record
          grabList : TXtGrabList;
          keyboard : TXtDeviceRec;
          pointer : TXtDeviceRec;
          activatingKey : TKeyCode;
          trace : ^TWidget;
          traceDepth : longint;
          traceMax : longint;
          focusWidget : TWidget;
        end;
      TXtPerDisplayInput = ^TXtPerDisplayInputRec;
//// (* error 
//// #define IsServerGrab(g) ((g == XtPassiveServerGrab) ||\
in define line 124 *)
//// (* error 
//// #define IsAnyGrab(g) ((g == XtPassiveServerGrab) ||\
in define line 128 *)
//// (* error 
//// #define IsEitherPassiveGrab(g) ((g == XtPassiveServerGrab) ||\
in define line 131 *)

    function IsPseudoGrab(g : longint) : longint;    



procedure _XtDestroyServerGrabs(_para1:TWidget; _para2:TXtPointer; _para3:TXtPointer);cdecl;external;

function _XtGetPerWidgetInput(_para1:TWidget; _para2:T_XtBoolean):TXtPerWidgetInput;cdecl;external;

function _XtCheckServerGrabsOnWidget(_para1:PTXEvent; _para2:TWidget; _para3:T_XtBoolean):TXtServerGrabPtr;cdecl;external;

    function _XtGetGrabList(pdi : longint) : longint;    


procedure _XtFreePerWidgetInput(_para1:TWidget; _para2:TXtPerWidgetInput);cdecl;external;

function _XtProcessKeyboardEvent(_para1:PTXKeyEvent; _para2:TWidget; _para3:TXtPerDisplayInput):TWidget;cdecl;external;

function _XtProcessPointerEvent(_para1:PTXButtonEvent; _para2:TWidget; _para3:TXtPerDisplayInput):TWidget;cdecl;external;

procedure _XtRegisterPassiveGrabs(_para1:TWidget);cdecl;external;

procedure _XtClearAncestorCache(_para1:TWidget);cdecl;external;
//// {$endif}

//// (* error 
//// #endif /* _PDI_h_ */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/ConstrainP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/ConstrainP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/ConstrainP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XtConstraintP_h}
//// {$define _XtConstraintP_h}
//// {$include <X11/Constraint.h>}
//// (* error 
//// typedef struct _ConstraintPart {
in declaration at line 56 *)

//// (* error 
//// } ConstraintPart;
in declaration at line 57 *)
    type
      T_ConstraintRec = record
          core : TCorePart;
          composite : TCompositePart;
          constraint : TConstraintPart;
        end;
      TConstraintRec = T_ConstraintRec;
      TConstraintWidget = ^T_ConstraintRec;








      T_ConstraintClassPart = record
          resources : TXtResourceList;
          num_resources : TCardinal;
          constraint_size : TCardinal;
          initialize : TXtInitProc;
          destroy : TXtWidgetProc;
          set_values : TXtSetValuesFunc;
          extension : TXtPointer;
        end;
      TConstraintClassPart = T_ConstraintClassPart;





      TConstraintClassExtensionRec = record
          next_extension : TXtPointer;
          record_type : TXrmQuark;
          version : longint;
          record_size : TCardinal;
          get_values_hook : TXtArgsProc;
        end;
      TConstraintClassExtension = ^TConstraintClassExtensionRec;

      T_ConstraintClassRec = record
          core_class : TCoreClassPart;
          composite_class : TCompositeClassPart;
          constraint_class : TConstraintClassPart;
        end;
      TConstraintClassRec = T_ConstraintClassRec;
//// (* error 
//// externalref ConstraintClassRec constraintClassRec;
 in declarator_list *)
//// (* error 
//// #define XtConstraintExtensionVersion 1L
in define line 93 *)
//// {$endif}



// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xcms.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xcms.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xcms.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    PBool  = ^Bool;
    Pchar  = ^char;
    PDisplay  = ^Display;
    PVisual  = ^Visual;
    PXcmsColor  = ^XcmsColor;
    PXcmsFunctionSet  = ^XcmsFunctionSet;
    PXcmsPerScrnInfo  = ^XcmsPerScrnInfo;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _X11_XCMS_H_}
//// {$define _X11_XCMS_H_}
//// {$include <X11/Xlib.h>}

//// {$ifdef __clang__}
//// {$endif}


const
  XcmsFailure = 0;  
  XcmsSuccess = 1;  
  XcmsSuccessWithCompression = 2;  


function XcmsUndefinedFormat : TXcmsColorFormat;  

function XcmsCIEXYZFormat : TXcmsColorFormat;  

function XcmsCIEuvYFormat : TXcmsColorFormat;  

function XcmsCIExyYFormat : TXcmsColorFormat;  

function XcmsCIELabFormat : TXcmsColorFormat;  

function XcmsCIELuvFormat : TXcmsColorFormat;  

function XcmsTekHVCFormat : TXcmsColorFormat;  

function XcmsRGBFormat : TXcmsColorFormat;  

function XcmsRGBiFormat : TXcmsColorFormat;  



const
  XcmsInitNone = $00;  

  XcmsInitSuccess = $01;  

  XcmsInitFailure = $ff;  

function DisplayOfCCC(ccc : longint) : longint;

function ScreenNumberOfCCC(ccc : longint) : longint;

function VisualOfCCC(ccc : longint) : longint;

function ClientWhitePointOfCCC(ccc : longint) : longint;

function ScreenWhitePointOfCCC(ccc : longint) : longint;

function FunctionSetOfCCC(ccc : longint) : longint;

type
  TXcmsColorFormat = dword;


  TXcmsFloat = Tdouble;





  TXcmsRGB = record
      red : word;
      green : word;
      blue : word;
    end;





  TXcmsRGBi = record
      red : TXcmsFloat;
      green : TXcmsFloat;
      blue : TXcmsFloat;
    end;


  TXcmsCIEXYZ = record
      X : TXcmsFloat;
      Y : TXcmsFloat;
      Z : TXcmsFloat;
    end;





  TXcmsCIEuvY = record
      u_prime : TXcmsFloat;
      v_prime : TXcmsFloat;
      Y : TXcmsFloat;
    end;





  TXcmsCIExyY = record
      x : TXcmsFloat;
      y : TXcmsFloat;
      Y : TXcmsFloat;
    end;



  TXcmsCIELab = record
      L_star : TXcmsFloat;
      a_star : TXcmsFloat;
      b_star : TXcmsFloat;
    end;



  TXcmsCIELuv = record
      L_star : TXcmsFloat;
      u_star : TXcmsFloat;
      v_star : TXcmsFloat;
    end;





  TXcmsTekHVC = record
      H : TXcmsFloat;
      V : TXcmsFloat;
      C : TXcmsFloat;
    end;


  TXcmsPad = record
      pad0 : TXcmsFloat;
      pad1 : TXcmsFloat;
      pad2 : TXcmsFloat;
      pad3 : TXcmsFloat;
    end;





  TXcmsColor = record
      spec : record
          case longint of
            0 : ( RGB : TXcmsRGB );
            1 : ( RGBi : TXcmsRGBi );
            2 : ( CIEXYZ : TXcmsCIEXYZ );
            3 : ( CIEuvY : TXcmsCIEuvY );
            4 : ( CIExyY : TXcmsCIExyY );
            5 : ( CIELab : TXcmsCIELab );
            6 : ( CIELuv : TXcmsCIELuv );
            7 : ( TekHVC : TXcmsTekHVC );
            8 : ( Pad : TXcmsPad );
          end;
      pixel : dword;
      format : TXcmsColorFormat;
    end;








  T_XcmsPerScrnInfo = record
      screenWhitePt : TXcmsColor;
      functionSet : TXPointer;
      screenData : TXPointer;
      state : byte;
      pad : array[0..2] of char;
    end;
  TXcmsPerScrnInfo = T_XcmsPerScrnInfo;

  TXcmsCCC = ^T_XcmsCCC;



  TXcmsCompressionProc = function (_para1:TXcmsCCC; _para2:PTXcmsColor; _para3:dword; _para4:dword; _para5:PTBool):TStatus;cdecl;



  TXcmsWhiteAdjustProc = function (_para1:TXcmsCCC; _para2:PTXcmsColor; _para3:PTXcmsColor; _para4:TXcmsColorFormat; _para5:PTXcmsColor; 
               _para6:dword; _para7:PTBool):TStatus;cdecl;













  T_XcmsCCC = record
      dpy : ^TDisplay;
      screenNumber : longint;
      visual : ^TVisual;
      clientWhitePt : TXcmsColor;
      gamutCompProc : TXcmsCompressionProc;
      gamutCompClientData : TXPointer;
      whitePtAdjProc : TXcmsWhiteAdjustProc;
      whitePtAdjClientData : TXPointer;
      pPerScrnInfo : ^TXcmsPerScrnInfo;
    end;
  TXcmsCCCRec = T_XcmsCCC;



  TXcmsScreenInitProc = function (_para1:PTDisplay; _para2:longint; _para3:PTXcmsPerScrnInfo):TStatus;cdecl;


  TXcmsScreenFreeProc = procedure (_para1:TXPointer);cdecl;





  TXcmsDDConversionProc = function (_para1:TXcmsCCC; _para2:PTXcmsColor; _para3:dword; _para4:PTBool):TStatus;cdecl;



  TXcmsDIConversionProc = function (_para1:TXcmsCCC; _para2:PTXcmsColor; _para3:PTXcmsColor; _para4:dword):TStatus;cdecl;

  TXcmsConversionProc = TXcmsDIConversionProc;

  TXcmsFuncListPtr = ^TXcmsConversionProc;



  TXcmsParseStringProc = function (_para1:Pchar; _para2:PTXcmsColor):longint;cdecl;























  T_XcmsColorSpace = record
      prefix : ^char;
      id : TXcmsColorFormat;
      parseString : TXcmsParseStringProc;
      to_CIEXYZ : TXcmsFuncListPtr;
      from_CIEXYZ : TXcmsFuncListPtr;
      inverse_flag : longint;
    end;
  TXcmsColorSpace = T_XcmsColorSpace;











  T_XcmsFunctionSet = record
      DDColorSpaces : ^^TXcmsColorSpace;
      screenInitProc : TXcmsScreenInitProc;
      screenFreeProc : TXcmsScreenFreeProc;
    end;
  TXcmsFunctionSet = T_XcmsFunctionSet;
//// (* error 
//// extern Status XcmsAddColorSpace (

in declaration at line 347 *)


function XcmsAddFunctionSet(_para1:PTXcmsFunctionSet):TStatus;cdecl;external;

function XcmsAllocColor(_para1:PTDisplay; _para2:TColormap; _para3:PTXcmsColor; _para4:TXcmsColorFormat):TStatus;cdecl;external;
//// (* error 
////     _Xconst char*	/* color_string */,
//// (* error 
////     XcmsColor*		/* color_scrn_return */,
//// (* error 
////     XcmsColor*		/* color_exact_return */,

//// (* error 
//// );
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)

function XcmsCCCOfColormap(_para1:PTDisplay; _para2:TColormap):TXcmsCCC;cdecl;external;

function XcmsCIELabClipab(_para1:TXcmsCCC; _para2:PTXcmsColor; _para3:dword; _para4:dword; _para5:PTBool):TStatus;cdecl;external;

function XcmsCIELabClipL(_para1:TXcmsCCC; _para2:PTXcmsColor; _para3:dword; _para4:dword; _para5:PTBool):TStatus;cdecl;external;

function XcmsCIELabClipLab(_para1:TXcmsCCC; _para2:PTXcmsColor; _para3:dword; _para4:dword; _para5:PTBool):TStatus;cdecl;external;

function XcmsCIELabQueryMaxC(_para1:TXcmsCCC; _para2:TXcmsFloat; _para3:TXcmsFloat; _para4:PTXcmsColor):TStatus;cdecl;external;

function XcmsCIELabQueryMaxL(_para1:TXcmsCCC; _para2:TXcmsFloat; _para3:TXcmsFloat; _para4:PTXcmsColor):TStatus;cdecl;external;

function XcmsCIELabQueryMaxLC(_para1:TXcmsCCC; _para2:TXcmsFloat; _para3:PTXcmsColor):TStatus;cdecl;external;

function XcmsCIELabQueryMinL(_para1:TXcmsCCC; _para2:TXcmsFloat; _para3:TXcmsFloat; _para4:PTXcmsColor):TStatus;cdecl;external;

function XcmsCIELabToCIEXYZ(_para1:TXcmsCCC; _para2:PTXcmsColor; _para3:PTXcmsColor; _para4:dword):TStatus;cdecl;external;

function XcmsCIELabWhiteShiftColors(_para1:TXcmsCCC; _para2:PTXcmsColor; _para3:PTXcmsColor; _para4:TXcmsColorFormat; _para5:PTXcmsColor; 
               _para6:dword; _para7:PTBool):TStatus;cdecl;external;

function XcmsCIELuvClipL(_para1:TXcmsCCC; _para2:PTXcmsColor; _para3:dword; _para4:dword; _para5:PTBool):TStatus;cdecl;external;

function XcmsCIELuvClipLuv(_para1:TXcmsCCC; _para2:PTXcmsColor; _para3:dword; _para4:dword; _para5:PTBool):TStatus;cdecl;external;

function XcmsCIELuvClipuv(_para1:TXcmsCCC; _para2:PTXcmsColor; _para3:dword; _para4:dword; _para5:PTBool):TStatus;cdecl;external;

function XcmsCIELuvQueryMaxC(_para1:TXcmsCCC; _para2:TXcmsFloat; _para3:TXcmsFloat; _para4:PTXcmsColor):TStatus;cdecl;external;

function XcmsCIELuvQueryMaxL(_para1:TXcmsCCC; _para2:TXcmsFloat; _para3:TXcmsFloat; _para4:PTXcmsColor):TStatus;cdecl;external;

function XcmsCIELuvQueryMaxLC(_para1:TXcmsCCC; _para2:TXcmsFloat; _para3:PTXcmsColor):TStatus;cdecl;external;

function XcmsCIELuvQueryMinL(_para1:TXcmsCCC; _para2:TXcmsFloat; _para3:TXcmsFloat; _para4:PTXcmsColor):TStatus;cdecl;external;

function XcmsCIELuvToCIEuvY(_para1:TXcmsCCC; _para2:PTXcmsColor; _para3:PTXcmsColor; _para4:dword):TStatus;cdecl;external;

function XcmsCIELuvWhiteShiftColors(_para1:TXcmsCCC; _para2:PTXcmsColor; _para3:PTXcmsColor; _para4:TXcmsColorFormat; _para5:PTXcmsColor; 
               _para6:dword; _para7:PTBool):TStatus;cdecl;external;

function XcmsCIEXYZToCIELab(_para1:TXcmsCCC; _para2:PTXcmsColor; _para3:PTXcmsColor; _para4:dword):TStatus;cdecl;external;

function XcmsCIEXYZToCIEuvY(_para1:TXcmsCCC; _para2:PTXcmsColor; _para3:PTXcmsColor; _para4:dword):TStatus;cdecl;external;

function XcmsCIEXYZToCIExyY(_para1:TXcmsCCC; _para2:PTXcmsColor; _para3:PTXcmsColor; _para4:dword):TStatus;cdecl;external;

function XcmsCIEXYZToRGBi(_para1:TXcmsCCC; _para2:PTXcmsColor; _para3:dword; _para4:PTBool):TStatus;cdecl;external;

function XcmsCIEuvYToCIELuv(_para1:TXcmsCCC; _para2:PTXcmsColor; _para3:PTXcmsColor; _para4:dword):TStatus;cdecl;external;

function XcmsCIEuvYToCIEXYZ(_para1:TXcmsCCC; _para2:PTXcmsColor; _para3:PTXcmsColor; _para4:dword):TStatus;cdecl;external;

function XcmsCIEuvYToTekHVC(_para1:TXcmsCCC; _para2:PTXcmsColor; _para3:PTXcmsColor; _para4:dword):TStatus;cdecl;external;

function XcmsCIExyYToCIEXYZ(_para1:TXcmsCCC; _para2:PTXcmsColor; _para3:PTXcmsColor; _para4:dword):TStatus;cdecl;external;

function XcmsClientWhitePointOfCCC(_para1:TXcmsCCC):^TXcmsColor;cdecl;external;

function XcmsConvertColors(_para1:TXcmsCCC; _para2:PTXcmsColor; _para3:dword; _para4:TXcmsColorFormat; _para5:PTBool):TStatus;cdecl;external;

function XcmsCreateCCC(_para1:PTDisplay; _para2:longint; _para3:PTVisual; _para4:PTXcmsColor; _para5:TXcmsCompressionProc; 
               _para6:TXPointer; _para7:TXcmsWhiteAdjustProc; _para8:TXPointer):TXcmsCCC;cdecl;external;

function XcmsDefaultCCC(_para1:PTDisplay; _para2:longint):TXcmsCCC;cdecl;external;

function XcmsDisplayOfCCC(_para1:TXcmsCCC):^TDisplay;cdecl;external;

function XcmsFormatOfPrefix(_para1:Pchar):TXcmsColorFormat;cdecl;external;

procedure XcmsFreeCCC(_para1:TXcmsCCC);cdecl;external;
//// (* error 
////     _Xconst char*	/* color_string */,
//// (* error 
////     XcmsColor*		/* pColor_exact_in_out */,
//// (* error 
////     XcmsColor*		/* pColor_scrn_in_out */,

//// (* error 
//// );
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)

function XcmsPrefixOfFormat(_para1:TXcmsColorFormat):^char;cdecl;external;

function XcmsQueryBlack(_para1:TXcmsCCC; _para2:TXcmsColorFormat; _para3:PTXcmsColor):TStatus;cdecl;external;

function XcmsQueryBlue(_para1:TXcmsCCC; _para2:TXcmsColorFormat; _para3:PTXcmsColor):TStatus;cdecl;external;

function XcmsQueryColor(_para1:PTDisplay; _para2:TColormap; _para3:PTXcmsColor; _para4:TXcmsColorFormat):TStatus;cdecl;external;

function XcmsQueryColors(_para1:PTDisplay; _para2:TColormap; _para3:PTXcmsColor; _para4:dword; _para5:TXcmsColorFormat):TStatus;cdecl;external;

function XcmsQueryGreen(_para1:TXcmsCCC; _para2:TXcmsColorFormat; _para3:PTXcmsColor):TStatus;cdecl;external;

function XcmsQueryRed(_para1:TXcmsCCC; _para2:TXcmsColorFormat; _para3:PTXcmsColor):TStatus;cdecl;external;

function XcmsQueryWhite(_para1:TXcmsCCC; _para2:TXcmsColorFormat; _para3:PTXcmsColor):TStatus;cdecl;external;

function XcmsRGBiToCIEXYZ(_para1:TXcmsCCC; _para2:PTXcmsColor; _para3:dword; _para4:PTBool):TStatus;cdecl;external;

function XcmsRGBiToRGB(_para1:TXcmsCCC; _para2:PTXcmsColor; _para3:dword; _para4:PTBool):TStatus;cdecl;external;

function XcmsRGBToRGBi(_para1:TXcmsCCC; _para2:PTXcmsColor; _para3:dword; _para4:PTBool):TStatus;cdecl;external;

function XcmsScreenNumberOfCCC(_para1:TXcmsCCC):longint;cdecl;external;

function XcmsScreenWhitePointOfCCC(_para1:TXcmsCCC):^TXcmsColor;cdecl;external;

function XcmsSetCCCOfColormap(_para1:PTDisplay; _para2:TColormap; _para3:TXcmsCCC):TXcmsCCC;cdecl;external;

function XcmsSetCompressionProc(_para1:TXcmsCCC; _para2:TXcmsCompressionProc; _para3:TXPointer):TXcmsCompressionProc;cdecl;external;

function XcmsSetWhiteAdjustProc(_para1:TXcmsCCC; _para2:TXcmsWhiteAdjustProc; _para3:TXPointer):TXcmsWhiteAdjustProc;cdecl;external;

function XcmsSetWhitePoint(_para1:TXcmsCCC; _para2:PTXcmsColor):TStatus;cdecl;external;

function XcmsStoreColor(_para1:PTDisplay; _para2:TColormap; _para3:PTXcmsColor):TStatus;cdecl;external;

function XcmsStoreColors(_para1:PTDisplay; _para2:TColormap; _para3:PTXcmsColor; _para4:dword; _para5:PTBool):TStatus;cdecl;external;

function XcmsTekHVCClipC(_para1:TXcmsCCC; _para2:PTXcmsColor; _para3:dword; _para4:dword; _para5:PTBool):TStatus;cdecl;external;

function XcmsTekHVCClipV(_para1:TXcmsCCC; _para2:PTXcmsColor; _para3:dword; _para4:dword; _para5:PTBool):TStatus;cdecl;external;

function XcmsTekHVCClipVC(_para1:TXcmsCCC; _para2:PTXcmsColor; _para3:dword; _para4:dword; _para5:PTBool):TStatus;cdecl;external;

function XcmsTekHVCQueryMaxC(_para1:TXcmsCCC; _para2:TXcmsFloat; _para3:TXcmsFloat; _para4:PTXcmsColor):TStatus;cdecl;external;

function XcmsTekHVCQueryMaxV(_para1:TXcmsCCC; _para2:TXcmsFloat; _para3:TXcmsFloat; _para4:PTXcmsColor):TStatus;cdecl;external;

function XcmsTekHVCQueryMaxVC(_para1:TXcmsCCC; _para2:TXcmsFloat; _para3:PTXcmsColor):TStatus;cdecl;external;

function XcmsTekHVCQueryMaxVSamples(_para1:TXcmsCCC; _para2:TXcmsFloat; _para3:PTXcmsColor; _para4:dword):TStatus;cdecl;external;

function XcmsTekHVCQueryMinV(_para1:TXcmsCCC; _para2:TXcmsFloat; _para3:TXcmsFloat; _para4:PTXcmsColor):TStatus;cdecl;external;

function XcmsTekHVCToCIEuvY(_para1:TXcmsCCC; _para2:PTXcmsColor; _para3:PTXcmsColor; _para4:dword):TStatus;cdecl;external;

function XcmsTekHVCWhiteShiftColors(_para1:TXcmsCCC; _para2:PTXcmsColor; _para3:PTXcmsColor; _para4:TXcmsColorFormat; _para5:PTXcmsColor; 
               _para6:dword; _para7:PTBool):TStatus;cdecl;external;

function XcmsVisualOfCCC(_para1:TXcmsCCC):^TVisual;cdecl;external;
//// {$ifdef __clang__}
//// {$endif}
//// {$endif}

//// (* error 
//// #endif /* _X11_XCMS_H_ */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xmd.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xmd.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xmd.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef XMD_H}

const
  XMD_H = 1;  


//// {$if defined(__sun) && defined(__SVR4)}
//// {$include <sys/isa_defs.h> /* Solaris: defines _LP64 if necessary */}
//// {$endif}
//// {$if defined(__SIZEOF_LONG__)}
//// {$if __SIZEOF_LONG__ == 8}

//// {$define LONG64}
//// {$endif}
//// {$else defined (_LP64) || defined(__LP64__) || \}
//// (* error 
////      defined(__alpha) || defined(__alpha__) || \
//// {$if !defined(__ILP32__) /* amd64-x32 is 32bit */}

//// {$endif}

//// {$endif}




//// {$ifdef LONG64}
 in declarator_list *)
type
  TINT32 = longint;
//// {$else}
type
  TINT32 = longint;
//// {$endif}
type
  TINT16 = smallint;

  TINT8 = char;
//// {$ifdef LONG64}
type
  TCARD64 = dword;

  TCARD32 = dword;
//// {$else}
type
  TCARD64 = qword;

  TCARD32 = dword;
//// {$endif}
type
  TCARD16 = word;

  TCARD8 = byte;

  TBITS32 = TCARD32;

  TBITS16 = TCARD16;

  TBYTE = TCARD8;

  TBOOL = TCARD8;


function cvtINT8toInt(val : longint) : longint;

function cvtINT16toInt(val : longint) : longint;

function cvtINT32toInt(val : longint) : longint;

function cvtINT8toShort(val : longint) : longint;

function cvtINT16toShort(val : longint) : longint;

function cvtINT32toShort(val : longint) : longint;

function cvtINT8toLong(val : longint) : longint;

function cvtINT16toLong(val : longint) : longint;

function cvtINT32toLong(val : longint) : longint;


function NEXTPTR(p,t : longint) : longint;

//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/XF86keysym.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/XF86keysym.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/XF86keysym.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}






const
  XF86XK_ModeLock = $1008FF01;  


  XF86XK_MonBrightnessUp = $1008FF02;  

  XF86XK_MonBrightnessDown = $1008FF03;  

  XF86XK_KbdLightOnOff = $1008FF04;  

  XF86XK_KbdBrightnessUp = $1008FF05;  

  XF86XK_KbdBrightnessDown = $1008FF06;  

  XF86XK_MonBrightnessCycle = $1008FF07;  


  XF86XK_Standby = $1008FF10;  

  XF86XK_AudioLowerVolume = $1008FF11;  

  XF86XK_AudioMute = $1008FF12;  

  XF86XK_AudioRaiseVolume = $1008FF13;  

  XF86XK_AudioPlay = $1008FF14;  

  XF86XK_AudioStop = $1008FF15;  

  XF86XK_AudioPrev = $1008FF16;  

  XF86XK_AudioNext = $1008FF17;  

  XF86XK_HomePage = $1008FF18;  

  XF86XK_Mail = $1008FF19;  

  XF86XK_Start = $1008FF1A;  

  XF86XK_Search = $1008FF1B;  

  XF86XK_AudioRecord = $1008FF1C;  


  XF86XK_Calculator = $1008FF1D;  

  XF86XK_Memo = $1008FF1E;  

  XF86XK_ToDoList = $1008FF1F;  

  XF86XK_Calendar = $1008FF20;  

  XF86XK_PowerDown = $1008FF21;  

  XF86XK_ContrastAdjust = $1008FF22;  

  XF86XK_RockerUp = $1008FF23;  

  XF86XK_RockerDown = $1008FF24;  

  XF86XK_RockerEnter = $1008FF25;  


  XF86XK_Back = $1008FF26;  

  XF86XK_Forward = $1008FF27;  

  XF86XK_Stop = $1008FF28;  

  XF86XK_Refresh = $1008FF29;  

  XF86XK_PowerOff = $1008FF2A;  

  XF86XK_WakeUp = $1008FF2B;  

  XF86XK_Eject = $1008FF2C;  

  XF86XK_ScreenSaver = $1008FF2D;  

  XF86XK_WWW = $1008FF2E;  

  XF86XK_Sleep = $1008FF2F;  

  XF86XK_Favorites = $1008FF30;  

  XF86XK_AudioPause = $1008FF31;  

  XF86XK_AudioMedia = $1008FF32;  

  XF86XK_MyComputer = $1008FF33;  

  XF86XK_VendorHome = $1008FF34;  

  XF86XK_LightBulb = $1008FF35;  

  XF86XK_Shop = $1008FF36;  

  XF86XK_History = $1008FF37;  

  XF86XK_OpenURL = $1008FF38;  

  XF86XK_AddFavorite = $1008FF39;  

  XF86XK_HotLinks = $1008FF3A;  

  XF86XK_BrightnessAdjust = $1008FF3B;  

  XF86XK_Finance = $1008FF3C;  

  XF86XK_Community = $1008FF3D;  

  XF86XK_AudioRewind = $1008FF3E;  

  XF86XK_BackForward = $1008FF3F;  

  XF86XK_Launch0 = $1008FF40;  

  XF86XK_Launch1 = $1008FF41;  

  XF86XK_Launch2 = $1008FF42;  

  XF86XK_Launch3 = $1008FF43;  

  XF86XK_Launch4 = $1008FF44;  

  XF86XK_Launch5 = $1008FF45;  

  XF86XK_Launch6 = $1008FF46;  

  XF86XK_Launch7 = $1008FF47;  

  XF86XK_Launch8 = $1008FF48;  

  XF86XK_Launch9 = $1008FF49;  

  XF86XK_LaunchA = $1008FF4A;  

  XF86XK_LaunchB = $1008FF4B;  

  XF86XK_LaunchC = $1008FF4C;  

  XF86XK_LaunchD = $1008FF4D;  

  XF86XK_LaunchE = $1008FF4E;  

  XF86XK_LaunchF = $1008FF4F;  

  XF86XK_ApplicationLeft = $1008FF50;  

  XF86XK_ApplicationRight = $1008FF51;  

  XF86XK_Book = $1008FF52;  

  XF86XK_CD = $1008FF53;  

  XF86XK_Calculater = $1008FF54;  

  XF86XK_Clear = $1008FF55;  

  XF86XK_Close = $1008FF56;  

  XF86XK_Copy = $1008FF57;  

  XF86XK_Cut = $1008FF58;  

  XF86XK_Display = $1008FF59;  

  XF86XK_DOS = $1008FF5A;  

  XF86XK_Documents = $1008FF5B;  

  XF86XK_Excel = $1008FF5C;  

  XF86XK_Explorer = $1008FF5D;  

  XF86XK_Game = $1008FF5E;  

  XF86XK_Go = $1008FF5F;  

  XF86XK_iTouch = $1008FF60;  

  XF86XK_LogOff = $1008FF61;  

  XF86XK_Market = $1008FF62;  

  XF86XK_Meeting = $1008FF63;  

  XF86XK_MenuKB = $1008FF65;  

  XF86XK_MenuPB = $1008FF66;  

  XF86XK_MySites = $1008FF67;  

  XF86XK_New = $1008FF68;  

  XF86XK_News = $1008FF69;  

  XF86XK_OfficeHome = $1008FF6A;  

  XF86XK_Open = $1008FF6B;  

  XF86XK_Option = $1008FF6C;  

  XF86XK_Paste = $1008FF6D;  

  XF86XK_Phone = $1008FF6E;  

  XF86XK_Q = $1008FF70;  

  XF86XK_Reply = $1008FF72;  

  XF86XK_Reload = $1008FF73;  

  XF86XK_RotateWindows = $1008FF74;  

  XF86XK_RotationPB = $1008FF75;  

  XF86XK_RotationKB = $1008FF76;  

  XF86XK_Save = $1008FF77;  

  XF86XK_ScrollUp = $1008FF78;  

  XF86XK_ScrollDown = $1008FF79;  

  XF86XK_ScrollClick = $1008FF7A;  

  XF86XK_Send = $1008FF7B;  

  XF86XK_Spell = $1008FF7C;  

  XF86XK_SplitScreen = $1008FF7D;  

  XF86XK_Support = $1008FF7E;  

  XF86XK_TaskPane = $1008FF7F;  

  XF86XK_Terminal = $1008FF80;  

  XF86XK_Tools = $1008FF81;  

  XF86XK_Travel = $1008FF82;  

  XF86XK_UserPB = $1008FF84;  

  XF86XK_User1KB = $1008FF85;  

  XF86XK_User2KB = $1008FF86;  

  XF86XK_Video = $1008FF87;  

  XF86XK_WheelButton = $1008FF88;  

  XF86XK_Word = $1008FF89;  
  XF86XK_Xfer = $1008FF8A;  

  XF86XK_ZoomIn = $1008FF8B;  

  XF86XK_ZoomOut = $1008FF8C;  

  XF86XK_Away = $1008FF8D;  

  XF86XK_Messenger = $1008FF8E;  

  XF86XK_WebCam = $1008FF8F;  

  XF86XK_MailForward = $1008FF90;  

  XF86XK_Pictures = $1008FF91;  

  XF86XK_Music = $1008FF92;  

  XF86XK_Battery = $1008FF93;  

  XF86XK_Bluetooth = $1008FF94;  

  XF86XK_WLAN = $1008FF95;  

  XF86XK_UWB = $1008FF96;  

  XF86XK_AudioForward = $1008FF97;  

  XF86XK_AudioRepeat = $1008FF98;  

  XF86XK_AudioRandomPlay = $1008FF99;  

  XF86XK_Subtitle = $1008FF9A;  

  XF86XK_AudioCycleTrack = $1008FF9B;  

  XF86XK_CycleAngle = $1008FF9C;  

  XF86XK_FrameBack = $1008FF9D;  

  XF86XK_FrameForward = $1008FF9E;  

  XF86XK_Time = $1008FF9F;  

  XF86XK_Select = $1008FFA0;  

  XF86XK_View = $1008FFA1;  

  XF86XK_TopMenu = $1008FFA2;  

  XF86XK_Red = $1008FFA3;  

  XF86XK_Green = $1008FFA4;  

  XF86XK_Yellow = $1008FFA5;  

  XF86XK_Blue = $1008FFA6;  

  XF86XK_Suspend = $1008FFA7;  

  XF86XK_Hibernate = $1008FFA8;  

  XF86XK_TouchpadToggle = $1008FFA9;  

  XF86XK_TouchpadOn = $1008FFB0;  

  XF86XK_TouchpadOff = $1008FFB1;  

  XF86XK_AudioMicMute = $1008FFB2;  

  XF86XK_Keyboard = $1008FFB3;  

  XF86XK_WWAN = $1008FFB4;  

  XF86XK_RFKill = $1008FFB5;  

  XF86XK_AudioPreset = $1008FFB6;  

  XF86XK_RotationLockToggle = $1008FFB7;  

  XF86XK_FullScreen = $1008FFB8;  


  XF86XK_Switch_VT_1 = $1008FE01;  
  XF86XK_Switch_VT_2 = $1008FE02;  
  XF86XK_Switch_VT_3 = $1008FE03;  
  XF86XK_Switch_VT_4 = $1008FE04;  
  XF86XK_Switch_VT_5 = $1008FE05;  
  XF86XK_Switch_VT_6 = $1008FE06;  
  XF86XK_Switch_VT_7 = $1008FE07;  
  XF86XK_Switch_VT_8 = $1008FE08;  
  XF86XK_Switch_VT_9 = $1008FE09;  
  XF86XK_Switch_VT_10 = $1008FE0A;  
  XF86XK_Switch_VT_11 = $1008FE0B;  
  XF86XK_Switch_VT_12 = $1008FE0C;  

  XF86XK_Ungrab = $1008FE20;  

  XF86XK_ClearGrab = $1008FE21;  

  XF86XK_Next_VMode = $1008FE22;  

  XF86XK_Prev_VMode = $1008FE23;  

  XF86XK_LogWindowTree = $1008FE24;  

  XF86XK_LogGrabInfo = $1008FE25;  


function _EVDEVK(_v : longint) : longint;























function XF86XK_BrightnessAuto : longint; { return type might be wrong }


function XF86XK_DisplayOff : longint; { return type might be wrong }





function XF86XK_Info : longint; { return type might be wrong }




function XF86XK_AspectRatio : longint; { return type might be wrong }


function XF86XK_DVD : longint; { return type might be wrong }


function XF86XK_Audio : longint; { return type might be wrong }




function XF86XK_ChannelUp : longint; { return type might be wrong }


function XF86XK_ChannelDown : longint; { return type might be wrong }



function XF86XK_Break : longint; { return type might be wrong }


function XF86XK_VideoPhone : longint; { return type might be wrong }





function XF86XK_ZoomReset : longint; { return type might be wrong }



function XF86XK_Editor : longint; { return type might be wrong }



function XF86XK_GraphicsEditor : longint; { return type might be wrong }


function XF86XK_Presentation : longint; { return type might be wrong }


function XF86XK_Database : longint; { return type might be wrong }



function XF86XK_Voicemail : longint; { return type might be wrong }


function XF86XK_Addressbook : longint; { return type might be wrong }



function XF86XK_DisplayToggle : longint; { return type might be wrong }


function XF86XK_SpellCheck : longint; { return type might be wrong }







function XF86XK_ContextMenu : longint; { return type might be wrong }


function XF86XK_MediaRepeat : longint; { return type might be wrong }


function XF86XK_10ChannelsUp : longint; { return type might be wrong }


function XF86XK_10ChannelsDown : longint; { return type might be wrong }


function XF86XK_Images : longint; { return type might be wrong }


function XF86XK_NotificationCenter : longint; { return type might be wrong }


function XF86XK_PickupPhone : longint; { return type might be wrong }


function XF86XK_HangupPhone : longint; { return type might be wrong }


function XF86XK_Fn : longint; { return type might be wrong }


function XF86XK_Fn_Esc : longint; { return type might be wrong }


function XF86XK_FnRightShift : longint; { return type might be wrong }












function XF86XK_Numeric0 : longint; { return type might be wrong }


function XF86XK_Numeric1 : longint; { return type might be wrong }


function XF86XK_Numeric2 : longint; { return type might be wrong }


function XF86XK_Numeric3 : longint; { return type might be wrong }


function XF86XK_Numeric4 : longint; { return type might be wrong }


function XF86XK_Numeric5 : longint; { return type might be wrong }


function XF86XK_Numeric6 : longint; { return type might be wrong }


function XF86XK_Numeric7 : longint; { return type might be wrong }


function XF86XK_Numeric8 : longint; { return type might be wrong }


function XF86XK_Numeric9 : longint; { return type might be wrong }


function XF86XK_NumericStar : longint; { return type might be wrong }


function XF86XK_NumericPound : longint; { return type might be wrong }


function XF86XK_NumericA : longint; { return type might be wrong }


function XF86XK_NumericB : longint; { return type might be wrong }


function XF86XK_NumericC : longint; { return type might be wrong }


function XF86XK_NumericD : longint; { return type might be wrong }


function XF86XK_CameraFocus : longint; { return type might be wrong }


function XF86XK_WPSButton : longint; { return type might be wrong }





function XF86XK_CameraZoomIn : longint; { return type might be wrong }


function XF86XK_CameraZoomOut : longint; { return type might be wrong }


function XF86XK_CameraUp : longint; { return type might be wrong }


function XF86XK_CameraDown : longint; { return type might be wrong }


function XF86XK_CameraLeft : longint; { return type might be wrong }


function XF86XK_CameraRight : longint; { return type might be wrong }


function XF86XK_AttendantOn : longint; { return type might be wrong }


function XF86XK_AttendantOff : longint; { return type might be wrong }


function XF86XK_AttendantToggle : longint; { return type might be wrong }


function XF86XK_LightsToggle : longint; { return type might be wrong }


function XF86XK_ALSToggle : longint; { return type might be wrong }



function XF86XK_Buttonconfig : longint; { return type might be wrong }


function XF86XK_Taskmanager : longint; { return type might be wrong }


function XF86XK_Journal : longint; { return type might be wrong }


function XF86XK_ControlPanel : longint; { return type might be wrong }


function XF86XK_AppSelect : longint; { return type might be wrong }


function XF86XK_Screensaver : longint; { return type might be wrong }


function XF86XK_VoiceCommand : longint; { return type might be wrong }


function XF86XK_Assistant : longint; { return type might be wrong }



function XF86XK_EmojiPicker : longint; { return type might be wrong }


function XF86XK_Dictate : longint; { return type might be wrong }


function XF86XK_BrightnessMin : longint; { return type might be wrong }


function XF86XK_BrightnessMax : longint; { return type might be wrong }


function XF86XK_KbdInputAssistPrev : longint; { return type might be wrong }


function XF86XK_KbdInputAssistNext : longint; { return type might be wrong }


function XF86XK_KbdInputAssistPrevgroup : longint; { return type might be wrong }


function XF86XK_KbdInputAssistNextgroup : longint; { return type might be wrong }


function XF86XK_KbdInputAssistAccept : longint; { return type might be wrong }


function XF86XK_KbdInputAssistCancel : longint; { return type might be wrong }


function XF86XK_RightUp : longint; { return type might be wrong }


function XF86XK_RightDown : longint; { return type might be wrong }


function XF86XK_LeftUp : longint; { return type might be wrong }


function XF86XK_LeftDown : longint; { return type might be wrong }


function XF86XK_RootMenu : longint; { return type might be wrong }


function XF86XK_MediaTopMenu : longint; { return type might be wrong }


function XF86XK_Numeric11 : longint; { return type might be wrong }


function XF86XK_Numeric12 : longint; { return type might be wrong }


function XF86XK_AudioDesc : longint; { return type might be wrong }


function XF86XK_3DMode : longint; { return type might be wrong }


function XF86XK_NextFavorite : longint; { return type might be wrong }


function XF86XK_StopRecord : longint; { return type might be wrong }


function XF86XK_PauseRecord : longint; { return type might be wrong }


function XF86XK_VOD : longint; { return type might be wrong }


function XF86XK_Unmute : longint; { return type might be wrong }


function XF86XK_FastReverse : longint; { return type might be wrong }


function XF86XK_SlowReverse : longint; { return type might be wrong }


function XF86XK_Data : longint; { return type might be wrong }


function XF86XK_OnScreenKeyboard : longint; { return type might be wrong }


function XF86XK_PrivacyScreenToggle : longint; { return type might be wrong }


function XF86XK_SelectiveScreenshot : longint; { return type might be wrong }


function XF86XK_Macro1 : longint; { return type might be wrong }


function XF86XK_Macro2 : longint; { return type might be wrong }


function XF86XK_Macro3 : longint; { return type might be wrong }


function XF86XK_Macro4 : longint; { return type might be wrong }


function XF86XK_Macro5 : longint; { return type might be wrong }


function XF86XK_Macro6 : longint; { return type might be wrong }


function XF86XK_Macro7 : longint; { return type might be wrong }


function XF86XK_Macro8 : longint; { return type might be wrong }


function XF86XK_Macro9 : longint; { return type might be wrong }


function XF86XK_Macro10 : longint; { return type might be wrong }


function XF86XK_Macro11 : longint; { return type might be wrong }


function XF86XK_Macro12 : longint; { return type might be wrong }


function XF86XK_Macro13 : longint; { return type might be wrong }


function XF86XK_Macro14 : longint; { return type might be wrong }


function XF86XK_Macro15 : longint; { return type might be wrong }


function XF86XK_Macro16 : longint; { return type might be wrong }


function XF86XK_Macro17 : longint; { return type might be wrong }


function XF86XK_Macro18 : longint; { return type might be wrong }


function XF86XK_Macro19 : longint; { return type might be wrong }


function XF86XK_Macro20 : longint; { return type might be wrong }


function XF86XK_Macro21 : longint; { return type might be wrong }


function XF86XK_Macro22 : longint; { return type might be wrong }


function XF86XK_Macro23 : longint; { return type might be wrong }


function XF86XK_Macro24 : longint; { return type might be wrong }


function XF86XK_Macro25 : longint; { return type might be wrong }


function XF86XK_Macro26 : longint; { return type might be wrong }


function XF86XK_Macro27 : longint; { return type might be wrong }


function XF86XK_Macro28 : longint; { return type might be wrong }


function XF86XK_Macro29 : longint; { return type might be wrong }


function XF86XK_Macro30 : longint; { return type might be wrong }


function XF86XK_MacroRecordStart : longint; { return type might be wrong }


function XF86XK_MacroRecordStop : longint; { return type might be wrong }


function XF86XK_MacroPresetCycle : longint; { return type might be wrong }


function XF86XK_MacroPreset1 : longint; { return type might be wrong }


function XF86XK_MacroPreset2 : longint; { return type might be wrong }


function XF86XK_MacroPreset3 : longint; { return type might be wrong }


function XF86XK_KbdLcdMenu1 : longint; { return type might be wrong }


function XF86XK_KbdLcdMenu2 : longint; { return type might be wrong }


function XF86XK_KbdLcdMenu3 : longint; { return type might be wrong }


function XF86XK_KbdLcdMenu4 : longint; { return type might be wrong }


function XF86XK_KbdLcdMenu5 : longint; { return type might be wrong }

//// {$undef _EVDEVK}

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/ObjectP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/ObjectP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/ObjectP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _Xt_ObjectP_h_}
//// {$define _Xt_ObjectP_h_}
//// {$include <X11/Object.h>}


//// (* error 
//// typedef struct _ObjectPart {
in declaration at line 62 *)

      var
        widget_class : TWidgetClass;cvar;public;

        parent : TWidget;cvar;public;

        xrm_name : TXrmName;cvar;public;

        being_destroyed : TBoolean;cvar;public;

        destroy_callbacks : TXtCallbackList;cvar;public;

        constraints : TXtPointer;cvar;public;

//// (* error 
//// } ObjectPart;
in declaration at line 69 *)
    type
      T_ObjectRec = record
          object : TObjectPart;
        end;
      TObjectRec = T_ObjectRec;




































      T_ObjectClassPart = record
          superclass : TWidgetClass;
          class_name : TString;
          widget_size : TCardinal;
          class_initialize : TXtProc;
          class_part_initialize : TXtWidgetClassProc;
          class_inited : TXtEnum;
          initialize : TXtInitProc;
          initialize_hook : TXtArgsProc;
          obj1 : TXtProc;
          obj2 : TXtPointer;
          obj3 : TCardinal;
          resources : TXtResourceList;
          num_resources : TCardinal;
          xrm_class : TXrmClass;
          obj4 : TBoolean;
          obj5 : TXtEnum;
          obj6 : TBoolean;
          obj7 : TBoolean;
          destroy : TXtWidgetProc;
          obj8 : TXtProc;
          obj9 : TXtProc;
          set_values : TXtSetValuesFunc;
          set_values_hook : TXtArgsFunc;
          obj10 : TXtProc;
          get_values_hook : TXtArgsProc;
          obj11 : TXtProc;
          version : TXtVersionType;
          callback_private : TXtPointer;
          obj12 : TString;
          obj13 : TXtProc;
          obj14 : TXtProc;
          extension : TXtPointer;
        end;
      TObjectClassPart = T_ObjectClassPart;





      TObjectClassExtensionRec = record
          next_extension : TXtPointer;
          record_type : TXrmQuark;
          version : longint;
          record_size : TCardinal;
          allocate : TXtAllocateProc;
          deallocate : TXtDeallocateProc;
        end;
      TObjectClassExtension = ^TObjectClassExtensionRec;

      T_ObjectClassRec = record
          object_class : TObjectClassPart;
        end;
      TObjectClassRec = T_ObjectClassRec;
//// (* error 
//// externalref ObjectClassRec objectClassRec;
 in declarator_list *)
//// (* error 
//// #define XtObjectExtensionVersion 1L
in define line 137 *)

    function XtInheritAllocate : TXtAllocateProc;      

    function XtInheritDeallocate : TXtDeallocateProc;      

//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/ConvertI.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/ConvertI.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/ConvertI.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    PConverterTable  = ^ConverterTable;
    PXtCacheRef  = ^XtCacheRef;
    PXtConvertArgRec  = ^XtConvertArgRec;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// (* error 
//// extern	XrmQuark  _XtQString;
in declaration at line 52 *)

    type
      TConverterTable = ^^T_ConverterRec;


procedure _XtAddDefaultConverters(_para1:TConverterTable);cdecl;external;

procedure _XtSetDefaultConverterTable(_para1:PTConverterTable);cdecl;external;

procedure _XtFreeConverterTable(_para1:TConverterTable);cdecl;external;

procedure _XtTableAddConverter(_para1:TConverterTable; _para2:TXrmRepresentation; _para3:TXrmRepresentation; _para4:TXtTypeConverter; _para5:PTXtConvertArgRec; 
                _para6:TCardinal; _para7:T_XtBoolean; _para8:TXtCacheType; _para9:TXtDestructor; _para10:T_XtBoolean);cdecl;external;

function _XtConvert(_para1:TWidget; _para2:TXrmRepresentation; _para3:TXrmValuePtr; _para4:TXrmRepresentation; _para5:TXrmValuePtr; 
               _para6:PTXtCacheRef):TBoolean;cdecl;external;
procedure _XtConvertInitialize;cdecl;external;
//// {$ifdef DEBUG}
procedure _XtConverterCacheStats;cdecl;external;
//// {$endif}
//// (* error 
//// _XFUNCPROTOEND

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Composite.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Composite.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Composite.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    PCardinal  = ^Cardinal;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XtComposite_h}
//// {$define _XtComposite_h}
type
  TCompositeWidgetClass = ^T_CompositeClassRec;


  TXtOrderProc = function (_para1:TWidget):TCardinal;cdecl;
//// (* error 
//// extern void XtManageChildren(

in declaration at line 62 *)


procedure XtManageChild(_para1:TWidget);cdecl;external;

procedure XtUnmanageChildren(_para1:TWidgetList; _para2:TCardinal);cdecl;external;

procedure XtUnmanageChild(_para1:TWidget);cdecl;external;

    type

      TXtDoChangeProc = procedure (_para1:TWidget; _para2:TWidgetList; _para3:PTCardinal; _para4:TWidgetList; _para5:PTCardinal; 
                    _para6:TXtPointer);cdecl;


procedure XtChangeManagedSet(_para1:TWidgetList; _para2:TCardinal; _para3:TXtDoChangeProc; _para4:TXtPointer; _para5:TWidgetList; 
                _para6:TCardinal);cdecl;external;
//// {$ifndef VMS}
//// (* error 
//// externalref WidgetClass compositeWidgetClass;
 in declarator_list *)
//// {$endif}
//// {$endif}



// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/CreateI.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/CreateI.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/CreateI.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    PDisplay  = ^Display;
    PScreen  = ^Screen;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}


//// {$ifndef _XtcreateI_h}
//// {$define _XtcreateI_h}
//// (* error 
//// extern Widget _XtCreateWidget(String name, WidgetClass widget_class,
in declaration at line 9 *)

function _XtCreatePopupShell(name:TString; widget_class:TWidgetClass; parent:TWidget; args:TArgList; num_args:TCardinal; 
               typed_args:TXtTypedArgList; num_typed_args:TCardinal):TWidget;cdecl;external;
function _XtAppCreateShell(name:TString; _class:TString; widget_class:TWidgetClass; display:PTDisplay; args:TArgList; 
               num_args:TCardinal; typed_args:TXtTypedArgList; num_typed_args:TCardinal):TWidget;cdecl;external;
function _XtCreateHookObj(screen:PTScreen):TWidget;cdecl;external;
//// {$include <stdarg.h>}

//// (* error 
//// extern Widget _XtVaOpenApplication(XtAppContext *app_context_return,
//// (* error 
//// 			_Xconst char* application_class,
//// (* error 
//// 			XrmOptionDescList options, Cardinal num_options,
//// (* error 
//// 			XrmOptionDescList options, Cardinal num_options,
//// (* error 
//// 			int *argc_in_out, _XtString *argv_in_out,
//// (* error 
//// 			int *argc_in_out, _XtString *argv_in_out,
//// (* error 
//// 			String *fallback_resources, WidgetClass widget_class,
//// (* error 
//// 			String *fallback_resources, WidgetClass widget_class,
//// (* error 
//// 			va_list var_args);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
//// 			_Xconst char* application_class,
//// (* error 
//// 			XrmOptionDescList options, Cardinal num_options,
//// (* error 
//// 			XrmOptionDescList options, Cardinal num_options,
//// (* error 
//// 			int *argc_in_out, _XtString *argv_in_out,
//// (* error 
//// 			int *argc_in_out, _XtString *argv_in_out,
//// (* error 
//// 			String *fallback_resources, va_list var_args);
//// (* error 
//// 			String *fallback_resources, va_list var_args);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// {$endif}

//// (* error 
//// #endif /* _XtcreateI_h */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xosdefs.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xosdefs.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xosdefs.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XOSDEFS_H_}
//// {$define _XOSDEFS_H_}

//// {$ifdef _SCO_DS}
//// {$ifndef __SCO__}
//// {$define __SCO__}
//// {$endif}
//// {$endif}
//// {$ifdef __i386__}
//// {$ifdef SYSV}
//// {$if !defined(__SCO__) && \}
//// (* error 
//// 	!defined(__UNIXWARE__) && !defined(__sun)
//// {$if !defined(_POSIX_SOURCE)}
in define line 48 *)
//// {$endif}
//// {$endif}
//// {$endif}
//// {$endif}
//// {$ifdef __sun}

//// {$if defined(__SVR4) && !defined(SVR4)}

    const
      SVR4 = 1;      
//// {$endif}
//// {$ifdef SVR4}


    const
      X_POSIX_C_SOURCE = 199300;      
//// {$endif}
//// {$endif}
//// {$ifdef WIN32}
//// {$ifndef _POSIX_}
//// {$define X_NOT_POSIX}    
//// {$endif}
//// {$endif}
//// {$ifdef __APPLE__}
//// {$define NULL_NOT_ZERO}    

//// {$if defined(_XOPEN_SOURCE) || defined(_POSIX_SOURCE) || defined(_POSIX_C_SOURCE)}
//// {$ifndef _DARWIN_C_SOURCE}
//// {$define _DARWIN_C_SOURCE}    
//// {$endif}
//// {$endif}
//// {$endif}
//// {$ifdef __GNU__}
//// {$ifndef PATH_MAX}

    const
      PATH_MAX = 4096;      
//// {$endif}
//// {$ifndef MAXPATHLEN}

    const
      MAXPATHLEN = 4096;      
//// {$endif}
//// {$endif}
//// {$if defined(__SCO__) || defined(__UNIXWARE__)}
//// {$ifndef PATH_MAX}

    const
      PATH_MAX = 1024;      
//// {$endif}
//// {$ifndef MAXPATHLEN}

    const
      MAXPATHLEN = 1024;      
//// {$endif}
//// {$endif}
//// {$if defined(__OpenBSD__) || defined(__NetBSD__) || defined(__FreeBSD__) \}
//// (* error 
//// 	|| defined(__APPLE__) || defined(__DragonFly__)
//// {$ifndef CSRG_BASED}
in define line 111 *)
//// {$endif}
//// {$endif}
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/VendorP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/VendorP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/VendorP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}





//// {$ifndef  _XtVendorPrivate_h}
//// {$define _XtVendorPrivate_h}
//// {$include <X11/Vendor.h>}

//// (* error 
//// typedef struct {
in declaration at line 73 *)

//// (* error 
//// } VendorShellClassPart;
in declaration at line 74 *)
    type
      T_VendorShellClassRec = record
          core_class : TCoreClassPart;
          composite_class : TCompositeClassPart;
          shell_class : TShellClassPart;
          wm_shell_class : TWMShellClassPart;
          vendor_shell_class : TVendorShellClassPart;
        end;
      TVendorShellClassRec = T_VendorShellClassRec;
//// (* error 
//// externalref VendorShellClassRec vendorShellClassRec;
 in declarator_list *)


      TVendorShellPart = record
          vendor_specific : longint;
        end;

      TVendorShellRec = record
          core : TCorePart;
          composite : TCompositePart;
          shell : TShellPart;
          wm : TWMShellPart;
          vendor : TVendorShellPart;
        end;
      TVendorShellWidget = ^TVendorShellRec;
//// {$endif}

//// (* error 
//// #endif  /* _XtVendorPrivate_h */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/VarargsI.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/VarargsI.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/VarargsI.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    PArgList  = ^ArgList;
    PCardinal  = ^Cardinal;
    Pchar  = ^char;
    PXtTypedArgList  = ^XtTypedArgList;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _VarargsI_h_}
//// {$define _VarargsI_h_}
//// {$include <stdarg.h>}

//// (* error 
//// extern void _XtCountVaList(

in declaration at line 38 *)


procedure _XtVaToArgList(_para1:TWidget; _para2:Tva_list; _para3:longint; _para4:PTArgList; _para5:PTCardinal);cdecl;external;

procedure _XtVaToTypedArgList(_para1:Tva_list; _para2:longint; _para3:PTXtTypedArgList; _para4:PTCardinal);cdecl;external;

function _XtVaCreateTypedArgList(_para1:Tva_list; _para2:longint):TXtTypedArgList;cdecl;external;

procedure _XtFreeArgList(_para1:TArgList; _para2:longint; _para3:longint);cdecl;external;

procedure _XtGetApplicationResources(_para1:TWidget; _para2:TXtPointer; _para3:TXtResourceList; _para4:TCardinal; _para5:TArgList; 
                _para6:TCardinal; _para7:TXtTypedArgList; _para8:TCardinal);cdecl;external;

procedure _XtGetSubresources(_para1:TWidget; _para2:TXtPointer; _para3:Pchar; _para4:Pchar; _para5:TXtResourceList; 
                _para6:TCardinal; _para7:TArgList; _para8:TCardinal; _para9:TXtTypedArgList; _para10:TCardinal);cdecl;external;
//// {$endif}

//// (* error 
//// #endif /* _VarargsI_h_ */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xlibint.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xlibint.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xlibint.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    P_XAsyncHandler  = ^_XAsyncHandler;
    P_XConnectionInfo  = ^_XConnectionInfo;
    P_XDisplay  = ^_XDisplay;
    P_XQEvent  = ^_XQEvent;
    Pchar  = ^char;
    PDisplay  = ^Display;
    Plongint  = ^longint;
    PxChangeWindowAttributesReq  = ^xChangeWindowAttributesReq;
    PxError  = ^xError;
    PXErrorEvent  = ^XErrorEvent;
    PXEvent  = ^XEvent;
    PXExtCodes  = ^XExtCodes;
    PXExtData  = ^XExtData;
    PXFontStruct  = ^XFontStruct;
    PXGenericEventCookie  = ^XGenericEventCookie;
    PxGenericReply  = ^xGenericReply;
    PXID  = ^XID;
    PXModifierKeymap  = ^XModifierKeymap;
    PXRectangle  = ^XRectangle;
    PxReply  = ^xReply;
    PXSetWindowAttributes  = ^XSetWindowAttributes;
    PXWindowAttributes  = ^XWindowAttributes;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _X11_XLIBINT_H_}

const
  _X11_XLIBINT_H_ = 1;  

//// {$include <stdint.h>}
//// {$include <X11/Xlib.h>}
//// {$include <X11/Xproto.h>		/* to declare xEvent */}
//// {$include <X11/XlibConf.h>	/* for configured options like XTHREADS */}

//// {$ifdef __clang__}
//// {$endif}
//// {$ifdef WIN32}

const
  _XFlush = _XFlushIt;  
//// {$endif}






type
  T_XGC = record
      ext_data : ^TXExtData;
      gid : TGContext;
      rects : TBool;
      dashes : TBool;
      dirty : dword;
      values : TXGCValues;
    end;




































//// (* error 
//// 	volatile unsigned long flags;	   /* internal connection flags */
 in declarator_list *)
























































//// {$ifndef LONG64}
//// {$endif}
type
  T_XDisplay = record
      ext_data : ^TXExtData;
      free_funcs : ^T_XFreeFuncs;
      fd : longint;
      conn_checker : longint;
      proto_major_version : longint;
      proto_minor_version : longint;
      vendor : ^char;
      resource_base : TXID;
      resource_mask : TXID;
      resource_id : TXID;
      resource_shift : longint;
      resource_alloc : function (_para1:PT_XDisplay):TXID;cdecl;
      byte_order : longint;
      bitmap_unit : longint;
      bitmap_pad : longint;
      bitmap_bit_order : longint;
      nformats : longint;
      pixmap_format : ^TScreenFormat;
      vnumber : longint;
      release : longint;
      head : ^T_XSQEvent;
      tail : ^T_XSQEvent;
      qlen : longint;
      last_request_read : dword;
      request : dword;
      last_req : ^char;
      buffer : ^char;
      bufptr : ^char;
      bufmax : ^char;
      max_request_size : dword;
      db : ^T_XrmHashBucketRec;
      synchandler : function (_para1:PT_XDisplay):longint;cdecl;
      display_name : ^char;
      default_screen : longint;
      nscreens : longint;
      screens : ^TScreen;
      motion_buffer : dword;
;
      min_keycode : longint;
      max_keycode : longint;
      keysyms : ^TKeySym;
      modifiermap : ^TXModifierKeymap;
      keysyms_per_keycode : longint;
      xdefaults : ^char;
      scratch_buffer : ^char;
      scratch_length : dword;
      ext_number : longint;
      ext_procs : ^T_XExten;
      event_vec : array[0..127] of function (_para1:PTDisplay; _para2:PTXEvent; _para3:PTxEvent):TBool;cdecl;
      wire_vec : array[0..127] of function (_para1:PTDisplay; _para2:PTXEvent; _para3:PTxEvent):TStatus;cdecl;
      lock_meaning : TKeySym;
      lock : ^T_XLockInfo;
      async_handlers : ^T_XInternalAsync;
      bigreq_size : dword;
      lock_fns : ^T_XLockPtrs;
      idlist_alloc : procedure (_para1:PTDisplay; _para2:PTXID; _para3:longint);cdecl;
      key_bindings : ^T_XKeytrans;
      cursor_font : TFont;
      atoms : ^T_XDisplayAtoms;
      mode_switch : dword;
      num_lock : dword;
      context_db : ^T_XContextDB;
      error_vec : ^function (_para1:PTDisplay; _para2:PTXErrorEvent; _para3:PTxError):TBool;cdecl;
      cms : record
          defaultCCCs : TXPointer;
          clientCmaps : TXPointer;
          perVisualIntensityMaps : TXPointer;
        end;
      im_filters : ^T_XIMFilter;
      qfree : ^T_XSQEvent;
      next_event_serial_num : dword;
      flushes : ^T_XExten;
      im_fd_info : ^T_XConnectionInfo;
      im_fd_length : longint;
      conn_watchers : ^T_XConnWatchInfo;
      watcher_count : longint;
      filedes : TXPointer;
      savedsynchandler : function (_para1:PTDisplay):longint;cdecl;
      resource_max : TXID;
      xcmisc_opcode : longint;
      xkb_info : ^T_XkbInfoRec;
      trans_conn : ^T_XtransConnInfo;
      xcb : ^T_X11XCBPrivate;
      next_cookie : dword;
      generic_event_vec : array[0..127] of function (_para1:PTDisplay; _para2:PTXGenericEventCookie; _para3:PTxEvent):TBool;cdecl;
      generic_event_copy_vec : array[0..127] of function (_para1:PTDisplay; _para2:PTXGenericEventCookie; _para3:PTXGenericEventCookie):TBool;cdecl;
      cookiejar : pointer;
      last_request_read_upper32bit : dword;
      request_upper32bit : dword;
      error_threads : ^T_XErrorThreadInfo;
      exit_handler : TXIOErrorExitHandler;
      exit_handler_data : pointer;
    end;


function XAllocIDs(dpy,ids,n : longint) : longint;


//// {$ifndef LONG64}


function X_DPY_GET_REQUEST(dpy : longint) : longint;

//// (* error 
////             (value) & 0xFFFFFFFFUL), \
in define line 235 *)
    function X_DPY_GET_LAST_REQUEST_READ(dpy : longint) : longint;    

//// (* error 
////             (value) & 0xFFFFFFFFUL), \
in define line 254 *)

    function X_DPY_WIDEN_UNSIGNED_LONG_SEQ(dpy,ulseq : longint) : longint;    

//// (* error 
////         ((struct _XDisplay*)dpy)->request++, \
in define line 287 *)
//// (* error 
////                 ((struct _XDisplay*)dpy)->request--, /* wrap */ \
in define line 301 *)
//// {$else}


    function X_DPY_GET_REQUEST(dpy : longint) : longint;    

//// (* error 
////     ((struct _XDisplay*)dpy)->request = (value)
in define line 308 *)
    function X_DPY_GET_LAST_REQUEST_READ(dpy : longint) : longint;    

//// (* error 
////     ((struct _XDisplay*)dpy)->last_request_read = (value)
in define line 313 *)
    function X_DPY_WIDEN_UNSIGNED_LONG_SEQ(dpy,ulseq : longint) : longint;    

//// (* error 
//// #define X_DPY_REQUEST_INCREMENT(dpy) ((struct _XDisplay*)dpy)->request++
in define line 317 *)
//// (* error 
//// #define X_DPY_REQUEST_DECREMENT(dpy) ((struct _XDisplay*)dpy)->request--
in define line 318 *)
//// {$endif}
//// {$ifndef _XEVENT_}


    type
      T_XSQEvent = record
          next : ^T_XSQEvent;
          event : TXEvent;
          qserial_num : dword;
        end;
      T_XQEvent = T_XSQEvent;
//// {$endif}
//// {$include <X11/Xproto.h>}
//// {$ifdef __sgi}

//// {$define _SGI_MP_SOURCE}    
//// {$endif}
//// {$include <errno.h>}

    const
      _XBCOPYFUNC = _Xbcopy;      
//// {$include <X11/Xfuncs.h>}
//// {$include <X11/Xosdefs.h>}

//// {$ifdef dirty}
//// {$undef dirty}
//// {$endif}
//// {$include <stdlib.h>}
//// {$include <string.h>}
//// {$include <X11/Xfuncproto.h>}

//// {$ifdef XTHREADS}

//// (* error 
//// typedef struct _LockInfoRec *LockInfoPtr;
in declaration at line 365 *)


//// {$if defined(XTHREADS_WARN) || defined(XTHREADS_FILE_LINE)}
//// {$endif}
//// {$if defined(XTHREADS_WARN) || defined(XTHREADS_FILE_LINE)}
//// {$endif}
    type
      T_XLockPtrs = record
          lock_display : procedure (dpy:PTDisplay; file:Pchar; line:longint);cdecl;
          unlock_display : procedure (dpy:PTDisplay; file:Pchar; line:longint);cdecl;
        end;

//// {$if defined(WIN32) && !defined(_XLIBINT_)}
//// (* error 
//// #define _XCreateMutex_fn (*_XCreateMutex_fn_p)
in define line 387 *)
//// (* error 
//// #define _XFreeMutex_fn (*_XFreeMutex_fn_p)
in define line 388 *)
//// (* error 
//// #define _XLockMutex_fn (*_XLockMutex_fn_p)
in define line 389 *)
//// (* error 
//// #define _XUnlockMutex_fn (*_XUnlockMutex_fn_p)
in define line 390 *)
//// (* error 
//// #define _Xglobal_lock (*_Xglobal_lock_p)
in define line 391 *)
//// {$endif}


      var
        _XCreateMutex_fn : procedure (_para1:TLockInfoPtr);cvar;external;

        _XFreeMutex_fn : procedure (_para1:TLockInfoPtr);cvar;external;

//// {$if defined(XTHREADS_WARN) || defined(XTHREADS_FILE_LINE)}


//// {$endif}
      var
        _XLockMutex_fn : procedure (_para1:TLockInfoPtr; _para2:Pchar; _para3:longint);cvar;external;

//// {$if defined(XTHREADS_WARN) || defined(XTHREADS_FILE_LINE)}


//// {$endif}
      var
        _XUnlockMutex_fn : procedure (_para1:TLockInfoPtr; _para2:Pchar; _para3:longint);cvar;external;
        _Xglobal_lock : TLockInfoPtr;cvar;external;
//// {$if defined(XTHREADS_WARN) || defined(XTHREADS_FILE_LINE)}
//// (* error 
//// #define LockDisplay(d)	     if ((d)->lock_fns) (*(d)->lock_fns->lock_display)((d),__FILE__,__LINE__)
in define line 419 *)
//// (* error 
//// #define UnlockDisplay(d)     if ((d)->lock_fns) (*(d)->lock_fns->unlock_display)((d),__FILE__,__LINE__)
in define line 420 *)
//// (* error 
//// #define _XLockMutex(lock)		if (_XLockMutex_fn) (*_XLockMutex_fn)(lock,__FILE__,__LINE__)
in define line 421 *)
//// (* error 
//// #define _XUnlockMutex(lock)	if (_XUnlockMutex_fn) (*_XUnlockMutex_fn)(lock,__FILE__,__LINE__)
in define line 422 *)
//// {$else}

//// (* error 
//// #define LockDisplay(d)	     if ((d)->lock_fns) (*(d)->lock_fns->lock_display)(d)
in define line 425 *)
//// (* error 
//// #define UnlockDisplay(d)     if ((d)->lock_fns) (*(d)->lock_fns->unlock_display)(d)
in define line 426 *)
//// (* error 
//// #define _XLockMutex(lock)		if (_XLockMutex_fn) (*_XLockMutex_fn)(lock)
in define line 427 *)
//// (* error 
//// #define _XUnlockMutex(lock)	if (_XUnlockMutex_fn) (*_XUnlockMutex_fn)(lock)
in define line 428 *)
//// {$endif}
//// (* error 
//// #define _XCreateMutex(lock)	if (_XCreateMutex_fn) (*_XCreateMutex_fn)(lock);
in declaration at line 430 *)
//// (* error 
//// #define _XFreeMutex(lock)	if (_XFreeMutex_fn) (*_XFreeMutex_fn)(lock);
in declaration at line 431 *)
//// {$else}

//// (* error 
//// #define LockDisplay(dis)
in define line 434 *)
//// (* error 
//// #define _XLockMutex(lock)
in define line 435 *)
//// (* error 
//// #define _XUnlockMutex(lock)
in define line 436 *)
//// (* error 
//// #define UnlockDisplay(dis)
in define line 437 *)
//// (* error 
//// #define _XCreateMutex(lock)
in define line 438 *)
//// (* error 
//// #define _XFreeMutex(lock)
in define line 439 *)
//// {$endif}

    function Xfree(ptr : longint) : longint;    


//// {$if defined(MALLOC_0_RETURNS_NULL) || defined(__clang_analyzer__)}

    function Xmalloc(size : longint) : longint;    

    function Xrealloc(ptr,size : longint) : longint;    

    function Xcalloc(nelem,elsize : longint) : longint;    

//// {$else}

    function Xmalloc(size : longint) : longint;    

    function Xrealloc(ptr,size : longint) : longint;    

    function Xcalloc(nelem,elsize : longint) : longint;    

//// {$endif}
//// {$include <stddef.h>}

    const
      LOCKED = 1;      
      UNLOCKED = 0;      
//// {$ifndef BUFSIZE}


    const
      BUFSIZE = 2048;      
//// {$endif}
//// {$ifndef PTSPERBATCH}


    const
      PTSPERBATCH = 1024;      
//// {$endif}
//// {$ifndef WLNSPERBATCH}


    const
      WLNSPERBATCH = 50;      
//// {$endif}
//// {$ifndef ZLNSPERBATCH}


    const
      ZLNSPERBATCH = 1024;      
//// {$endif}
//// {$ifndef WRCTSPERBATCH}


    const
      WRCTSPERBATCH = 10;      
//// {$endif}
//// {$ifndef ZRCTSPERBATCH}


    const
      ZRCTSPERBATCH = 256;      
//// {$endif}
//// {$ifndef FRCTSPERBATCH}


    const
      FRCTSPERBATCH = 256;      
//// {$endif}
//// {$ifndef FARCSPERBATCH}


    const
      FARCSPERBATCH = 256;      
//// {$endif}
//// {$ifndef CURSORFONT}


    const
      CURSORFONT = 'cursor';      
//// {$endif}


    const
      XlibDisplayIOError = 1 shl 0;      
      XlibDisplayClosing = 1 shl 1;      
      XlibDisplayNoXkb = 1 shl 2;      
      XlibDisplayPrivSync = 1 shl 3;      

      XlibDisplayProcConni = 1 shl 4;      

      XlibDisplayReadEvents = 1 shl 5;      

      XlibDisplayReply = 1 shl 5;      

      XlibDisplayWriting = 1 shl 6;      

      XlibDisplayDfltRMDB = 1 shl 7;      


//// {$define WORD64ALIGN}    


function _XGetRequest(dpy:PTDisplay; _type:TCARD8; len:Tsize_t):pointer;cdecl;external;

//// (* error 
//// 	req = (x##name##Req *) _XGetRequest(dpy, X_##name, sz)
in define line 534 *)

//// (* error 
//// 	GetReqSized(name, SIZEOF(x##name##Req), req)
in define line 546 *)

//// (* error 
////         GetReqSized(name, SIZEOF(x##name##Req) + n, req)
in define line 552 *)

//// (* error 
//// 	req = (xResourceReq *) _XGetRequest(dpy, X_##name, SIZEOF(xResourceReq)); \
in declaration at line 561 *)
//// (* error 
//// 	req = (xResourceReq *) _XGetRequest(dpy, X_##name, SIZEOF(xResourceReq)); \
//// (* error 
//// 	if (req) req->id = (rid)

in define line 570 *)

//// {$ifdef LONG64}
//// (* error 
////     { \
in declaration at line 583 *)
//// (* error 
////     CARD64 _BRdat; \
//// (* error 
////     CARD32 _BRlen = req->length - 1; \
in declaration at line 584 *)
//// (* error 
////     CARD32 _BRlen = req->length - 1; \
//// (* error 
////     req->length = 0; \
in declaration at line 585 *)
//// (* error 
////     req->length = 0; \
//// (* error 
////     _BRdat = ((CARD32 *)req)[_BRlen]; \
in declaration at line 586 *)
//// (* error 
////     _BRdat = ((CARD32 *)req)[_BRlen]; \
//// (* error 
////     memmove(((char *)req) + 8, ((char *)req) + 4, (_BRlen - 1) << 2); \
in declaration at line 587 *)
//// (* error 
////     memmove(((char *)req) + 8, ((char *)req) + 4, (_BRlen - 1) << 2); \
//// (* error 
////     ((CARD32 *)req)[1] = _BRlen + n + 2; \
in declaration at line 588 *)
//// (* error 
////     ((CARD32 *)req)[1] = _BRlen + n + 2; \
//// (* error 
////     Data32(dpy, &_BRdat, 4); \
in declaration at line 589 *)
//// (* error 
////     Data32(dpy, &_BRdat, 4); \
//// (* error 
////     }
//// {$else}
in declaration at line 594 *)
//// (* error 
////     CARD32 _BRdat; \
//// (* error 
////     CARD32 _BRlen = req->length - 1; \
in declaration at line 595 *)
//// (* error 
////     CARD32 _BRlen = req->length - 1; \
//// (* error 
////     req->length = 0; \
in declaration at line 596 *)
//// (* error 
////     req->length = 0; \
//// (* error 
////     _BRdat = ((CARD32 *)req)[_BRlen]; \
in declaration at line 597 *)
//// (* error 
////     _BRdat = ((CARD32 *)req)[_BRlen]; \
//// (* error 
////     memmove(((char *)req) + 8, ((char *)req) + 4, (_BRlen - 1) << 2); \
in declaration at line 598 *)
//// (* error 
////     memmove(((char *)req) + 8, ((char *)req) + 4, (_BRlen - 1) << 2); \
//// (* error 
////     ((CARD32 *)req)[1] = _BRlen + n + 2; \
in declaration at line 599 *)
//// (* error 
////     ((CARD32 *)req)[1] = _BRlen + n + 2; \
//// (* error 
////     Data32(dpy, &_BRdat, 4); \
in declaration at line 600 *)
//// (* error 
////     Data32(dpy, &_BRdat, 4); \
//// (* error 
////     }
//// {$endif}

//// {$ifndef __clang_analyzer__}
in declaration at line 617 *)
//// (* error 
//// 	    n = badlen; \
//// (* error 
//// 	    req->length += n; \
in declaration at line 618 *)
//// (* error 
//// 	    req->length += n; \
//// (* error 
//// 	} \
//// {$else}
in define line 624 *)
//// {$endif}
//// (* error 
//// 	if (dpy->synchandler) (*dpy->synchandler)(dpy)
in define line 628 *)

procedure _XFlushGCCache(dpy:PTDisplay; gc:TGC);cdecl;external;
//// (* error 
//// 	if ((gc)->dirty) _XFlushGCCache((dpy), (gc))
in define line 632 *)

//// {$ifndef DataRoutineIsProcedure}
//// (* error 
//// #define Data(dpy, data, len) {\
in declaration at line 644 *)
//// (* error 
//// 		memcpy(dpy->bufptr, data, (int)(len));\
//// (* error 
//// 		dpy->bufptr += ((len) + 3) & ~3;\
in declaration at line 645 *)
//// (* error 
//// 		dpy->bufptr += ((len) + 3) & ~3;\
//// (* error 
//// 	} else\
in declaration at line 647 *)
//// (* error 
//// 		_XSend(dpy, data, len);\
//// (* error 
//// }
//// {$endif}


in declaration at line 668 *)
//// (* error 
////         _XFlush (dpy); \
//// (* error 
////     ptr = (type) dpy->bufptr; \
in declaration at line 669 *)
//// (* error 
////     ptr = (type) dpy->bufptr; \
//// (* error 
////     memset(ptr, '\0', n); \
in declaration at line 670 *)
//// (* error 
////     memset(ptr, '\0', n); \
//// (* error 
////     dpy->bufptr += (n);
in declaration at line 671 *)
//// (* error 
//// #define Data16(dpy, data, len) Data((dpy), (_Xconst char *)(data), (len))
in define line 673 *)

    function _XRead16Pad(dpy,data,len : longint) : longint;    

    function _XRead16(dpy,data,len : longint) : longint;    

//// {$ifdef LONG64}
//// (* error 
//// #define Data32(dpy, data, len) _XData32(dpy, (_Xconst long *)data, len)
in define line 677 *)
//// (* error 
//// 	     _Xconst long *data,
//// (* error 
//// 	     unsigned len
 in declarator_list *)
 in declarator_list *)
procedure _XRead32(dpy:PTDisplay; data:Plongint; len:longint);cdecl;external;
//// {$else}
//// (* error 
//// #define Data32(dpy, data, len) Data((dpy), (_Xconst char *)(data), (len))
in define line 689 *)

    function _XRead32(dpy,data,len : longint) : longint;    

//// {$endif}

    function PackData16(dpy,data,len : longint) : longint;    

    function PackData32(dpy,data,len : longint) : longint;    


    function PackData(dpy,data,len : longint) : longint;    

    function min(a,b : longint) : longint;    

    function max(a,b : longint) : longint;    

    function CI_NONEXISTCHAR(cs : longint) : longint;    


//// (* error 
//// { \
in declaration at line 715 *)
//// (* error 
////     cs = def; \
//// (* error 
////     if (col >= fs->min_char_or_byte2 && col <= fs->max_char_or_byte2) { \
in declaration at line 718 *)
//// (* error 
//// 	    cs = &fs->min_bounds; \
//// (* error 
//// 	} else { \
in declaration at line 720 *)
//// (* error 
//// 	    cs = &fs->per_char[(col - fs->min_char_or_byte2)]; \
//// (* error 
//// 	    if (CI_NONEXISTCHAR(cs)) cs = def; \
in declaration at line 721 *)
//// (* error 
//// 	    if (CI_NONEXISTCHAR(cs)) cs = def; \
//// (* error 
//// 	} \
in define line 727 *)

//// (* error 
//// { \
in declaration at line 737 *)
//// (* error 
////     cs = def; \
//// (* error 
////     if (row >= fs->min_byte1 && row <= fs->max_byte1 && \
in declaration at line 741 *)
//// (* error 
//// 	    cs = &fs->min_bounds; \
//// (* error 
//// 	} else { \
in declaration at line 746 *)
//// (* error 
//// 			       (col - fs->min_char_or_byte2)]; \
//// (* error 
//// 	    if (CI_NONEXISTCHAR(cs)) cs = def; \
in declaration at line 747 *)
//// (* error 
//// 	    if (CI_NONEXISTCHAR(cs)) cs = def; \
//// (* error 
////         } \
in declaration at line 754 *)
//// (* error 
////     unsigned int r = (fs->default_char >> 8); \
//// (* error 
////     unsigned int c = (fs->default_char & 0xff); \
in declaration at line 755 *)
//// (* error 
////     unsigned int c = (fs->default_char & 0xff); \
//// (* error 
////     CI_GET_CHAR_INFO_2D (fs, r, c, NULL, cs); \
in declaration at line 756 *)
//// (* error 
////     CI_GET_CHAR_INFO_2D (fs, r, c, NULL, cs); \
//// (* error 
//// }

in declaration at line 762 *)
//// (* error 
////   { *(CARD32 *)(dstaddr) = (srcvar); }
in declaration at line 766 *)


      var
        handler : function (_para1:PTDisplay; _para2:PTxReply; _para3:Pchar; _para4:longint; _para5:TXPointer):TBool;cvar;public;
        data : TXPointer;cvar;public;
//// (* error 
//// } _XAsyncHandler;
in declaration at line 784 *)

    type
      T_XAsyncEState = record
          min_sequence_number : dword;
          max_sequence_number : dword;
          error_code : byte;
          major_opcode : byte;
          minor_opcode : word;
          last_error_received : byte;
          error_count : longint;
        end;
      T_XAsyncErrorState = T_XAsyncEState;

procedure _XDeqAsyncHandler(dpy:PTDisplay; handler:PT_XAsyncHandler);cdecl;external;
//// (* error 
//// #define DeqAsyncHandler(dpy,handler) { \
in declaration at line 804 *)
//// (* error 
//// 	dpy->async_handlers = (handler)->next; \
//// (* error 
////     else \
in declaration at line 806 *)
//// (* error 
//// 	_XDeqAsyncHandler(dpy, handler); \
//// (* error 
////     }

in declaration at line 811 *)

    type

      TFreeModmapType = function (_para1:PTXModifierKeymap):longint;cdecl;











      T_XFreeFuncs = record
          atoms : TFreeFuncType;
          modifiermap : TFreeModmapType;
          key_bindings : TFreeFuncType;
          context_db : TFreeFuncType;
          defaultCCCs : TFreeFuncType;
          clientCmaps : TFreeFuncType;
          intensityMaps : TFreeFuncType;
          im_filters : TFreeFuncType;
          xkb : TFreeFuncType;
        end;
      T_XFreeFuncRec = T_XFreeFuncs;



      TCreateGCType = function (_para1:PTDisplay; _para2:TGC; _para3:PTXExtCodes):longint;cdecl;


      TCopyGCType = function (_para1:PTDisplay; _para2:TGC; _para3:PTXExtCodes):longint;cdecl;


      TFlushGCType = function (_para1:PTDisplay; _para2:TGC; _para3:PTXExtCodes):longint;cdecl;


      TFreeGCType = function (_para1:PTDisplay; _para2:TGC; _para3:PTXExtCodes):longint;cdecl;


      TCreateFontType = function (_para1:PTDisplay; _para2:PTXFontStruct; _para3:PTXExtCodes):longint;cdecl;


      TFreeFontType = function (_para1:PTDisplay; _para2:PTXFontStruct; _para3:PTXExtCodes):longint;cdecl;


      TCloseDisplayType = function (_para1:PTDisplay; _para2:PTXExtCodes):longint;cdecl;


      TErrorType = function (_para1:PTDisplay; _para2:PTxError; _para3:PTXExtCodes; _para4:Plongint):longint;cdecl;


      TErrorStringType = function (_para1:PTDisplay; _para2:longint; _para3:PTXExtCodes; _para4:Pchar; _para5:longint):Pchar;cdecl;


      TPrintErrorType = procedure (_para1:PTDisplay; _para2:PTXErrorEvent; _para3:pointer);cdecl;
//// (* error 
////     _Xconst char* /* data */,

in declaration at line 900 *)


















      T_XExten = record
          next : ^T_XExten;
          codes : TXExtCodes;
          create_GC : TCreateGCType;
          copy_GC : TCopyGCType;
          flush_GC : TFlushGCType;
          free_GC : TFreeGCType;
          create_Font : TCreateFontType;
          free_Font : TFreeFontType;
          close_display : TCloseDisplayType;
          error : TErrorType;
          error_string : TErrorStringType;
          name : ^char;
          error_values : TPrintErrorType;
          before_flush : TBeforeFlushType;
          next_flush : ^T_XExten;
        end;
      T_XExtension = T_XExten;

//// {$ifdef DataRoutineIsProcedure}

procedure Data(dpy:PTDisplay; data:Pchar; len:longint);cdecl;external;
//// {$endif}


function _XError(_para1:PTDisplay; _para2:PTxError):longint;cdecl;external;

function _XIOError(_para1:PTDisplay):longint;cdecl;external;

      var
        _XIOErrorFunction : function (_para1:PTDisplay):longint;cvar;external;

        _XErrorFunction : function (_para1:PTDisplay; _para2:PTXErrorEvent):longint;cvar;external;

//// (* error 
//// ) _X_COLD;
 in declarator_list *)
 : pointer;

//// (* error 
//// ) _X_COLD;
 in declarator_list *)
 : pointer;
//// {$if defined(__SUNPRO_C) /* Studio compiler alternative to "cold" attribute */}
//// {$endif}


function _XAllocScratch(_para1:PTDisplay; _para2:dword):^char;cdecl;external;

function _XAllocTemp(_para1:PTDisplay; _para2:dword):^char;cdecl;external;

procedure _XFreeTemp(_para1:PTDisplay; _para2:Pchar; _para3:dword);cdecl;external;

function _XVIDtoVisual(_para1:PTDisplay; _para2:TVisualID):^TVisual;cdecl;external;

function _XSetLastRequestRead(_para1:PTDisplay; _para2:PTxGenericReply):dword;cdecl;external;

function _XGetHostname(_para1:Pchar; _para2:longint):longint;cdecl;external;

function _XScreenOfWindow(_para1:PTDisplay; _para2:TWindow):^TScreen;cdecl;external;

function _XAsyncErrorHandler(_para1:PTDisplay; _para2:PTxReply; _para3:Pchar; _para4:longint; _para5:TXPointer):TBool;cdecl;external;

function _XGetAsyncReply(_para1:PTDisplay; _para2:Pchar; _para3:PTxReply; _para4:Pchar; _para5:longint; 
               _para6:longint; _para7:TBool):^char;cdecl;external;

procedure _XGetAsyncData(_para1:PTDisplay; _para2:Pchar; _para3:Pchar; _para4:longint; _para5:longint; 
                _para6:longint; _para7:longint);cdecl;external;

procedure _XFlush(_para1:PTDisplay);cdecl;external;

function _XEventsQueued(_para1:PTDisplay; _para2:longint):longint;cdecl;external;

procedure _XReadEvents(_para1:PTDisplay);cdecl;external;

function _XRead(_para1:PTDisplay; _para2:Pchar; _para3:longint):longint;cdecl;external;

procedure _XReadPad(_para1:PTDisplay; _para2:Pchar; _para3:longint);cdecl;external;
//// (* error 
////     _Xconst char*	/* data */,
//// (* error 
////     long		/* size */

 in declarator_list *)
 in declarator_list *)

function _XReply(_para1:PTDisplay; _para2:PTxReply; _para3:longint; _para4:TBool):TStatus;cdecl;external;

procedure _XEnq(_para1:PTDisplay; _para2:PTxEvent);cdecl;external;

procedure _XDeq(_para1:PTDisplay; _para2:PT_XQEvent; _para3:PT_XQEvent);cdecl;external;

function _XUnknownWireEvent(_para1:PTDisplay; _para2:PTXEvent; _para3:PTxEvent):TBool;cdecl;external;

function _XUnknownWireEventCookie(_para1:PTDisplay; _para2:PTXGenericEventCookie; _para3:PTxEvent):TBool;cdecl;external;

function _XUnknownCopyEventCookie(_para1:PTDisplay; _para2:PTXGenericEventCookie; _para3:PTXGenericEventCookie):TBool;cdecl;external;

function _XUnknownNativeEvent(_para1:PTDisplay; _para2:PTXEvent; _para3:PTxEvent):TStatus;cdecl;external;
function _XWireToEvent(dpy:PTDisplay; re:PTXEvent; event:PTxEvent):TBool;cdecl;external;
function _XDefaultWireError(display:PTDisplay; he:PTXErrorEvent; we:PTxError):TBool;cdecl;external;
function _XPollfdCacheInit(dpy:PTDisplay):TBool;cdecl;external;
procedure _XPollfdCacheAdd(dpy:PTDisplay; fd:longint);cdecl;external;
procedure _XPollfdCacheDel(dpy:PTDisplay; fd:longint);cdecl;external;
function _XAllocID(dpy:PTDisplay):TXID;cdecl;external;
procedure _XAllocIDs(dpy:PTDisplay; ids:PTXID; count:longint);cdecl;external;

function _XFreeExtData(_para1:PTXExtData):longint;cdecl;external;


function XESetCreateGC(_para1:PTDisplay; _para2:longint; _para3:function (_para1:PTDisplay; _para2:TGC; _para3:PTXExtCodes):longint):function (_para1:PTDisplay; _para2:TGC; _para3:PTXExtCodes):longint;cdecl;external;


function XESetCopyGC(_para1:PTDisplay; _para2:longint; _para3:function (_para1:PTDisplay; _para2:TGC; _para3:PTXExtCodes):longint):function (_para1:PTDisplay; _para2:TGC; _para3:PTXExtCodes):longint;cdecl;external;


function XESetFlushGC(_para1:PTDisplay; _para2:longint; _para3:function (_para1:PTDisplay; _para2:TGC; _para3:PTXExtCodes):longint):function (_para1:PTDisplay; _para2:TGC; _para3:PTXExtCodes):longint;cdecl;external;


function XESetFreeGC(_para1:PTDisplay; _para2:longint; _para3:function (_para1:PTDisplay; _para2:TGC; _para3:PTXExtCodes):longint):function (_para1:PTDisplay; _para2:TGC; _para3:PTXExtCodes):longint;cdecl;external;


function XESetCreateFont(_para1:PTDisplay; _para2:longint; _para3:function (_para1:PTDisplay; _para2:PTXFontStruct; _para3:PTXExtCodes):longint):function (_para1:PTDisplay; _para2:PTXFontStruct; _para3:PTXExtCodes):longint;cdecl;external;


function XESetFreeFont(_para1:PTDisplay; _para2:longint; _para3:function (_para1:PTDisplay; _para2:PTXFontStruct; _para3:PTXExtCodes):longint):function (_para1:PTDisplay; _para2:PTXFontStruct; _para3:PTXExtCodes):longint;cdecl;external;


function XESetCloseDisplay(_para1:PTDisplay; _para2:longint; _para3:function (_para1:PTDisplay; _para2:PTXExtCodes):longint):function (_para1:PTDisplay; _para2:PTXExtCodes):longint;cdecl;external;


function XESetError(_para1:PTDisplay; _para2:longint; _para3:function (_para1:PTDisplay; _para2:PTxError; _para3:PTXExtCodes; _para4:Plongint):longint):function (_para1:PTDisplay; _para2:PTxError; _para3:PTXExtCodes; _para4:Plongint):longint;cdecl;external;


function XESetErrorString(_para1:PTDisplay; _para2:longint; _para3:Pfunction (_para1:PTDisplay; _para2:longint; _para3:PTXExtCodes; _para4:Pchar; _para5:longint):char):function (_para1:PTDisplay; _para2:longint; _para3:PTXExtCodes; _para4:Pchar; _para5:longint):Pchar;cdecl;external;


function XESetPrintErrorValues(_para1:PTDisplay; _para2:longint; _para3:procedure (_para1:PTDisplay; _para2:PTXErrorEvent; _para3:pointer)):procedure (_para1:PTDisplay; _para2:PTXErrorEvent; _para3:pointer);cdecl;external;


function XESetWireToEvent(_para1:PTDisplay; _para2:longint; _para3:function (_para1:PTDisplay; _para2:PTXEvent; _para3:PTxEvent):TBool):function (_para1:PTDisplay; _para2:PTXEvent; _para3:PTxEvent):TBool;cdecl;external;


function XESetWireToEventCookie(_para1:PTDisplay; _para2:longint; _para3:function (_para1:PTDisplay; _para2:PTXGenericEventCookie; _para3:PTxEvent):TBool):function (_para1:PTDisplay; _para2:PTXGenericEventCookie; _para3:PTxEvent):TBool;cdecl;external;


function XESetCopyEventCookie(_para1:PTDisplay; _para2:longint; _para3:function (_para1:PTDisplay; _para2:PTXGenericEventCookie; _para3:PTXGenericEventCookie):TBool):function (_para1:PTDisplay; _para2:PTXGenericEventCookie; _para3:PTXGenericEventCookie):TBool;cdecl;external;


function XESetEventToWire(_para1:PTDisplay; _para2:longint; _para3:function (_para1:PTDisplay; _para2:PTXEvent; _para3:PTxEvent):TStatus):function (_para1:PTDisplay; _para2:PTXEvent; _para3:PTxEvent):TStatus;cdecl;external;


function XESetWireToError(_para1:PTDisplay; _para2:longint; _para3:function (_para1:PTDisplay; _para2:PTXErrorEvent; _para3:PTxError):TBool):function (_para1:PTDisplay; _para2:PTXErrorEvent; _para3:PTxError):TBool;cdecl;external;
//// (* error 
//// 	       _Xconst char*		/* data */,
//// (* error 
//// 	       long			/* len */


//// (* error 
////     Display*, XExtCodes*, _Xconst char*, long
//// (* error 
////     Display*, XExtCodes*, _Xconst char*, long
//// (* error 
////     Display*, XExtCodes*, _Xconst char*, long
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)


    type

      T_XInternalConnectionProc = procedure (_para1:PTDisplay; _para2:longint; _para3:TXPointer);cdecl;


function _XRegisterInternalConnection(_para1:PTDisplay; _para2:longint; _para3:T_XInternalConnectionProc; _para4:TXPointer):TStatus;cdecl;external;

procedure _XUnregisterInternalConnection(_para1:PTDisplay; _para2:longint);cdecl;external;

procedure _XProcessInternalConnection(_para1:PTDisplay; _para2:PT_XConnectionInfo);cdecl;external;



    type
      T_XConnectionInfo = record
          fd : longint;cdecl;
          read_callback : T_XInternalConnectionProc;
          call_data : TXPointer;
          watch_data : ^TXPointer;
          next : ^T_XConnectionInfo;
        end;


      T_XConnWatchInfo = record
          fn : TXConnectionWatchProc;
          client_data : TXPointer;
          next : ^T_XConnWatchInfo;
        end;

//// {$ifdef __UNIXOS2__}

function __XOS2RedirRoot(_para1:Pchar):^char;cdecl;external;
//// {$endif}
//// (* error 
////     _Xconst char*	/* string */,
//// (* error 
////     int			/* count */

 in declarator_list *)
 in declarator_list *)
//// (* error 
////     _Xconst XChar2b*	/* string */,
//// (* error 
////     int			/* count */

 in declarator_list *)
 in declarator_list *)
//// {$if defined(WIN32)}
//// (* error 
////     _Xconst char*	/* path */,
//// (* error 
////     int			/* flags */

 in declarator_list *)
 in declarator_list *)
//// (* error 
////     _Xconst char*	/* path */,
//// (* error 
////     int			/* flags */,

//// (* error 
//// );
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     _Xconst char*	/* path */,
//// (* error 
////     _Xconst char*	/* mode */

 in declarator_list *)
 in declarator_list *)
//// (* error 
////     _Xconst char*	/* path */

 in declarator_list *)
//// {$else}

    function _XOpenFile(path,flags : longint) : longint;    

    function _XOpenFileMode(path,flags,mode : longint) : longint;    

    function _XFopenFile(path,mode : longint) : longint;    

//// {$endif}


function _XEventToWire(dpy:PTDisplay; re:PTXEvent; event:PTxEvent):TStatus;cdecl;external;
//// (* error 
////     _Xconst char*	/* name*/,
//// (* error 
////     XFontStruct**	/* xfp*/,
//// (* error 
////     Font*		/* fidp */

 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
procedure _XProcessWindowAttributes(dpy:PTDisplay; req:PTxChangeWindowAttributesReq; valuemask:dword; attributes:PTXSetWindowAttributes);cdecl;external;
function _XDefaultError(dpy:PTDisplay; event:PTXErrorEvent):longint;cdecl;external;
function _XDefaultIOError(dpy:PTDisplay):longint;cdecl;external;
procedure _XDefaultIOErrorExit(dpy:PTDisplay; user_data:pointer);cdecl;external;
procedure _XSetClipRectangles(dpy:PTDisplay; gc:TGC; clip_x_origin:longint; clip_y_origin:longint; rectangles:PTXRectangle; 
                n:longint; ordering:longint);cdecl;external;
function _XGetWindowAttributes(dpy:PTDisplay; w:TWindow; attr:PTXWindowAttributes):TStatus;cdecl;external;
function _XPutBackEvent(dpy:PTDisplay; event:PTXEvent):longint;cdecl;external;
function _XIsEventCookie(dpy:PTDisplay; ev:PTXEvent):TBool;cdecl;external;
procedure _XFreeEventCookies(dpy:PTDisplay);cdecl;external;
procedure _XStoreEventCookie(dpy:PTDisplay; ev:PTXEvent);cdecl;external;
function _XFetchEventCookie(dpy:PTDisplay; ev:PTXGenericEventCookie):TBool;cdecl;external;
function _XCopyEventCookie(dpy:PTDisplay; in:PTXGenericEventCookie; out:PTXGenericEventCookie):TBool;cdecl;external;

procedure xlocaledir(buf:Pchar; buf_len:longint);cdecl;external;
//// {$ifdef __clang__}
//// {$endif}
//// {$endif}

//// (* error 
//// #endif /* _X11_XLIBINT_H_ */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/XWDFile.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/XWDFile.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/XWDFile.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef XWDFILE_H}
//// {$define XWDFILE_H}
//// {$include <X11/Xmd.h>}

const
  XWD_FILE_VERSION = 7;  
  sz_XWDheader = 100;  
  sz_XWDColor = 12;  
type
  Txwdval = TCARD32;




























  T_xwd_file_header = record
      header_size : TCARD32;
      file_version : TCARD32;
      pixmap_format : TCARD32;
      pixmap_depth : TCARD32;
      pixmap_width : TCARD32;
      pixmap_height : TCARD32;
      xoffset : TCARD32;
      byte_order : TCARD32;
      bitmap_unit : TCARD32;
      bitmap_bit_order : TCARD32;
      bitmap_pad : TCARD32;
      bits_per_pixel : TCARD32;
      bytes_per_line : TCARD32;
      visual_class : TCARD32;
      red_mask : TCARD32;
      green_mask : TCARD32;
      blue_mask : TCARD32;
      bits_per_rgb : TCARD32;
      colormap_entries : TCARD32;
      ncolors : TCARD32;
      window_width : TCARD32;
      window_height : TCARD32;
      window_x : TCARD32;
      window_y : TCARD32;
      window_bdrwidth : TCARD32;
    end;
  TXWDFileHeader = T_xwd_file_header;



  TXWDColor = record
      pixel : TCARD32;
      red : TCARD16;
      green : TCARD16;
      blue : TCARD16;
      flags : TCARD8;
      pad : TCARD8;
    end;

//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xauth.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xauth.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xauth.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    PFILE  = ^FILE;
    PXauth  = ^Xauth;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _Xauth_h}
//// {$define _Xauth_h}

//// {$ifdef __clang__}
//// {$endif}
type
  Txauth = record
      family : word;
      address_length : word;
      address : ^char;
      number_length : word;
      number : ^char;
      name_length : word;
      name : ^char;
      data_length : word;
      data : ^char;
    end;
//// {$ifdef __clang__}
//// {$endif}
//// {$ifndef _XAUTH_STRUCT_ONLY}
//// {$include   <X11/Xfuncproto.h>}
//// {$include   <X11/Xfuncs.h>}
//// {$include   <stdio.h>}


const
  FamilyLocal = 256;  
  FamilyWild = 65535;  

  FamilyNetname = 254;  

  FamilyKrb5Principal = 253;  

  FamilyLocalHost = 252;  
//// (* error 
//// char *XauFileName(void);
in declaration at line 70 *)


function XauReadAuth(_para1:PTFILE):^TXauth;cdecl;external;
//// (* error 
//// _Xconst char*	/* file_name */,
//// (* error 
//// int		/* retries */,
//// (* error 
//// int		/* timeout */,
//// (* error 
//// long		/* dead */

 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
//// _Xconst char*	/* file_name */

 in declarator_list *)

function XauWriteAuth(_para1:PTFILE; _para2:PTXauth):longint;cdecl;external;
//// {$if NeedWidePrototypes}
//// {$else}
//// {$endif}
//// (* error 
//// _Xconst char*	/* address */,
//// {$if NeedWidePrototypes}
//// (* error 
//// unsigned int	/* number_length */,
//// {$else}
//// (* error 
//// unsigned short	/* number_length */,
//// {$endif}
//// (* error 
//// _Xconst char*	/* number */,
//// {$if NeedWidePrototypes}
//// (* error 
//// unsigned int	/* name_length */,
//// {$else}
//// (* error 
//// unsigned short	/* name_length */,
//// {$endif}
//// (* error 
//// _Xconst char*	/* name */

 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// {$if NeedWidePrototypes}
//// {$else}
//// {$endif}
//// (* error 
//// _Xconst char*	/* address */,
//// {$if NeedWidePrototypes}
//// (* error 
//// unsigned int	/* number_length */,
//// {$else}
//// (* error 
//// unsigned short	/* number_length */,
//// {$endif}
//// (* error 
//// _Xconst char*	/* number */,
//// (* error 
//// int		/* types_length */,
//// (* error 
//// char**		/* type_names */,
//// (* error 
//// _Xconst int*	/* type_lengths */

 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)


procedure XauDisposeAuth(_para1:PTXauth);cdecl;external;

//// (* error 
//// # define LOCK_SUCCESS	0	/* lock succeeded */

in define line 143 *)

    const
      LOCK_ERROR = 1;      

      LOCK_TIMEOUT = 2;      
//// {$endif}

//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/keysym.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/keysym.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/keysym.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$define XK_MISCELLANY}
//// {$define XK_XKB_KEYS}
//// {$define XK_LATIN1}
//// {$define XK_LATIN2}
//// {$define XK_LATIN3}
//// {$define XK_LATIN4}
//// {$define XK_LATIN8}
//// {$define XK_LATIN9}
//// {$define XK_CAUCASUS}
//// {$define XK_GREEK}
//// {$define XK_KATAKANA}
//// {$define XK_ARABIC}
//// {$define XK_CYRILLIC}
//// {$define XK_HEBREW}
//// {$define XK_THAI}
//// {$define XK_KOREAN}
//// {$define XK_ARMENIAN}
//// {$define XK_GEORGIAN}
//// {$define XK_VIETNAMESE}
//// {$define XK_CURRENCY}
//// {$define XK_MATHEMATICAL}
//// {$define XK_BRAILLE}
//// {$define XK_SINHALA}
//// {$include <X11/keysymdef.h>}

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xarch.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xarch.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xarch.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}


//// {$ifndef _XARCH_H_}
//// {$define _XARCH_H_}



//// {$ifdef X_BYTE_ORDER}

const
  X_BIG_ENDIAN = 4321;  
  X_LITTLE_ENDIAN = 1234;  
//// {$else}
//// {$if defined(SVR4) || defined(__SVR4)}
//// {$include <sys/types.h>}
//// {$include <sys/byteorder.h>}
//// {$else defined(CSRG_BASED)}
//// {$if defined(__NetBSD__) || defined(__OpenBSD__)}
//// {$include <sys/types.h>}
//// {$endif}
//// {$include <machine/endian.h>}
//// {$else defined(linux)}
//// {$if defined __STRICT_ANSI__}
//// {$undef __STRICT_ANSI__}
//// {$include <endian.h>}
//// {$define __STRICT_ANSI__}
//// {$else}
//// {$include <endian.h>}
//// {$endif}

//// {$if !defined(LITTLE_ENDIAN) && defined(__LITTLE_ENDIAN)}

const
  LITTLE_ENDIAN = __LITTLE_ENDIAN;  
//// {$endif}
//// {$if !defined(BIG_ENDIAN) && defined(__BIG_ENDIAN)}

const
  BIG_ENDIAN = __BIG_ENDIAN;  
//// {$endif}
//// {$if !defined(PDP_ENDIAN) && defined(__PDP_ENDIAN)}

const
  PDP_ENDIAN = __PDP_ENDIAN;  
//// {$endif}
//// {$if !defined(BYTE_ORDER) && defined(__BYTE_ORDER)}

const
  BYTE_ORDER = __BYTE_ORDER;  
//// {$endif}
//// {$endif}
//// {$ifndef BYTE_ORDER}

const
  LITTLE_ENDIAN = 1234;  
  BIG_ENDIAN = 4321;  
//// {$if defined(__sun) && defined(__SVR4)}
//// {$include <sys/isa_defs.h>}
//// {$ifdef _LITTLE_ENDIAN}

const
  BYTE_ORDER = LITTLE_ENDIAN;  
//// {$endif}
//// {$ifdef _BIG_ENDIAN}

const
  BYTE_ORDER = BIG_ENDIAN;  
//// {$endif}
//// {$endif}

//// {$endif}


const
  X_BYTE_ORDER = BYTE_ORDER;  
  X_BIG_ENDIAN = BIG_ENDIAN;  
  X_LITTLE_ENDIAN = LITTLE_ENDIAN;  
//// {$endif}

//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xresource.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xresource.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xresource.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    PDisplay  = ^Display;
    PXrmDatabase  = ^XrmDatabase;
    PXrmRepresentation  = ^XrmRepresentation;
    PXrmValue  = ^XrmValue;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _X11_XRESOURCE_H_}
//// {$define _X11_XRESOURCE_H_}
//// {$ifndef _XP_PRINT_SERVER_}
//// {$include <X11/Xlib.h>}
//// {$endif}


//// (* error 
//// extern char *Xpermalloc(

in declaration at line 76 *)

    type
      TXrmQuark = longint;
      TXrmQuarkList = ^TXrmQuark;

    function NULLQUARK : TXrmQuark;      

    type
      TXrmString = ^char;

    function NULLSTRING : TXrmString;      


//// (* error 
////     _Xconst char* 	/* string */

 in declarator_list *)
//// (* error 
////     _Xconst char* 	/* string */

 in declarator_list *)


function XrmQuarkToString(_para1:TXrmQuark):TXrmString;cdecl;external;
function XrmUniqueQuark:TXrmQuark;cdecl;external;
    function XrmStringsEqual(a1,a2 : longint) : longint;    


    type
      TXrmBinding = (XrmBindTightly,XrmBindLoosely);
      TXrmBindingList = ^TXrmBinding;
//// (* error 
////     _Xconst char*	/* string */,

//// (* error 
//// );
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     _Xconst char*	/* string */,
 in declarator_list *)

//// (* error 
//// );
 in declarator_list *)


      TXrmName = TXrmQuark;

      TXrmNameList = TXrmQuarkList;

    function XrmNameToString(name : longint) : longint;    

    function XrmStringToName(_string : longint) : longint;    

    function XrmStringToNameList(str,name : longint) : longint;    

    type
      TXrmClass = TXrmQuark;

      TXrmClassList = TXrmQuarkList;

    function XrmClassToString(c_class : longint) : longint;    

    function XrmStringToClass(c_class : longint) : longint;    

    function XrmStringToClassList(str,c_class : longint) : longint;    


    type
      TXrmRepresentation = TXrmQuark;

    function XrmStringToRepresentation(_string : longint) : longint;    

    function XrmRepresentationToString(_type : longint) : longint;    

    type
      TXrmValue = record
          size : dword;
          addr : TXPointer;
        end;
      TXrmValuePtr = ^TXrmValue;


      TXrmHashBucket = ^T_XrmHashBucketRec;

      TXrmHashTable = ^TXrmHashBucket;

      TXrmSearchList = ^TXrmHashTable;

      TXrmDatabase = ^T_XrmHashBucketRec;


procedure XrmDestroyDatabase(_para1:TXrmDatabase);cdecl;external;

procedure XrmQPutResource(_para1:PTXrmDatabase; _para2:TXrmBindingList; _para3:TXrmQuarkList; _para4:TXrmRepresentation; _para5:PTXrmValue);cdecl;external;
//// (* error 
////     _Xconst char*	/* specifier */,
//// (* error 
////     _Xconst char*	/* type */,
//// (* error 
////     XrmValue*		/* value */

 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     _Xconst char*	/* value */

 in declarator_list *)
//// (* error 
////     _Xconst char*	/* specifier */,
//// (* error 
////     _Xconst char*	/* value */

 in declarator_list *)
 in declarator_list *)
//// (* error 
////     _Xconst char*	/* line */

 in declarator_list *)

function XrmQGetResource(_para1:TXrmDatabase; _para2:TXrmNameList; _para3:TXrmClassList; _para4:PTXrmRepresentation; _para5:PTXrmValue):TBool;cdecl;external;
//// (* error 
////     _Xconst char*	/* str_name */,
//// (* error 
////     _Xconst char*	/* str_class */,
//// (* error 
////     char**		/* str_type_return */,
//// (* error 
////     XrmValue*		/* value_return */

 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)

function XrmQGetSearchList(_para1:TXrmDatabase; _para2:TXrmNameList; _para3:TXrmClassList; _para4:TXrmSearchList; _para5:longint):TBool;cdecl;external;

function XrmQGetSearchResource(_para1:TXrmSearchList; _para2:TXrmName; _para3:TXrmClass; _para4:PTXrmRepresentation; _para5:PTXrmValue):TBool;cdecl;external;

//// {$ifndef _XP_PRINT_SERVER_}


procedure XrmSetDatabase(_para1:PTDisplay; _para2:TXrmDatabase);cdecl;external;

function XrmGetDatabase(_para1:PTDisplay):TXrmDatabase;cdecl;external;
//// {$endif}

//// (* error 
////     _Xconst char*	/* filename */

 in declarator_list *)
//// (* error 
////     _Xconst char* 	/* filename */,
//// (* error 
////     XrmDatabase*	/* target */,

//// (* error 
//// );
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     _Xconst char*	/* data */  /*  null terminated string */

 in declarator_list *)
//// (* error 
////     _Xconst char*	/* filename */

 in declarator_list *)


procedure XrmMergeDatabases(_para1:TXrmDatabase; _para2:PTXrmDatabase);cdecl;external;

procedure XrmCombineDatabase(_para1:TXrmDatabase; _para2:PTXrmDatabase; _para3:TBool);cdecl;external;
    const
      XrmEnumAllLevels = 0;      
      XrmEnumOneLevel = 1;      



function XrmEnumerateDatabase(_para1:TXrmDatabase; _para2:TXrmNameList; _para3:TXrmClassList; _para4:longint; _para5:function (_para1:PTXrmDatabase; _para2:TXrmBindingList; _para3:TXrmQuarkList; _para4:PTXrmRepresentation; _para5:PTXrmValue; 
                          _para6:TXPointer):TBool; 
               _para6:TXPointer):TBool;cdecl;external;

function XrmLocaleOfDatabase(_para1:TXrmDatabase):^char;cdecl;external;









    type
      TXrmOptionKind = (XrmoptionNoArg,XrmoptionIsArg,XrmoptionStickyArg,
        XrmoptionSepArg,XrmoptionResArg,XrmoptionSkipArg,
        XrmoptionSkipLine,XrmoptionSkipNArgs
        );





      TXrmOptionDescRec = record
          option : ^char;
          specifier : ^char;
          argKind : TXrmOptionKind;
          value : TXPointer;
        end;
      TXrmOptionDescList = ^TXrmOptionDescRec;
//// (* error 
////     _Xconst char*	/* name */,
//// (* error 
////     int*		/* argc_in_out */,
//// (* error 
////     char**		/* argv_in_out */

 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// {$endif}


//// (* error 
//// /* DON'T ADD STUFF AFTER THIS #endif */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Object.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Object.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Object.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XtObject_h}
//// {$define _XtObject_h}
//// (* error 
//// typedef struct _ObjectRec *Object;
in declaration at line 53 *)
    type
      TObjectClass = ^T_ObjectClassRec;
//// {$ifndef VMS}
//// (* error 
//// externalref WidgetClass objectClass;
 in declarator_list *)
//// {$endif}
//// {$endif}


//// (* error 
//// /* DON'T ADD STUFF AFTER THIS #endif */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/ImUtil.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/ImUtil.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/ImUtil.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

Type
Pbyte  = ^byte;
PDisplay  = ^Display;
PXImage  = ^XImage;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}


//// {$ifndef _X11_IMUTIL_H_}
//// {$define _X11_IMUTIL_H_}

function _XGetScanlinePad(dpy:PTDisplay; depth:longint):longint;cdecl;external;
function _XGetBitsPerPixel(dpy:PTDisplay; depth:longint):longint;cdecl;external;
function _XSetImage(srcimg:PTXImage; dstimg:PTXImage; x:longint; y:longint):longint;cdecl;external;
function _XReverse_Bytes(bpt:Pbyte; nb:longint):longint;cdecl;external;
procedure _XInitImageFuncPtrs(image:PTXImage);cdecl;external;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/IntrinsicP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/IntrinsicP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/IntrinsicP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    PBoolean  = ^Boolean;
    PCardinal  = ^Cardinal;
    PTime  = ^Time;
    PVisual  = ^Visual;
    PWidget  = ^Widget;
    PXEvent  = ^XEvent;
    PXSetWindowAttributes  = ^XSetWindowAttributes;
    PXtPointer  = ^XtPointer;
    PXtValueMask  = ^XtValueMask;
    PXtWidgetGeometry  = ^XtWidgetGeometry;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XtintrinsicP_h}
//// {$define _XtintrinsicP_h}
//// {$include <X11/Intrinsic.h>}








type
  TXrmResource = record
      xrm_name : longint;
      xrm_class : longint;
      xrm_type : longint;
      xrm_size : TCardinal;
      xrm_offset : longint;
      xrm_default_type : longint;
      xrm_default_addr : TXtPointer;
    end;
  TXrmResourceList = ^TXrmResource;

  TXtVersionType = dword;

const
  XT_VERSION = 11;  
//// {$ifndef XT_REVISION}

const
  XT_REVISION = 6;  
//// {$endif}
//// (* error 
//// #define XtVersion (XT_VERSION * 1000 + XT_REVISION)
in define line 74 *)

    const
      XtVersionDontCheck = 0;      
    type

      TXtProc = procedure (_para1:pointer);cdecl;


      TXtWidgetClassProc = procedure (_para1:TWidgetClass);cdecl;


      TXtWidgetProc = procedure (_para1:TWidget);cdecl;


      TXtAcceptFocusProc = function (_para1:TWidget; _para2:PTTime):TBoolean;cdecl;


      TXtArgsProc = procedure (_para1:TWidget; _para2:TArgList; _para3:PTCardinal);cdecl;


      TXtInitProc = procedure (_para1:TWidget; _para2:TWidget; _para3:TArgList; _para4:PTCardinal);cdecl;


      TXtSetValuesFunc = function (_para1:TWidget; _para2:TWidget; _para3:TWidget; _para4:TArgList; _para5:PTCardinal):TBoolean;cdecl;


      TXtArgsFunc = function (_para1:TWidget; _para2:TArgList; _para3:PTCardinal):TBoolean;cdecl;


      TXtAlmostProc = procedure (_para1:TWidget; _para2:TWidget; _para3:PTXtWidgetGeometry; _para4:PTXtWidgetGeometry);cdecl;


      TXtExposeProc = procedure (_para1:TWidget; _para2:PTXEvent; _para3:TRegion);cdecl;


    function XtExposeNoCompress : TXtEnum;      

    function XtExposeCompressSeries : TXtEnum;      

    const
      XtExposeCompressMultiple = 2;      
      XtExposeCompressMaximal = 3;      

      XtExposeGraphicsExpose = $10;      
      XtExposeGraphicsExposeMerged = $20;      
      XtExposeNoExpose = $40;      
      XtExposeNoRegion = $80;      

    type

      TXtRealizeProc = procedure (_para1:TWidget; _para2:PTXtValueMask; _para3:PTXSetWindowAttributes);cdecl;


      TXtGeometryHandler = function (_para1:TWidget; _para2:PTXtWidgetGeometry; _para3:PTXtWidgetGeometry):TXtGeometryResult;cdecl;


      TXtStringProc = procedure (_para1:TWidget; _para2:TString);cdecl;





      TXtTypedArg = record
          name : TString;
          _type : TString;
          value : TXtArgVal;
          size : longint;
        end;
      TXtTypedArgList = ^TXtTypedArg;


      TXtAllocateProc = procedure (_para1:TWidgetClass; _para2:PTCardinal; _para3:PTCardinal; _para4:TArgList; _para5:PTCardinal; 
                    _para6:TXtTypedArgList; _para7:PTCardinal; _para8:PTWidget; _para9:PTXtPointer);cdecl;


      TXtDeallocateProc = procedure (_para1:TWidget; _para2:TXtPointer);cdecl;
      T_XtStateRec = record
          {undefined structure}
        end;






      T_XtTMRec = record
          translations : TXtTranslations;
          proc_table : TXtBoundActions;
          current_state : ^T_XtStateRec;
          lastEventTime : dword;
        end;
      TXtTMRec = T_XtTMRec;
      TXtTM = ^T_XtTMRec;
//// {$include <X11/CoreP.h>}
//// {$include <X11/CompositeP.h>}
//// {$include <X11/ConstrainP.h>}
//// {$include <X11/ObjectP.h>}
//// {$include <X11/RectObjP.h>}

    function XtDisplay(widget : longint) : longint;    

    function XtScreen(widget : longint) : longint;    

    function XtWindow(widget : longint) : longint;    

    function XtClass(widget : longint) : longint;    

    function XtSuperclass(widget : longint) : longint;    

    function XtIsRealized(object : longint) : longint;    

    function XtParent(widget : longint) : longint;    

//// {$undef XtIsRectObj}
function XtIsRectObj(_para1:TWidget):TBoolean;cdecl;external;
    function XtIsRectObj(obj : longint) : longint;    

//// {$undef XtIsWidget}
function XtIsWidget(_para1:TWidget):TBoolean;cdecl;external;
    function XtIsWidget(obj : longint) : longint;    

//// {$undef XtIsComposite}
function XtIsComposite(_para1:TWidget):TBoolean;cdecl;external;
    function XtIsComposite(obj : longint) : longint;    

//// {$undef XtIsConstraint}
function XtIsConstraint(_para1:TWidget):TBoolean;cdecl;external;
    function XtIsConstraint(obj : longint) : longint;    

//// {$undef XtIsShell}
function XtIsShell(_para1:TWidget):TBoolean;cdecl;external;
    function XtIsShell(obj : longint) : longint;    

//// {$undef XtIsWMShell}
function XtIsWMShell(_para1:TWidget):TBoolean;cdecl;external;
    function XtIsWMShell(obj : longint) : longint;    

//// {$undef XtIsTopLevelShell}
function XtIsTopLevelShell(_para1:TWidget):TBoolean;cdecl;external;
    function XtIsTopLevelShell(obj : longint) : longint;    

//// {$ifdef DEBUG}
//// (* error 
//// 	if (!XtIsSubclass(((Widget)(w)), (widget_class_ptr))) {	\
in declaration at line 249 *)
//// (* error 
//// 	    String dbgArgV[3];				\
//// (* error 
//// 	    Cardinal dbgArgC = 3;			\
in declaration at line 250 *)
//// (* error 
//// 	    Cardinal dbgArgC = 3;			\
//// (* error 
//// 	    dbgArgV[0] = ((Widget)(w))->core.widget_class->core_class.class_name;\
in declaration at line 251 *)
//// (* error 
//// 	    dbgArgV[0] = ((Widget)(w))->core.widget_class->core_class.class_name;\
//// (* error 
//// 	    dbgArgV[1] = (widget_class_ptr)->core_class.class_name;	     \
in declaration at line 252 *)
//// (* error 
//// 	    dbgArgV[1] = (widget_class_ptr)->core_class.class_name;	     \
//// (* error 
//// 	    dbgArgV[2] = (message);					     \
in declaration at line 253 *)
//// (* error 
//// 	    dbgArgV[2] = (message);					     \
//// (* error 
//// 	    XtAppErrorMsg(XtWidgetToApplicationContext((Widget)(w)),	     \
in declaration at line 257 *)
//// (* error 
//// 		    dbgArgV, &dbgArgC);			\
//// (* error 
//// 	}
//// {$else}

in define line 260 *)
//// {$endif}
//// (* error 
//// extern Widget _XtWindowedAncestor( /* internal; implementation-dependent */


in declaration at line 267 *)
//// {$if (defined(_WIN32) || defined(__CYGWIN__)) && !defined(LIBXT_COMPILATION)}
//// {$else}
//// (* error 
//// extern
//// {$endif}
 in declarator_list *)

procedure _XtHandleFocus(_para1:TWidget; _para2:TXtPointer; _para3:PTXEvent; _para4:PTBoolean);cdecl;external;

procedure XtCreateWindow(_para1:TWidget; _para2:dword; _para3:PTVisual; _para4:TXtValueMask; _para5:PTXSetWindowAttributes);cdecl;external;

procedure XtResizeWidget(_para1:TWidget; _para2:T_XtDimension; _para3:T_XtDimension; _para4:T_XtDimension);cdecl;external;

procedure XtMoveWidget(_para1:TWidget; _para2:T_XtPosition; _para3:T_XtPosition);cdecl;external;

procedure XtConfigureWidget(_para1:TWidget; _para2:T_XtPosition; _para3:T_XtPosition; _para4:T_XtDimension; _para5:T_XtDimension; 
                _para6:T_XtDimension);cdecl;external;

procedure XtResizeWindow(_para1:TWidget);cdecl;external;
procedure XtProcessLock;cdecl;external;
procedure XtProcessUnlock;cdecl;external;
//// {$endif}


//// (* error 
//// /* DON'T ADD STUFF AFTER THIS #endif */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xw32defs.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xw32defs.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xw32defs.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}


//// {$ifndef _XW32DEFS_H}
//// {$define _XW32DEFS_H}
//// {$ifdef __GNUC__ /* mingw is more close to unix than msvc */}
//// {$if !defined(__daddr_t_defined)}
type
  Tcaddr_t = ^char;
//// {$endif}

const
  lstat = stat;  
//// {$else}
type
  Tcaddr_t = ^char;

const
  access = _access;  
  alloca = _alloca;  
  chdir = _chdir;  
  chmod = _chmod;  
  close = _close;  
  creat = _creat;  
  dup = _dup;  
  dup2 = _dup2;  
  environ = _environ;  
  execl = _execl;  
  execle = _execle;  
  execlp = _execlp;  
  execlpe = _execlpe;  
  execv = _execv;  
  execve = _execve;  
  execvp = _execvp;  
  execvpe = _execvpe;  
  fdopen = _fdopen;  
  fileno = _fileno;  
  fstat = _fstat;  
  getcwd = _getcwd;  
  getpid = _getpid;  
  hypot = _hypot;  
  isascii = __isascii;  
  isatty = _isatty;  
  lseek = _lseek;  
  mkdir = _mkdir;  
  mktemp = _mktemp;  
  open = _open;  
  putenv = _putenv;  
  read = _read;  
  rmdir = _rmdir;  

function sleep(x : longint) : longint;

const
  stat = _stat;  
  sys_errlist = _sys_errlist;  
  sys_nerr = _sys_nerr;  
  umask = _umask;  
  unlink = _unlink;  
  write = _write;  
  random = rand;  
  srandom = srand;  
  O_RDONLY = _O_RDONLY;  
  O_WRONLY = _O_WRONLY;  
  O_RDWR = _O_RDWR;  
  O_APPEND = _O_APPEND;  
  O_CREAT = _O_CREAT;  
  O_TRUNC = _O_TRUNC;  
  O_EXCL = _O_EXCL;  
  O_TEXT = _O_TEXT;  
  O_BINARY = _O_BINARY;  
  O_RAW = _O_BINARY;  
  S_IFMT = _S_IFMT;  
  S_IFDIR = _S_IFDIR;  
  S_IFCHR = _S_IFCHR;  
  S_IFREG = _S_IFREG;  
  S_IREAD = _S_IREAD;  
  S_IWRITE = _S_IWRITE;  
  S_IEXEC = _S_IEXEC;  
  F_OK = 0;  
  X_OK = 1;  
  W_OK = 2;  
  R_OK = 4;  
//// {$endif}

//// {$endif}

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xatom.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xatom.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xatom.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}


//// {$ifndef XATOM_H}

const
  XATOM_H = 1;  


function XA_PRIMARY : TAtom;  

function XA_SECONDARY : TAtom;  

function XA_ARC : TAtom;  

function XA_ATOM : TAtom;  

function XA_BITMAP : TAtom;  

function XA_CARDINAL : TAtom;  

function XA_COLORMAP : TAtom;  

function XA_CURSOR : TAtom;  

function XA_CUT_BUFFER0 : TAtom;  

function XA_CUT_BUFFER1 : TAtom;  

function XA_CUT_BUFFER2 : TAtom;  

function XA_CUT_BUFFER3 : TAtom;  

function XA_CUT_BUFFER4 : TAtom;  

function XA_CUT_BUFFER5 : TAtom;  

function XA_CUT_BUFFER6 : TAtom;  

function XA_CUT_BUFFER7 : TAtom;  

function XA_DRAWABLE : TAtom;  

function XA_FONT : TAtom;  

function XA_INTEGER : TAtom;  

function XA_PIXMAP : TAtom;  

function XA_POINT : TAtom;  

function XA_RECTANGLE : TAtom;  

function XA_RESOURCE_MANAGER : TAtom;  

function XA_RGB_COLOR_MAP : TAtom;  

function XA_RGB_BEST_MAP : TAtom;  

function XA_RGB_BLUE_MAP : TAtom;  

function XA_RGB_DEFAULT_MAP : TAtom;  

function XA_RGB_GRAY_MAP : TAtom;  

function XA_RGB_GREEN_MAP : TAtom;  

function XA_RGB_RED_MAP : TAtom;  

function XA_STRING : TAtom;  

function XA_VISUALID : TAtom;  

function XA_WINDOW : TAtom;  

function XA_WM_COMMAND : TAtom;  

function XA_WM_HINTS : TAtom;  

function XA_WM_CLIENT_MACHINE : TAtom;  

function XA_WM_ICON_NAME : TAtom;  

function XA_WM_ICON_SIZE : TAtom;  

function XA_WM_NAME : TAtom;  

function XA_WM_NORMAL_HINTS : TAtom;  

function XA_WM_SIZE_HINTS : TAtom;  

function XA_WM_ZOOM_HINTS : TAtom;  

function XA_MIN_SPACE : TAtom;  

function XA_NORM_SPACE : TAtom;  

function XA_MAX_SPACE : TAtom;  

function XA_END_SPACE : TAtom;  

function XA_SUPERSCRIPT_X : TAtom;  

function XA_SUPERSCRIPT_Y : TAtom;  

function XA_SUBSCRIPT_X : TAtom;  

function XA_SUBSCRIPT_Y : TAtom;  

function XA_UNDERLINE_POSITION : TAtom;  

function XA_UNDERLINE_THICKNESS : TAtom;  

function XA_STRIKEOUT_ASCENT : TAtom;  

function XA_STRIKEOUT_DESCENT : TAtom;  

function XA_ITALIC_ANGLE : TAtom;  

function XA_X_HEIGHT : TAtom;  

function XA_QUAD_WIDTH : TAtom;  

function XA_WEIGHT : TAtom;  

function XA_POINT_SIZE : TAtom;  

function XA_RESOLUTION : TAtom;  

function XA_COPYRIGHT : TAtom;  

function XA_NOTICE : TAtom;  

function XA_FONT_NAME : TAtom;  

function XA_FAMILY_NAME : TAtom;  

function XA_FULL_NAME : TAtom;  

function XA_CAP_HEIGHT : TAtom;  

function XA_WM_CLASS : TAtom;  

function XA_WM_TRANSIENT_FOR : TAtom;  

function XA_LAST_PREDEFINED : TAtom;  

//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/IntrinsicI.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/IntrinsicI.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/IntrinsicI.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    PBoolean  = ^Boolean;
    PDisplay  = ^Display;
    PXtWidgetGeometry  = ^XtWidgetGeometry;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XtintrinsicI_h}
//// {$define _XtintrinsicI_h}
//// {$include "Xtos.h"}
//// {$include "IntrinsicP.h"}
//// {$ifdef WIN32}
//// {$define _WILLWINSOCK_}
//// {$endif}
//// {$include <X11/Xos.h>}
//// {$include "Object.h"}
//// {$include "RectObj.h"}
//// {$include "ObjectP.h"}
//// {$include "RectObjP.h"}
//// {$include "ConvertI.h"}
//// {$include "TranslateI.h"}

const
  RectObjClassFlag = $02;  
  WidgetClassFlag = $04;  
  CompositeClassFlag = $08;  
  ConstraintClassFlag = $10;  
  ShellClassFlag = $20;  
  WMShellClassFlag = $40;  
  TopLevelClassFlag = $80;  


function XtDisplayOfObject(object : longint) : longint;

function XtScreenOfObject(object : longint) : longint;

function XtWindowOfObject(object : longint) : longint;

function XtIsManaged(object : longint) : longint;

function XtIsSensitive(object : longint) : longint;


//// (* error 
//// #define XtSetBits(dst,src,len)  dst = (((1U << (len)) - 1) & (unsigned)(src))
in define line 107 *)
    function XtSetBit(dst,src : longint) : longint;    


    const
      _XBCOPYFUNC = _XtBcopy;      
//// {$include <X11/Xfuncs.h>}
//// (* error 
////     if ((const void *)(dst) != (const void *)(src)) {		    \
in declaration at line 121 *)
//// (* error 
//// 	(void) memcpy((void *) (dst), (const void *) (src), (size_t) (size)); \
//// (* error 
////     }
in define line 125 *)

    function XtMemcmp(b1,b2,size : longint) : longint;    


    function XtStackAlloc(size,stack_cache_array : longint) : longint;    

//// (* error 
////     { if ((pointer) != ((XtPointer)(stack_cache_array))) XtFree(pointer); }
in declaration at line 143 *)
//// (* error 
////     { if ((pointer) != ((XtPointer)(stack_cache_array))) XtFree(pointer); }


//// {$ifndef XFILESEARCHPATHDEFAULT}
in define line 153 *)
//// {$endif}

//// {$ifndef XTERROR_PREFIX}

    const
      XTERROR_PREFIX = '';      
//// {$endif}
//// {$ifndef XTWARNING_PREFIX}

    const
      XTWARNING_PREFIX = '';      
//// {$endif}
//// {$ifndef ERRORDB}

    const
      ERRORDB = '/usr/lib/X11/XtErrorDB';      
//// {$endif}
//// (* error 
//// extern String XtCXtToolkitError;
in declaration at line 171 *)

//// (* error 
//// ) _X_NORETURN;
 in declarator_list *)
      var
 : pointer;


procedure _XtCompileResourceList(_para1:TXtResourceList; _para2:TCardinal);cdecl;external;

function _XtMakeGeometryRequest(_para1:TWidget; _para2:PTXtWidgetGeometry; _para3:PTXtWidgetGeometry; _para4:PTBoolean):TXtGeometryResult;cdecl;external;

function _XtIsHookObject(_para1:TWidget):TBoolean;cdecl;external;

procedure _XtAddShellToHookObj(_para1:TWidget);cdecl;external;

procedure _XtGClistFree(dpy:PTDisplay; pd:TXtPerDisplay);cdecl;external;

//// {$ifdef XT_GEO_TATTLER}
procedure _XtGeoTab(_para1:longint);cdecl;external;
//// (* error 
//// ) _X_ATTRIBUTE_PRINTF(2,3);
//// (* error 
//// ) _X_ATTRIBUTE_PRINTF(2,3);
 in declarator_list *)
 in declarator_list *)
    function CALLGEOTAT(f : longint) : longint;    

//// {$else}

//// (* error 
//// #define CALLGEOTAT(f)
in define line 215 *)
//// {$endif}

//// {$ifndef XTTRACEMEMORY}


function __XtMalloc(_para1:dword):^char;cdecl;external;

function __XtCalloc(_para1:dword; _para2:dword):^char;cdecl;external;
//// {$else}

    const
      __XtMalloc = XtMalloc;      
      __XtCalloc = XtCalloc;      
//// {$endif}
//// {$endif}


//// (* error 
//// /* DON'T ADD STUFF AFTER THIS #endif */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/HPkeysym.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/HPkeysym.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/HPkeysym.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _HPKEYSYM_H}
//// {$define _HPKEYSYM_H}

const
  hpXK_ClearLine = $1000FF6F;  
  hpXK_InsertLine = $1000FF70;  
  hpXK_DeleteLine = $1000FF71;  
  hpXK_InsertChar = $1000FF72;  
  hpXK_DeleteChar = $1000FF73;  
  hpXK_BackTab = $1000FF74;  
  hpXK_KP_BackTab = $1000FF75;  
  hpXK_Modelock1 = $1000FF48;  
  hpXK_Modelock2 = $1000FF49;  
  hpXK_Reset = $1000FF6C;  
  hpXK_System = $1000FF6D;  
  hpXK_User = $1000FF6E;  
  hpXK_mute_acute = $100000A8;  
  hpXK_mute_grave = $100000A9;  
  hpXK_mute_asciicircum = $100000AA;  
  hpXK_mute_diaeresis = $100000AB;  
  hpXK_mute_asciitilde = $100000AC;  
  hpXK_lira = $100000AF;  
  hpXK_guilder = $100000BE;  
  hpXK_Ydiaeresis = $100000EE;  
  hpXK_IO = $100000EE;  
  hpXK_longminus = $100000F6;  
  hpXK_block = $100000FC;  
//// {$ifndef _OSF_Keysyms}
//// {$define _OSF_Keysyms}

const
  osfXK_Copy = $1004FF02;  
  osfXK_Cut = $1004FF03;  
  osfXK_Paste = $1004FF04;  
  osfXK_BackTab = $1004FF07;  
  osfXK_BackSpace = $1004FF08;  
  osfXK_Clear = $1004FF0B;  
  osfXK_Escape = $1004FF1B;  
  osfXK_AddMode = $1004FF31;  
  osfXK_PrimaryPaste = $1004FF32;  
  osfXK_QuickPaste = $1004FF33;  
  osfXK_PageLeft = $1004FF40;  
  osfXK_PageUp = $1004FF41;  
  osfXK_PageDown = $1004FF42;  
  osfXK_PageRight = $1004FF43;  
  osfXK_Activate = $1004FF44;  
  osfXK_MenuBar = $1004FF45;  
  osfXK_Left = $1004FF51;  
  osfXK_Up = $1004FF52;  
  osfXK_Right = $1004FF53;  
  osfXK_Down = $1004FF54;  
  osfXK_EndLine = $1004FF57;  
  osfXK_BeginLine = $1004FF58;  
  osfXK_EndData = $1004FF59;  
  osfXK_BeginData = $1004FF5A;  
  osfXK_PrevMenu = $1004FF5B;  
  osfXK_NextMenu = $1004FF5C;  
  osfXK_PrevField = $1004FF5D;  
  osfXK_NextField = $1004FF5E;  
  osfXK_Select = $1004FF60;  
  osfXK_Insert = $1004FF63;  
  osfXK_Undo = $1004FF65;  
  osfXK_Menu = $1004FF67;  
  osfXK_Cancel = $1004FF69;  
  osfXK_Help = $1004FF6A;  
  osfXK_SelectAll = $1004FF71;  
  osfXK_DeselectAll = $1004FF72;  
  osfXK_Reselect = $1004FF73;  
  osfXK_Extend = $1004FF74;  
  osfXK_Restore = $1004FF78;  
  osfXK_Delete = $1004FFFF;  
//// {$endif}



const
  XK_Reset = $1000FF6C;  
  XK_System = $1000FF6D;  
  XK_User = $1000FF6E;  
  XK_ClearLine = $1000FF6F;  
  XK_InsertLine = $1000FF70;  
  XK_DeleteLine = $1000FF71;  
  XK_InsertChar = $1000FF72;  
  XK_DeleteChar = $1000FF73;  
  XK_BackTab = $1000FF74;  
  XK_KP_BackTab = $1000FF75;  
  XK_Ext16bit_L = $1000FF76;  
  XK_Ext16bit_R = $1000FF77;  
  XK_mute_acute = $100000a8;  
  XK_mute_grave = $100000a9;  
  XK_mute_asciicircum = $100000aa;  
  XK_mute_diaeresis = $100000ab;  
  XK_mute_asciitilde = $100000ac;  
  XK_lira = $100000af;  
  XK_guilder = $100000be;  
//// {$ifndef XK_Ydiaeresis}

const
  XK_Ydiaeresis = $100000ee;  
//// {$endif}

const
  XK_IO = $100000ee;  
  XK_longminus = $100000f6;  
  XK_block = $100000fc;  
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/ap_keysym.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/ap_keysym.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/ap_keysym.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




const
  apXK_LineDel = $1000FF00;  
  apXK_CharDel = $1000FF01;  
  apXK_Copy = $1000FF02;  
  apXK_Cut = $1000FF03;  
  apXK_Paste = $1000FF04;  
  apXK_Move = $1000FF05;  
  apXK_Grow = $1000FF06;  
  apXK_Cmd = $1000FF07;  
  apXK_Shell = $1000FF08;  
  apXK_LeftBar = $1000FF09;  
  apXK_RightBar = $1000FF0A;  
  apXK_LeftBox = $1000FF0B;  
  apXK_RightBox = $1000FF0C;  
  apXK_UpBox = $1000FF0D;  
  apXK_DownBox = $1000FF0E;  
  apXK_Pop = $1000FF0F;  
  apXK_Read = $1000FF10;  
  apXK_Edit = $1000FF11;  
  apXK_Save = $1000FF12;  
  apXK_Exit = $1000FF13;  
  apXK_Repeat = $1000FF14;  
  apXK_KP_parenleft = $1000FFA8;  
  apXK_KP_parenright = $1000FFA9;  

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/RectObj.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/RectObj.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/RectObj.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XtRect_h}
//// {$define _XtRect_h}
//// (* error 
//// typedef struct _RectObjRec *RectObj;
in declaration at line 53 *)
    type
      TRectObjClass = ^T_RectObjClassRec;
//// {$ifndef VMS}
//// (* error 
//// externalref WidgetClass rectObjClass;
 in declarator_list *)
//// {$endif}
//// {$endif}


//// (* error 
//// /* DON'T ADD STUFF AFTER THIS #endif */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Core.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Core.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Core.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XtCore_h}
//// {$define _XtCore_h}
//// (* error 
//// typedef struct _WidgetClassRec *CoreWidgetClass;
in declaration at line 53 *)
    type
      TCoreWidget = ^T_WidgetRec;
//// (* error 
//// externalref WidgetClass coreWidgetClass;
 in declarator_list *)
//// {$ifndef VMS}
//// (* error 
//// externalref WidgetClass widgetClass;
 in declarator_list *)
//// {$endif}
//// {$endif}


//// (* error 
//// /* DON'T ADD STUFF AFTER THIS #endif */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Constraint.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Constraint.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Constraint.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XtConstraint_h}
//// {$define _XtConstraint_h}
//// (* error 
//// typedef struct _ConstraintClassRec *ConstraintWidgetClass;
in declaration at line 53 *)
//// {$ifndef VMS}
//// (* error 
//// externalref WidgetClass constraintWidgetClass;
 in declarator_list *)
//// {$endif}
//// {$endif}


//// (* error 
//// /* DON'T ADD STUFF AFTER THIS #endif */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xfuncs.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xfuncs.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xfuncs.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XFUNCS_H_}
//// {$define _XFUNCS_H_}
//// {$include <X11/Xosdefs.h>}

//// {$if !(defined(XFree86LOADER) && defined(IN_MODULE))}
//// {$ifdef X_USEBFUNCS}

procedure bcopy;cdecl;external;
procedure bzero;cdecl;external;
function bcmp:longint;cdecl;external;
//// {$else}
//// {$if defined(SYSV) && !defined(__SCO__) && !defined(__sun) && !defined(__UNIXWARE__) && !defined(_AIX)}
//// {$include <memory.h>}

procedure bcopy;cdecl;external;
function bzero(b,len : longint) : longint;

function bcmp(b1,b2,len : longint) : longint;

//// {$else}
//// {$include <string.h>}
//// {$if defined(__SCO__) || defined(__sun) || defined(__UNIXWARE__) || defined(__CYGWIN__) || defined(_AIX) || defined(__APPLE__)}
//// {$include <strings.h>}
//// {$endif}
//// {$define _XFUNCS_H_INCLUDED_STRING_H}
//// {$endif}
//// {$endif}



//// {$ifndef _XFUNCS_H_INCLUDED_STRING_H}
//// {$include <string.h>}
//// {$endif}
//// {$undef bzero}

function bzero(b,len : longint) : longint;

//// {$if defined WIN32 && defined __MINGW32__}

function bcopy(b1,b2,len : longint) : longint;

//// {$endif}
//// {$endif}

//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xregion.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xregion.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xregion.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _X11_XREGION_H_}
//// {$define _X11_XREGION_H_}
type
  TBox = record
      x1 : smallint;
      x2 : smallint;
      y1 : smallint;
      y2 : smallint;
    end;
  TBoxRec = TBox;
  TBoxPtr = ^TBox;

  TRECTANGLE = record
      x : smallint;
      y : smallint;
      width : smallint;
      height : smallint;
    end;
  TRectangleRec = TRECTANGLE;
  TRectanglePtr = ^TRECTANGLE;

const
  TRUE = 1;  
  FALSE = 0;  
  MAXSHORT = 32767;  
  MINSHORT = -(MAXSHORT);  
//// {$ifndef MAX}

function MAX(a,b : longint) : longint;

//// {$endif}
//// {$ifndef MIN}

function MIN(a,b : longint) : longint;

//// {$endif}

type
  T_XRegion = record
      size : longint;
      numRects : longint;
      rects : ^TBOX;
      extents : TBOX;
    end;
  TREGION = T_XRegion;



function EXTENTCHECK(r1,r2 : longint) : longint;


//// (* error 
//// #define EXTENTS(r,idRect){\
in declaration at line 101 *)
//// (* error 
////               (idRect)->extents.x1 = (r)->x1;\
//// (* error 
////             if((r)->y1 < (idRect)->extents.y1)\
in declaration at line 103 *)
//// (* error 
////               (idRect)->extents.y1 = (r)->y1;\
//// (* error 
////             if((r)->x2 > (idRect)->extents.x2)\
in declaration at line 105 *)
//// (* error 
////               (idRect)->extents.x2 = (r)->x2;\
//// (* error 
////             if((r)->y2 > (idRect)->extents.y2)\
in declaration at line 107 *)
//// (* error 
////               (idRect)->extents.y2 = (r)->y2;\
//// (* error 
////         }

in declaration at line 116 *)
//// (* error 
////                                      (2 * (sizeof(BOX)) * ((reg)->size))); \
//// (* error 
////           if (tmpRect == NULL) \
in declaration at line 118 *)
//// (* error 
////             return(0);\
//// (* error 
////           (firstrect) = tmpRect; \
in declaration at line 119 *)
//// (* error 
////           (firstrect) = tmpRect; \
//// (* error 
////           (reg)->size *= 2;\
in declaration at line 120 *)
//// (* error 
////           (reg)->size *= 2;\
//// (* error 
////           (rect) = &(firstrect)[(reg)->numRects];\
in declaration at line 121 *)
//// (* error 
////           (rect) = &(firstrect)[(reg)->numRects];\
//// (* error 
////          }\

in define line 134 *)

//// (* error 
//// #define ADDRECT(reg, r, rx1, ry1, rx2, ry2){\
in declaration at line 140 *)
//// (* error 
////               (r)->x1 = (rx1);\
//// (* error 
////               (r)->y1 = (ry1);\
in declaration at line 141 *)
//// (* error 
////               (r)->y1 = (ry1);\
//// (* error 
////               (r)->x2 = (rx2);\
in declaration at line 142 *)
//// (* error 
////               (r)->x2 = (rx2);\
//// (* error 
////               (r)->y2 = (ry2);\
in declaration at line 143 *)
//// (* error 
////               (r)->y2 = (ry2);\
//// (* error 
////               EXTENTS((r), (reg));\
in declaration at line 144 *)
//// (* error 
////               EXTENTS((r), (reg));\
//// (* error 
////               (reg)->numRects++;\
in declaration at line 145 *)
//// (* error 
////               (reg)->numRects++;\
//// (* error 
////               (r)++;\
in declaration at line 146 *)
//// (* error 
////               (r)++;\
//// (* error 
////             }\

in declaration at line 156 *)
//// (* error 
////               (r)->x1 = (rx1);\
//// (* error 
////               (r)->y1 = (ry1);\
in declaration at line 157 *)
//// (* error 
////               (r)->y1 = (ry1);\
//// (* error 
////               (r)->x2 = (rx2);\
in declaration at line 158 *)
//// (* error 
////               (r)->x2 = (rx2);\
//// (* error 
////               (r)->y2 = (ry2);\
in declaration at line 159 *)
//// (* error 
////               (r)->y2 = (ry2);\
//// (* error 
////               (reg)->numRects++;\
in declaration at line 160 *)
//// (* error 
////               (reg)->numRects++;\
//// (* error 
////               (r)++;\
in declaration at line 161 *)
//// (* error 
////               (r)++;\
//// (* error 
////             }\
in define line 165 *)
    function REGION_NOT_EMPTY(pReg : longint) : longint;    

    function INBOX(r,x,y : longint) : longint;    


    const
      NUMPTSTOBUFFER = 200;      

    type
      T_POINTBLOCK = record
          pts : array[0..(NUMPTSTOBUFFER)-1] of TXPoint;
          next : ^T_POINTBLOCK;
        end;
      TPOINTBLOCK = T_POINTBLOCK;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/ShellI.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/ShellI.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/ShellI.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}


//// {$ifndef _XtShellInternal_h}
//// {$define _XtShellInternal_h}
//// {$include <X11/Xfuncproto.h>}
//// (* error 
//// extern void _XtShellGetCoordinates(Widget widget, Position *x, Position *y);
in declaration at line 8 *)
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/TranslateI.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/TranslateI.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/TranslateI.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    P_XtActionsRec  = ^_XtActionsRec;
    PActionRec  = ^ActionRec;
    PCardinal  = ^Cardinal;
    PDisplay  = ^Display;
    PEvent  = ^Event;
    PModifiers  = ^Modifiers;
    PString  = ^String;
    PTMStateTree  = ^TMStateTree;
    PXEvent  = ^XEvent;
    PXrmQuark  = ^XrmQuark;
    PXtPointer  = ^XtPointer;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}





//// {$define CACHE_TRANSLATIONS}

const
  TM_NO_MATCH = -(2);  
  _XtRStateTablePair = '_XtStateTablePair';  
type
  TTMByteCard = byte;

  TTMShortCard = word;

  TTMLongCard = dword;

  TTMShortInt = smallint;

  TTMTypeMatch = ^T_TMTypeMatchRec;

  TTMModifierMatch = ^T_TMModifierMatchRec;

  TTMEventPtr = ^T_TMEventRec;

  TMatchProc = function (typeMatch:TTMTypeMatch; modMatch:TTMModifierMatch; eventSeq:TTMEventPtr):TBoolean;cdecl;

  T_ModToKeysymTable = record
      mask : TModifiers;
      count : longint;
      idx : longint;
    end;
  TModToKeysymTable = T_ModToKeysymTable;


  T_LateBindings = record
      flag0 : word;
      ref_count : word;
      keysym : TKeySym;
    end;
  TLateBindings = T_LateBindings;
  TLateBindingsPtr = ^T_LateBindings;

const
  bm__LateBindings_knot = $1;
  bp__LateBindings_knot = 0;
  bm__LateBindings_pair = $2;
  bp__LateBindings_pair = 1;

function knot(var a : _LateBindings) : dword;
procedure set_knot(var a : _LateBindings; __knot : dword);
function pair(var a : _LateBindings) : dword;
procedure set_pair(var a : _LateBindings; __pair : dword);
type
  TModifierMask = smallint;

  TActionPtr = ^T_ActionsRec;





  T_ActionsRec = record
      idx : longint;
      params : ^TString;
      num_params : TCardinal;
      next : TActionPtr;
    end;
  TActionRec = T_ActionsRec;

  TStatePtr = ^T_XtStateRec;


  T_XtStateRec = record
      flag0 : word;
      typeIndex : TTMShortCard;
      modIndex : TTMShortCard;
      actions : TActionPtr;
      nextLevel : TStatePtr;
    end;
  TStateRec = T_XtStateRec;

const
  bm__XtStateRec_isCycleStart = $1;
  bp__XtStateRec_isCycleStart = 0;
  bm__XtStateRec_isCycleEnd = $2;
  bp__XtStateRec_isCycleEnd = 1;

function isCycleStart(var a : _XtStateRec) : dword;
procedure set_isCycleStart(var a : _XtStateRec; __isCycleStart : dword);
function isCycleEnd(var a : _XtStateRec) : dword;
procedure set_isCycleEnd(var a : _XtStateRec; __isCycleEnd : dword);

const
  XtTableReplace = 0;  
  XtTableAugment = 1;  
  XtTableOverride = 2;  
  XtTableUnmerge = 3;  
type
  T_XtTranslateOp = dword;


  T_TMModifierMatchRec = record
      modifiers : TTMLongCard;
      modifierMask : TTMLongCard;
      lateModifiers : TLateBindingsPtr;
      standard : TBoolean;
    end;
  TTMModifierMatchRec = T_TMModifierMatchRec;

  T_TMTypeMatchRec = record
      eventType : TTMLongCard;
      eventCode : TTMLongCard;
      eventCodeMask : TTMLongCard;
      matchEvent : TMatchProc;
    end;
  TTMTypeMatchRec = T_TMTypeMatchRec;

  T_TMBranchHeadRec = record
      flag0 : word;
      typeIndex : TTMShortCard;
      modIndex : TTMShortCard;
    end;
  TTMBranchHeadRec = T_TMBranchHeadRec;
  TTMBranchHead = ^T_TMBranchHeadRec;

const
  bm__TMBranchHeadRec_isSimple = $1;
  bp__TMBranchHeadRec_isSimple = 0;
  bm__TMBranchHeadRec_hasActions = $2;
  bp__TMBranchHeadRec_hasActions = 1;
  bm__TMBranchHeadRec_hasCycles = $4;
  bp__TMBranchHeadRec_hasCycles = 2;
  bm__TMBranchHeadRec_more = $FFF8;
  bp__TMBranchHeadRec_more = 3;

function isSimple(var a : _TMBranchHeadRec) : dword;
procedure set_isSimple(var a : _TMBranchHeadRec; __isSimple : dword);
function hasActions(var a : _TMBranchHeadRec) : dword;
procedure set_hasActions(var a : _TMBranchHeadRec; __hasActions : dword);
function hasCycles(var a : _TMBranchHeadRec) : dword;
procedure set_hasCycles(var a : _TMBranchHeadRec; __hasCycles : dword);
function more(var a : _TMBranchHeadRec) : dword;
procedure set_more(var a : _TMBranchHeadRec; __more : dword);




type
  T_TMSimpleStateTreeRec = record
      flag0 : word;
      numBranchHeads : TTMShortCard;
      numQuarks : TTMShortCard;
      unused : TTMShortCard;
      branchHeadTbl : ^TTMBranchHeadRec;
      quarkTbl : ^TXrmQuark;
    end;
  TTMSimpleStateTreeRec = T_TMSimpleStateTreeRec;
  TTMSimpleStateTree = ^T_TMSimpleStateTreeRec;

const
  bm__TMSimpleStateTreeRec_isSimple = $1;
  bp__TMSimpleStateTreeRec_isSimple = 0;
  bm__TMSimpleStateTreeRec_isAccelerator = $2;
  bp__TMSimpleStateTreeRec_isAccelerator = 1;
  bm__TMSimpleStateTreeRec_mappingNotifyInterest = $4;
  bp__TMSimpleStateTreeRec_mappingNotifyInterest = 2;
  bm__TMSimpleStateTreeRec_refCount = $FFF8;
  bp__TMSimpleStateTreeRec_refCount = 3;

function isSimple(var a : _TMSimpleStateTreeRec) : dword;
procedure set_isSimple(var a : _TMSimpleStateTreeRec; __isSimple : dword);
function isAccelerator(var a : _TMSimpleStateTreeRec) : dword;
procedure set_isAccelerator(var a : _TMSimpleStateTreeRec; __isAccelerator : dword);
function mappingNotifyInterest(var a : _TMSimpleStateTreeRec) : dword;
procedure set_mappingNotifyInterest(var a : _TMSimpleStateTreeRec; __mappingNotifyInterest : dword);
function refCount(var a : _TMSimpleStateTreeRec) : dword;
procedure set_refCount(var a : _TMSimpleStateTreeRec; __refCount : dword);



type
  T_TMComplexStateTreeRec = record
      flag0 : word;
      numBranchHeads : TTMShortCard;
      numQuarks : TTMShortCard;
      numComplexBranchHeads : TTMShortCard;
      branchHeadTbl : ^TTMBranchHeadRec;
      quarkTbl : ^TXrmQuark;
      complexBranchHeadTbl : ^TStatePtr;
    end;
  TTMComplexStateTreeRec = T_TMComplexStateTreeRec;
  TTMComplexStateTree = ^T_TMComplexStateTreeRec;

const
  bm__TMComplexStateTreeRec_isSimple = $1;
  bp__TMComplexStateTreeRec_isSimple = 0;
  bm__TMComplexStateTreeRec_isAccelerator = $2;
  bp__TMComplexStateTreeRec_isAccelerator = 1;
  bm__TMComplexStateTreeRec_mappingNotifyInterest = $4;
  bp__TMComplexStateTreeRec_mappingNotifyInterest = 2;
  bm__TMComplexStateTreeRec_refCount = $FFF8;
  bp__TMComplexStateTreeRec_refCount = 3;

function isSimple(var a : _TMComplexStateTreeRec) : dword;
procedure set_isSimple(var a : _TMComplexStateTreeRec; __isSimple : dword);
function isAccelerator(var a : _TMComplexStateTreeRec) : dword;
procedure set_isAccelerator(var a : _TMComplexStateTreeRec; __isAccelerator : dword);
function mappingNotifyInterest(var a : _TMComplexStateTreeRec) : dword;
procedure set_mappingNotifyInterest(var a : _TMComplexStateTreeRec; __mappingNotifyInterest : dword);
function refCount(var a : _TMComplexStateTreeRec) : dword;
procedure set_refCount(var a : _TMComplexStateTreeRec; __refCount : dword);





type
  T_TMParseStateTreeRec = record
      flag0 : word;
      numBranchHeads : TTMShortCard;
      numQuarks : TTMShortCard;
      numComplexBranchHeads : TTMShortCard;
      branchHeadTbl : ^TTMBranchHeadRec;
      quarkTbl : ^TXrmQuark;
      complexBranchHeadTbl : ^TStatePtr;
      branchHeadTblSize : TTMShortCard;
      quarkTblSize : TTMShortCard;
      complexBranchHeadTblSize : TTMShortCard;
      head : TStatePtr;
    end;
  TTMParseStateTreeRec = T_TMParseStateTreeRec;
  TTMParseStateTree = ^T_TMParseStateTreeRec;

const
  bm__TMParseStateTreeRec_isSimple = $1;
  bp__TMParseStateTreeRec_isSimple = 0;
  bm__TMParseStateTreeRec_isAccelerator = $2;
  bp__TMParseStateTreeRec_isAccelerator = 1;
  bm__TMParseStateTreeRec_mappingNotifyInterest = $4;
  bp__TMParseStateTreeRec_mappingNotifyInterest = 2;
  bm__TMParseStateTreeRec_isStackQuarks = $8;
  bp__TMParseStateTreeRec_isStackQuarks = 3;
  bm__TMParseStateTreeRec_isStackBranchHeads = $10;
  bp__TMParseStateTreeRec_isStackBranchHeads = 4;
  bm__TMParseStateTreeRec_isStackComplexBranchHeads = $20;
  bp__TMParseStateTreeRec_isStackComplexBranchHeads = 5;
  bm__TMParseStateTreeRec_unused = $FFC0;
  bp__TMParseStateTreeRec_unused = 6;

function isSimple(var a : _TMParseStateTreeRec) : dword;
procedure set_isSimple(var a : _TMParseStateTreeRec; __isSimple : dword);
function isAccelerator(var a : _TMParseStateTreeRec) : dword;
procedure set_isAccelerator(var a : _TMParseStateTreeRec; __isAccelerator : dword);
function mappingNotifyInterest(var a : _TMParseStateTreeRec) : dword;
procedure set_mappingNotifyInterest(var a : _TMParseStateTreeRec; __mappingNotifyInterest : dword);
function isStackQuarks(var a : _TMParseStateTreeRec) : dword;
procedure set_isStackQuarks(var a : _TMParseStateTreeRec; __isStackQuarks : dword);
function isStackBranchHeads(var a : _TMParseStateTreeRec) : dword;
procedure set_isStackBranchHeads(var a : _TMParseStateTreeRec; __isStackBranchHeads : dword);
function isStackComplexBranchHeads(var a : _TMParseStateTreeRec) : dword;
procedure set_isStackComplexBranchHeads(var a : _TMParseStateTreeRec; __isStackComplexBranchHeads : dword);
function unused(var a : _TMParseStateTreeRec) : dword;
procedure set_unused(var a : _TMParseStateTreeRec; __unused : dword);
type
  T_TMStateTreeRec = ^record
      case longint of
        0 : ( simple : TTMSimpleStateTreeRec );
        1 : ( parse : TTMParseStateTreeRec );
        2 : ( complex : TTMComplexStateTreeRec );
      end;
  TTMStateTree = ^T_TMStateTreeRec;
  TTMStateTreePtr = ^^T_TMStateTreeRec;
  TTMStateTreeList = ^^T_TMStateTreeRec;

  T_TMSimpleBindProcsRec = record
      procs : ^TXtActionProc;
    end;
  TTMSimpleBindProcsRec = T_TMSimpleBindProcsRec;
  TTMSimpleBindProcs = ^T_TMSimpleBindProcsRec;


  T_TMComplexBindProcsRec = record
      widget : TWidget;
      aXlations : TXtTranslations;
      procs : ^TXtActionProc;
    end;
  TTMComplexBindProcsRec = T_TMComplexBindProcsRec;
  TTMComplexBindProcs = ^T_TMComplexBindProcsRec;



  T_TMSimpleBindDataRec = record
      flag0 : word;
      bindTbl : array[0..0] of TTMSimpleBindProcsRec;
    end;
  TTMSimpleBindDataRec = T_TMSimpleBindDataRec;
  TTMSimpleBindData = ^T_TMSimpleBindDataRec;

const
  bm__TMSimpleBindDataRec_isComplex = $1;
  bp__TMSimpleBindDataRec_isComplex = 0;

function isComplex(var a : _TMSimpleBindDataRec) : dword;
procedure set_isComplex(var a : _TMSimpleBindDataRec; __isComplex : dword);



type
  T_TMComplexBindDataRec = record
      flag0 : word;
      accel_context : ^T_ATranslationData;
      bindTbl : array[0..0] of TTMComplexBindProcsRec;
    end;
  TTMComplexBindDataRec = T_TMComplexBindDataRec;
  TTMComplexBindData = ^T_TMComplexBindDataRec;

const
  bm__TMComplexBindDataRec_isComplex = $1;
  bp__TMComplexBindDataRec_isComplex = 0;

function isComplex(var a : _TMComplexBindDataRec) : dword;
procedure set_isComplex(var a : _TMComplexBindDataRec; __isComplex : dword);
type
  T_TMBindDataRec = ^record
      case longint of
        0 : ( simple : TTMSimpleBindDataRec );
        1 : ( complex : TTMComplexBindDataRec );
      end;
  TTMBindData = ^T_TMBindDataRec;




  T_TranslationData = record
      hasBindings : byte;
      operation : byte;
      numStateTrees : TTMShortCard;
      composers : array[0..1] of ^T_TranslationData;
      eventMask : TEventMask;
      stateTreeTbl : array[0..0] of TTMStateTree;
    end;
  TTranslationData = T_TranslationData;






  T_ATranslationData = record
      hasBindings : byte;
      operation : byte;
      xlations : ^T_TranslationData;
      next : ^T_ATranslationData;
      bindTbl : array[0..0] of TTMComplexBindProcsRec;
    end;
  TATranslationData = T_ATranslationData;
  TATranslations = ^T_ATranslationData;



  T_TMConvertRec = record
      old : TXtTranslations;
      _new : TXtTranslations;
    end;
  TTMConvertRec = T_TMConvertRec;

function _XtEventTimerEventType : TTMLongCard;  


const
  KeysymModMask = 1 shl 27;  

  AnyButtonMask = 1 shl 28;  
type
  T_EventRec = record
      modifiers : TTMLongCard;
      modifierMask : TTMLongCard;
      lateModifiers : TLateBindingsPtr;
      eventType : TTMLongCard;
      eventCode : TTMLongCard;
      eventCodeMask : TTMLongCard;
      matchEvent : TMatchProc;
      standard : TBoolean;
    end;
  TEvent = T_EventRec;

  TEventSeqPtr = ^T_EventSeqRec;





  T_EventSeqRec = record
      event : TEvent;
      state : TStatePtr;
      next : TEventSeqPtr;
      actions : TActionPtr;
    end;
  TEventSeqRec = T_EventSeqRec;

  TEventRec = TEventSeqRec;

  TEventPtr = TEventSeqPtr;

  T_TMEventRec = record
      xev : ^TXEvent;
      event : TEvent;
    end;
  TTMEventRec = T_TMEventRec;


  T_ActionHookRec = record
      next : ^T_ActionHookRec;
      app : TXtAppContext;
      proc : TXtActionHookProc;
      closure : TXtPointer;
    end;
  TActionHookRec = T_ActionHookRec;
  TActionHook = ^T_ActionHookRec;


const
  TMKEYCACHELOG2 = 6;  
  TMKEYCACHESIZE = 1 shl TMKEYCACHELOG2;  

type
  T_KeyCacheRec = record
      modifiers_return : array[0..255] of byte;
      keycode : array[0..(TMKEYCACHESIZE)-1] of TKeyCode;
      modifiers : array[0..(TMKEYCACHESIZE)-1] of byte;
      keysym : array[0..(TMKEYCACHESIZE)-1] of TKeySym;
    end;
  TTMKeyCache = T_KeyCacheRec;


  T_TMKeyContextRec = record
      event : ^TXEvent;
      serial : dword;
      keysym : TKeySym;
      modifiers : TModifiers;
      keycache : TTMKeyCache;
    end;
  TTMKeyContextRec = T_TMKeyContextRec;
  TTMKeyContext = ^T_TMKeyContextRec;
//// {$ifdef TRACE_TM}
//// {$endif}

type
  T_TMGlobalRec = record
      typeMatchSegmentTbl : ^^TTMTypeMatchRec;
      numTypeMatches : TTMShortCard;
      numTypeMatchSegments : TTMShortCard;
      typeMatchSegmentTblSize : TTMShortCard;
      modMatchSegmentTbl : ^^TTMModifierMatchRec;
      numModMatches : TTMShortCard;
      numModMatchSegments : TTMShortCard;
      modMatchSegmentTblSize : TTMShortCard;
      newMatchSemantics : TBoolean;
      tmTbl : ^TXtTranslations;
      numTms : TTMShortCard;
      tmTblSize : TTMShortCard;
      bindCacheTbl : ^^T_TMBindCacheRec;
      numBindCache : TTMShortCard;
      bindCacheTblSize : TTMShortCard;
      numLateBindings : TTMShortCard;
      numBranchHeads : TTMShortCard;
      numComplexStates : TTMShortCard;
      numComplexActions : TTMShortCard;
    end;
  TTMGlobalRec = T_TMGlobalRec;
//// (* error 
//// extern TMGlobalRec _XtGlobalTM;
in declaration at line 344 *)

    const
      TM_MOD_SEGMENT_SIZE = 16;      
      TM_TYPE_SEGMENT_SIZE = 16;      
//// (* error 
////    &((_XtGlobalTM.typeMatchSegmentTbl[((idx) >> 4)])[(idx) & 15]))
in define line 351 *)
//// (* error 
////    &((_XtGlobalTM.modMatchSegmentTbl[(idx) >> 4])[(idx) & 15]))
in define line 354 *)


    function TMNewMatchSemantics : longint;    

    function TMBranchMore(branch : longint) : longint;    

    function TMComplexBranchHead(tree,br : longint) : longint;    

    function TMGetComplexBindEntry(bindData,idx : longint) : TTMComplexBindProcs;    

    function TMGetSimpleBindEntry(bindData,idx : longint) : TTMSimpleBindProcs;    

//// (* error 
////         _XtBuildKeysymTables(dpy, pd)
in define line 371 *)


procedure _XtPopup(_para1:TWidget; _para2:TXtGrabKind; _para3:T_XtBoolean);cdecl;external;

function _XtPrintXlations(_para1:TWidget; _para2:TXtTranslations; _para3:TWidget; _para4:T_XtBoolean):T_XtString;cdecl;external;

procedure _XtRegisterGrabs(_para1:TWidget);cdecl;external;

function _XtInitializeActionData(_para1:PT_XtActionsRec; _para2:TCardinal; _para3:T_XtBoolean):TXtPointer;cdecl;external;

procedure _XtAddEventSeqToStateTree(_para1:TEventSeqPtr; _para2:TTMParseStateTree);cdecl;external;

function _XtMatchUsingStandardMods(_para1:TTMTypeMatch; _para2:TTMModifierMatch; _para3:TTMEventPtr):TBoolean;cdecl;external;

function _XtMatchUsingDontCareMods(_para1:TTMTypeMatch; _para2:TTMModifierMatch; _para3:TTMEventPtr):TBoolean;cdecl;external;

function _XtRegularMatch(_para1:TTMTypeMatch; _para2:TTMModifierMatch; _para3:TTMEventPtr):TBoolean;cdecl;external;

function _XtMatchAtom(_para1:TTMTypeMatch; _para2:TTMModifierMatch; _para3:TTMEventPtr):TBoolean;cdecl;external;

procedure _XtTranslateEvent(_para1:TWidget; _para2:PTXEvent);cdecl;external;
//// {$include "CallbackI.h"}
//// {$include "EventI.h"}
//// {$include "HookObjI.h"}
//// {$include "PassivGraI.h"}
//// {$include "ThreadsI.h"}
//// {$include "InitialI.h"}
//// {$include "ResourceI.h"}
//// {$include "StringDefs.h"}

procedure _XtBuildKeysymTables(dpy:PTDisplay; pd:TXtPerDisplay);cdecl;external;
//// {$ifndef NO_MIT_HACKS}


procedure _XtDisplayTranslations(_para1:TWidget; _para2:PTXEvent; _para3:PTString; _para4:PTCardinal);cdecl;external;

procedure _XtDisplayAccelerators(_para1:TWidget; _para2:PTXEvent; _para3:PTString; _para4:PTCardinal);cdecl;external;

procedure _XtDisplayInstalledAccelerators(_para1:TWidget; _para2:PTXEvent; _para3:PTString; _para4:PTCardinal);cdecl;external;
//// {$endif}



procedure _XtPopupInitialize(_para1:TXtAppContext);cdecl;external;

procedure _XtBindActions(_para1:TWidget; _para2:TXtTM);cdecl;external;

function _XtComputeLateBindings(_para1:PTDisplay; _para2:TLateBindingsPtr; _para3:PTModifiers; _para4:PTModifiers):TBoolean;cdecl;external;

function _XtCreateXlations(_para1:PTTMStateTree; _para2:TTMShortCard; _para3:TXtTranslations; _para4:TXtTranslations):TXtTranslations;cdecl;external;

function _XtCvtMergeTranslations(_para1:PTDisplay; _para2:TXrmValuePtr; _para3:PTCardinal; _para4:TXrmValuePtr; _para5:TXrmValuePtr; 
               _para6:PTXtPointer):TBoolean;cdecl;external;
procedure _XtRemoveStateTreeByIndex(_para1:TXtTranslations; _para2:TTMShortCard);cdecl;external;

procedure _XtFreeTranslations(_para1:TXtAppContext; _para2:TXrmValuePtr; _para3:TXtPointer; _para4:TXrmValuePtr; _para5:PTCardinal);cdecl;external;

function _XtGetModifierIndex(_para1:PTEvent):TTMShortCard;cdecl;external;

function _XtGetQuarkIndex(_para1:TTMParseStateTree; _para2:TXrmQuark):TTMShortCard;cdecl;external;

function _XtGetTranslationValue(_para1:TWidget):TXtTranslations;cdecl;external;

function _XtGetTypeIndex(_para1:PTEvent):TTMShortCard;cdecl;external;

procedure _XtGrabInitialize(_para1:TXtAppContext);cdecl;external;

procedure _XtInstallTranslations(_para1:TWidget);cdecl;external;

procedure _XtRemoveTranslations(_para1:TWidget);cdecl;external;

procedure _XtDestroyTMData(_para1:TWidget);cdecl;external;

procedure _XtMergeTranslations(_para1:TWidget; _para2:TXtTranslations; _para3:T_XtTranslateOp);cdecl;external;

procedure _XtActionInitialize(_para1:TXtAppContext);cdecl;external;

function _XtParseTreeToStateTree(_para1:TTMParseStateTree):TTMStateTree;cdecl;external;

function _XtPrintActions(_para1:PTActionRec; _para2:PTXrmQuark):TString;cdecl;external;
function _XtPrintState(_para1:TTMStateTree; _para2:TTMBranchHead):TString;cdecl;external;

function _XtPrintEventSeq(_para1:TEventSeqPtr; _para2:PTDisplay):TString;cdecl;external;

    type

      T_XtTraversalProc = function (_para1:TStatePtr; _para2:TXtPointer):TBoolean;cdecl;


procedure _XtTraverseStateTree(_para1:TTMStateTree; _para2:T_XtTraversalProc; _para3:TXtPointer);cdecl;external;
procedure _XtTranslateInitialize;cdecl;external;

procedure _XtAddTMConverters(_para1:TConverterTable);cdecl;external;

procedure _XtUnbindActions(_para1:TWidget; _para2:TXtTranslations; _para3:TTMBindData);cdecl;external;

procedure _XtUnmergeTranslations(_para1:TWidget; _para2:TXtTranslations);cdecl;external;

procedure _XtAllocTMContext(pd:TXtPerDisplay);cdecl;external;
//// (* error 
//// _XFUNCPROTOEND

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xdefs.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xdefs.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xdefs.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XDEFS_H}
//// {$define _XDEFS_H}
//// {$ifdef _XSERVER64}
//// {$include <X11/Xmd.h>}
//// {$endif}
//// {$ifndef _XTYPEDEF_ATOM}
//// {$define _XTYPEDEF_ATOM}
//// {$ifndef _XSERVER64}
type
  TAtom = dword;
//// {$else}
type
  TAtom = TCARD32;
//// {$endif}
//// {$endif}
//// {$ifndef Bool}
//// {$ifndef _XTYPEDEF_BOOL}
//// {$define _XTYPEDEF_BOOL}
type
  TBool = longint;
//// {$endif}
//// {$endif}
//// {$ifndef _XTYPEDEF_POINTER}
//// {$define _XTYPEDEF_POINTER}
type
  Tpointer = pointer;
//// {$endif}
//// {$ifndef _XTYPEDEF_CLIENTPTR}
type
  TClientPtr = ^T_Client;
//// {$define _XTYPEDEF_CLIENTPTR}
//// {$endif}
//// {$ifndef _XTYPEDEF_XID}
//// {$define _XTYPEDEF_XID}
//// {$ifndef _XSERVER64}
type
  TXID = dword;
//// {$else}
type
  TXID = TCARD32;
//// {$endif}
//// {$endif}
//// {$ifndef _XTYPEDEF_MASK}
//// {$define _XTYPEDEF_MASK}
//// {$ifndef _XSERVER64}
type
  TMask = dword;
//// {$else}
type
  TMask = TCARD32;
//// {$endif}
//// {$endif}
//// {$ifndef _XTYPEDEF_FONTPTR}
//// {$define _XTYPEDEF_FONTPTR}
type
  TFontPtr = ^T_Font;

//// {$endif}
//// {$ifndef _XTYPEDEF_FONT}
//// {$define _XTYPEDEF_FONT}
type
  TFont = TXID;
//// {$endif}
//// {$ifndef _XTYPEDEF_FSID}
//// {$ifndef _XSERVER64}
type
  TFSID = dword;
//// {$else}
type
  TFSID = TCARD32;
//// {$endif}
//// {$endif}
type
  TAccContext = TFSID;


  TOSTimePtr = ^^Ttimeval;

  TBlockHandlerProcPtr = procedure (_para1:pointer; _para2:TOSTimePtr; _para3:pointer);cdecl;
//// {$endif}

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xpoll.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xpoll.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xpoll.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XPOLL_H_}
//// {$define _XPOLL_H_}
//// {$if !defined(WIN32) || defined(__CYGWIN__)}
//// {$ifndef USE_POLL}
//// {$include <X11/Xos.h>}
//// {$include <sys/select.h>  /* Get the FD_* macros. */}
//// {$include <X11/Xmd.h>}
//// {$ifdef CSRG_BASED}
//// {$include <sys/param.h>}
//// {$if BSD < 199103}
type
  Tfd_mask = longint;
//// {$endif}
//// {$endif}
//// {$if defined(FD_SETSIZE) && FD_SETSIZE < 512}

const
  XFD_SETSIZE = FD_SETSIZE;  
//// {$else}

const
  XFD_SETSIZE = 512;  
//// {$ifndef FD_SETSIZE}

const
  FD_SETSIZE = XFD_SETSIZE;  
//// {$endif}
//// {$endif}
//// {$ifndef NBBY}


const
  NBBY = 8;  
//// {$endif}
//// {$ifndef NFDBITS}


function NFDBITS : longint; { return type might be wrong }

//// {$endif}
//// {$ifndef howmany}

function howmany(x,y : longint) : longint;

//// {$endif}
//// {$if defined(BSD) && BSD < 198911 }
type
  Tfd_set = record
      fds_bits : array[0..(howmany(FD_SETSIZE,NFDBITS))-1] of Tfd_mask;
    end;
//// {$endif}

function Select(n,r,w,e,t : longint) : longint;

const
  __X_FDS_BITS = __fds_bits;  
//// {$ifndef __FDS_BITS}

function __FDS_BITS(p : longint) : longint;

//// {$endif}
//// (* error 
//// #define __XFDS_BITS(p, n) (__FDS_BITS(p))[n]
in define line 105 *)
//// {$ifndef FD_SET}
//// (* error 
//// #define FD_SET(n, p)    (__XFDS_BITS(p, ((n)/NFDBITS)) |= ((fd_mask)1 << ((n) % NFDBITS)))
in define line 108 *)
//// {$endif}
//// {$ifndef FD_CLR}
//// (* error 
//// #define FD_CLR(n, p)    (__XFDS_BITS((p), ((n)/NFDBITS)) &= ~((fd_mask)1 << ((n) % NFDBITS)))
in define line 111 *)
//// {$endif}
//// {$ifndef FD_ISSET}
//// (* error 
//// #define FD_ISSET(n, p)  ((__XFDS_BITS((p), ((n)/NFDBITS))) & ((fd_mask)1 << ((n) % NFDBITS)))
in define line 114 *)
//// {$endif}
//// {$ifndef FD_ZERO}
//// (* error 
//// #define FD_ZERO(p)      bzero((char *)(p), sizeof(*(p)))
in define line 117 *)
//// {$endif}

//// (* error 
////         ((howmany(FD_SETSIZE, NFDBITS) > 0 && (__XFDS_BITS(p, 0))) || \
in define line 141 *)
//// (* error 
//// #define XFD_COPYSET(src,dst) { \
in declaration at line 145 *)
//// (* error 
////         int __i__; \
//// (* error 
//// 		for (__i__ = 0; __i__ < howmany(FD_SETSIZE, NFDBITS); __i__++) \
in declaration at line 146 *)
//// (* error 
//// 		for (__i__ = 0; __i__ < howmany(FD_SETSIZE, NFDBITS); __i__++) \
in declaration at line 146 *)
//// (* error 
//// 		for (__i__ = 0; __i__ < howmany(FD_SETSIZE, NFDBITS); __i__++) \
in declaration at line 147 *)
//// (* error 
////             __XFDS_BITS((dst), __i__) = __XFDS_BITS((src), __i__); \
//// (* error 
////         }
in declaration at line 150 *)
//// (* error 
////         int __i__; \
//// (* error 
////         for (__i__ = 0; __i__ < howmany(FD_SETSIZE, NFDBITS); __i__++) \
in declaration at line 151 *)
//// (* error 
////         for (__i__ = 0; __i__ < howmany(FD_SETSIZE, NFDBITS); __i__++) \
in declaration at line 151 *)
//// (* error 
////         for (__i__ = 0; __i__ < howmany(FD_SETSIZE, NFDBITS); __i__++) \
in declaration at line 152 *)
//// (* error 
////             __XFDS_BITS((dst), __i__) = ((__XFDS_BITS((b1), __i__)) & (__XFDS_BITS((b2), __i__))); \
//// (* error 
////         }
in declaration at line 155 *)
//// (* error 
////         int __i__; \
//// (* error 
////         for (__i__ = 0; __i__ < howmany(FD_SETSIZE, NFDBITS); __i__++) \
in declaration at line 156 *)
//// (* error 
////         for (__i__ = 0; __i__ < howmany(FD_SETSIZE, NFDBITS); __i__++) \
in declaration at line 156 *)
//// (* error 
////         for (__i__ = 0; __i__ < howmany(FD_SETSIZE, NFDBITS); __i__++) \
in declaration at line 157 *)
//// (* error 
//// 		__XFDS_BITS((dst), __i__) = ((__XFDS_BITS((b1), __i__)) | (__XFDS_BITS((b2), __i__))); \
//// (* error 
////         }        
in declaration at line 160 *)
//// (* error 
////         int __i__; \
//// (* error 
////         for (__i__ = 0; __i__ < howmany(FD_SETSIZE, NFDBITS); __i__++) \
in declaration at line 161 *)
//// (* error 
////         for (__i__ = 0; __i__ < howmany(FD_SETSIZE, NFDBITS); __i__++) \
in declaration at line 161 *)
//// (* error 
////         for (__i__ = 0; __i__ < howmany(FD_SETSIZE, NFDBITS); __i__++) \
in declaration at line 162 *)
//// (* error 
////     		__XFDS_BITS((dst), __i__) &= ~(__XFDS_BITS((b1), __i__)); \
//// (* error 
////         }
//// {$else}

//// {$include <sys/poll.h>}
//// {$endif}

//// {$else}

in define line 171 *)
//// {$ifndef FD_SETSIZE}

    const
      FD_SETSIZE = XFD_SETSIZE;      
//// {$endif}
//// {$include <X11/Xwinsock.h>}

    function Select(n,r,w,e,t : longint) : longint;    

Tfd_set ignored *)
    function XFD_SETCOUNT(p : longint) : longint;    

Tfd_set ignored *)
    function XFD_FD(p,i : longint) : longint;    

    function XFD_ANYSET(p : longint) : longint;    

//// (* error 
//// #define XFD_COPYSET(src,dst) { \
in declaration at line 184 *)
//// (* error 
////     u_int __i; \
//// (* error 
////     FD_ZERO(dst); \
in declaration at line 185 *)
//// (* error 
////     FD_ZERO(dst); \
//// (* error 
////     for (__i = 0; __i < XFD_SETCOUNT(src) ; __i++) { \
in declaration at line 186 *)
//// (* error 
////     for (__i = 0; __i < XFD_SETCOUNT(src) ; __i++) { \
in declaration at line 186 *)
//// (* error 
////     for (__i = 0; __i < XFD_SETCOUNT(src) ; __i++) { \
in declaration at line 187 *)
//// (* error 
////         XFD_FD(dst,__i) = XFD_FD(src,__i); \
//// (* error 
////     } \
in declaration at line 189 *)
//// (* error 
////     XFD_SETCOUNT(dst) = XFD_SETCOUNT(src); \
//// (* error 
//// }
in declaration at line 193 *)
//// (* error 
////     u_int __i; \
//// (* error 
////     FD_ZERO(dst); \
in declaration at line 194 *)
//// (* error 
////     FD_ZERO(dst); \
//// (* error 
////     for (__i = 0; __i < XFD_SETCOUNT(b1) ; __i++) { \
in declaration at line 195 *)
//// (* error 
////     for (__i = 0; __i < XFD_SETCOUNT(b1) ; __i++) { \
in declaration at line 195 *)
//// (* error 
////     for (__i = 0; __i < XFD_SETCOUNT(b1) ; __i++) { \
in declaration at line 197 *)
//// (* error 
//// 	   FD_SET(XFD_FD(b1,__i), dst); \
//// (* error 
////     } \
in declaration at line 202 *)
//// (* error 
////     u_int __i; \
//// (* error 
////     if (dst != b1) XFD_COPYSET(b1,dst); \
in declaration at line 203 *)
//// (* error 
////     if (dst != b1) XFD_COPYSET(b1,dst); \
//// (* error 
////     for (__i = 0; __i < XFD_SETCOUNT(b2) ; __i++) { \
in declaration at line 204 *)
//// (* error 
////     for (__i = 0; __i < XFD_SETCOUNT(b2) ; __i++) { \
in declaration at line 204 *)
//// (* error 
////     for (__i = 0; __i < XFD_SETCOUNT(b2) ; __i++) { \
in declaration at line 206 *)
//// (* error 
//// 	   FD_SET(XFD_FD(b2,__i), dst); \
//// (* error 
////     } \

in declaration at line 212 *)
//// (* error 
////     u_int __i; \
//// (* error 
////     for (__i = 0; __i < XFD_SETCOUNT(b1) ; __i++) { \
in declaration at line 213 *)
//// (* error 
////     for (__i = 0; __i < XFD_SETCOUNT(b1) ; __i++) { \
in declaration at line 213 *)
//// (* error 
////     for (__i = 0; __i < XFD_SETCOUNT(b1) ; __i++) { \
in declaration at line 214 *)
//// (* error 
//// 	FD_CLR(XFD_FD(b1,__i), dst); \
//// (* error 
////     } \

//// {$undef FD_SET}
in declaration at line 223 *)
//// (* error 
////         XFD_FD(set,XFD_SETCOUNT(set)++)=(fd); \
//// (* error 
//// } while(0)
in define line 226 *)
//// {$endif}

//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/keysymdef.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/keysymdef.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/keysymdef.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}






const
  XK_VoidSymbol = $ffffff;  
//// {$ifdef XK_MISCELLANY}


  XK_BackSpace = $ff08;  
  XK_Tab = $ff09;  

  XK_Linefeed = $ff0a;  
  XK_Clear = $ff0b;  

  XK_Return = $ff0d;  

  XK_Pause = $ff13;  
  XK_Scroll_Lock = $ff14;  
  XK_Sys_Req = $ff15;  
  XK_Escape = $ff1b;  

  XK_Delete = $ffff;  


  XK_Multi_key = $ff20;  
  XK_Codeinput = $ff37;  
  XK_SingleCandidate = $ff3c;  
  XK_MultipleCandidate = $ff3d;  
  XK_PreviousCandidate = $ff3e;  


  XK_Kanji = $ff21;  

  XK_Muhenkan = $ff22;  

  XK_Henkan_Mode = $ff23;  

  XK_Henkan = $ff23;  

  XK_Romaji = $ff24;  

  XK_Hiragana = $ff25;  

  XK_Katakana = $ff26;  

  XK_Hiragana_Katakana = $ff27;  

  XK_Zenkaku = $ff28;  

  XK_Hankaku = $ff29;  

  XK_Zenkaku_Hankaku = $ff2a;  

  XK_Touroku = $ff2b;  

  XK_Massyo = $ff2c;  

  XK_Kana_Lock = $ff2d;  

  XK_Kana_Shift = $ff2e;  

  XK_Eisu_Shift = $ff2f;  

  XK_Eisu_toggle = $ff30;  

  XK_Kanji_Bangou = $ff37;  

  XK_Zen_Koho = $ff3d;  

  XK_Mae_Koho = $ff3e;  


  XK_Home = $ff50;  

  XK_Left = $ff51;  

  XK_Up = $ff52;  

  XK_Right = $ff53;  

  XK_Down = $ff54;  

  XK_Prior = $ff55;  
  XK_Page_Up = $ff55;  

  XK_Next = $ff56;  
  XK_Page_Down = $ff56;  

  XK_End = $ff57;  

  XK_Begin = $ff58;  


  XK_Select = $ff60;  
  XK_Print = $ff61;  

  XK_Execute = $ff62;  

  XK_Insert = $ff63;  
  XK_Undo = $ff65;  

  XK_Redo = $ff66;  
  XK_Menu = $ff67;  

  XK_Find = $ff68;  

  XK_Cancel = $ff69;  

  XK_Help = $ff6a;  
  XK_Break = $ff6b;  

  XK_Mode_switch = $ff7e;  

  XK_script_switch = $ff7e;  
  XK_Num_Lock = $ff7f;  


  XK_KP_Space = $ff80;  
  XK_KP_Tab = $ff89;  

  XK_KP_Enter = $ff8d;  

  XK_KP_F1 = $ff91;  
  XK_KP_F2 = $ff92;  
  XK_KP_F3 = $ff93;  
  XK_KP_F4 = $ff94;  
  XK_KP_Home = $ff95;  
  XK_KP_Left = $ff96;  
  XK_KP_Up = $ff97;  
  XK_KP_Right = $ff98;  
  XK_KP_Down = $ff99;  
  XK_KP_Prior = $ff9a;  
  XK_KP_Page_Up = $ff9a;  
  XK_KP_Next = $ff9b;  
  XK_KP_Page_Down = $ff9b;  
  XK_KP_End = $ff9c;  
  XK_KP_Begin = $ff9d;  
  XK_KP_Insert = $ff9e;  
  XK_KP_Delete = $ff9f;  

  XK_KP_Equal = $ffbd;  
  XK_KP_Multiply = $ffaa;  
  XK_KP_Add = $ffab;  

  XK_KP_Separator = $ffac;  
  XK_KP_Subtract = $ffad;  
  XK_KP_Decimal = $ffae;  
  XK_KP_Divide = $ffaf;  
  XK_KP_0 = $ffb0;  
  XK_KP_1 = $ffb1;  
  XK_KP_2 = $ffb2;  
  XK_KP_3 = $ffb3;  
  XK_KP_4 = $ffb4;  
  XK_KP_5 = $ffb5;  
  XK_KP_6 = $ffb6;  
  XK_KP_7 = $ffb7;  
  XK_KP_8 = $ffb8;  
  XK_KP_9 = $ffb9;  

  XK_F1 = $ffbe;  
  XK_F2 = $ffbf;  
  XK_F3 = $ffc0;  
  XK_F4 = $ffc1;  
  XK_F5 = $ffc2;  
  XK_F6 = $ffc3;  
  XK_F7 = $ffc4;  
  XK_F8 = $ffc5;  
  XK_F9 = $ffc6;  
  XK_F10 = $ffc7;  
  XK_F11 = $ffc8;  
  XK_L1 = $ffc8;  
  XK_F12 = $ffc9;  
  XK_L2 = $ffc9;  
  XK_F13 = $ffca;  
  XK_L3 = $ffca;  
  XK_F14 = $ffcb;  
  XK_L4 = $ffcb;  
  XK_F15 = $ffcc;  
  XK_L5 = $ffcc;  
  XK_F16 = $ffcd;  
  XK_L6 = $ffcd;  
  XK_F17 = $ffce;  
  XK_L7 = $ffce;  
  XK_F18 = $ffcf;  
  XK_L8 = $ffcf;  
  XK_F19 = $ffd0;  
  XK_L9 = $ffd0;  
  XK_F20 = $ffd1;  
  XK_L10 = $ffd1;  
  XK_F21 = $ffd2;  
  XK_R1 = $ffd2;  
  XK_F22 = $ffd3;  
  XK_R2 = $ffd3;  
  XK_F23 = $ffd4;  
  XK_R3 = $ffd4;  
  XK_F24 = $ffd5;  
  XK_R4 = $ffd5;  
  XK_F25 = $ffd6;  
  XK_R5 = $ffd6;  
  XK_F26 = $ffd7;  
  XK_R6 = $ffd7;  
  XK_F27 = $ffd8;  
  XK_R7 = $ffd8;  
  XK_F28 = $ffd9;  
  XK_R8 = $ffd9;  
  XK_F29 = $ffda;  
  XK_R9 = $ffda;  
  XK_F30 = $ffdb;  
  XK_R10 = $ffdb;  
  XK_F31 = $ffdc;  
  XK_R11 = $ffdc;  
  XK_F32 = $ffdd;  
  XK_R12 = $ffdd;  
  XK_F33 = $ffde;  
  XK_R13 = $ffde;  
  XK_F34 = $ffdf;  
  XK_R14 = $ffdf;  
  XK_F35 = $ffe0;  
  XK_R15 = $ffe0;  


  XK_Shift_L = $ffe1;  

  XK_Shift_R = $ffe2;  

  XK_Control_L = $ffe3;  

  XK_Control_R = $ffe4;  

  XK_Caps_Lock = $ffe5;  

  XK_Shift_Lock = $ffe6;  

  XK_Meta_L = $ffe7;  

  XK_Meta_R = $ffe8;  

  XK_Alt_L = $ffe9;  

  XK_Alt_R = $ffea;  

  XK_Super_L = $ffeb;  

  XK_Super_R = $ffec;  

  XK_Hyper_L = $ffed;  

  XK_Hyper_R = $ffee;  
//// {$endif}


//// {$ifdef XK_XKB_KEYS}

const
  XK_ISO_Lock = $fe01;  
  XK_ISO_Level2_Latch = $fe02;  
  XK_ISO_Level3_Shift = $fe03;  
  XK_ISO_Level3_Latch = $fe04;  
  XK_ISO_Level3_Lock = $fe05;  
  XK_ISO_Level5_Shift = $fe11;  
  XK_ISO_Level5_Latch = $fe12;  
  XK_ISO_Level5_Lock = $fe13;  

  XK_ISO_Group_Shift = $ff7e;  
  XK_ISO_Group_Latch = $fe06;  
  XK_ISO_Group_Lock = $fe07;  
  XK_ISO_Next_Group = $fe08;  
  XK_ISO_Next_Group_Lock = $fe09;  
  XK_ISO_Prev_Group = $fe0a;  
  XK_ISO_Prev_Group_Lock = $fe0b;  
  XK_ISO_First_Group = $fe0c;  
  XK_ISO_First_Group_Lock = $fe0d;  
  XK_ISO_Last_Group = $fe0e;  
  XK_ISO_Last_Group_Lock = $fe0f;  
  XK_ISO_Left_Tab = $fe20;  
  XK_ISO_Move_Line_Up = $fe21;  
  XK_ISO_Move_Line_Down = $fe22;  
  XK_ISO_Partial_Line_Up = $fe23;  
  XK_ISO_Partial_Line_Down = $fe24;  
  XK_ISO_Partial_Space_Left = $fe25;  
  XK_ISO_Partial_Space_Right = $fe26;  
  XK_ISO_Set_Margin_Left = $fe27;  
  XK_ISO_Set_Margin_Right = $fe28;  
  XK_ISO_Release_Margin_Left = $fe29;  
  XK_ISO_Release_Margin_Right = $fe2a;  
  XK_ISO_Release_Both_Margins = $fe2b;  
  XK_ISO_Fast_Cursor_Left = $fe2c;  
  XK_ISO_Fast_Cursor_Right = $fe2d;  
  XK_ISO_Fast_Cursor_Up = $fe2e;  
  XK_ISO_Fast_Cursor_Down = $fe2f;  
  XK_ISO_Continuous_Underline = $fe30;  
  XK_ISO_Discontinuous_Underline = $fe31;  
  XK_ISO_Emphasize = $fe32;  
  XK_ISO_Center_Object = $fe33;  
  XK_ISO_Enter = $fe34;  
  XK_dead_grave = $fe50;  
  XK_dead_acute = $fe51;  
  XK_dead_circumflex = $fe52;  
  XK_dead_tilde = $fe53;  

  XK_dead_perispomeni = $fe53;  
  XK_dead_macron = $fe54;  
  XK_dead_breve = $fe55;  
  XK_dead_abovedot = $fe56;  
  XK_dead_diaeresis = $fe57;  
  XK_dead_abovering = $fe58;  
  XK_dead_doubleacute = $fe59;  
  XK_dead_caron = $fe5a;  
  XK_dead_cedilla = $fe5b;  
  XK_dead_ogonek = $fe5c;  
  XK_dead_iota = $fe5d;  
  XK_dead_voiced_sound = $fe5e;  
  XK_dead_semivoiced_sound = $fe5f;  
  XK_dead_belowdot = $fe60;  
  XK_dead_hook = $fe61;  
  XK_dead_horn = $fe62;  
  XK_dead_stroke = $fe63;  
  XK_dead_abovecomma = $fe64;  

  XK_dead_psili = $fe64;  
  XK_dead_abovereversedcomma = $fe65;  

  XK_dead_dasia = $fe65;  
  XK_dead_doublegrave = $fe66;  
  XK_dead_belowring = $fe67;  
  XK_dead_belowmacron = $fe68;  
  XK_dead_belowcircumflex = $fe69;  
  XK_dead_belowtilde = $fe6a;  
  XK_dead_belowbreve = $fe6b;  
  XK_dead_belowdiaeresis = $fe6c;  
  XK_dead_invertedbreve = $fe6d;  
  XK_dead_belowcomma = $fe6e;  
  XK_dead_currency = $fe6f;  

  XK_dead_lowline = $fe90;  
  XK_dead_aboveverticalline = $fe91;  
  XK_dead_belowverticalline = $fe92;  
  XK_dead_longsolidusoverlay = $fe93;  

  XK_dead_a = $fe80;  
  XK_dead_A = $fe81;  
  XK_dead_e = $fe82;  
  XK_dead_E = $fe83;  
  XK_dead_i = $fe84;  
  XK_dead_I = $fe85;  
  XK_dead_o = $fe86;  
  XK_dead_O = $fe87;  
  XK_dead_u = $fe88;  
  XK_dead_U = $fe89;  
  XK_dead_small_schwa = $fe8a;  
  XK_dead_capital_schwa = $fe8b;  
  XK_dead_greek = $fe8c;  
  XK_First_Virtual_Screen = $fed0;  
  XK_Prev_Virtual_Screen = $fed1;  
  XK_Next_Virtual_Screen = $fed2;  
  XK_Last_Virtual_Screen = $fed4;  
  XK_Terminate_Server = $fed5;  
  XK_AccessX_Enable = $fe70;  
  XK_AccessX_Feedback_Enable = $fe71;  
  XK_RepeatKeys_Enable = $fe72;  
  XK_SlowKeys_Enable = $fe73;  
  XK_BounceKeys_Enable = $fe74;  
  XK_StickyKeys_Enable = $fe75;  
  XK_MouseKeys_Enable = $fe76;  
  XK_MouseKeys_Accel_Enable = $fe77;  
  XK_Overlay1_Enable = $fe78;  
  XK_Overlay2_Enable = $fe79;  
  XK_AudibleBell_Enable = $fe7a;  
  XK_Pointer_Left = $fee0;  
  XK_Pointer_Right = $fee1;  
  XK_Pointer_Up = $fee2;  
  XK_Pointer_Down = $fee3;  
  XK_Pointer_UpLeft = $fee4;  
  XK_Pointer_UpRight = $fee5;  
  XK_Pointer_DownLeft = $fee6;  
  XK_Pointer_DownRight = $fee7;  
  XK_Pointer_Button_Dflt = $fee8;  
  XK_Pointer_Button1 = $fee9;  
  XK_Pointer_Button2 = $feea;  
  XK_Pointer_Button3 = $feeb;  
  XK_Pointer_Button4 = $feec;  
  XK_Pointer_Button5 = $feed;  
  XK_Pointer_DblClick_Dflt = $feee;  
  XK_Pointer_DblClick1 = $feef;  
  XK_Pointer_DblClick2 = $fef0;  
  XK_Pointer_DblClick3 = $fef1;  
  XK_Pointer_DblClick4 = $fef2;  
  XK_Pointer_DblClick5 = $fef3;  
  XK_Pointer_Drag_Dflt = $fef4;  
  XK_Pointer_Drag1 = $fef5;  
  XK_Pointer_Drag2 = $fef6;  
  XK_Pointer_Drag3 = $fef7;  
  XK_Pointer_Drag4 = $fef8;  
  XK_Pointer_Drag5 = $fefd;  
  XK_Pointer_EnableKeys = $fef9;  
  XK_Pointer_Accelerate = $fefa;  
  XK_Pointer_DfltBtnNext = $fefb;  
  XK_Pointer_DfltBtnPrev = $fefc;  

  XK_ch = $fea0;  
  XK_Ch = $fea1;  
  XK_CH = $fea2;  
  XK_c_h = $fea3;  
  XK_C_h = $fea4;  
  XK_C_H = $fea5;  
//// {$endif}


//// {$ifdef XK_3270}

const
  XK_3270_Duplicate = $fd01;  
  XK_3270_FieldMark = $fd02;  
  XK_3270_Right2 = $fd03;  
  XK_3270_Left2 = $fd04;  
  XK_3270_BackTab = $fd05;  
  XK_3270_EraseEOF = $fd06;  
  XK_3270_EraseInput = $fd07;  
  XK_3270_Reset = $fd08;  
  XK_3270_Quit = $fd09;  
  XK_3270_PA1 = $fd0a;  
  XK_3270_PA2 = $fd0b;  
  XK_3270_PA3 = $fd0c;  
  XK_3270_Test = $fd0d;  
  XK_3270_Attn = $fd0e;  
  XK_3270_CursorBlink = $fd0f;  
  XK_3270_AltCursor = $fd10;  
  XK_3270_KeyClick = $fd11;  
  XK_3270_Jump = $fd12;  
  XK_3270_Ident = $fd13;  
  XK_3270_Rule = $fd14;  
  XK_3270_Copy = $fd15;  
  XK_3270_Play = $fd16;  
  XK_3270_Setup = $fd17;  
  XK_3270_Record = $fd18;  
  XK_3270_ChangeScreen = $fd19;  
  XK_3270_DeleteWord = $fd1a;  
  XK_3270_ExSelect = $fd1b;  
  XK_3270_CursorSelect = $fd1c;  
  XK_3270_PrintScreen = $fd1d;  
  XK_3270_Enter = $fd1e;  
//// {$endif}


//// {$ifdef XK_LATIN1}


const
  XK_space = $0020;  

  XK_exclam = $0021;  

  XK_quotedbl = $0022;  

  XK_numbersign = $0023;  

  XK_dollar = $0024;  

  XK_percent = $0025;  

  XK_ampersand = $0026;  

  XK_apostrophe = $0027;  

  XK_quoteright = $0027;  

  XK_parenleft = $0028;  

  XK_parenright = $0029;  

  XK_asterisk = $002a;  

  XK_plus = $002b;  

  XK_comma = $002c;  

  XK_minus = $002d;  

  XK_period = $002e;  

  XK_slash = $002f;  

  XK_0 = $0030;  

  XK_1 = $0031;  

  XK_2 = $0032;  

  XK_3 = $0033;  

  XK_4 = $0034;  

  XK_5 = $0035;  

  XK_6 = $0036;  

  XK_7 = $0037;  

  XK_8 = $0038;  

  XK_9 = $0039;  

  XK_colon = $003a;  

  XK_semicolon = $003b;  

  XK_less = $003c;  

  XK_equal = $003d;  

  XK_greater = $003e;  

  XK_question = $003f;  

  XK_at = $0040;  

  XK_A = $0041;  

  XK_B = $0042;  

  XK_C = $0043;  

  XK_D = $0044;  

  XK_E = $0045;  

  XK_F = $0046;  

  XK_G = $0047;  

  XK_H = $0048;  

  XK_I = $0049;  

  XK_J = $004a;  

  XK_K = $004b;  

  XK_L = $004c;  

  XK_M = $004d;  

  XK_N = $004e;  

  XK_O = $004f;  

  XK_P = $0050;  

  XK_Q = $0051;  

  XK_R = $0052;  

  XK_S = $0053;  

  XK_T = $0054;  

  XK_U = $0055;  

  XK_V = $0056;  

  XK_W = $0057;  

  XK_X = $0058;  

  XK_Y = $0059;  

  XK_Z = $005a;  

  XK_bracketleft = $005b;  

  XK_backslash = $005c;  

  XK_bracketright = $005d;  

  XK_asciicircum = $005e;  

  XK_underscore = $005f;  

  XK_grave = $0060;  

  XK_quoteleft = $0060;  

  XK_a = $0061;  

  XK_b = $0062;  

  XK_c = $0063;  

  XK_d = $0064;  

  XK_e = $0065;  

  XK_f = $0066;  

  XK_g = $0067;  

  XK_h = $0068;  

  XK_i = $0069;  

  XK_j = $006a;  

  XK_k = $006b;  

  XK_l = $006c;  

  XK_m = $006d;  

  XK_n = $006e;  

  XK_o = $006f;  

  XK_p = $0070;  

  XK_q = $0071;  

  XK_r = $0072;  

  XK_s = $0073;  

  XK_t = $0074;  

  XK_u = $0075;  

  XK_v = $0076;  

  XK_w = $0077;  

  XK_x = $0078;  

  XK_y = $0079;  

  XK_z = $007a;  

  XK_braceleft = $007b;  

  XK_bar = $007c;  

  XK_braceright = $007d;  

  XK_asciitilde = $007e;  

  XK_nobreakspace = $00a0;  

  XK_exclamdown = $00a1;  

  XK_cent = $00a2;  

  XK_sterling = $00a3;  

  XK_currency = $00a4;  

  XK_yen = $00a5;  

  XK_brokenbar = $00a6;  

  XK_section = $00a7;  

  XK_diaeresis = $00a8;  

  XK_copyright = $00a9;  

  XK_ordfeminine = $00aa;  

  XK_guillemotleft = $00ab;  

  XK_notsign = $00ac;  

  XK_hyphen = $00ad;  

  XK_registered = $00ae;  

  XK_macron = $00af;  

  XK_degree = $00b0;  

  XK_plusminus = $00b1;  

  XK_twosuperior = $00b2;  

  XK_threesuperior = $00b3;  

  XK_acute = $00b4;  

  XK_mu = $00b5;  

  XK_paragraph = $00b6;  

  XK_periodcentered = $00b7;  

  XK_cedilla = $00b8;  

  XK_onesuperior = $00b9;  

  XK_masculine = $00ba;  

  XK_guillemotright = $00bb;  

  XK_onequarter = $00bc;  

  XK_onehalf = $00bd;  

  XK_threequarters = $00be;  

  XK_questiondown = $00bf;  

  XK_Agrave = $00c0;  

  XK_Aacute = $00c1;  

  XK_Acircumflex = $00c2;  

  XK_Atilde = $00c3;  

  XK_Adiaeresis = $00c4;  

  XK_Aring = $00c5;  

  XK_AE = $00c6;  

  XK_Ccedilla = $00c7;  

  XK_Egrave = $00c8;  

  XK_Eacute = $00c9;  

  XK_Ecircumflex = $00ca;  

  XK_Ediaeresis = $00cb;  

  XK_Igrave = $00cc;  

  XK_Iacute = $00cd;  

  XK_Icircumflex = $00ce;  

  XK_Idiaeresis = $00cf;  

  XK_ETH = $00d0;  

  XK_Eth = $00d0;  

  XK_Ntilde = $00d1;  

  XK_Ograve = $00d2;  

  XK_Oacute = $00d3;  

  XK_Ocircumflex = $00d4;  

  XK_Otilde = $00d5;  

  XK_Odiaeresis = $00d6;  

  XK_multiply = $00d7;  

  XK_Oslash = $00d8;  

  XK_Ooblique = $00d8;  

  XK_Ugrave = $00d9;  

  XK_Uacute = $00da;  

  XK_Ucircumflex = $00db;  

  XK_Udiaeresis = $00dc;  

  XK_Yacute = $00dd;  

  XK_THORN = $00de;  

  XK_Thorn = $00de;  

  XK_ssharp = $00df;  

  XK_agrave = $00e0;  

  XK_aacute = $00e1;  

  XK_acircumflex = $00e2;  

  XK_atilde = $00e3;  

  XK_adiaeresis = $00e4;  

  XK_aring = $00e5;  

  XK_ae = $00e6;  

  XK_ccedilla = $00e7;  

  XK_egrave = $00e8;  

  XK_eacute = $00e9;  

  XK_ecircumflex = $00ea;  

  XK_ediaeresis = $00eb;  

  XK_igrave = $00ec;  

  XK_iacute = $00ed;  

  XK_icircumflex = $00ee;  

  XK_idiaeresis = $00ef;  

  XK_eth = $00f0;  

  XK_ntilde = $00f1;  

  XK_ograve = $00f2;  

  XK_oacute = $00f3;  

  XK_ocircumflex = $00f4;  

  XK_otilde = $00f5;  

  XK_odiaeresis = $00f6;  

  XK_division = $00f7;  

  XK_oslash = $00f8;  

  XK_ooblique = $00f8;  

  XK_ugrave = $00f9;  

  XK_uacute = $00fa;  

  XK_ucircumflex = $00fb;  

  XK_udiaeresis = $00fc;  

  XK_yacute = $00fd;  

  XK_thorn = $00fe;  

  XK_ydiaeresis = $00ff;  
//// {$endif}


//// {$ifdef XK_LATIN2}


const
  XK_Aogonek = $01a1;  

  XK_breve = $01a2;  

  XK_Lstroke = $01a3;  

  XK_Lcaron = $01a5;  

  XK_Sacute = $01a6;  

  XK_Scaron = $01a9;  

  XK_Scedilla = $01aa;  

  XK_Tcaron = $01ab;  

  XK_Zacute = $01ac;  

  XK_Zcaron = $01ae;  

  XK_Zabovedot = $01af;  

  XK_aogonek = $01b1;  

  XK_ogonek = $01b2;  

  XK_lstroke = $01b3;  

  XK_lcaron = $01b5;  

  XK_sacute = $01b6;  

  XK_caron = $01b7;  

  XK_scaron = $01b9;  

  XK_scedilla = $01ba;  

  XK_tcaron = $01bb;  

  XK_zacute = $01bc;  

  XK_doubleacute = $01bd;  

  XK_zcaron = $01be;  

  XK_zabovedot = $01bf;  

  XK_Racute = $01c0;  

  XK_Abreve = $01c3;  

  XK_Lacute = $01c5;  

  XK_Cacute = $01c6;  

  XK_Ccaron = $01c8;  

  XK_Eogonek = $01ca;  

  XK_Ecaron = $01cc;  

  XK_Dcaron = $01cf;  

  XK_Dstroke = $01d0;  

  XK_Nacute = $01d1;  

  XK_Ncaron = $01d2;  

  XK_Odoubleacute = $01d5;  

  XK_Rcaron = $01d8;  

  XK_Uring = $01d9;  

  XK_Udoubleacute = $01db;  

  XK_Tcedilla = $01de;  

  XK_racute = $01e0;  

  XK_abreve = $01e3;  

  XK_lacute = $01e5;  

  XK_cacute = $01e6;  

  XK_ccaron = $01e8;  

  XK_eogonek = $01ea;  

  XK_ecaron = $01ec;  

  XK_dcaron = $01ef;  

  XK_dstroke = $01f0;  

  XK_nacute = $01f1;  

  XK_ncaron = $01f2;  

  XK_odoubleacute = $01f5;  

  XK_rcaron = $01f8;  

  XK_uring = $01f9;  

  XK_udoubleacute = $01fb;  

  XK_tcedilla = $01fe;  

  XK_abovedot = $01ff;  
//// {$endif}


//// {$ifdef XK_LATIN3}


const
  XK_Hstroke = $02a1;  

  XK_Hcircumflex = $02a6;  

  XK_Iabovedot = $02a9;  

  XK_Gbreve = $02ab;  

  XK_Jcircumflex = $02ac;  

  XK_hstroke = $02b1;  

  XK_hcircumflex = $02b6;  

  XK_idotless = $02b9;  

  XK_gbreve = $02bb;  

  XK_jcircumflex = $02bc;  

  XK_Cabovedot = $02c5;  

  XK_Ccircumflex = $02c6;  

  XK_Gabovedot = $02d5;  

  XK_Gcircumflex = $02d8;  

  XK_Ubreve = $02dd;  

  XK_Scircumflex = $02de;  

  XK_cabovedot = $02e5;  

  XK_ccircumflex = $02e6;  

  XK_gabovedot = $02f5;  

  XK_gcircumflex = $02f8;  

  XK_ubreve = $02fd;  

  XK_scircumflex = $02fe;  
//// {$endif}


//// {$ifdef XK_LATIN4}


const
  XK_kra = $03a2;  

  XK_kappa = $03a2;  

  XK_Rcedilla = $03a3;  

  XK_Itilde = $03a5;  

  XK_Lcedilla = $03a6;  

  XK_Emacron = $03aa;  

  XK_Gcedilla = $03ab;  

  XK_Tslash = $03ac;  

  XK_rcedilla = $03b3;  

  XK_itilde = $03b5;  

  XK_lcedilla = $03b6;  

  XK_emacron = $03ba;  

  XK_gcedilla = $03bb;  

  XK_tslash = $03bc;  

  XK_ENG = $03bd;  

  XK_eng = $03bf;  

  XK_Amacron = $03c0;  

  XK_Iogonek = $03c7;  

  XK_Eabovedot = $03cc;  

  XK_Imacron = $03cf;  

  XK_Ncedilla = $03d1;  

  XK_Omacron = $03d2;  

  XK_Kcedilla = $03d3;  

  XK_Uogonek = $03d9;  

  XK_Utilde = $03dd;  

  XK_Umacron = $03de;  

  XK_amacron = $03e0;  

  XK_iogonek = $03e7;  

  XK_eabovedot = $03ec;  

  XK_imacron = $03ef;  

  XK_ncedilla = $03f1;  

  XK_omacron = $03f2;  

  XK_kcedilla = $03f3;  

  XK_uogonek = $03f9;  

  XK_utilde = $03fd;  

  XK_umacron = $03fe;  
//// {$endif}


//// {$ifdef XK_LATIN8}


const
  XK_Wcircumflex = $1000174;  

  XK_wcircumflex = $1000175;  

  XK_Ycircumflex = $1000176;  

  XK_ycircumflex = $1000177;  

  XK_Babovedot = $1001e02;  

  XK_babovedot = $1001e03;  

  XK_Dabovedot = $1001e0a;  

  XK_dabovedot = $1001e0b;  

  XK_Fabovedot = $1001e1e;  

  XK_fabovedot = $1001e1f;  

  XK_Mabovedot = $1001e40;  

  XK_mabovedot = $1001e41;  

  XK_Pabovedot = $1001e56;  

  XK_pabovedot = $1001e57;  

  XK_Sabovedot = $1001e60;  

  XK_sabovedot = $1001e61;  

  XK_Tabovedot = $1001e6a;  

  XK_tabovedot = $1001e6b;  

  XK_Wgrave = $1001e80;  

  XK_wgrave = $1001e81;  

  XK_Wacute = $1001e82;  

  XK_wacute = $1001e83;  

  XK_Wdiaeresis = $1001e84;  

  XK_wdiaeresis = $1001e85;  

  XK_Ygrave = $1001ef2;  

  XK_ygrave = $1001ef3;  
//// {$endif}


//// {$ifdef XK_LATIN9}


const
  XK_OE = $13bc;  

  XK_oe = $13bd;  

  XK_Ydiaeresis = $13be;  
//// {$endif}


//// {$ifdef XK_KATAKANA}


const
  XK_overline = $047e;  

  XK_kana_fullstop = $04a1;  

  XK_kana_openingbracket = $04a2;  

  XK_kana_closingbracket = $04a3;  

  XK_kana_comma = $04a4;  

  XK_kana_conjunctive = $04a5;  

  XK_kana_middledot = $04a5;  

  XK_kana_WO = $04a6;  

  XK_kana_a = $04a7;  

  XK_kana_i = $04a8;  

  XK_kana_u = $04a9;  

  XK_kana_e = $04aa;  

  XK_kana_o = $04ab;  

  XK_kana_ya = $04ac;  

  XK_kana_yu = $04ad;  

  XK_kana_yo = $04ae;  

  XK_kana_tsu = $04af;  

  XK_kana_tu = $04af;  

  XK_prolongedsound = $04b0;  

  XK_kana_A = $04b1;  

  XK_kana_I = $04b2;  

  XK_kana_U = $04b3;  

  XK_kana_E = $04b4;  

  XK_kana_O = $04b5;  

  XK_kana_KA = $04b6;  

  XK_kana_KI = $04b7;  

  XK_kana_KU = $04b8;  

  XK_kana_KE = $04b9;  

  XK_kana_KO = $04ba;  

  XK_kana_SA = $04bb;  

  XK_kana_SHI = $04bc;  

  XK_kana_SU = $04bd;  

  XK_kana_SE = $04be;  

  XK_kana_SO = $04bf;  

  XK_kana_TA = $04c0;  

  XK_kana_CHI = $04c1;  

  XK_kana_TI = $04c1;  

  XK_kana_TSU = $04c2;  

  XK_kana_TU = $04c2;  

  XK_kana_TE = $04c3;  

  XK_kana_TO = $04c4;  

  XK_kana_NA = $04c5;  

  XK_kana_NI = $04c6;  

  XK_kana_NU = $04c7;  

  XK_kana_NE = $04c8;  

  XK_kana_NO = $04c9;  

  XK_kana_HA = $04ca;  

  XK_kana_HI = $04cb;  

  XK_kana_FU = $04cc;  

  XK_kana_HU = $04cc;  

  XK_kana_HE = $04cd;  

  XK_kana_HO = $04ce;  

  XK_kana_MA = $04cf;  

  XK_kana_MI = $04d0;  

  XK_kana_MU = $04d1;  

  XK_kana_ME = $04d2;  

  XK_kana_MO = $04d3;  

  XK_kana_YA = $04d4;  

  XK_kana_YU = $04d5;  

  XK_kana_YO = $04d6;  

  XK_kana_RA = $04d7;  

  XK_kana_RI = $04d8;  

  XK_kana_RU = $04d9;  

  XK_kana_RE = $04da;  

  XK_kana_RO = $04db;  

  XK_kana_WA = $04dc;  

  XK_kana_N = $04dd;  

  XK_voicedsound = $04de;  

  XK_semivoicedsound = $04df;  

  XK_kana_switch = $ff7e;  
//// {$endif}


//// {$ifdef XK_ARABIC}


const
  XK_Farsi_0 = $10006f0;  

  XK_Farsi_1 = $10006f1;  

  XK_Farsi_2 = $10006f2;  

  XK_Farsi_3 = $10006f3;  

  XK_Farsi_4 = $10006f4;  

  XK_Farsi_5 = $10006f5;  

  XK_Farsi_6 = $10006f6;  

  XK_Farsi_7 = $10006f7;  

  XK_Farsi_8 = $10006f8;  

  XK_Farsi_9 = $10006f9;  

  XK_Arabic_percent = $100066a;  

  XK_Arabic_superscript_alef = $1000670;  

  XK_Arabic_tteh = $1000679;  

  XK_Arabic_peh = $100067e;  

  XK_Arabic_tcheh = $1000686;  

  XK_Arabic_ddal = $1000688;  

  XK_Arabic_rreh = $1000691;  

  XK_Arabic_comma = $05ac;  

  XK_Arabic_fullstop = $10006d4;  

  XK_Arabic_0 = $1000660;  

  XK_Arabic_1 = $1000661;  

  XK_Arabic_2 = $1000662;  

  XK_Arabic_3 = $1000663;  

  XK_Arabic_4 = $1000664;  

  XK_Arabic_5 = $1000665;  

  XK_Arabic_6 = $1000666;  

  XK_Arabic_7 = $1000667;  

  XK_Arabic_8 = $1000668;  

  XK_Arabic_9 = $1000669;  

  XK_Arabic_semicolon = $05bb;  

  XK_Arabic_question_mark = $05bf;  

  XK_Arabic_hamza = $05c1;  

  XK_Arabic_maddaonalef = $05c2;  

  XK_Arabic_hamzaonalef = $05c3;  

  XK_Arabic_hamzaonwaw = $05c4;  

  XK_Arabic_hamzaunderalef = $05c5;  

  XK_Arabic_hamzaonyeh = $05c6;  

  XK_Arabic_alef = $05c7;  

  XK_Arabic_beh = $05c8;  

  XK_Arabic_tehmarbuta = $05c9;  

  XK_Arabic_teh = $05ca;  

  XK_Arabic_theh = $05cb;  

  XK_Arabic_jeem = $05cc;  

  XK_Arabic_hah = $05cd;  

  XK_Arabic_khah = $05ce;  

  XK_Arabic_dal = $05cf;  

  XK_Arabic_thal = $05d0;  

  XK_Arabic_ra = $05d1;  

  XK_Arabic_zain = $05d2;  

  XK_Arabic_seen = $05d3;  

  XK_Arabic_sheen = $05d4;  

  XK_Arabic_sad = $05d5;  

  XK_Arabic_dad = $05d6;  

  XK_Arabic_tah = $05d7;  

  XK_Arabic_zah = $05d8;  

  XK_Arabic_ain = $05d9;  

  XK_Arabic_ghain = $05da;  

  XK_Arabic_tatweel = $05e0;  

  XK_Arabic_feh = $05e1;  

  XK_Arabic_qaf = $05e2;  

  XK_Arabic_kaf = $05e3;  

  XK_Arabic_lam = $05e4;  

  XK_Arabic_meem = $05e5;  

  XK_Arabic_noon = $05e6;  

  XK_Arabic_ha = $05e7;  

  XK_Arabic_heh = $05e7;  

  XK_Arabic_waw = $05e8;  

  XK_Arabic_alefmaksura = $05e9;  

  XK_Arabic_yeh = $05ea;  

  XK_Arabic_fathatan = $05eb;  

  XK_Arabic_dammatan = $05ec;  

  XK_Arabic_kasratan = $05ed;  

  XK_Arabic_fatha = $05ee;  

  XK_Arabic_damma = $05ef;  

  XK_Arabic_kasra = $05f0;  

  XK_Arabic_shadda = $05f1;  

  XK_Arabic_sukun = $05f2;  

  XK_Arabic_madda_above = $1000653;  

  XK_Arabic_hamza_above = $1000654;  

  XK_Arabic_hamza_below = $1000655;  

  XK_Arabic_jeh = $1000698;  

  XK_Arabic_veh = $10006a4;  

  XK_Arabic_keheh = $10006a9;  

  XK_Arabic_gaf = $10006af;  

  XK_Arabic_noon_ghunna = $10006ba;  

  XK_Arabic_heh_doachashmee = $10006be;  

  XK_Farsi_yeh = $10006cc;  

  XK_Arabic_farsi_yeh = $10006cc;  

  XK_Arabic_yeh_baree = $10006d2;  

  XK_Arabic_heh_goal = $10006c1;  

  XK_Arabic_switch = $ff7e;  
//// {$endif}


//// {$ifdef XK_CYRILLIC}


const
  XK_Cyrillic_GHE_bar = $1000492;  

  XK_Cyrillic_ghe_bar = $1000493;  

  XK_Cyrillic_ZHE_descender = $1000496;  

  XK_Cyrillic_zhe_descender = $1000497;  

  XK_Cyrillic_KA_descender = $100049a;  

  XK_Cyrillic_ka_descender = $100049b;  

  XK_Cyrillic_KA_vertstroke = $100049c;  

  XK_Cyrillic_ka_vertstroke = $100049d;  

  XK_Cyrillic_EN_descender = $10004a2;  

  XK_Cyrillic_en_descender = $10004a3;  

  XK_Cyrillic_U_straight = $10004ae;  

  XK_Cyrillic_u_straight = $10004af;  

  XK_Cyrillic_U_straight_bar = $10004b0;  

  XK_Cyrillic_u_straight_bar = $10004b1;  

  XK_Cyrillic_HA_descender = $10004b2;  

  XK_Cyrillic_ha_descender = $10004b3;  

  XK_Cyrillic_CHE_descender = $10004b6;  

  XK_Cyrillic_che_descender = $10004b7;  

  XK_Cyrillic_CHE_vertstroke = $10004b8;  

  XK_Cyrillic_che_vertstroke = $10004b9;  

  XK_Cyrillic_SHHA = $10004ba;  

  XK_Cyrillic_shha = $10004bb;  

  XK_Cyrillic_SCHWA = $10004d8;  

  XK_Cyrillic_schwa = $10004d9;  

  XK_Cyrillic_I_macron = $10004e2;  

  XK_Cyrillic_i_macron = $10004e3;  

  XK_Cyrillic_O_bar = $10004e8;  

  XK_Cyrillic_o_bar = $10004e9;  

  XK_Cyrillic_U_macron = $10004ee;  

  XK_Cyrillic_u_macron = $10004ef;  

  XK_Serbian_dje = $06a1;  

  XK_Macedonia_gje = $06a2;  

  XK_Cyrillic_io = $06a3;  

  XK_Ukrainian_ie = $06a4;  

  XK_Ukranian_je = $06a4;  

  XK_Macedonia_dse = $06a5;  

  XK_Ukrainian_i = $06a6;  

  XK_Ukranian_i = $06a6;  

  XK_Ukrainian_yi = $06a7;  

  XK_Ukranian_yi = $06a7;  

  XK_Cyrillic_je = $06a8;  

  XK_Serbian_je = $06a8;  

  XK_Cyrillic_lje = $06a9;  

  XK_Serbian_lje = $06a9;  

  XK_Cyrillic_nje = $06aa;  

  XK_Serbian_nje = $06aa;  

  XK_Serbian_tshe = $06ab;  

  XK_Macedonia_kje = $06ac;  

  XK_Ukrainian_ghe_with_upturn = $06ad;  

  XK_Byelorussian_shortu = $06ae;  

  XK_Cyrillic_dzhe = $06af;  

  XK_Serbian_dze = $06af;  

  XK_numerosign = $06b0;  

  XK_Serbian_DJE = $06b1;  

  XK_Macedonia_GJE = $06b2;  

  XK_Cyrillic_IO = $06b3;  

  XK_Ukrainian_IE = $06b4;  

  XK_Ukranian_JE = $06b4;  

  XK_Macedonia_DSE = $06b5;  

  XK_Ukrainian_I = $06b6;  

  XK_Ukranian_I = $06b6;  

  XK_Ukrainian_YI = $06b7;  

  XK_Ukranian_YI = $06b7;  

  XK_Cyrillic_JE = $06b8;  

  XK_Serbian_JE = $06b8;  

  XK_Cyrillic_LJE = $06b9;  

  XK_Serbian_LJE = $06b9;  

  XK_Cyrillic_NJE = $06ba;  

  XK_Serbian_NJE = $06ba;  

  XK_Serbian_TSHE = $06bb;  

  XK_Macedonia_KJE = $06bc;  

  XK_Ukrainian_GHE_WITH_UPTURN = $06bd;  

  XK_Byelorussian_SHORTU = $06be;  

  XK_Cyrillic_DZHE = $06bf;  

  XK_Serbian_DZE = $06bf;  

  XK_Cyrillic_yu = $06c0;  

  XK_Cyrillic_a = $06c1;  

  XK_Cyrillic_be = $06c2;  

  XK_Cyrillic_tse = $06c3;  

  XK_Cyrillic_de = $06c4;  

  XK_Cyrillic_ie = $06c5;  

  XK_Cyrillic_ef = $06c6;  

  XK_Cyrillic_ghe = $06c7;  

  XK_Cyrillic_ha = $06c8;  

  XK_Cyrillic_i = $06c9;  

  XK_Cyrillic_shorti = $06ca;  

  XK_Cyrillic_ka = $06cb;  

  XK_Cyrillic_el = $06cc;  

  XK_Cyrillic_em = $06cd;  

  XK_Cyrillic_en = $06ce;  

  XK_Cyrillic_o = $06cf;  

  XK_Cyrillic_pe = $06d0;  

  XK_Cyrillic_ya = $06d1;  

  XK_Cyrillic_er = $06d2;  

  XK_Cyrillic_es = $06d3;  

  XK_Cyrillic_te = $06d4;  

  XK_Cyrillic_u = $06d5;  

  XK_Cyrillic_zhe = $06d6;  

  XK_Cyrillic_ve = $06d7;  

  XK_Cyrillic_softsign = $06d8;  

  XK_Cyrillic_yeru = $06d9;  

  XK_Cyrillic_ze = $06da;  

  XK_Cyrillic_sha = $06db;  

  XK_Cyrillic_e = $06dc;  

  XK_Cyrillic_shcha = $06dd;  

  XK_Cyrillic_che = $06de;  

  XK_Cyrillic_hardsign = $06df;  

  XK_Cyrillic_YU = $06e0;  

  XK_Cyrillic_A = $06e1;  

  XK_Cyrillic_BE = $06e2;  

  XK_Cyrillic_TSE = $06e3;  

  XK_Cyrillic_DE = $06e4;  

  XK_Cyrillic_IE = $06e5;  

  XK_Cyrillic_EF = $06e6;  

  XK_Cyrillic_GHE = $06e7;  

  XK_Cyrillic_HA = $06e8;  

  XK_Cyrillic_I = $06e9;  

  XK_Cyrillic_SHORTI = $06ea;  

  XK_Cyrillic_KA = $06eb;  

  XK_Cyrillic_EL = $06ec;  

  XK_Cyrillic_EM = $06ed;  

  XK_Cyrillic_EN = $06ee;  

  XK_Cyrillic_O = $06ef;  

  XK_Cyrillic_PE = $06f0;  

  XK_Cyrillic_YA = $06f1;  

  XK_Cyrillic_ER = $06f2;  

  XK_Cyrillic_ES = $06f3;  

  XK_Cyrillic_TE = $06f4;  

  XK_Cyrillic_U = $06f5;  

  XK_Cyrillic_ZHE = $06f6;  

  XK_Cyrillic_VE = $06f7;  

  XK_Cyrillic_SOFTSIGN = $06f8;  

  XK_Cyrillic_YERU = $06f9;  

  XK_Cyrillic_ZE = $06fa;  

  XK_Cyrillic_SHA = $06fb;  

  XK_Cyrillic_E = $06fc;  

  XK_Cyrillic_SHCHA = $06fd;  

  XK_Cyrillic_CHE = $06fe;  

  XK_Cyrillic_HARDSIGN = $06ff;  
//// {$endif}


//// {$ifdef XK_GREEK}


const
  XK_Greek_ALPHAaccent = $07a1;  

  XK_Greek_EPSILONaccent = $07a2;  

  XK_Greek_ETAaccent = $07a3;  

  XK_Greek_IOTAaccent = $07a4;  

  XK_Greek_IOTAdieresis = $07a5;  

  XK_Greek_IOTAdiaeresis = $07a5;  

  XK_Greek_OMICRONaccent = $07a7;  

  XK_Greek_UPSILONaccent = $07a8;  

  XK_Greek_UPSILONdieresis = $07a9;  

  XK_Greek_OMEGAaccent = $07ab;  

  XK_Greek_accentdieresis = $07ae;  

  XK_Greek_horizbar = $07af;  

  XK_Greek_alphaaccent = $07b1;  

  XK_Greek_epsilonaccent = $07b2;  

  XK_Greek_etaaccent = $07b3;  

  XK_Greek_iotaaccent = $07b4;  

  XK_Greek_iotadieresis = $07b5;  

  XK_Greek_iotaaccentdieresis = $07b6;  

  XK_Greek_omicronaccent = $07b7;  

  XK_Greek_upsilonaccent = $07b8;  

  XK_Greek_upsilondieresis = $07b9;  

  XK_Greek_upsilonaccentdieresis = $07ba;  

  XK_Greek_omegaaccent = $07bb;  

  XK_Greek_ALPHA = $07c1;  

  XK_Greek_BETA = $07c2;  

  XK_Greek_GAMMA = $07c3;  

  XK_Greek_DELTA = $07c4;  

  XK_Greek_EPSILON = $07c5;  

  XK_Greek_ZETA = $07c6;  

  XK_Greek_ETA = $07c7;  

  XK_Greek_THETA = $07c8;  

  XK_Greek_IOTA = $07c9;  

  XK_Greek_KAPPA = $07ca;  

  XK_Greek_LAMDA = $07cb;  

  XK_Greek_LAMBDA = $07cb;  

  XK_Greek_MU = $07cc;  

  XK_Greek_NU = $07cd;  

  XK_Greek_XI = $07ce;  

  XK_Greek_OMICRON = $07cf;  

  XK_Greek_PI = $07d0;  

  XK_Greek_RHO = $07d1;  

  XK_Greek_SIGMA = $07d2;  

  XK_Greek_TAU = $07d4;  

  XK_Greek_UPSILON = $07d5;  

  XK_Greek_PHI = $07d6;  

  XK_Greek_CHI = $07d7;  

  XK_Greek_PSI = $07d8;  

  XK_Greek_OMEGA = $07d9;  

  XK_Greek_alpha = $07e1;  

  XK_Greek_beta = $07e2;  

  XK_Greek_gamma = $07e3;  

  XK_Greek_delta = $07e4;  

  XK_Greek_epsilon = $07e5;  

  XK_Greek_zeta = $07e6;  

  XK_Greek_eta = $07e7;  

  XK_Greek_theta = $07e8;  

  XK_Greek_iota = $07e9;  

  XK_Greek_kappa = $07ea;  

  XK_Greek_lamda = $07eb;  

  XK_Greek_lambda = $07eb;  

  XK_Greek_mu = $07ec;  

  XK_Greek_nu = $07ed;  

  XK_Greek_xi = $07ee;  

  XK_Greek_omicron = $07ef;  

  XK_Greek_pi = $07f0;  

  XK_Greek_rho = $07f1;  

  XK_Greek_sigma = $07f2;  

  XK_Greek_finalsmallsigma = $07f3;  

  XK_Greek_tau = $07f4;  

  XK_Greek_upsilon = $07f5;  

  XK_Greek_phi = $07f6;  

  XK_Greek_chi = $07f7;  

  XK_Greek_psi = $07f8;  

  XK_Greek_omega = $07f9;  

  XK_Greek_switch = $ff7e;  
//// {$endif}


//// {$ifdef XK_TECHNICAL}


const
  XK_leftradical = $08a1;  

  XK_topleftradical = $08a2;  

  XK_horizconnector = $08a3;  

  XK_topintegral = $08a4;  

  XK_botintegral = $08a5;  

  XK_vertconnector = $08a6;  

  XK_topleftsqbracket = $08a7;  

  XK_botleftsqbracket = $08a8;  

  XK_toprightsqbracket = $08a9;  

  XK_botrightsqbracket = $08aa;  

  XK_topleftparens = $08ab;  

  XK_botleftparens = $08ac;  

  XK_toprightparens = $08ad;  

  XK_botrightparens = $08ae;  

  XK_leftmiddlecurlybrace = $08af;  

  XK_rightmiddlecurlybrace = $08b0;  
  XK_topleftsummation = $08b1;  
  XK_botleftsummation = $08b2;  
  XK_topvertsummationconnector = $08b3;  
  XK_botvertsummationconnector = $08b4;  
  XK_toprightsummation = $08b5;  
  XK_botrightsummation = $08b6;  
  XK_rightmiddlesummation = $08b7;  

  XK_lessthanequal = $08bc;  

  XK_notequal = $08bd;  

  XK_greaterthanequal = $08be;  

  XK_integral = $08bf;  

  XK_therefore = $08c0;  

  XK_variation = $08c1;  

  XK_infinity = $08c2;  

  XK_nabla = $08c5;  

  XK_approximate = $08c8;  

  XK_similarequal = $08c9;  

  XK_ifonlyif = $08cd;  

  XK_implies = $08ce;  

  XK_identical = $08cf;  

  XK_radical = $08d6;  

  XK_includedin = $08da;  

  XK_includes = $08db;  

  XK_intersection = $08dc;  

  XK_union = $08dd;  

  XK_logicaland = $08de;  

  XK_logicalor = $08df;  

  XK_partialderivative = $08ef;  

  XK_function = $08f6;  

  XK_leftarrow = $08fb;  

  XK_uparrow = $08fc;  

  XK_rightarrow = $08fd;  

  XK_downarrow = $08fe;  
//// {$endif}


//// {$ifdef XK_SPECIAL}

const
  XK_blank = $09df;  

  XK_soliddiamond = $09e0;  

  XK_checkerboard = $09e1;  

  XK_ht = $09e2;  

  XK_ff = $09e3;  

  XK_cr = $09e4;  

  XK_lf = $09e5;  

  XK_nl = $09e8;  

  XK_vt = $09e9;  

  XK_lowrightcorner = $09ea;  

  XK_uprightcorner = $09eb;  

  XK_upleftcorner = $09ec;  

  XK_lowleftcorner = $09ed;  

  XK_crossinglines = $09ee;  

  XK_horizlinescan1 = $09ef;  

  XK_horizlinescan3 = $09f0;  

  XK_horizlinescan5 = $09f1;  

  XK_horizlinescan7 = $09f2;  

  XK_horizlinescan9 = $09f3;  

  XK_leftt = $09f4;  

  XK_rightt = $09f5;  

  XK_bott = $09f6;  

  XK_topt = $09f7;  

  XK_vertbar = $09f8;  
//// {$endif}


//// {$ifdef XK_PUBLISHING}


const
  XK_emspace = $0aa1;  

  XK_enspace = $0aa2;  

  XK_em3space = $0aa3;  

  XK_em4space = $0aa4;  

  XK_digitspace = $0aa5;  

  XK_punctspace = $0aa6;  

  XK_thinspace = $0aa7;  

  XK_hairspace = $0aa8;  

  XK_emdash = $0aa9;  

  XK_endash = $0aaa;  

  XK_signifblank = $0aac;  

  XK_ellipsis = $0aae;  

  XK_doubbaselinedot = $0aaf;  

  XK_onethird = $0ab0;  

  XK_twothirds = $0ab1;  

  XK_onefifth = $0ab2;  

  XK_twofifths = $0ab3;  

  XK_threefifths = $0ab4;  

  XK_fourfifths = $0ab5;  

  XK_onesixth = $0ab6;  

  XK_fivesixths = $0ab7;  

  XK_careof = $0ab8;  

  XK_figdash = $0abb;  

  XK_leftanglebracket = $0abc;  

  XK_decimalpoint = $0abd;  

  XK_rightanglebracket = $0abe;  
  XK_marker = $0abf;  

  XK_oneeighth = $0ac3;  

  XK_threeeighths = $0ac4;  

  XK_fiveeighths = $0ac5;  

  XK_seveneighths = $0ac6;  

  XK_trademark = $0ac9;  

  XK_signaturemark = $0aca;  
  XK_trademarkincircle = $0acb;  

  XK_leftopentriangle = $0acc;  

  XK_rightopentriangle = $0acd;  

  XK_emopencircle = $0ace;  

  XK_emopenrectangle = $0acf;  

  XK_leftsinglequotemark = $0ad0;  

  XK_rightsinglequotemark = $0ad1;  

  XK_leftdoublequotemark = $0ad2;  

  XK_rightdoublequotemark = $0ad3;  

  XK_prescription = $0ad4;  

  XK_permille = $0ad5;  

  XK_minutes = $0ad6;  

  XK_seconds = $0ad7;  

  XK_latincross = $0ad9;  
  XK_hexagram = $0ada;  

  XK_filledrectbullet = $0adb;  

  XK_filledlefttribullet = $0adc;  

  XK_filledrighttribullet = $0add;  

  XK_emfilledcircle = $0ade;  

  XK_emfilledrect = $0adf;  

  XK_enopencircbullet = $0ae0;  

  XK_enopensquarebullet = $0ae1;  

  XK_openrectbullet = $0ae2;  

  XK_opentribulletup = $0ae3;  

  XK_opentribulletdown = $0ae4;  

  XK_openstar = $0ae5;  

  XK_enfilledcircbullet = $0ae6;  

  XK_enfilledsqbullet = $0ae7;  

  XK_filledtribulletup = $0ae8;  

  XK_filledtribulletdown = $0ae9;  

  XK_leftpointer = $0aea;  

  XK_rightpointer = $0aeb;  

  XK_club = $0aec;  

  XK_diamond = $0aed;  

  XK_heart = $0aee;  

  XK_maltesecross = $0af0;  

  XK_dagger = $0af1;  

  XK_doubledagger = $0af2;  

  XK_checkmark = $0af3;  

  XK_ballotcross = $0af4;  

  XK_musicalsharp = $0af5;  

  XK_musicalflat = $0af6;  

  XK_malesymbol = $0af7;  

  XK_femalesymbol = $0af8;  

  XK_telephone = $0af9;  

  XK_telephonerecorder = $0afa;  

  XK_phonographcopyright = $0afb;  

  XK_caret = $0afc;  

  XK_singlelowquotemark = $0afd;  

  XK_doublelowquotemark = $0afe;  
  XK_cursor = $0aff;  
//// {$endif}


//// {$ifdef XK_APL}


const
  XK_leftcaret = $0ba3;  

  XK_rightcaret = $0ba6;  

  XK_downcaret = $0ba8;  

  XK_upcaret = $0ba9;  

  XK_overbar = $0bc0;  

  XK_downtack = $0bc2;  

  XK_upshoe = $0bc3;  

  XK_downstile = $0bc4;  

  XK_underbar = $0bc6;  

  XK_jot = $0bca;  

  XK_quad = $0bcc;  

  XK_uptack = $0bce;  

  XK_circle = $0bcf;  

  XK_upstile = $0bd3;  

  XK_downshoe = $0bd6;  

  XK_rightshoe = $0bd8;  

  XK_leftshoe = $0bda;  

  XK_lefttack = $0bdc;  

  XK_righttack = $0bfc;  
//// {$endif}


//// {$ifdef XK_HEBREW}


const
  XK_hebrew_doublelowline = $0cdf;  

  XK_hebrew_aleph = $0ce0;  

  XK_hebrew_bet = $0ce1;  

  XK_hebrew_beth = $0ce1;  

  XK_hebrew_gimel = $0ce2;  

  XK_hebrew_gimmel = $0ce2;  

  XK_hebrew_dalet = $0ce3;  

  XK_hebrew_daleth = $0ce3;  

  XK_hebrew_he = $0ce4;  

  XK_hebrew_waw = $0ce5;  

  XK_hebrew_zain = $0ce6;  

  XK_hebrew_zayin = $0ce6;  

  XK_hebrew_chet = $0ce7;  

  XK_hebrew_het = $0ce7;  

  XK_hebrew_tet = $0ce8;  

  XK_hebrew_teth = $0ce8;  

  XK_hebrew_yod = $0ce9;  

  XK_hebrew_finalkaph = $0cea;  

  XK_hebrew_kaph = $0ceb;  

  XK_hebrew_lamed = $0cec;  

  XK_hebrew_finalmem = $0ced;  

  XK_hebrew_mem = $0cee;  

  XK_hebrew_finalnun = $0cef;  

  XK_hebrew_nun = $0cf0;  

  XK_hebrew_samech = $0cf1;  

  XK_hebrew_samekh = $0cf1;  

  XK_hebrew_ayin = $0cf2;  

  XK_hebrew_finalpe = $0cf3;  

  XK_hebrew_pe = $0cf4;  

  XK_hebrew_finalzade = $0cf5;  

  XK_hebrew_finalzadi = $0cf5;  

  XK_hebrew_zade = $0cf6;  

  XK_hebrew_zadi = $0cf6;  

  XK_hebrew_qoph = $0cf7;  

  XK_hebrew_kuf = $0cf7;  

  XK_hebrew_resh = $0cf8;  

  XK_hebrew_shin = $0cf9;  

  XK_hebrew_taw = $0cfa;  

  XK_hebrew_taf = $0cfa;  

  XK_Hebrew_switch = $ff7e;  
//// {$endif}


//// {$ifdef XK_THAI}


const
  XK_Thai_kokai = $0da1;  

  XK_Thai_khokhai = $0da2;  

  XK_Thai_khokhuat = $0da3;  

  XK_Thai_khokhwai = $0da4;  

  XK_Thai_khokhon = $0da5;  

  XK_Thai_khorakhang = $0da6;  

  XK_Thai_ngongu = $0da7;  

  XK_Thai_chochan = $0da8;  

  XK_Thai_choching = $0da9;  

  XK_Thai_chochang = $0daa;  

  XK_Thai_soso = $0dab;  

  XK_Thai_chochoe = $0dac;  

  XK_Thai_yoying = $0dad;  

  XK_Thai_dochada = $0dae;  

  XK_Thai_topatak = $0daf;  

  XK_Thai_thothan = $0db0;  

  XK_Thai_thonangmontho = $0db1;  

  XK_Thai_thophuthao = $0db2;  

  XK_Thai_nonen = $0db3;  

  XK_Thai_dodek = $0db4;  

  XK_Thai_totao = $0db5;  

  XK_Thai_thothung = $0db6;  

  XK_Thai_thothahan = $0db7;  

  XK_Thai_thothong = $0db8;  

  XK_Thai_nonu = $0db9;  

  XK_Thai_bobaimai = $0dba;  

  XK_Thai_popla = $0dbb;  

  XK_Thai_phophung = $0dbc;  

  XK_Thai_fofa = $0dbd;  

  XK_Thai_phophan = $0dbe;  

  XK_Thai_fofan = $0dbf;  

  XK_Thai_phosamphao = $0dc0;  

  XK_Thai_moma = $0dc1;  

  XK_Thai_yoyak = $0dc2;  

  XK_Thai_rorua = $0dc3;  

  XK_Thai_ru = $0dc4;  

  XK_Thai_loling = $0dc5;  

  XK_Thai_lu = $0dc6;  

  XK_Thai_wowaen = $0dc7;  

  XK_Thai_sosala = $0dc8;  

  XK_Thai_sorusi = $0dc9;  

  XK_Thai_sosua = $0dca;  

  XK_Thai_hohip = $0dcb;  

  XK_Thai_lochula = $0dcc;  

  XK_Thai_oang = $0dcd;  

  XK_Thai_honokhuk = $0dce;  

  XK_Thai_paiyannoi = $0dcf;  

  XK_Thai_saraa = $0dd0;  

  XK_Thai_maihanakat = $0dd1;  

  XK_Thai_saraaa = $0dd2;  

  XK_Thai_saraam = $0dd3;  

  XK_Thai_sarai = $0dd4;  

  XK_Thai_saraii = $0dd5;  

  XK_Thai_saraue = $0dd6;  

  XK_Thai_sarauee = $0dd7;  

  XK_Thai_sarau = $0dd8;  

  XK_Thai_sarauu = $0dd9;  

  XK_Thai_phinthu = $0dda;  
  XK_Thai_maihanakat_maitho = $0dde;  

  XK_Thai_baht = $0ddf;  

  XK_Thai_sarae = $0de0;  

  XK_Thai_saraae = $0de1;  

  XK_Thai_sarao = $0de2;  

  XK_Thai_saraaimaimuan = $0de3;  

  XK_Thai_saraaimaimalai = $0de4;  

  XK_Thai_lakkhangyao = $0de5;  

  XK_Thai_maiyamok = $0de6;  

  XK_Thai_maitaikhu = $0de7;  

  XK_Thai_maiek = $0de8;  

  XK_Thai_maitho = $0de9;  

  XK_Thai_maitri = $0dea;  

  XK_Thai_maichattawa = $0deb;  

  XK_Thai_thanthakhat = $0dec;  

  XK_Thai_nikhahit = $0ded;  

  XK_Thai_leksun = $0df0;  

  XK_Thai_leknung = $0df1;  

  XK_Thai_leksong = $0df2;  

  XK_Thai_leksam = $0df3;  

  XK_Thai_leksi = $0df4;  

  XK_Thai_lekha = $0df5;  

  XK_Thai_lekhok = $0df6;  

  XK_Thai_lekchet = $0df7;  

  XK_Thai_lekpaet = $0df8;  

  XK_Thai_lekkao = $0df9;  
//// {$endif}


//// {$ifdef XK_KOREAN}


const
  XK_Hangul = $ff31;  

  XK_Hangul_Start = $ff32;  

  XK_Hangul_End = $ff33;  

  XK_Hangul_Hanja = $ff34;  

  XK_Hangul_Jamo = $ff35;  

  XK_Hangul_Romaja = $ff36;  

  XK_Hangul_Codeinput = $ff37;  

  XK_Hangul_Jeonja = $ff38;  

  XK_Hangul_Banja = $ff39;  

  XK_Hangul_PreHanja = $ff3a;  

  XK_Hangul_PostHanja = $ff3b;  

  XK_Hangul_SingleCandidate = $ff3c;  

  XK_Hangul_MultipleCandidate = $ff3d;  

  XK_Hangul_PreviousCandidate = $ff3e;  

  XK_Hangul_Special = $ff3f;  

  XK_Hangul_switch = $ff7e;  


  XK_Hangul_Kiyeog = $0ea1;  

  XK_Hangul_SsangKiyeog = $0ea2;  

  XK_Hangul_KiyeogSios = $0ea3;  

  XK_Hangul_Nieun = $0ea4;  

  XK_Hangul_NieunJieuj = $0ea5;  

  XK_Hangul_NieunHieuh = $0ea6;  

  XK_Hangul_Dikeud = $0ea7;  

  XK_Hangul_SsangDikeud = $0ea8;  

  XK_Hangul_Rieul = $0ea9;  

  XK_Hangul_RieulKiyeog = $0eaa;  

  XK_Hangul_RieulMieum = $0eab;  

  XK_Hangul_RieulPieub = $0eac;  

  XK_Hangul_RieulSios = $0ead;  

  XK_Hangul_RieulTieut = $0eae;  

  XK_Hangul_RieulPhieuf = $0eaf;  

  XK_Hangul_RieulHieuh = $0eb0;  

  XK_Hangul_Mieum = $0eb1;  

  XK_Hangul_Pieub = $0eb2;  

  XK_Hangul_SsangPieub = $0eb3;  

  XK_Hangul_PieubSios = $0eb4;  

  XK_Hangul_Sios = $0eb5;  

  XK_Hangul_SsangSios = $0eb6;  

  XK_Hangul_Ieung = $0eb7;  

  XK_Hangul_Jieuj = $0eb8;  

  XK_Hangul_SsangJieuj = $0eb9;  

  XK_Hangul_Cieuc = $0eba;  

  XK_Hangul_Khieuq = $0ebb;  

  XK_Hangul_Tieut = $0ebc;  

  XK_Hangul_Phieuf = $0ebd;  

  XK_Hangul_Hieuh = $0ebe;  


  XK_Hangul_A = $0ebf;  

  XK_Hangul_AE = $0ec0;  

  XK_Hangul_YA = $0ec1;  

  XK_Hangul_YAE = $0ec2;  

  XK_Hangul_EO = $0ec3;  

  XK_Hangul_E = $0ec4;  

  XK_Hangul_YEO = $0ec5;  

  XK_Hangul_YE = $0ec6;  

  XK_Hangul_O = $0ec7;  

  XK_Hangul_WA = $0ec8;  

  XK_Hangul_WAE = $0ec9;  

  XK_Hangul_OE = $0eca;  

  XK_Hangul_YO = $0ecb;  

  XK_Hangul_U = $0ecc;  

  XK_Hangul_WEO = $0ecd;  

  XK_Hangul_WE = $0ece;  

  XK_Hangul_WI = $0ecf;  

  XK_Hangul_YU = $0ed0;  

  XK_Hangul_EU = $0ed1;  

  XK_Hangul_YI = $0ed2;  

  XK_Hangul_I = $0ed3;  


  XK_Hangul_J_Kiyeog = $0ed4;  

  XK_Hangul_J_SsangKiyeog = $0ed5;  

  XK_Hangul_J_KiyeogSios = $0ed6;  

  XK_Hangul_J_Nieun = $0ed7;  

  XK_Hangul_J_NieunJieuj = $0ed8;  

  XK_Hangul_J_NieunHieuh = $0ed9;  

  XK_Hangul_J_Dikeud = $0eda;  

  XK_Hangul_J_Rieul = $0edb;  

  XK_Hangul_J_RieulKiyeog = $0edc;  

  XK_Hangul_J_RieulMieum = $0edd;  

  XK_Hangul_J_RieulPieub = $0ede;  

  XK_Hangul_J_RieulSios = $0edf;  

  XK_Hangul_J_RieulTieut = $0ee0;  

  XK_Hangul_J_RieulPhieuf = $0ee1;  

  XK_Hangul_J_RieulHieuh = $0ee2;  

  XK_Hangul_J_Mieum = $0ee3;  

  XK_Hangul_J_Pieub = $0ee4;  

  XK_Hangul_J_PieubSios = $0ee5;  

  XK_Hangul_J_Sios = $0ee6;  

  XK_Hangul_J_SsangSios = $0ee7;  

  XK_Hangul_J_Ieung = $0ee8;  

  XK_Hangul_J_Jieuj = $0ee9;  

  XK_Hangul_J_Cieuc = $0eea;  

  XK_Hangul_J_Khieuq = $0eeb;  

  XK_Hangul_J_Tieut = $0eec;  

  XK_Hangul_J_Phieuf = $0eed;  

  XK_Hangul_J_Hieuh = $0eee;  


  XK_Hangul_RieulYeorinHieuh = $0eef;  

  XK_Hangul_SunkyeongeumMieum = $0ef0;  

  XK_Hangul_SunkyeongeumPieub = $0ef1;  

  XK_Hangul_PanSios = $0ef2;  

  XK_Hangul_KkogjiDalrinIeung = $0ef3;  

  XK_Hangul_SunkyeongeumPhieuf = $0ef4;  

  XK_Hangul_YeorinHieuh = $0ef5;  


  XK_Hangul_AraeA = $0ef6;  

  XK_Hangul_AraeAE = $0ef7;  


  XK_Hangul_J_PanSios = $0ef8;  

  XK_Hangul_J_KkogjiDalrinIeung = $0ef9;  

  XK_Hangul_J_YeorinHieuh = $0efa;  


  XK_Korean_Won = $0eff;  
//// {$endif}


//// {$ifdef XK_ARMENIAN}


const
  XK_Armenian_ligature_ew = $1000587;  

  XK_Armenian_full_stop = $1000589;  

  XK_Armenian_verjaket = $1000589;  

  XK_Armenian_separation_mark = $100055d;  

  XK_Armenian_but = $100055d;  

  XK_Armenian_hyphen = $100058a;  

  XK_Armenian_yentamna = $100058a;  

  XK_Armenian_exclam = $100055c;  

  XK_Armenian_amanak = $100055c;  

  XK_Armenian_accent = $100055b;  

  XK_Armenian_shesht = $100055b;  

  XK_Armenian_question = $100055e;  

  XK_Armenian_paruyk = $100055e;  

  XK_Armenian_AYB = $1000531;  

  XK_Armenian_ayb = $1000561;  

  XK_Armenian_BEN = $1000532;  

  XK_Armenian_ben = $1000562;  

  XK_Armenian_GIM = $1000533;  

  XK_Armenian_gim = $1000563;  

  XK_Armenian_DA = $1000534;  

  XK_Armenian_da = $1000564;  

  XK_Armenian_YECH = $1000535;  

  XK_Armenian_yech = $1000565;  

  XK_Armenian_ZA = $1000536;  

  XK_Armenian_za = $1000566;  

  XK_Armenian_E = $1000537;  

  XK_Armenian_e = $1000567;  

  XK_Armenian_AT = $1000538;  

  XK_Armenian_at = $1000568;  

  XK_Armenian_TO = $1000539;  

  XK_Armenian_to = $1000569;  

  XK_Armenian_ZHE = $100053a;  

  XK_Armenian_zhe = $100056a;  

  XK_Armenian_INI = $100053b;  

  XK_Armenian_ini = $100056b;  

  XK_Armenian_LYUN = $100053c;  

  XK_Armenian_lyun = $100056c;  

  XK_Armenian_KHE = $100053d;  

  XK_Armenian_khe = $100056d;  

  XK_Armenian_TSA = $100053e;  

  XK_Armenian_tsa = $100056e;  

  XK_Armenian_KEN = $100053f;  

  XK_Armenian_ken = $100056f;  

  XK_Armenian_HO = $1000540;  

  XK_Armenian_ho = $1000570;  

  XK_Armenian_DZA = $1000541;  

  XK_Armenian_dza = $1000571;  

  XK_Armenian_GHAT = $1000542;  

  XK_Armenian_ghat = $1000572;  

  XK_Armenian_TCHE = $1000543;  

  XK_Armenian_tche = $1000573;  

  XK_Armenian_MEN = $1000544;  

  XK_Armenian_men = $1000574;  

  XK_Armenian_HI = $1000545;  

  XK_Armenian_hi = $1000575;  

  XK_Armenian_NU = $1000546;  

  XK_Armenian_nu = $1000576;  

  XK_Armenian_SHA = $1000547;  

  XK_Armenian_sha = $1000577;  

  XK_Armenian_VO = $1000548;  

  XK_Armenian_vo = $1000578;  

  XK_Armenian_CHA = $1000549;  

  XK_Armenian_cha = $1000579;  

  XK_Armenian_PE = $100054a;  

  XK_Armenian_pe = $100057a;  

  XK_Armenian_JE = $100054b;  

  XK_Armenian_je = $100057b;  

  XK_Armenian_RA = $100054c;  

  XK_Armenian_ra = $100057c;  

  XK_Armenian_SE = $100054d;  

  XK_Armenian_se = $100057d;  

  XK_Armenian_VEV = $100054e;  

  XK_Armenian_vev = $100057e;  

  XK_Armenian_TYUN = $100054f;  

  XK_Armenian_tyun = $100057f;  

  XK_Armenian_RE = $1000550;  

  XK_Armenian_re = $1000580;  

  XK_Armenian_TSO = $1000551;  

  XK_Armenian_tso = $1000581;  

  XK_Armenian_VYUN = $1000552;  

  XK_Armenian_vyun = $1000582;  

  XK_Armenian_PYUR = $1000553;  

  XK_Armenian_pyur = $1000583;  

  XK_Armenian_KE = $1000554;  

  XK_Armenian_ke = $1000584;  

  XK_Armenian_O = $1000555;  

  XK_Armenian_o = $1000585;  

  XK_Armenian_FE = $1000556;  

  XK_Armenian_fe = $1000586;  

  XK_Armenian_apostrophe = $100055a;  
//// {$endif}


//// {$ifdef XK_GEORGIAN}


const
  XK_Georgian_an = $10010d0;  

  XK_Georgian_ban = $10010d1;  

  XK_Georgian_gan = $10010d2;  

  XK_Georgian_don = $10010d3;  

  XK_Georgian_en = $10010d4;  

  XK_Georgian_vin = $10010d5;  

  XK_Georgian_zen = $10010d6;  

  XK_Georgian_tan = $10010d7;  

  XK_Georgian_in = $10010d8;  

  XK_Georgian_kan = $10010d9;  

  XK_Georgian_las = $10010da;  

  XK_Georgian_man = $10010db;  

  XK_Georgian_nar = $10010dc;  

  XK_Georgian_on = $10010dd;  

  XK_Georgian_par = $10010de;  

  XK_Georgian_zhar = $10010df;  

  XK_Georgian_rae = $10010e0;  

  XK_Georgian_san = $10010e1;  

  XK_Georgian_tar = $10010e2;  

  XK_Georgian_un = $10010e3;  

  XK_Georgian_phar = $10010e4;  

  XK_Georgian_khar = $10010e5;  

  XK_Georgian_ghan = $10010e6;  

  XK_Georgian_qar = $10010e7;  

  XK_Georgian_shin = $10010e8;  

  XK_Georgian_chin = $10010e9;  

  XK_Georgian_can = $10010ea;  

  XK_Georgian_jil = $10010eb;  

  XK_Georgian_cil = $10010ec;  

  XK_Georgian_char = $10010ed;  

  XK_Georgian_xan = $10010ee;  

  XK_Georgian_jhan = $10010ef;  

  XK_Georgian_hae = $10010f0;  

  XK_Georgian_he = $10010f1;  

  XK_Georgian_hie = $10010f2;  

  XK_Georgian_we = $10010f3;  

  XK_Georgian_har = $10010f4;  

  XK_Georgian_hoe = $10010f5;  

  XK_Georgian_fi = $10010f6;  
//// {$endif}


//// {$ifdef XK_CAUCASUS}



const
  XK_Xabovedot = $1001e8a;  

  XK_Ibreve = $100012c;  

  XK_Zstroke = $10001b5;  

  XK_Gcaron = $10001e6;  

  XK_Ocaron = $10001d1;  

  XK_Obarred = $100019f;  

  XK_xabovedot = $1001e8b;  

  XK_ibreve = $100012d;  

  XK_zstroke = $10001b6;  

  XK_gcaron = $10001e7;  

  XK_ocaron = $10001d2;  

  XK_obarred = $1000275;  

  XK_SCHWA = $100018f;  

  XK_schwa = $1000259;  

  XK_EZH = $10001b7;  

  XK_ezh = $1000292;  



  XK_Lbelowdot = $1001e36;  

  XK_lbelowdot = $1001e37;  
//// {$endif}


//// {$ifdef XK_VIETNAMESE}


const
  XK_Abelowdot = $1001ea0;  

  XK_abelowdot = $1001ea1;  

  XK_Ahook = $1001ea2;  

  XK_ahook = $1001ea3;  

  XK_Acircumflexacute = $1001ea4;  

  XK_acircumflexacute = $1001ea5;  

  XK_Acircumflexgrave = $1001ea6;  

  XK_acircumflexgrave = $1001ea7;  

  XK_Acircumflexhook = $1001ea8;  

  XK_acircumflexhook = $1001ea9;  

  XK_Acircumflextilde = $1001eaa;  

  XK_acircumflextilde = $1001eab;  

  XK_Acircumflexbelowdot = $1001eac;  

  XK_acircumflexbelowdot = $1001ead;  

  XK_Abreveacute = $1001eae;  

  XK_abreveacute = $1001eaf;  

  XK_Abrevegrave = $1001eb0;  

  XK_abrevegrave = $1001eb1;  

  XK_Abrevehook = $1001eb2;  

  XK_abrevehook = $1001eb3;  

  XK_Abrevetilde = $1001eb4;  

  XK_abrevetilde = $1001eb5;  

  XK_Abrevebelowdot = $1001eb6;  

  XK_abrevebelowdot = $1001eb7;  

  XK_Ebelowdot = $1001eb8;  

  XK_ebelowdot = $1001eb9;  

  XK_Ehook = $1001eba;  

  XK_ehook = $1001ebb;  

  XK_Etilde = $1001ebc;  

  XK_etilde = $1001ebd;  

  XK_Ecircumflexacute = $1001ebe;  

  XK_ecircumflexacute = $1001ebf;  

  XK_Ecircumflexgrave = $1001ec0;  

  XK_ecircumflexgrave = $1001ec1;  

  XK_Ecircumflexhook = $1001ec2;  

  XK_ecircumflexhook = $1001ec3;  

  XK_Ecircumflextilde = $1001ec4;  

  XK_ecircumflextilde = $1001ec5;  

  XK_Ecircumflexbelowdot = $1001ec6;  

  XK_ecircumflexbelowdot = $1001ec7;  

  XK_Ihook = $1001ec8;  

  XK_ihook = $1001ec9;  

  XK_Ibelowdot = $1001eca;  

  XK_ibelowdot = $1001ecb;  

  XK_Obelowdot = $1001ecc;  

  XK_obelowdot = $1001ecd;  

  XK_Ohook = $1001ece;  

  XK_ohook = $1001ecf;  

  XK_Ocircumflexacute = $1001ed0;  

  XK_ocircumflexacute = $1001ed1;  

  XK_Ocircumflexgrave = $1001ed2;  

  XK_ocircumflexgrave = $1001ed3;  

  XK_Ocircumflexhook = $1001ed4;  

  XK_ocircumflexhook = $1001ed5;  

  XK_Ocircumflextilde = $1001ed6;  

  XK_ocircumflextilde = $1001ed7;  

  XK_Ocircumflexbelowdot = $1001ed8;  

  XK_ocircumflexbelowdot = $1001ed9;  

  XK_Ohornacute = $1001eda;  

  XK_ohornacute = $1001edb;  

  XK_Ohorngrave = $1001edc;  

  XK_ohorngrave = $1001edd;  

  XK_Ohornhook = $1001ede;  

  XK_ohornhook = $1001edf;  

  XK_Ohorntilde = $1001ee0;  

  XK_ohorntilde = $1001ee1;  

  XK_Ohornbelowdot = $1001ee2;  

  XK_ohornbelowdot = $1001ee3;  

  XK_Ubelowdot = $1001ee4;  

  XK_ubelowdot = $1001ee5;  

  XK_Uhook = $1001ee6;  

  XK_uhook = $1001ee7;  

  XK_Uhornacute = $1001ee8;  

  XK_uhornacute = $1001ee9;  

  XK_Uhorngrave = $1001eea;  

  XK_uhorngrave = $1001eeb;  

  XK_Uhornhook = $1001eec;  

  XK_uhornhook = $1001eed;  

  XK_Uhorntilde = $1001eee;  

  XK_uhorntilde = $1001eef;  

  XK_Uhornbelowdot = $1001ef0;  

  XK_uhornbelowdot = $1001ef1;  

  XK_Ybelowdot = $1001ef4;  

  XK_ybelowdot = $1001ef5;  

  XK_Yhook = $1001ef6;  

  XK_yhook = $1001ef7;  

  XK_Ytilde = $1001ef8;  

  XK_ytilde = $1001ef9;  

  XK_Ohorn = $10001a0;  

  XK_ohorn = $10001a1;  

  XK_Uhorn = $10001af;  

  XK_uhorn = $10001b0;  

  XK_combining_tilde = $1000303;  

  XK_combining_grave = $1000300;  

  XK_combining_acute = $1000301;  

  XK_combining_hook = $1000309;  

  XK_combining_belowdot = $1000323;  
//// {$endif}

//// {$ifdef XK_CURRENCY}


const
  XK_EcuSign = $10020a0;  

  XK_ColonSign = $10020a1;  

  XK_CruzeiroSign = $10020a2;  

  XK_FFrancSign = $10020a3;  

  XK_LiraSign = $10020a4;  

  XK_MillSign = $10020a5;  

  XK_NairaSign = $10020a6;  

  XK_PesetaSign = $10020a7;  

  XK_RupeeSign = $10020a8;  

  XK_WonSign = $10020a9;  

  XK_NewSheqelSign = $10020aa;  

  XK_DongSign = $10020ab;  

  XK_EuroSign = $20ac;  
//// {$endif}

//// {$ifdef XK_MATHEMATICAL}



const
  XK_zerosuperior = $1002070;  

  XK_foursuperior = $1002074;  

  XK_fivesuperior = $1002075;  

  XK_sixsuperior = $1002076;  

  XK_sevensuperior = $1002077;  

  XK_eightsuperior = $1002078;  

  XK_ninesuperior = $1002079;  

  XK_zerosubscript = $1002080;  

  XK_onesubscript = $1002081;  

  XK_twosubscript = $1002082;  

  XK_threesubscript = $1002083;  

  XK_foursubscript = $1002084;  

  XK_fivesubscript = $1002085;  

  XK_sixsubscript = $1002086;  

  XK_sevensubscript = $1002087;  

  XK_eightsubscript = $1002088;  

  XK_ninesubscript = $1002089;  

  XK_partdifferential = $1002202;  

  XK_emptyset = $1002205;  

  XK_elementof = $1002208;  

  XK_notelementof = $1002209;  

  XK_containsas = $100220B;  

  XK_squareroot = $100221A;  

  XK_cuberoot = $100221B;  

  XK_fourthroot = $100221C;  

  XK_dintegral = $100222C;  

  XK_tintegral = $100222D;  

  XK_because = $1002235;  

  XK_approxeq = $1002248;  

  XK_notapproxeq = $1002247;  

  XK_notidentical = $1002262;  

  XK_stricteq = $1002263;  
//// {$endif}

//// {$ifdef XK_BRAILLE}

const
  XK_braille_dot_1 = $fff1;  
  XK_braille_dot_2 = $fff2;  
  XK_braille_dot_3 = $fff3;  
  XK_braille_dot_4 = $fff4;  
  XK_braille_dot_5 = $fff5;  
  XK_braille_dot_6 = $fff6;  
  XK_braille_dot_7 = $fff7;  
  XK_braille_dot_8 = $fff8;  
  XK_braille_dot_9 = $fff9;  
  XK_braille_dot_10 = $fffa;  

  XK_braille_blank = $1002800;  

  XK_braille_dots_1 = $1002801;  

  XK_braille_dots_2 = $1002802;  

  XK_braille_dots_12 = $1002803;  

  XK_braille_dots_3 = $1002804;  

  XK_braille_dots_13 = $1002805;  

  XK_braille_dots_23 = $1002806;  

  XK_braille_dots_123 = $1002807;  

  XK_braille_dots_4 = $1002808;  

  XK_braille_dots_14 = $1002809;  

  XK_braille_dots_24 = $100280a;  

  XK_braille_dots_124 = $100280b;  

  XK_braille_dots_34 = $100280c;  

  XK_braille_dots_134 = $100280d;  

  XK_braille_dots_234 = $100280e;  

  XK_braille_dots_1234 = $100280f;  

  XK_braille_dots_5 = $1002810;  

  XK_braille_dots_15 = $1002811;  

  XK_braille_dots_25 = $1002812;  

  XK_braille_dots_125 = $1002813;  

  XK_braille_dots_35 = $1002814;  

  XK_braille_dots_135 = $1002815;  

  XK_braille_dots_235 = $1002816;  

  XK_braille_dots_1235 = $1002817;  

  XK_braille_dots_45 = $1002818;  

  XK_braille_dots_145 = $1002819;  

  XK_braille_dots_245 = $100281a;  

  XK_braille_dots_1245 = $100281b;  

  XK_braille_dots_345 = $100281c;  

  XK_braille_dots_1345 = $100281d;  

  XK_braille_dots_2345 = $100281e;  

  XK_braille_dots_12345 = $100281f;  

  XK_braille_dots_6 = $1002820;  

  XK_braille_dots_16 = $1002821;  

  XK_braille_dots_26 = $1002822;  

  XK_braille_dots_126 = $1002823;  

  XK_braille_dots_36 = $1002824;  

  XK_braille_dots_136 = $1002825;  

  XK_braille_dots_236 = $1002826;  

  XK_braille_dots_1236 = $1002827;  

  XK_braille_dots_46 = $1002828;  

  XK_braille_dots_146 = $1002829;  

  XK_braille_dots_246 = $100282a;  

  XK_braille_dots_1246 = $100282b;  

  XK_braille_dots_346 = $100282c;  

  XK_braille_dots_1346 = $100282d;  

  XK_braille_dots_2346 = $100282e;  

  XK_braille_dots_12346 = $100282f;  

  XK_braille_dots_56 = $1002830;  

  XK_braille_dots_156 = $1002831;  

  XK_braille_dots_256 = $1002832;  

  XK_braille_dots_1256 = $1002833;  

  XK_braille_dots_356 = $1002834;  

  XK_braille_dots_1356 = $1002835;  

  XK_braille_dots_2356 = $1002836;  

  XK_braille_dots_12356 = $1002837;  

  XK_braille_dots_456 = $1002838;  

  XK_braille_dots_1456 = $1002839;  

  XK_braille_dots_2456 = $100283a;  

  XK_braille_dots_12456 = $100283b;  

  XK_braille_dots_3456 = $100283c;  

  XK_braille_dots_13456 = $100283d;  

  XK_braille_dots_23456 = $100283e;  

  XK_braille_dots_123456 = $100283f;  

  XK_braille_dots_7 = $1002840;  

  XK_braille_dots_17 = $1002841;  

  XK_braille_dots_27 = $1002842;  

  XK_braille_dots_127 = $1002843;  

  XK_braille_dots_37 = $1002844;  

  XK_braille_dots_137 = $1002845;  

  XK_braille_dots_237 = $1002846;  

  XK_braille_dots_1237 = $1002847;  

  XK_braille_dots_47 = $1002848;  

  XK_braille_dots_147 = $1002849;  

  XK_braille_dots_247 = $100284a;  

  XK_braille_dots_1247 = $100284b;  

  XK_braille_dots_347 = $100284c;  

  XK_braille_dots_1347 = $100284d;  

  XK_braille_dots_2347 = $100284e;  

  XK_braille_dots_12347 = $100284f;  

  XK_braille_dots_57 = $1002850;  

  XK_braille_dots_157 = $1002851;  

  XK_braille_dots_257 = $1002852;  

  XK_braille_dots_1257 = $1002853;  

  XK_braille_dots_357 = $1002854;  

  XK_braille_dots_1357 = $1002855;  

  XK_braille_dots_2357 = $1002856;  

  XK_braille_dots_12357 = $1002857;  

  XK_braille_dots_457 = $1002858;  

  XK_braille_dots_1457 = $1002859;  

  XK_braille_dots_2457 = $100285a;  

  XK_braille_dots_12457 = $100285b;  

  XK_braille_dots_3457 = $100285c;  

  XK_braille_dots_13457 = $100285d;  

  XK_braille_dots_23457 = $100285e;  

  XK_braille_dots_123457 = $100285f;  

  XK_braille_dots_67 = $1002860;  

  XK_braille_dots_167 = $1002861;  

  XK_braille_dots_267 = $1002862;  

  XK_braille_dots_1267 = $1002863;  

  XK_braille_dots_367 = $1002864;  

  XK_braille_dots_1367 = $1002865;  

  XK_braille_dots_2367 = $1002866;  

  XK_braille_dots_12367 = $1002867;  

  XK_braille_dots_467 = $1002868;  

  XK_braille_dots_1467 = $1002869;  

  XK_braille_dots_2467 = $100286a;  

  XK_braille_dots_12467 = $100286b;  

  XK_braille_dots_3467 = $100286c;  

  XK_braille_dots_13467 = $100286d;  

  XK_braille_dots_23467 = $100286e;  

  XK_braille_dots_123467 = $100286f;  

  XK_braille_dots_567 = $1002870;  

  XK_braille_dots_1567 = $1002871;  

  XK_braille_dots_2567 = $1002872;  

  XK_braille_dots_12567 = $1002873;  

  XK_braille_dots_3567 = $1002874;  

  XK_braille_dots_13567 = $1002875;  

  XK_braille_dots_23567 = $1002876;  

  XK_braille_dots_123567 = $1002877;  

  XK_braille_dots_4567 = $1002878;  

  XK_braille_dots_14567 = $1002879;  

  XK_braille_dots_24567 = $100287a;  

  XK_braille_dots_124567 = $100287b;  

  XK_braille_dots_34567 = $100287c;  

  XK_braille_dots_134567 = $100287d;  

  XK_braille_dots_234567 = $100287e;  

  XK_braille_dots_1234567 = $100287f;  

  XK_braille_dots_8 = $1002880;  

  XK_braille_dots_18 = $1002881;  

  XK_braille_dots_28 = $1002882;  

  XK_braille_dots_128 = $1002883;  

  XK_braille_dots_38 = $1002884;  

  XK_braille_dots_138 = $1002885;  

  XK_braille_dots_238 = $1002886;  

  XK_braille_dots_1238 = $1002887;  

  XK_braille_dots_48 = $1002888;  

  XK_braille_dots_148 = $1002889;  

  XK_braille_dots_248 = $100288a;  

  XK_braille_dots_1248 = $100288b;  

  XK_braille_dots_348 = $100288c;  

  XK_braille_dots_1348 = $100288d;  

  XK_braille_dots_2348 = $100288e;  

  XK_braille_dots_12348 = $100288f;  

  XK_braille_dots_58 = $1002890;  

  XK_braille_dots_158 = $1002891;  

  XK_braille_dots_258 = $1002892;  

  XK_braille_dots_1258 = $1002893;  

  XK_braille_dots_358 = $1002894;  

  XK_braille_dots_1358 = $1002895;  

  XK_braille_dots_2358 = $1002896;  

  XK_braille_dots_12358 = $1002897;  

  XK_braille_dots_458 = $1002898;  

  XK_braille_dots_1458 = $1002899;  

  XK_braille_dots_2458 = $100289a;  

  XK_braille_dots_12458 = $100289b;  

  XK_braille_dots_3458 = $100289c;  

  XK_braille_dots_13458 = $100289d;  

  XK_braille_dots_23458 = $100289e;  

  XK_braille_dots_123458 = $100289f;  

  XK_braille_dots_68 = $10028a0;  

  XK_braille_dots_168 = $10028a1;  

  XK_braille_dots_268 = $10028a2;  

  XK_braille_dots_1268 = $10028a3;  

  XK_braille_dots_368 = $10028a4;  

  XK_braille_dots_1368 = $10028a5;  

  XK_braille_dots_2368 = $10028a6;  

  XK_braille_dots_12368 = $10028a7;  

  XK_braille_dots_468 = $10028a8;  

  XK_braille_dots_1468 = $10028a9;  

  XK_braille_dots_2468 = $10028aa;  

  XK_braille_dots_12468 = $10028ab;  

  XK_braille_dots_3468 = $10028ac;  

  XK_braille_dots_13468 = $10028ad;  

  XK_braille_dots_23468 = $10028ae;  

  XK_braille_dots_123468 = $10028af;  

  XK_braille_dots_568 = $10028b0;  

  XK_braille_dots_1568 = $10028b1;  

  XK_braille_dots_2568 = $10028b2;  

  XK_braille_dots_12568 = $10028b3;  

  XK_braille_dots_3568 = $10028b4;  

  XK_braille_dots_13568 = $10028b5;  

  XK_braille_dots_23568 = $10028b6;  

  XK_braille_dots_123568 = $10028b7;  

  XK_braille_dots_4568 = $10028b8;  

  XK_braille_dots_14568 = $10028b9;  

  XK_braille_dots_24568 = $10028ba;  

  XK_braille_dots_124568 = $10028bb;  

  XK_braille_dots_34568 = $10028bc;  

  XK_braille_dots_134568 = $10028bd;  

  XK_braille_dots_234568 = $10028be;  

  XK_braille_dots_1234568 = $10028bf;  

  XK_braille_dots_78 = $10028c0;  

  XK_braille_dots_178 = $10028c1;  

  XK_braille_dots_278 = $10028c2;  

  XK_braille_dots_1278 = $10028c3;  

  XK_braille_dots_378 = $10028c4;  

  XK_braille_dots_1378 = $10028c5;  

  XK_braille_dots_2378 = $10028c6;  

  XK_braille_dots_12378 = $10028c7;  

  XK_braille_dots_478 = $10028c8;  

  XK_braille_dots_1478 = $10028c9;  

  XK_braille_dots_2478 = $10028ca;  

  XK_braille_dots_12478 = $10028cb;  

  XK_braille_dots_3478 = $10028cc;  

  XK_braille_dots_13478 = $10028cd;  

  XK_braille_dots_23478 = $10028ce;  

  XK_braille_dots_123478 = $10028cf;  

  XK_braille_dots_578 = $10028d0;  

  XK_braille_dots_1578 = $10028d1;  

  XK_braille_dots_2578 = $10028d2;  

  XK_braille_dots_12578 = $10028d3;  

  XK_braille_dots_3578 = $10028d4;  

  XK_braille_dots_13578 = $10028d5;  

  XK_braille_dots_23578 = $10028d6;  

  XK_braille_dots_123578 = $10028d7;  

  XK_braille_dots_4578 = $10028d8;  

  XK_braille_dots_14578 = $10028d9;  

  XK_braille_dots_24578 = $10028da;  

  XK_braille_dots_124578 = $10028db;  

  XK_braille_dots_34578 = $10028dc;  

  XK_braille_dots_134578 = $10028dd;  

  XK_braille_dots_234578 = $10028de;  

  XK_braille_dots_1234578 = $10028df;  

  XK_braille_dots_678 = $10028e0;  

  XK_braille_dots_1678 = $10028e1;  

  XK_braille_dots_2678 = $10028e2;  

  XK_braille_dots_12678 = $10028e3;  

  XK_braille_dots_3678 = $10028e4;  

  XK_braille_dots_13678 = $10028e5;  

  XK_braille_dots_23678 = $10028e6;  

  XK_braille_dots_123678 = $10028e7;  

  XK_braille_dots_4678 = $10028e8;  

  XK_braille_dots_14678 = $10028e9;  

  XK_braille_dots_24678 = $10028ea;  

  XK_braille_dots_124678 = $10028eb;  

  XK_braille_dots_34678 = $10028ec;  

  XK_braille_dots_134678 = $10028ed;  

  XK_braille_dots_234678 = $10028ee;  

  XK_braille_dots_1234678 = $10028ef;  

  XK_braille_dots_5678 = $10028f0;  

  XK_braille_dots_15678 = $10028f1;  

  XK_braille_dots_25678 = $10028f2;  

  XK_braille_dots_125678 = $10028f3;  

  XK_braille_dots_35678 = $10028f4;  

  XK_braille_dots_135678 = $10028f5;  

  XK_braille_dots_235678 = $10028f6;  

  XK_braille_dots_1235678 = $10028f7;  

  XK_braille_dots_45678 = $10028f8;  

  XK_braille_dots_145678 = $10028f9;  

  XK_braille_dots_245678 = $10028fa;  

  XK_braille_dots_1245678 = $10028fb;  

  XK_braille_dots_345678 = $10028fc;  

  XK_braille_dots_1345678 = $10028fd;  

  XK_braille_dots_2345678 = $10028fe;  

  XK_braille_dots_12345678 = $10028ff;  
//// {$endif}


//// {$ifdef XK_SINHALA}


const
  XK_Sinh_ng = $1000d82;  

  XK_Sinh_h2 = $1000d83;  

  XK_Sinh_a = $1000d85;  

  XK_Sinh_aa = $1000d86;  

  XK_Sinh_ae = $1000d87;  

  XK_Sinh_aee = $1000d88;  

  XK_Sinh_i = $1000d89;  

  XK_Sinh_ii = $1000d8a;  

  XK_Sinh_u = $1000d8b;  

  XK_Sinh_uu = $1000d8c;  

  XK_Sinh_ri = $1000d8d;  

  XK_Sinh_rii = $1000d8e;  

  XK_Sinh_lu = $1000d8f;  

  XK_Sinh_luu = $1000d90;  

  XK_Sinh_e = $1000d91;  

  XK_Sinh_ee = $1000d92;  

  XK_Sinh_ai = $1000d93;  

  XK_Sinh_o = $1000d94;  

  XK_Sinh_oo = $1000d95;  

  XK_Sinh_au = $1000d96;  

  XK_Sinh_ka = $1000d9a;  

  XK_Sinh_kha = $1000d9b;  

  XK_Sinh_ga = $1000d9c;  

  XK_Sinh_gha = $1000d9d;  

  XK_Sinh_ng2 = $1000d9e;  

  XK_Sinh_nga = $1000d9f;  

  XK_Sinh_ca = $1000da0;  

  XK_Sinh_cha = $1000da1;  

  XK_Sinh_ja = $1000da2;  

  XK_Sinh_jha = $1000da3;  

  XK_Sinh_nya = $1000da4;  

  XK_Sinh_jnya = $1000da5;  

  XK_Sinh_nja = $1000da6;  

  XK_Sinh_tta = $1000da7;  

  XK_Sinh_ttha = $1000da8;  

  XK_Sinh_dda = $1000da9;  

  XK_Sinh_ddha = $1000daa;  

  XK_Sinh_nna = $1000dab;  

  XK_Sinh_ndda = $1000dac;  

  XK_Sinh_tha = $1000dad;  

  XK_Sinh_thha = $1000dae;  

  XK_Sinh_dha = $1000daf;  

  XK_Sinh_dhha = $1000db0;  

  XK_Sinh_na = $1000db1;  

  XK_Sinh_ndha = $1000db3;  

  XK_Sinh_pa = $1000db4;  

  XK_Sinh_pha = $1000db5;  

  XK_Sinh_ba = $1000db6;  

  XK_Sinh_bha = $1000db7;  

  XK_Sinh_ma = $1000db8;  

  XK_Sinh_mba = $1000db9;  

  XK_Sinh_ya = $1000dba;  

  XK_Sinh_ra = $1000dbb;  

  XK_Sinh_la = $1000dbd;  

  XK_Sinh_va = $1000dc0;  

  XK_Sinh_sha = $1000dc1;  

  XK_Sinh_ssha = $1000dc2;  

  XK_Sinh_sa = $1000dc3;  

  XK_Sinh_ha = $1000dc4;  

  XK_Sinh_lla = $1000dc5;  

  XK_Sinh_fa = $1000dc6;  

  XK_Sinh_al = $1000dca;  

  XK_Sinh_aa2 = $1000dcf;  

  XK_Sinh_ae2 = $1000dd0;  

  XK_Sinh_aee2 = $1000dd1;  

  XK_Sinh_i2 = $1000dd2;  

  XK_Sinh_ii2 = $1000dd3;  

  XK_Sinh_u2 = $1000dd4;  

  XK_Sinh_uu2 = $1000dd6;  

  XK_Sinh_ru2 = $1000dd8;  

  XK_Sinh_e2 = $1000dd9;  

  XK_Sinh_ee2 = $1000dda;  

  XK_Sinh_ai2 = $1000ddb;  

  XK_Sinh_o2 = $1000ddc;  

  XK_Sinh_oo2 = $1000ddd;  

  XK_Sinh_au2 = $1000dde;  

  XK_Sinh_lu2 = $1000ddf;  

  XK_Sinh_ruu2 = $1000df2;  

  XK_Sinh_luu2 = $1000df3;  

  XK_Sinh_kunddaliya = $1000df4;  
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/InitialI.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/InitialI.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/InitialI.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    P_ActionListRec  = ^_ActionListRec;
    P_XtString  = ^_XtString;
    Pchar  = ^char;
    PDisplay  = ^Display;
    Pdword  = ^dword;
    PHeap  = ^Heap;
    Plongint  = ^longint;
    PString  = ^String;
    PXrmOptionDescRec  = ^XrmOptionDescRec;
    PXtAppContext  = ^XtAppContext;
    PXtErrorHandler  = ^XtErrorHandler;
    PXtErrorMsgHandler  = ^XtErrorMsgHandler;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XtinitialI_h}
//// {$define _XtinitialI_h}

//// {$ifndef X_NOT_POSIX}
//// {$ifdef _POSIX_SOURCE}
//// {$include <limits.h>}
//// {$else}
//// {$define _POSIX_SOURCE}
//// {$include <limits.h>}
//// {$undef _POSIX_SOURCE}
//// {$endif}
//// {$endif}
//// {$ifndef PATH_MAX}
//// {$ifdef WIN32}

const
  PATH_MAX = 512;  
//// {$else}
//// {$include <sys/param.h>}
//// {$endif}
//// {$ifndef PATH_MAX}
//// {$ifdef MAXPATHLEN}

const
  PATH_MAX = MAXPATHLEN;  
//// {$else}

const
  PATH_MAX = 1024;  
//// {$endif}
//// {$endif}
//// {$endif}
//// {$include <X11/Xos.h>}
//// {$include <X11/Xpoll.h>}
//// (* error 
//// typedef struct _TimerEventRec {
in declaration at line 87 *)
//// (* error 
//// 	struct _TimerEventRec *te_next;
in declaration at line 88 *)
      var
        te_proc : TXtTimerCallbackProc;cvar;public;
        app : TXtAppContext;cvar;public;
        te_closure : TXtPointer;cvar;public;
//// (* error 
//// } TimerEventRec;
in declaration at line 92 *)
    type
      T_InputEvent = record
          ie_proc : TXtInputCallbackProc;
          ie_closure : TXtPointer;
          ie_next : ^T_InputEvent;
          ie_oq : ^T_InputEvent;
          app : TXtAppContext;
          ie_source : longint;
          ie_condition : TXtInputMask;
        end;
      TInputEvent = T_InputEvent;

      T_SignalEventRec = record
          se_proc : TXtSignalCallbackProc;
          se_closure : TXtPointer;
          se_next : ^T_SignalEventRec;
          app : TXtAppContext;
          se_notice : TBoolean;
        end;
      TSignalEventRec = T_SignalEventRec;

      T_WorkProcRec = record
          proc : TXtWorkProc;
          closure : TXtPointer;
          next : ^T_WorkProcRec;
          app : TXtAppContext;
        end;
      TWorkProcRec = T_WorkProcRec;
//// {$ifndef USE_POLL}
//// {$endif}
    type
      TFdStruct = record
          rmask : Tfd_set;
          wmask : Tfd_set;
          emask : Tfd_set;
          nfds : longint;
        end;

      T_LangProcRec = record
          proc : TXtLanguageProc;
          closure : TXtPointer;
        end;
      TLangProcRec = T_LangProcRec;

      T_ProcessContextRec = record
          defaultAppContext : TXtAppContext;
          appContextList : TXtAppContext;
          globalConverterTable : TConverterTable;
          globalLangProcRec : TLangProcRec;
        end;
      TProcessContextRec = T_ProcessContextRec;
      TProcessContext = ^T_ProcessContextRec;

      THeap = record
          start : ^char;
          current : ^char;
          bytes_remaining : longint;
        end;
      T_DestroyRec = TDestroyRec;





//// {$ifndef NO_IDENTIFY_WINDOWS}

//// {$endif}


//// {$ifdef XTHREADS}
//// {$endif}
    type
      T_XtAppStruct = record
          next : TXtAppContext;
          process : TProcessContext;
          destroy_callbacks : TInternalCallbackList;
          list : ^^TDisplay;
          timerQueue : ^TTimerEventRec;
          workQueue : ^TWorkProcRec;
          input_list : ^^TInputEvent;
          outstandingQueue : ^TInputEvent;
          signalQueue : ^TSignalEventRec;
          errorDB : TXrmDatabase;
          errorMsgHandler : TXtErrorMsgHandler;
          warningMsgHandler : TXtErrorMsgHandler;
          errorHandler : TXtErrorHandler;
          warningHandler : TXtErrorHandler;
          action_table : ^T_ActionListRec;
          converterTable : TConverterTable;
          selectionTimeout : dword;
          fds : TFdStruct;
          count : smallint;
          max : smallint;
          last : smallint;
          input_count : smallint;
          input_max : smallint;
          sync : TBoolean;
          being_destroyed : TBoolean;
          error_inited : TBoolean;
          identify_windows : TBoolean;
          heap : THeap;
          fallback_resources : ^TString;
          action_hook_list : ^T_ActionHookRec;
          block_hook_list : ^T_BlockHookRec;
          destroy_list_size : longint;
          destroy_count : longint;
          dispatch_level : longint;
          destroy_list : ^TDestroyRec;
          in_phase2_destroy : TWidget;
          langProcRec : TLangProcRec;
          free_bindings : ^T_TMBindCacheRec;
          display_name_tried : T_XtString;
          dpy_destroy_list : ^^TDisplay;
          dpy_destroy_count : longint;
          exit_flag : TBoolean;
          rebuild_fdlist : TBoolean;
          lock_info : TLockPtr;
          lock : TThreadAppProc;
          unlock : TThreadAppProc;
          yield_lock : TThreadAppYieldLockProc;
          restore_lock : TThreadAppRestoreLockProc;
          free_lock : TThreadAppProc;
        end;
      TXtAppStruct = T_XtAppStruct;

procedure _XtHeapInit(heap:PTHeap);cdecl;external;
procedure _XtHeapFree(heap:PTHeap);cdecl;external;
//// {$ifdef XTTRACEMEMORY}

function _XtHeapMalloc(_para1:PTHeap; _para2:TCardinal; _para3:Pchar; _para4:longint):^char;cdecl;external;
    function _XtHeapAlloc(heap,bytes : longint) : longint;    

//// {$else}



function _XtHeapAlloc(_para1:PTHeap; _para2:TCardinal):^char;cdecl;external;
//// {$endif}



procedure _XtSetDefaultErrorHandlers(_para1:PTXtErrorMsgHandler; _para2:PTXtErrorMsgHandler; _para3:PTXtErrorHandler; _para4:PTXtErrorHandler);cdecl;external;

procedure _XtSetDefaultSelectionTimeout(_para1:Pdword);cdecl;external;
function _XtDefaultAppContext:TXtAppContext;cdecl;external;
function _XtGetProcessContext:TProcessContext;cdecl;external;

function _XtAppInit(_para1:PTXtAppContext; _para2:TString; _para3:PTXrmOptionDescRec; _para4:TCardinal; _para5:Plongint; 
               _para6:PPT_XtString; _para7:PTString):^TDisplay;cdecl;external;
procedure _XtDestroyAppContexts;cdecl;external;

procedure _XtCloseDisplays(_para1:TXtAppContext);cdecl;external;
      var
        _XtAppDestroyCount : longint;cvar;external;
//// {$ifdef XTHREADS}
//// {$endif}


function _XtWaitForSomething(_para1:TXtAppContext; _para2:T_XtBoolean; _para3:T_XtBoolean; _para4:T_XtBoolean; _para5:T_XtBoolean; 
               _para6:T_XtBoolean; _para7:T_XtBoolean; _para8:Pdword):longint;cdecl;external;
    type
      TCaseConverterPtr = ^T_CaseConverterRec;





      T_CaseConverterRec = record
          start : TKeySym;
          stop : TKeySym;
          proc : TXtCaseProc;
          next : TCaseConverterPtr;
        end;
      TCaseConverterRec = T_CaseConverterRec;

      T_ExtensionSelectorRec = record
          proc : TXtExtensionSelectProc;
          min : longint;
          max : longint;
          client_data : TXtPointer;
        end;
      TExtSelectRec = T_ExtensionSelectorRec;



























//// {$ifndef X_NO_RESOURCE_CONFIGURATION_MANAGEMENT}


//// {$endif}
    type
      T_XtPerDisplayStruct = record
          destroy_callbacks : TInternalCallbackList;
          region : TRegion;
          case_cvt : TCaseConverterPtr;
          defaultKeycodeTranslator : TXtKeyProc;
          appContext : TXtAppContext;
          keysyms_serial : dword;
          keysyms : ^TKeySym;
          keysyms_per_keycode : longint;
          min_keycode : longint;
          max_keycode : longint;
          modKeysyms : ^TKeySym;
          modsToKeysyms : ^TModToKeysymTable;
          isModifier : array[0..31] of byte;
          lock_meaning : TKeySym;
          mode_switch : TModifiers;
          num_lock : TModifiers;
          being_destroyed : TBoolean;
          rv : TBoolean;
          name : TXrmName;
          _class : TXrmClass;
          heap : THeap;
          GClist : ^T_GCrec;
          pixmap_tab : ^^TDrawable;
          language : TString;
          last_event : TXEvent;
          last_timestamp : TTime;
          multi_click_time : longint;
          tm_context : ^T_TMKeyContextRec;
          mapping_callbacks : TInternalCallbackList;
          pdi : TXtPerDisplayInputRec;
          WWtable : ^T_WWTable;
          per_screen_db : ^TXrmDatabase;
          cmd_db : TXrmDatabase;
          server_db : TXrmDatabase;
          dispatcher_list : ^TXtEventDispatchProc;
          ext_select_list : ^TExtSelectRec;
          ext_select_count : longint;
          hook_object : TWidget;
          rcm_init : TAtom;
          rcm_data : TAtom;
        end;
      TXtPerDisplayStruct = T_XtPerDisplayStruct;
      TXtPerDisplay = ^T_XtPerDisplayStruct;

      T_PerDisplayTable = record
          dpy : ^TDisplay;
          perDpy : TXtPerDisplayStruct;
          next : ^T_PerDisplayTable;
        end;
      TPerDisplayTable = T_PerDisplayTable;
      TPerDisplayTablePtr = ^T_PerDisplayTable;
      var
        _XtperDisplayList : TPerDisplayTablePtr;cvar;external;


function _XtSortPerDisplayList(_para1:PTDisplay):TXtPerDisplay;cdecl;external;

function _XtGetPerDisplay(_para1:PTDisplay):TXtPerDisplay;cdecl;external;

function _XtGetPerDisplayInput(_para1:PTDisplay):^TXtPerDisplayInputRec;cdecl;external;
//// {$if 0}
//// {$ifdef DEBUG}

    function _XtGetPerDisplay(display : longint) : longint;    

    function _XtGetPerDisplayInput(display : longint) : longint;    

//// {$else}

    function _XtGetPerDisplay(display : longint) : longint;    

    function _XtGetPerDisplayInput(display : longint) : longint;    

//// {$endif}

//// {$endif}
//// (* error 
////     _Xconst char*	/* name */,
//// (* error 
////     XrmOptionDescRec*	/* urlist */,
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     int*		/* argc */,
//// (* error 
////     _XtString* 		/* argv */

 in declarator_list *)
 in declarator_list *)


procedure _XtCacheFlushTag(_para1:TXtAppContext; _para2:TXtPointer);cdecl;external;

procedure _XtFreeActions(_para1:PT_ActionListRec);cdecl;external;

procedure _XtDoPhase2Destroy(_para1:TXtAppContext; _para2:longint);cdecl;external;

procedure _XtDoFreeBindings(_para1:TXtAppContext);cdecl;external;

procedure _XtExtensionSelect(_para1:TWidget);cdecl;external;
    function _XtSafeToDestroy(app : longint) : longint;    

procedure _XtAllocWWTable(pd:TXtPerDisplay);cdecl;external;
procedure _XtFreeWWTable(pd:TXtPerDisplay);cdecl;external;
function _XtGetUserName(dest:T_XtString; len:longint):TString;cdecl;external;
function _XtPreparseCommandLine(urlist:PTXrmOptionDescRec; num_urs:TCardinal; argc:longint; argv:PT_XtString; applName:PTString; 
               displayName:PTString; language:PTString):TXrmDatabase;cdecl;external;
//// {$endif}

//// (* error 
//// #endif /* _XtinitialI_h */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xwindows.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xwindows.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xwindows.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}





//// {$undef _XFree86Server}
//// {$ifdef XFree86Server}
//// {$define _XFree86Server}
//// {$undef XFree86Server}
//// {$endif}

//// {$define NOMINMAX}

//// {$define _NO_BOOL_TYPEDEF}

const
  BOOL = WINBOOL;  
  INT32 = wINT32;  
//// {$ifdef __x86_64__}
  INT64 = wINT64;  
  LONG64 = wLONG64;  
//// {$endif}
//// {$undef Status}

const
  Status = wStatus;  
  ATOM = wATOM;  
  BYTE = wBYTE;  
  FreeResource = wFreeResource;  
//// {$include <windows.h>}
//// {$undef NOMINMAX}
//// {$undef Status}

const
  Status = longint;  
//// {$undef BYTE}
//// {$undef BOOL}
//// {$undef INT32}
//// {$undef INT64}
//// {$undef LONG64}
//// {$undef ATOM}
//// {$undef FreeResource}
//// {$undef CreateWindowA}

  wBOOL = WINBOOL;  
//// {$ifdef RESOURCE_H}
//// {$undef RT_FONT}
//// {$undef RT_CURSOR}

function RT_FONT : TRESTYPE;  

function RT_CURSOR : TRESTYPE;  

//// {$endif}
//// {$ifndef __CYGWIN__}

function sleep(x : longint) : longint;

//// {$endif}
//// {$if defined(WIN32) && (!defined(PATH_MAX) || PATH_MAX < 1024)}
//// {$undef PATH_MAX}

const
  PATH_MAX = 1024;  
//// {$endif}
//// {$ifdef _XFree86Server}
//// {$define XFree86Server}
//// {$undef _XFree86Server}
//// {$endif}

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/XlibConf.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/XlibConf.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/XlibConf.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XLIBCONF_H_}
//// {$define _XLIBCONF_H_}



const
  XTHREADS = 1;  

  XUSE_MTSAFE_API = 1;  
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xos_r.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xos_r.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xos_r.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    Pchar  = ^char;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}






//// {$ifndef _XOS_R_H_}
//// {$define _XOS_R_H_}
//// {$include <X11/Xos.h>}
//// {$include <X11/Xfuncs.h>}
//// {$ifndef X_NOT_POSIX}
//// {$ifdef _POSIX_SOURCE}
//// {$include <limits.h>}
//// {$else}
//// {$define _POSIX_SOURCE}
//// {$include <limits.h>}
//// {$undef _POSIX_SOURCE}
//// {$endif}
//// {$ifndef LINE_MAX}

const
  X_LINE_MAX = 2048;  
//// {$else}

const
  X_LINE_MAX = LINE_MAX;  
//// {$endif}
//// {$endif}
//// {$endif}

//// {$ifndef WIN32}
//// {$if defined(XOS_USE_XLIB_LOCKING)}
//// {$ifndef XAllocIDs /* Xlibint.h does not have multiple include protection */}
type
  TLockInfoPtr = ^T_LockInfoRec;
  var
    _Xglobal_lock : TLockInfoPtr;cvar;external;
//// {$endif}
//// {$ifndef _Xos_isThreadInitialized}

const
  _Xos_isThreadInitialized = _Xglobal_lock;  
//// {$endif}
//// {$if defined(XTHREADS_WARN) || defined(XTHREADS_FILE_LINE)}
//// {$ifndef XAllocIDs /* Xlibint.h does not have multiple include protection */}
//// {$include <X11/Xfuncproto.h>	/* for NeedFunctionPrototypes */}
//// {$if NeedFunctionPrototypes}

//// {$endif}
  var
    _XLockMutex_fn : procedure (_para1:TLockInfoPtr; _para2:Pchar; _para3:longint);cvar;external;
//// {$if NeedFunctionPrototypes}

//// {$endif}
  var
    _XUnlockMutex_fn : procedure (_para1:TLockInfoPtr; _para2:Pchar; _para3:longint);cvar;external;
//// {$endif}
//// {$ifndef _Xos_processLock}

function _Xos_processLock : longint; { return type might be wrong }

//// {$endif}
//// {$ifndef _Xos_processUnlock}

function _Xos_processUnlock : longint; { return type might be wrong }

//// {$endif}
//// {$else}
//// {$ifndef XAllocIDs /* Xlibint.h does not have multiple include protection */}
//// {$include <X11/Xfuncproto.h>	/* for NeedFunctionPrototypes */}
//// {$if NeedFunctionPrototypes}

//// {$endif}
  var
    _XLockMutex_fn : procedure (_para1:TLockInfoPtr);cvar;external;
//// {$if NeedFunctionPrototypes}

//// {$endif}
  var
    _XUnlockMutex_fn : procedure (_para1:TLockInfoPtr);cvar;external;
//// {$endif}
//// {$ifndef _Xos_processLock}
//// (* error 
////   (_XLockMutex_fn ? ((*_XLockMutex_fn)(_Xglobal_lock), 0) : 0)
in define line 143 *)
//// {$endif}
//// {$ifndef _Xos_processUnlock}
//// (* error 
////   (_XUnlockMutex_fn ? ((*_XUnlockMutex_fn)(_Xglobal_lock), 0) : 0)
in define line 147 *)
//// {$endif}
//// {$endif}
//// {$else defined(XOS_USE_XT_LOCKING)}
//// {$ifndef _XtThreadsI_h}
      var
        _XtProcessLock : procedure ;cvar;external;
//// {$endif}
//// {$ifndef _XtintrinsicP_h}
//// {$include <X11/Xfuncproto.h>	/* for NeedFunctionPrototypes */}
//// {$if NeedFunctionPrototypes}
//// {$endif}

procedure XtProcessLock;cdecl;external;
//// {$if NeedFunctionPrototypes}
//// {$endif}

procedure XtProcessUnlock;cdecl;external;
//// {$endif}
//// {$ifndef _Xos_isThreadInitialized}

    const
      _Xos_isThreadInitialized = _XtProcessLock;      
//// {$endif}
//// {$ifndef _Xos_processLock}

    function _Xos_processLock : longint; { return type might be wrong }

//// {$endif}
//// {$ifndef _Xos_processUnlock}

    function _Xos_processUnlock : longint; { return type might be wrong }

//// {$endif}
//// {$else defined(XOS_USE_NO_LOCKING)}
//// {$ifndef _Xos_isThreadInitialized}

    const
      _Xos_isThreadInitialized = 0;      
//// {$endif}
//// {$ifndef _Xos_processLock}

    const
      _Xos_processLock = 0;      
//// {$endif}
//// {$ifndef _Xos_processUnlock}

    const
      _Xos_processUnlock = 0;      
//// {$endif}
//// {$endif}
//// {$endif}


//// {$if defined(__sun) && defined(_POSIX_THREAD_SAFE_FUNCTIONS) && \}
//// (* error 
//// 	(_POSIX_C_SOURCE - 0 < 199506L) && !defined(_POSIX_PTHREAD_SEMANTICS)
//// {$undef _POSIX_THREAD_SAFE_FUNCTIONS}
//// {$endif}


//// {$if defined(X_INCLUDE_PWD_H) && !defined(_XOS_INCLUDED_PWD_H)}
//// {$include <pwd.h>}
//// {$if defined(XUSE_MTSAFE_API) || defined(XUSE_MTSAFE_PWDAPI)}
in define line 218 *)
//// {$endif}
//// {$endif}
//// {$undef X_NEEDS_PWPARAMS}
//// {$if !defined(X_INCLUDE_PWD_H) || defined(_XOS_INCLUDED_PWD_H)}

//// {$else !defined(XTHREADS) && !defined(X_FORCE_USE_MTSAFE_API)}

//// {$if defined(X_NOT_POSIX) && !defined(__i386__) && !defined(SYSV)}

function getpwuid:^Tpasswd;cdecl;external;
//// {$endif}
    type
      T_Xgetpwparams = longint;


    function _XGetpwuid(u,p : longint) : longint;    

    function _XGetpwnam(u,p : longint) : longint;    

//// {$else !defined(XOS_USE_MTSAFE_PWDAPI) || defined(XNO_MTSAFE_PWDAPI)}

//// {$define X_NEEDS_PWPARAMS}    
    type
      T_Xgetpwparams = record
          pws : Tpasswd;
          pwbuf : array[0..1023] of char;
          pwp : ^Tpasswd;
          len : Tsize_t;
        end;

//// {$if defined(__NetBSD__) || defined(__FreeBSD__) || defined(__OpenBSD__) || \}
//// (* error 
////     defined(__APPLE__) || defined(__DragonFly__)
 in declarator_list *)
//// (* error 
////    memcpy(&(p).pws, (p).pwp, sizeof(struct passwd));
//// (* error 
////    memcpy(&(p).pws, (p).pwp, sizeof(struct passwd));
//// (* error 
////    memcpy(&(p).pws, (p).pwp, sizeof(struct passwd));
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
      var
 : Tdefined;
//// (* error 
////    (p).pws.pw_name = (p).pwbuf;
in declaration at line 256 *)
//// (* error 
////    (p).len = strlen((p).pwp->pw_name);
in declaration at line 257 *)
//// (* error 
////    strcpy((p).pws.pw_name, (p).pwp->pw_name);
//// (* error 
////    strcpy((p).pws.pw_name, (p).pwp->pw_name);
 in declarator_list *)
 in declarator_list *)
//// (* error 
////    (p).pws.pw_passwd = (p).pws.pw_name + (p).len + 1;
in declaration at line 260 *)
//// (* error 
////    (p).len = strlen((p).pwp->pw_passwd);
in declaration at line 261 *)
//// (* error 
////    strcpy((p).pws.pw_passwd,(p).pwp->pw_passwd);
//// (* error 
////    strcpy((p).pws.pw_passwd,(p).pwp->pw_passwd);
 in declarator_list *)
 in declarator_list *)
//// (* error 
////    (p).pws.pw_class = (p).pws.pw_passwd + (p).len + 1;
in declaration at line 264 *)
//// (* error 
////    (p).len = strlen((p).pwp->pw_class);
in declaration at line 265 *)
//// (* error 
////    strcpy((p).pws.pw_class, (p).pwp->pw_class);
//// (* error 
////    strcpy((p).pws.pw_class, (p).pwp->pw_class);
 in declarator_list *)
 in declarator_list *)
//// (* error 
////    (p).pws.pw_gecos = (p).pws.pw_class + (p).len + 1;
in declaration at line 268 *)
//// (* error 
////    (p).len = strlen((p).pwp->pw_gecos);
in declaration at line 269 *)
//// (* error 
////    strcpy((p).pws.pw_gecos, (p).pwp->pw_gecos);
//// (* error 
////    strcpy((p).pws.pw_gecos, (p).pwp->pw_gecos);
 in declarator_list *)
 in declarator_list *)
//// (* error 
////    (p).pws.pw_dir = (p).pws.pw_gecos + (p).len + 1;
in declaration at line 272 *)
//// (* error 
////    (p).len = strlen((p).pwp->pw_dir);
in declaration at line 273 *)
//// (* error 
////    strcpy((p).pws.pw_dir, (p).pwp->pw_dir);
//// (* error 
////    strcpy((p).pws.pw_dir, (p).pwp->pw_dir);
 in declarator_list *)
 in declarator_list *)
//// (* error 
////    (p).pws.pw_shell = (p).pws.pw_dir + (p).len + 1;
in declaration at line 276 *)
//// (* error 
////    (p).len = strlen((p).pwp->pw_shell);
in declaration at line 277 *)
//// (* error 
////    strcpy((p).pws.pw_shell, (p).pwp->pw_shell);
//// (* error 
////    strcpy((p).pws.pw_shell, (p).pwp->pw_shell);
 in declarator_list *)
 in declarator_list *)
//// (* error 
////    (p).pwp = &(p).pws;
in declaration at line 280 *)
//// (* error 
//// }
//// {$else}
in define line 308 *)
//// {$endif}
//// (* error 
//// ( (_Xos_processLock), \
in define line 314 *)
//// (* error 
//// ( (_Xos_processLock), \
in define line 319 *)
//// {$else !defined(_POSIX_THREAD_SAFE_FUNCTIONS) && !defined(__APPLE__)}
//// {$define X_NEEDS_PWPARAMS}    
    type
      T_Xgetpwparams = record
          pws : Tpasswd;
          pwbuf : array[0..(X_LINE_MAX)-1] of char;
        end;
//// {$if defined(_POSIX_REENTRANT_FUNCTIONS) || !defined(SVR4)}

    function _XGetpwuid(u,p : longint) : longint;    

    function _XGetpwnam(u,p : longint) : longint;    

//// {$else}


    function _XGetpwuid(u,p : longint) : longint;    

    function _XGetpwnam(u,p : longint) : longint;    

//// {$endif}

//// {$else}

//// {$define X_NEEDS_PWPARAMS}    
    type
      T_Xgetpwparams = record
          pws : Tpasswd;
          pwbuf : array[0..(X_LINE_MAX)-1] of char;
          pwp : ^Tpasswd;
        end;

      T_Xgetpwret = longint;

    function _XGetpwuid(u,p : longint) : longint;    

    function _XGetpwnam(u,p : longint) : longint;    

//// {$endif}

//// {$if defined(X_INCLUDE_PWD_H) && !defined(_XOS_INCLUDED_PWD_H)}
//// {$define _XOS_INCLUDED_PWD_H}    
//// {$endif}


//// {$undef XTHREADS_NEEDS_BYNAMEPARAMS}
//// {$if defined(X_INCLUDE_NETDB_H) && !defined(_XOS_INCLUDED_NETDB_H) \}
//// (* error 
////     && !defined(WIN32)
//// {$include <netdb.h>}
//// {$if defined(XUSE_MTSAFE_API) || defined(XUSE_MTSAFE_NETDBAPI)}
in define line 388 *)
//// {$endif}
//// {$endif}
//// {$if !defined(X_INCLUDE_NETDB_H) || defined(_XOS_INCLUDED_NETDB_H)}

//// {$else !defined(XTHREADS) && !defined(X_FORCE_USE_MTSAFE_API)}

    type
      T_Xgethostbynameparams = longint;


      T_Xgetservbynameparams = longint;


    function _XGethostbyname(h,hp : longint) : longint;    

    function _XGethostbyaddr(a,al,t,hp : longint) : longint;    

    function _XGetservbyname(s,p,sp : longint) : longint;    

//// {$else !defined(XOS_USE_MTSAFE_NETDBAPI) || defined(XNO_MTSAFE_NETDBAPI)}

//// {$if defined(__NetBSD__) || defined(__FreeBSD__) || defined(__DragonFly__)}
//// {$include <sys/param.h>}
//// {$endif}
    type
      T_Xgethostbynameparams = record
          hent : Thostent;
          h_name : array[0..(MAXHOSTNAMELEN)-1] of char;
          hptr : ^Thostent;
        end;

      T_Xgetservbynameparams = record
          sent : Tservent;
          s_name : array[0..254] of char;
          s_proto : array[0..254] of char;
          sptr : ^Tservent;
        end;
//// {$define XTHREADS_NEEDS_BYNAMEPARAMS}    
//// (* error 
////    (memcpy(&(hp).hent, (hp).hptr, sizeof(struct hostent)), \
in define line 429 *)
//// (* error 
////    (memcpy(&(sp).sent, (sp).sptr, sizeof(struct servent)), \
in define line 437 *)
//// (* error 
////    ((_Xos_processLock), \
in define line 442 *)
//// (* error 
////    ((_Xos_processLock), \
in define line 447 *)
//// (* error 
////    ((_Xos_processLock), \
in define line 452 *)
//// {$else defined(XUSE_NETDB_R_API)}

//// {$ifdef _POSIX_REENTRANT_FUNCTIONS}
//// {$ifndef _POSIX_THREAD_SAFE_FUNCTIONS}
//// {$endif}
//// {$endif}
//// {$ifdef _POSIX_THREAD_SAFE_FUNCTIONS}

    const
      X_POSIX_THREAD_SAFE_FUNCTIONS = 1;      
//// {$endif}
//// {$define XTHREADS_NEEDS_BYNAMEPARAMS}    
//// {$ifndef X_POSIX_THREAD_SAFE_FUNCTIONS}
    type
      T_Xgethostbynameparams = record
          hent : Thostent;
          hbuf : array[0..(X_LINE_MAX)-1] of char;
          herr : longint;
        end;

      T_Xgetservbynameparams = record
          sent : Tservent;
          sbuf : array[0..(X_LINE_MAX)-1] of char;
        end;

    function _XGethostbyname(h,hp : longint) : longint;    

    function _XGethostbyaddr(a,al,t,hp : longint) : longint;    

    function _XGetservbyname(s,p,sp : longint) : longint;    

//// {$else}
    type
      T_Xgethostbynameparams = record
          hent : Thostent;
          hdata : Thostent_data;
        end;

      T_Xgetservbynameparams = record
          sent : Tservent;
          sdata : Tservent_data;
        end;
//// (* error 
////   (bzero((char*)&(hp).hdata,sizeof((hp).hdata)),	\
in define line 496 *)
//// (* error 
////   (bzero((char*)&(hp).hdata,sizeof((hp).hdata)),	\
in define line 499 *)
//// (* error 
////   (bzero((char*)&(sp).sdata,sizeof((sp).sdata)),	\
in define line 502 *)
//// {$endif}
//// {$ifdef X_POSIX_THREAD_SAFE_FUNCTIONS}
//// {$undef X_POSIX_THREAD_SAFE_FUNCTIONS}
//// {$endif}
//// {$else}

    type
      T_Xgethostbynameparams = longint;


      T_Xgetservbynameparams = longint;


    function _XGethostbyname(h,hp : longint) : longint;    

    function _XGethostbyaddr(a,al,t,hp : longint) : longint;    

    function _XGetservbyname(s,p,sp : longint) : longint;    

//// {$endif}

//// {$if defined(X_INCLUDE_NETDB_H) && !defined(_XOS_INCLUDED_NETDB_H)}
//// {$define _XOS_INCLUDED_NETDB_H}    
//// {$endif}


//// {$if defined(X_INCLUDE_DIRENT_H) && !defined(_XOS_INCLUDED_DIRENT_H)}
//// {$include <sys/types.h>}
//// {$if !defined(X_NOT_POSIX) || defined(SYSV)}
//// {$include <dirent.h>}
//// {$else}
//// {$include <sys/dir.h>}
//// {$ifndef dirent}

    const
      dirent = direct;      
//// {$endif}
//// {$endif}
//// {$if defined(XUSE_MTSAFE_API) || defined(XUSE_MTSAFE_DIRENTAPI)}

    const
      XOS_USE_MTSAFE_DIRENTAPI = 1;      
//// {$endif}
//// {$endif}
//// {$if !defined(X_INCLUDE_DIRENT_H) || defined(_XOS_INCLUDED_DIRENT_H)}

//// {$else !defined(XTHREADS) && !defined(X_FORCE_USE_MTSAFE_API)}

    type
      T_Xreaddirparams = longint;


    function _XReaddir(d,p : longint) : longint;    

//// {$else !defined(XOS_USE_MTSAFE_DIRENTAPI) || defined(XNO_MTSAFE_DIRENTAPI)}

//// {$ifdef _POSIX_PATH_MAX}
//// {$else defined(NAME_MAX)}
//// {$else}
//// {$endif}
    type
      T_Xreaddirparams = record
          result : ^Tdirent;
          dir_entry : Tdirent;
          buf : array[0..(_POSIX_PATH_MAX)-1] of char;
          buf : array[0..(NAME_MAX)-1] of char;
          buf : array[0..254] of char;
        end;
//// (* error 
////  ( (_Xos_processLock),						 \
in define line 580 *)
//// {$else}
//// {$ifdef _POSIX_PATH_MAX}
//// {$else defined(NAME_MAX)}
//// {$else}
//// {$endif}
    type
      T_Xreaddirparams = record
          result : ^Tdirent;
          dir_entry : Tdirent;
          buf : array[0..(_POSIX_PATH_MAX)-1] of char;
          buf : array[0..(NAME_MAX)-1] of char;
          buf : array[0..254] of char;
        end;
//// {$if defined(_POSIX_THREAD_SAFE_FUNCTIONS) || defined(__APPLE__)}


    function _XReaddir(d,p : longint) : longint;    

//// {$else defined(_POSIX_REENTRANT_FUNCTIONS)}


    function _XReaddir(d,p : longint) : longint;    

//// {$else defined(SVR4)}


    function _XReaddir(d,p : longint) : longint;    

//// {$else}

//// (* error 
////     ( (_Xos_processLock),						\
in define line 615 *)
//// {$endif}
//// {$endif}

//// {$if defined(X_INCLUDE_DIRENT_H) && !defined(_XOS_INCLUDED_DIRENT_H)}
//// {$define _XOS_INCLUDED_DIRENT_H}    
//// {$endif}


//// {$if defined(X_INCLUDE_UNISTD_H) && !defined(_XOS_INCLUDED_UNISTD_H)}

//// {$if defined(XUSE_MTSAFE_API) || defined(XUSE_MTSAFE_UNISTDAPI)}

    const
      XOS_USE_MTSAFE_UNISTDAPI = 1;      
//// {$endif}
//// {$endif}
//// {$if !defined(X_INCLUDE_UNISTD_H) || defined(_XOS_INCLUDED_UNISTD_H)}

//// {$else !defined(XTHREADS) && !defined(X_FORCE_USE_MTSAFE_API)}

    type
      T_Xgetloginparams = longint;


      T_Xttynameparams = longint;


    function _XGetlogin(p : longint) : longint;    

    function _XTtyname(f : longint) : longint;    

//// {$else !defined(XOS_USE_MTSAFE_UNISTDAPI) || defined(XNO_MTSAFE_UNISTDAPI)}

//// {$if defined(MAXLOGNAME)}
//// {$else defined(LOGIN_NAME_MAX)}
//// {$else}
//// {$endif}
    type
      T_Xgetloginparams = record
          result : ^char;
          buf : array[0..(MAXLOGNAME)-1] of char;
          buf : array[0..(LOGIN_NAME_MAX)-1] of char;
          buf : array[0..63] of char;
        end;
//// {$ifdef TTY_NAME_MAX}
//// {$else defined(_POSIX_TTY_NAME_MAX)}
//// {$else defined(_POSIX_PATH_MAX)}
//// {$else}
//// {$endif}
    type
      T_Xttynameparams = record
          result : ^char;
          buf : array[0..(TTY_NAME_MAX)-1] of char;
          buf : array[0..(_POSIX_TTY_NAME_MAX)-1] of char;
          buf : array[0..(_POSIX_PATH_MAX)-1] of char;
          buf : array[0..255] of char;
        end;
//// (* error 
////  ( (_Xos_processLock), \
in define line 689 *)
//// (* error 
////  ( (_Xos_processLock), \
in define line 697 *)
//// {$else defined(_POSIX_THREAD_SAFE_FUNCTIONS) || defined(_POSIX_REENTRANT_FUNCTIONS)}

//// {$if defined(MAXLOGNAME)}
//// {$else defined(LOGIN_NAME_MAX)}
//// {$else}
//// {$endif}
    type
      T_Xgetloginparams = record
          buf : array[0..(MAXLOGNAME)-1] of char;
          buf : array[0..(LOGIN_NAME_MAX)-1] of char;
          buf : array[0..63] of char;
        end;
//// {$ifdef TTY_NAME_MAX}
//// {$else defined(_POSIX_TTY_NAME_MAX)}
//// {$else defined(_POSIX_PATH_MAX)}
//// {$else}
//// {$endif}
    type
      T_Xttynameparams = record
          buf : array[0..(TTY_NAME_MAX)-1] of char;
          buf : array[0..(_POSIX_TTY_NAME_MAX)-1] of char;
          buf : array[0..(_POSIX_PATH_MAX)-1] of char;
          buf : array[0..255] of char;
        end;

    function _XGetlogin(p : longint) : longint;    

    function _XTtyname(f,p : longint) : longint;    

//// {$else}

//// {$if defined(MAXLOGNAME)}
//// {$else defined(LOGIN_NAME_MAX)}
//// {$else}
//// {$endif}
    type
      T_Xgetloginparams = record
          buf : array[0..(MAXLOGNAME)-1] of char;
          buf : array[0..(LOGIN_NAME_MAX)-1] of char;
          buf : array[0..63] of char;
        end;
//// {$ifdef TTY_NAME_MAX}
//// {$else defined(_POSIX_TTY_NAME_MAX)}
//// {$else defined(_POSIX_PATH_MAX)}
//// {$else}
//// {$endif}
    type
      T_Xttynameparams = record
          buf : array[0..(TTY_NAME_MAX)-1] of char;
          buf : array[0..(_POSIX_TTY_NAME_MAX)-1] of char;
          buf : array[0..(_POSIX_PATH_MAX)-1] of char;
          buf : array[0..255] of char;
        end;

    function _XGetlogin(p : longint) : longint;    

    function _XTtyname(f,p : longint) : longint;    

//// {$endif}

//// {$if defined(X_INCLUDE_UNISTD_H) && !defined(_XOS_INCLUDED_UNISTD_H)}
//// {$define _XOS_INCLUDED_UNISTD_H}    
//// {$endif}


//// {$if defined(X_INCLUDE_STRING_H) && !defined(_XOS_INCLUDED_STRING_H)}

//// {$if defined(XUSE_MTSAFE_API) || defined(XUSE_MTSAFE_STRINGAPI)}

    const
      XOS_USE_MTSAFE_STRINGAPI = 1;      
//// {$endif}
//// {$endif}
//// {$if !defined(X_INCLUDE_STRING_H) || defined(_XOS_INCLUDED_STRING_H)}

//// {$else !defined(XTHREADS) && !defined(X_FORCE_USE_MTSAFE_API)}

    type
      T_Xstrtokparams = longint;

//// (* error 
////  ( p = 0, (void)p, strtok((s1),(s2)) )
in define line 794 *)
//// {$else !defined(XOS_USE_MTSAFE_STRINGAPI) || defined(XNO_MTSAFE_STRINGAPI)}

    type
      T_Xstrtokparams = ^char;
//// (* error 
////  ( (_Xos_processLock), \
in define line 803 *)
//// {$else}

    type
      T_Xstrtokparams = ^char;

    function _XStrtok(s1,s2,p : longint) : longint;    

//// {$endif}



//// {$if defined(X_INCLUDE_TIME_H) && !defined(_XOS_INCLUDED_TIME_H)}
//// {$include <time.h>}
//// {$if defined(XUSE_MTSAFE_API) || defined(XUSE_MTSAFE_TIMEAPI)}

    const
      XOS_USE_MTSAFE_TIMEAPI = 1;      
//// {$endif}
//// {$endif}
//// {$if !defined(X_INCLUDE_TIME_H) || defined(_XOS_INCLUDED_TIME_H)}

//// {$else !defined(XTHREADS) && !defined(X_FORCE_USE_MTSAFE_API)}

    type
      T_Xatimeparams = longint;


    function _XAsctime(t,p : longint) : longint;    

    type
      T_Xctimeparams = longint;


    function _XCtime(t,p : longint) : longint;    

    type
      T_Xgtimeparams = longint;


    function _XGmtime(t,p : longint) : longint;    

    type
      T_Xltimeparams = longint;


    function _XLocaltime(t,p : longint) : longint;    

//// {$else !defined(XOS_USE_MTSAFE_TIMEAPI) || defined(XNO_MTSAFE_TIMEAPI)}

//// {$ifdef TIMELEN}
//// {$else}
//// {$endif}
    type
      T_Xctimeparams = record
          buf : array[0..(TIMELEN)-1] of char;
          buf : array[0..25] of char;
          result : ^char;
        end;
      T_Xatimeparams = T_Xctimeparams;

      T_Xgtimeparams = record
          buf : Ttm;
          result : ^Ttm;
        end;
      T_Xltimeparams = T_Xgtimeparams;
//// (* error 
////  ( (_Xos_processLock), \
in define line 873 *)
//// (* error 
////  ( (_Xos_processLock), \
in define line 880 *)
//// (* error 
////  ( (_Xos_processLock), \
in define line 887 *)
//// (* error 
////  ( (_Xos_processLock), \
in define line 894 *)
//// {$else !defined(_POSIX_THREAD_SAFE_FUNCTIONS) &&  defined(hpV4)}

//// {$ifdef TIMELEN}
    type
      T_Xatimeparams = array[0..(TIMELEN)-1] of char;

      T_Xctimeparams = array[0..(TIMELEN)-1] of char;
//// {$else}
    type
      T_Xatimeparams = array[0..25] of char;

      T_Xctimeparams = array[0..25] of char;
//// {$endif}
    type
      Ttm = T_Xgtimeparams;
      Ttm = T_Xltimeparams;

    function _XAsctime(t,p : longint) : longint;    

    function _XCtime(t,p : longint) : longint;    

    function _XGmtime(t,p : longint) : longint;    

    function _XLocaltime(t,p : longint) : longint;    

//// {$else !defined(_POSIX_THREAD_SAFE_FUNCTIONS) && defined(__sun)}

//// {$ifdef TIMELEN}
    type
      T_Xatimeparams = array[0..(TIMELEN)-1] of char;

      T_Xctimeparams = array[0..(TIMELEN)-1] of char;
//// {$else}
    type
      T_Xatimeparams = array[0..25] of char;

      T_Xctimeparams = array[0..25] of char;
//// {$endif}
    type
      Ttm = T_Xgtimeparams;
      Ttm = T_Xltimeparams;

    function _XAsctime(t,p : longint) : longint;    

    function _XCtime(t,p : longint) : longint;    

    function _XGmtime(t,p : longint) : longint;    

    function _XLocaltime(t,p : longint) : longint;    

//// {$else}


//// {$ifdef TIMELEN}
    type
      T_Xatimeparams = array[0..(TIMELEN)-1] of char;

      T_Xctimeparams = array[0..(TIMELEN)-1] of char;
//// {$else}
    type
      T_Xatimeparams = array[0..25] of char;

      T_Xctimeparams = array[0..25] of char;
//// {$endif}
    type
      Ttm = T_Xgtimeparams;
      Ttm = T_Xltimeparams;

    function _XAsctime(t,p : longint) : longint;    

    function _XCtime(t,p : longint) : longint;    

    function _XGmtime(t,p : longint) : longint;    

    function _XLocaltime(t,p : longint) : longint;    

//// {$endif}

//// {$if defined(X_INCLUDE_TIME_H) && !defined(_XOS_INCLUDED_TIME_H)}
//// {$define _XOS_INCLUDED_TIME_H}    
//// {$endif}


//// {$if defined(X_INCLUDE_GRP_H) && !defined(_XOS_INCLUDED_GRP_H)}
//// {$include <grp.h>}
//// {$if defined(XUSE_MTSAFE_API) || defined(XUSE_MTSAFE_GRPAPI)}

    const
      XOS_USE_MTSAFE_GRPAPI = 1;      
//// {$endif}
//// {$endif}
//// {$if !defined(X_INCLUDE_GRP_H) || defined(_XOS_INCLUDED_GRP_H)}

//// {$else !defined(XTHREADS) && !defined(X_FORCE_USE_MTSAFE_API)}

    type
      T_Xgetgrparams = longint;


    function _XGetgrgid(g,p : longint) : longint;    

    function _XGetgrnam(n,p : longint) : longint;    

//// {$else !defined(XOS_USE_MTSAFE_GRPAPI) || defined(XNO_MTSAFE_GRPAPI)}


    type
      T_Xgetgrparams = record
          grp : Tgroup;
          buf : array[0..(X_LINE_MAX)-1] of char;
          pgrp : ^Tgroup;
          len : Tsize_t;
        end;
//// {$ifdef SVR4}

//// (* error 
////  ( memcpy(&(p).grp, (p).pgrp, sizeof(struct group)), \
in define line 1021 *)
//// {$else}
//// (* error 
////  ( memcpy(&(p).grp, (p).pgrp, sizeof(struct group)), \
in define line 1028 *)
//// {$endif}
//// (* error 
////  ( (_Xos_processLock), \
in define line 1034 *)
//// (* error 
////  ( (_Xos_processLock), \
in define line 1039 *)
//// {$else !defined(_POSIX_THREAD_SAFE_FUNCTIONS) && defined(__sun)}


    type
      T_Xgetgrparams = record
          grp : Tgroup;
          buf : array[0..(X_LINE_MAX)-1] of char;
        end;

    function _XGetgrgid(g,p : longint) : longint;    

    function _XGetgrnam(n,p : longint) : longint;    

//// {$else !defined(_POSIX_THREAD_SAFE_FUNCTIONS)}


    type
      T_Xgetgrparams = record
          grp : Tgroup;
          buf : array[0..(X_LINE_MAX)-1] of char;
        end;

    function _XGetgrgid(g,p : longint) : longint;    

    function _XGetgrnam(n,p : longint) : longint;    

//// {$else}


    type
      T_Xgetgrparams = record
          grp : Tgroup;
          buf : array[0..(X_LINE_MAX)-1] of char;
          result : ^Tgroup;
        end;

    function _XGetgrgid(g,p : longint) : longint;    

    function _XGetgrnam(n,p : longint) : longint;    

//// {$endif}
//// {$if defined(X_INCLUDE_GRP_H) && !defined(_XOS_INCLUDED_GRP_H)}
//// {$define _XOS_INCLUDED_GRP_H}    
//// {$endif}

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/SelectionI.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/SelectionI.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/SelectionI.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XtselectionI_h}
//// {$define _XtselectionI_h}
//// {$include "Intrinsic.h"}
type
  TRequest = ^T_RequestRec;

  TSelect = ^T_SelectRec;




  T_RequestRec = record
      ctx : TSelect;
      widget : TWidget;
      requestor : TWindow;
      _property : TAtom;
      target : TAtom;
      _type : TAtom;
      format : longint;
      value : TXtPointer;
      bytelength : dword;
      offset : dword;
      timeout : TXtIntervalId;
      event : TXSelectionRequestEvent;
      allSent : TBoolean;
    end;
  TRequestRec = T_RequestRec;

  TSelectionPropRec = record
      prop : TAtom;
      avail : TBoolean;
    end;
  TSelectionProp = ^TSelectionPropRec;

  TPropListRec = record
      dpy : ^TDisplay;
      incr_atom : TAtom;
      indirect_atom : TAtom;
      timestamp_atom : TAtom;
      propCount : longint;
      list : TSelectionProp;
    end;
  TPropList = ^TPropListRec;





  T_SelectRec = record
      selection : TAtom;
      dpy : ^TDisplay;
      widget : TWidget;
      time : TTime;
      serial : dword;
      convert : TXtConvertSelectionProc;
      loses : TXtLoseSelectionProc;
      notify : TXtSelectionDoneProc;
      owner_cancel : TXtCancelConvertSelectionProc;
      owner_closure : TXtPointer;
      prop_list : TPropList;
      req : TRequest;
      ref_count : longint;
      flag0 : word;
    end;
  TSelectRec = T_SelectRec;

const
  bm__SelectRec_incremental = $1;
  bp__SelectRec_incremental = 0;
  bm__SelectRec_free_when_done = $2;
  bp__SelectRec_free_when_done = 1;
  bm__SelectRec_was_disowned = $4;
  bp__SelectRec_was_disowned = 2;

function incremental(var a : _SelectRec) : dword;
procedure set_incremental(var a : _SelectRec; __incremental : dword);
function free_when_done(var a : _SelectRec) : dword;
procedure set_free_when_done(var a : _SelectRec; __free_when_done : dword);
function was_disowned(var a : _SelectRec) : dword;
procedure set_was_disowned(var a : _SelectRec; __was_disowned : dword);
type
  T_ParamRec = record
      selection : TAtom;
      param : TAtom;
    end;
  TParamRec = T_ParamRec;
  TParam = ^T_ParamRec;

  T_ParamInfoRec = record
      count : dword;
      paramlist : TParam;
    end;
  TParamInfoRec = T_ParamInfoRec;
  TParamInfo = ^T_ParamInfoRec;

  T_QueuedRequestRec = record
      selection : TAtom;
      target : TAtom;
      param : TAtom;
      callback : TXtSelectionCallbackProc;
      closure : TXtPointer;
      time : TTime;
      incremental : TBoolean;
    end;
  TQueuedRequestRec = T_QueuedRequestRec;
  TQueuedRequest = ^T_QueuedRequestRec;

  T_QueuedRequestInfoRec = record
      count : longint;
      selections : ^TAtom;
      requests : ^TQueuedRequest;
    end;
  TQueuedRequestInfoRec = T_QueuedRequestInfoRec;
  TQueuedRequestInfo = ^T_QueuedRequestInfoRec;

  TCallBackInfoRec = record
      callbacks : ^TXtSelectionCallbackProc;
      req_closure : ^TXtPointer;
      _property : TAtom;
      target : ^TAtom;
      _type : TAtom;
      format : longint;
      value : ^char;
      bytelength : longint;
      offset : longint;
      timeout : TXtIntervalId;
      proc : TXtEventHandler;
      widget : TWidget;
      time : TTime;
      ctx : TSelect;
      incremental : ^TBoolean;
      current : longint;
    end;
  TCallBackInfo = ^TCallBackInfoRec;

  TIndirectPair = record
      target : TAtom;
      _property : TAtom;
    end;

const
  IndirectPairWordSize = 2;  
type
  TRequestWindowRec = record
      active_transfer_count : longint;
    end;

function MAX_SELECTION_INCR(dpy : longint) : longint;

//// (* error 
//// 	    (event->target == *info->target))
in define line 165 *)
//// {$endif}



// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xutil.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xutil.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xutil.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    Pchar  = ^char;
    PDisplay  = ^Display;
    PKeySym  = ^KeySym;
    Plongint  = ^longint;
    Pwchar_t  = ^wchar_t;
    PXClassHint  = ^XClassHint;
    PXComposeStatus  = ^XComposeStatus;
    PXIconSize  = ^XIconSize;
    PXImage  = ^XImage;
    PXKeyEvent  = ^XKeyEvent;
    PXPoint  = ^XPoint;
    PXPointer  = ^XPointer;
    PXRectangle  = ^XRectangle;
    PXSizeHints  = ^XSizeHints;
    PXStandardColormap  = ^XStandardColormap;
    PXTextProperty  = ^XTextProperty;
    PXVisualInfo  = ^XVisualInfo;
    PXWMHints  = ^XWMHints;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _X11_XUTIL_H_}
//// {$define _X11_XUTIL_H_}

//// {$include <X11/Xlib.h>}
//// {$include <X11/keysym.h>}

//// {$ifdef __clang__}
//// {$endif}


const
  NoValue = $0000;  
  XValue = $0001;  
  YValue = $0002;  
  WidthValue = $0004;  
  HeightValue = $0008;  
  AllValues = $000F;  
  XNegative = $0010;  
  YNegative = $0020;  








type
  TXSizeHints = record
      flags : longint;
      x : longint;
      y : longint;
      width : longint;
      height : longint;
      min_width : longint;
      min_height : longint;
      max_width : longint;
      max_height : longint;
      width_inc : longint;
      height_inc : longint;
      min_aspect : record
          x : longint;
          y : longint;
        end;
      max_aspect : record
          x : longint;
          y : longint;
        end;
      base_width : longint;
      base_height : longint;
      win_gravity : longint;
    end;




const
  USPosition = 1 shl 0;  

  USSize = 1 shl 1;  

  PPosition = 1 shl 2;  

  PSize = 1 shl 3;  

  PMinSize = 1 shl 4;  

  PMaxSize = 1 shl 5;  

  PResizeInc = 1 shl 6;  

  PAspect = 1 shl 7;  

  PBaseSize = 1 shl 8;  

  PWinGravity = 1 shl 9;  

  PAllHints = ((((PPosition or PSize) or PMinSize) or PMaxSize) or PResizeInc) or PAspect;  









type
  TXWMHints = record
      flags : longint;
      input : TBool;
      initial_state : longint;
      icon_pixmap : TPixmap;
      icon_window : TWindow;
      icon_x : longint;
      icon_y : longint;
      icon_mask : TPixmap;
      window_group : TXID;
    end;


const
  InputHint = 1 shl 0;  
  StateHint = 1 shl 1;  
  IconPixmapHint = 1 shl 2;  
  IconWindowHint = 1 shl 3;  
  IconPositionHint = 1 shl 4;  
  IconMaskHint = 1 shl 5;  
  WindowGroupHint = 1 shl 6;  
  AllHints = (((((InputHint or StateHint) or IconPixmapHint) or IconWindowHint) or IconPositionHint) or IconMaskHint) or WindowGroupHint;  
  XUrgencyHint = 1 shl 8;  


  WithdrawnState = 0;  

  NormalState = 1;  

  IconicState = 3;  


  DontCareState = 0;  

  ZoomState = 2;  

  InactiveState = 4;  






type
  TXTextProperty = record
      value : ^byte;
      encoding : TAtom;
      format : longint;
      nitems : dword;
    end;

const
  XNoMemory = -(1);  
  XLocaleNotSupported = -(2);  
  XConverterNotFound = -(3);  






type
  TXICCEncodingStyle = (XStringStyle,XCompoundTextStyle,XTextStyle,
    XStdICCTextStyle,XUTF8StringStyle);

  TXIconSize = record
      min_width : longint;
      min_height : longint;
      max_width : longint;
      max_height : longint;
      width_inc : longint;
      height_inc : longint;
    end;

  TXClassHint = record
      res_name : ^char;
      res_class : ^char;
    end;
//// {$ifdef XUTIL_DEFINE_FUNCTIONS}

function XDestroyImage(ximage:PTXImage):longint;cdecl;external;
function XGetPixel(ximage:PTXImage; x:longint; y:longint):dword;cdecl;external;
function XPutPixel(ximage:PTXImage; x:longint; y:longint; pixel:dword):longint;cdecl;external;
function XSubImage(ximage:PTXImage; x:longint; y:longint; width:dword; height:dword):^TXImage;cdecl;external;
function XAddPixel(ximage:PTXImage; value:longint):longint;cdecl;external;
//// {$else}


function XDestroyImage(ximage : longint) : longint;

function XGetPixel(ximage,x,y : longint) : longint;

function XPutPixel(ximage,x,y,pixel : longint) : longint;

function XSubImage(ximage,x,y,width,height : longint) : longint;

function XAddPixel(ximage,value : longint) : longint;

//// {$endif}



type
  T_XComposeStatus = record
      compose_ptr : TXPointer;
      chars_matched : longint;
    end;
  TXComposeStatus = T_XComposeStatus;


function IsKeypadKey(keysym : longint) : longint;

function IsPrivateKeypadKey(keysym : longint) : longint;

function IsCursorKey(keysym : longint) : longint;

function IsPFKey(keysym : longint) : longint;

function IsFunctionKey(keysym : longint) : longint;

function IsMiscFunctionKey(keysym : longint) : longint;

//// {$ifdef XK_XKB_KEYS}
//// (* error 
////    || (((KeySym)(keysym) >= XK_ISO_Lock) && \
in define line 263 *)
//// {$else}
//// (* error 
////    || ((KeySym)(keysym) == XK_Mode_switch) \
in define line 268 *)
//// {$endif}

    type
      TRegion = ^T_XRegion;


    const
      RectangleOut = 0;      
      RectangleIn = 1;      
      RectanglePart = 2;      

//// {$if defined(__cplusplus) || defined(c_plusplus)}

//// {$else}
//// {$endif}
    type
      TXVisualInfo = record
          visual : ^TVisual;
          visualid : TVisualID;
          screen : longint;
          depth : longint;
          c_class : longint;
          _class : longint;
          red_mask : dword;
          green_mask : dword;
          blue_mask : dword;
          colormap_size : longint;
          bits_per_rgb : longint;
        end;

    const
      VisualNoMask = $0;      
      VisualIDMask = $1;      
      VisualScreenMask = $2;      
      VisualDepthMask = $4;      
      VisualClassMask = $8;      
      VisualRedMaskMask = $10;      
      VisualGreenMaskMask = $20;      
      VisualBlueMaskMask = $40;      
      VisualColormapSizeMask = $80;      
      VisualBitsPerRGBMask = $100;      
      VisualAllMask = $1FF;      



    type
      TXStandardColormap = record
          colormap : TColormap;
          red_max : dword;
          red_mult : dword;
          green_max : dword;
          green_mult : dword;
          blue_max : dword;
          blue_mult : dword;
          base_pixel : dword;
          visualid : TVisualID;
          killid : TXID;
        end;


    function ReleaseByFreeingColormap : TXID;      


    const
      BitmapSuccess = 0;      
      BitmapOpenFailed = 1;      
      BitmapFileInvalid = 2;      
      BitmapNoMemory = 3;      



      XCSUCCESS = 0;      

      XCNOMEM = 1;      

      XCNOENT = 2;      
    type
      TXContext = longint;

    function XUniqueContext : TXContext;    

    function XStringToContext(_string : longint) : TXContext;    


//// (* error 
//// extern XClassHint *XAllocClassHint (
in declaration at line 368 *)
function XAllocIconSize:^TXIconSize;cdecl;external;
function XAllocSizeHints:^TXSizeHints;cdecl;external;
function XAllocStandardColormap:^TXStandardColormap;cdecl;external;
function XAllocWMHints:^TXWMHints;cdecl;external;

function XClipBox(_para1:TRegion; _para2:PTXRectangle):longint;cdecl;external;
function XCreateRegion:TRegion;cdecl;external;
function XDefaultString:^char;cdecl;external;

function XDeleteContext(_para1:PTDisplay; _para2:TXID; _para3:TXContext):longint;cdecl;external;

function XDestroyRegion(_para1:TRegion):longint;cdecl;external;

function XEmptyRegion(_para1:TRegion):longint;cdecl;external;

function XEqualRegion(_para1:TRegion; _para2:TRegion):longint;cdecl;external;

function XFindContext(_para1:PTDisplay; _para2:TXID; _para3:TXContext; _para4:PTXPointer):longint;cdecl;external;

function XGetClassHint(_para1:PTDisplay; _para2:TWindow; _para3:PTXClassHint):TStatus;cdecl;external;

function XGetIconSizes(_para1:PTDisplay; _para2:TWindow; _para3:PPTXIconSize; _para4:Plongint):TStatus;cdecl;external;

function XGetNormalHints(_para1:PTDisplay; _para2:TWindow; _para3:PTXSizeHints):TStatus;cdecl;external;

function XGetRGBColormaps(_para1:PTDisplay; _para2:TWindow; _para3:PPTXStandardColormap; _para4:Plongint; _para5:TAtom):TStatus;cdecl;external;

function XGetSizeHints(_para1:PTDisplay; _para2:TWindow; _para3:PTXSizeHints; _para4:TAtom):TStatus;cdecl;external;

function XGetStandardColormap(_para1:PTDisplay; _para2:TWindow; _para3:PTXStandardColormap; _para4:TAtom):TStatus;cdecl;external;

function XGetTextProperty(_para1:PTDisplay; _para2:TWindow; _para3:PTXTextProperty; _para4:TAtom):TStatus;cdecl;external;

function XGetVisualInfo(_para1:PTDisplay; _para2:longint; _para3:PTXVisualInfo; _para4:Plongint):^TXVisualInfo;cdecl;external;

function XGetWMClientMachine(_para1:PTDisplay; _para2:TWindow; _para3:PTXTextProperty):TStatus;cdecl;external;

function XGetWMHints(_para1:PTDisplay; _para2:TWindow):^TXWMHints;cdecl;external;

function XGetWMIconName(_para1:PTDisplay; _para2:TWindow; _para3:PTXTextProperty):TStatus;cdecl;external;

function XGetWMName(_para1:PTDisplay; _para2:TWindow; _para3:PTXTextProperty):TStatus;cdecl;external;

function XGetWMNormalHints(_para1:PTDisplay; _para2:TWindow; _para3:PTXSizeHints; _para4:Plongint):TStatus;cdecl;external;

function XGetWMSizeHints(_para1:PTDisplay; _para2:TWindow; _para3:PTXSizeHints; _para4:Plongint; _para5:TAtom):TStatus;cdecl;external;

function XGetZoomHints(_para1:PTDisplay; _para2:TWindow; _para3:PTXSizeHints):TStatus;cdecl;external;

function XIntersectRegion(_para1:TRegion; _para2:TRegion; _para3:TRegion):longint;cdecl;external;

procedure XConvertCase(_para1:TKeySym; _para2:PTKeySym; _para3:PTKeySym);cdecl;external;

function XLookupString(_para1:PTXKeyEvent; _para2:Pchar; _para3:longint; _para4:PTKeySym; _para5:PTXComposeStatus):longint;cdecl;external;

function XMatchVisualInfo(_para1:PTDisplay; _para2:longint; _para3:longint; _para4:longint; _para5:PTXVisualInfo):TStatus;cdecl;external;

function XOffsetRegion(_para1:TRegion; _para2:longint; _para3:longint):longint;cdecl;external;

function XPointInRegion(_para1:TRegion; _para2:longint; _para3:longint):TBool;cdecl;external;

function XPolygonRegion(_para1:PTXPoint; _para2:longint; _para3:longint):TRegion;cdecl;external;

function XRectInRegion(_para1:TRegion; _para2:longint; _para3:longint; _para4:dword; _para5:dword):longint;cdecl;external;
//// (* error 
////     _Xconst char*	/* data */

 in declarator_list *)

function XSetClassHint(_para1:PTDisplay; _para2:TWindow; _para3:PTXClassHint):longint;cdecl;external;

function XSetIconSizes(_para1:PTDisplay; _para2:TWindow; _para3:PTXIconSize; _para4:longint):longint;cdecl;external;

function XSetNormalHints(_para1:PTDisplay; _para2:TWindow; _para3:PTXSizeHints):longint;cdecl;external;

procedure XSetRGBColormaps(_para1:PTDisplay; _para2:TWindow; _para3:PTXStandardColormap; _para4:longint; _para5:TAtom);cdecl;external;

function XSetSizeHints(_para1:PTDisplay; _para2:TWindow; _para3:PTXSizeHints; _para4:TAtom):longint;cdecl;external;
//// (* error 
////     _Xconst char*	/* window_name */,
//// (* error 
////     _Xconst char*	/* icon_name */,
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     char**		/* argv */,
//// (* error 
////     int			/* argc */,
//// (* error 
////     XSizeHints*		/* hints */

 in declarator_list *)
 in declarator_list *)
 in declarator_list *)

procedure XSetTextProperty(_para1:PTDisplay; _para2:TWindow; _para3:PTXTextProperty; _para4:TAtom);cdecl;external;

procedure XSetWMClientMachine(_para1:PTDisplay; _para2:TWindow; _para3:PTXTextProperty);cdecl;external;

function XSetWMHints(_para1:PTDisplay; _para2:TWindow; _para3:PTXWMHints):longint;cdecl;external;

procedure XSetWMIconName(_para1:PTDisplay; _para2:TWindow; _para3:PTXTextProperty);cdecl;external;

procedure XSetWMName(_para1:PTDisplay; _para2:TWindow; _para3:PTXTextProperty);cdecl;external;

procedure XSetWMNormalHints(_para1:PTDisplay; _para2:TWindow; _para3:PTXSizeHints);cdecl;external;

procedure XSetWMProperties(_para1:PTDisplay; _para2:TWindow; _para3:PTXTextProperty; _para4:PTXTextProperty; _para5:PPchar; 
                _para6:longint; _para7:PTXSizeHints; _para8:PTXWMHints; _para9:PTXClassHint);cdecl;external;
//// (* error 
////     _Xconst char*	/* window_name */,
//// (* error 
////     _Xconst char*	/* icon_name */,
//// (* error 
////     char**		/* argv */,
//// (* error 
////     int			/* argc */,
//// (* error 
////     XSizeHints*		/* normal_hints */,
//// (* error 
////     XWMHints*		/* wm_hints */,
//// (* error 
////     XClassHint*		/* class_hints */

 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     _Xconst char*	/* window_name */,
//// (* error 
////     _Xconst char*	/* icon_name */,
//// (* error 
////     char**		/* argv */,
//// (* error 
////     int			/* argc */,
//// (* error 
////     XSizeHints*		/* normal_hints */,
//// (* error 
////     XWMHints*		/* wm_hints */,
//// (* error 
////     XClassHint*		/* class_hints */

 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)

procedure XSetWMSizeHints(_para1:PTDisplay; _para2:TWindow; _para3:PTXSizeHints; _para4:TAtom);cdecl;external;

function XSetRegion(_para1:PTDisplay; _para2:TGC; _para3:TRegion):longint;cdecl;external;

procedure XSetStandardColormap(_para1:PTDisplay; _para2:TWindow; _para3:PTXStandardColormap; _para4:TAtom);cdecl;external;

function XSetZoomHints(_para1:PTDisplay; _para2:TWindow; _para3:PTXSizeHints):longint;cdecl;external;

function XShrinkRegion(_para1:TRegion; _para2:longint; _para3:longint):longint;cdecl;external;

function XStringListToTextProperty(_para1:PPchar; _para2:longint; _para3:PTXTextProperty):TStatus;cdecl;external;

function XSubtractRegion(_para1:TRegion; _para2:TRegion; _para3:TRegion):longint;cdecl;external;
function XmbTextListToTextProperty(display:PTDisplay; list:PPchar; count:longint; style:TXICCEncodingStyle; text_prop_return:PTXTextProperty):longint;cdecl;external;
function XwcTextListToTextProperty(display:PTDisplay; list:PPTwchar_t; count:longint; style:TXICCEncodingStyle; text_prop_return:PTXTextProperty):longint;cdecl;external;
function Xutf8TextListToTextProperty(display:PTDisplay; list:PPchar; count:longint; style:TXICCEncodingStyle; text_prop_return:PTXTextProperty):longint;cdecl;external;
procedure XwcFreeStringList(list:PPTwchar_t);cdecl;external;

function XTextPropertyToStringList(_para1:PTXTextProperty; _para2:PPPchar; _para3:Plongint):TStatus;cdecl;external;
function XmbTextPropertyToTextList(display:PTDisplay; text_prop:PTXTextProperty; list_return:PPPchar; count_return:Plongint):longint;cdecl;external;
function XwcTextPropertyToTextList(display:PTDisplay; text_prop:PTXTextProperty; list_return:PPPTwchar_t; count_return:Plongint):longint;cdecl;external;
function Xutf8TextPropertyToTextList(display:PTDisplay; text_prop:PTXTextProperty; list_return:PPPchar; count_return:Plongint):longint;cdecl;external;

function XUnionRectWithRegion(_para1:PTXRectangle; _para2:TRegion; _para3:TRegion):longint;cdecl;external;

function XUnionRegion(_para1:TRegion; _para2:TRegion; _para3:TRegion):longint;cdecl;external;
//// (* error 
////     _Xconst char*	/* user_geometry */,
//// (* error 
////     _Xconst char*	/* default_geometry */,
//// (* error 
////     unsigned int	/* border_width */,
//// (* error 
////     XSizeHints*		/* hints */,
//// (* error 
////     int*		/* x_return */,
//// (* error 
////     int*		/* y_return */,
//// (* error 
////     int*		/* width_return */,
//// (* error 
////     int*		/* height_return */,
//// (* error 
////     int*		/* gravity_return */

 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)

function XXorRegion(_para1:TRegion; _para2:TRegion; _para3:TRegion):longint;cdecl;external;
//// {$ifdef __clang__}
//// {$endif}
//// {$endif}

//// (* error 
//// #endif /* _X11_XUTIL_H_ */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xlib.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xlib.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xlib.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    P_XDisplay  = ^_XDisplay;
    P_XExtData  = ^_XExtData;
    P_XImage  = ^_XImage;
    P_XrmHashBucketRec  = ^_XrmHashBucketRec;
    PAtom  = ^Atom;
    PBool  = ^Bool;
    Pbyte  = ^byte;
    Pchar  = ^char;
    PDisplay  = ^Display;
    Pdword  = ^dword;
    PKeySym  = ^KeySym;
    Plongint  = ^longint;
    PScreen  = ^Screen;
    PStatus  = ^Status;
    PVisual  = ^Visual;
    Pwchar_t  = ^wchar_t;
    PWindow  = ^Window;
    PXArc  = ^XArc;
    PXColor  = ^XColor;
    PXErrorEvent  = ^XErrorEvent;
    PXEvent  = ^XEvent;
    PXExtData  = ^XExtData;
    PXFontStruct  = ^XFontStruct;
    PXGCValues  = ^XGCValues;
    PXGenericEventCookie  = ^XGenericEventCookie;
    PXHostAddress  = ^XHostAddress;
    PXImage  = ^XImage;
    PXKeyboardControl  = ^XKeyboardControl;
    PXKeyboardState  = ^XKeyboardState;
    PXKeyEvent  = ^XKeyEvent;
    PXKeyPressedEvent  = ^XKeyPressedEvent;
    PXMappingEvent  = ^XMappingEvent;
    PXmbTextItem  = ^XmbTextItem;
    PXModifierKeymap  = ^XModifierKeymap;
    PXPoint  = ^XPoint;
    PXPointer  = ^XPointer;
    PXRectangle  = ^XRectangle;
    PXSegment  = ^XSegment;
    PXSetWindowAttributes  = ^XSetWindowAttributes;
    PXTextItem  = ^XTextItem;
    PXTextItem16  = ^XTextItem16;
    PXwcTextItem  = ^XwcTextItem;
    PXWindowAttributes  = ^XWindowAttributes;
    PXWindowChanges  = ^XWindowChanges;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _X11_XLIB_H_}
//// {$define _X11_XLIB_H_}

const
  XlibSpecificationRelease = 6;  
//// {$include <sys/types.h>}
//// {$if defined(__SCO__) || defined(__UNIXWARE__)}
//// {$include <stdint.h>}
//// {$endif}
//// {$include <X11/X.h>}

//// {$include <X11/Xfuncproto.h>}
//// {$include <X11/Xosdefs.h>}
//// {$ifndef X_WCHAR}
//// {$include <stddef.h>}
//// {$else}
//// {$ifdef __UNIXOS2__}
//// {$include <stdlib.h>}
//// {$else}

type
  Twchar_t = dword;
//// {$endif}
//// {$endif}

function _Xmblen(str:Pchar; len:longint):longint;cdecl;external;

const
  X_HAVE_UTF8_STRING = 1;  

//// {$ifdef __clang__}
//// {$endif}
type
  TXPointer = ^char;

const
  Bool = longint;  
  Status = longint;  
  True = 1;  
  False = 0;  
  QueuedAlready = 0;  
  QueuedAfterReading = 1;  
  QueuedAfterFlush = 2;  

function ConnectionNumber(dpy : longint) : longint;

function RootWindow(dpy,scr : longint) : longint;

function DefaultScreen(dpy : longint) : longint;

function DefaultRootWindow(dpy : longint) : longint;

function DefaultVisual(dpy,scr : longint) : longint;

function DefaultGC(dpy,scr : longint) : longint;

function BlackPixel(dpy,scr : longint) : longint;

function WhitePixel(dpy,scr : longint) : longint;

function AllPlanes : dword;  

function QLength(dpy : longint) : longint;

function DisplayWidth(dpy,scr : longint) : longint;

function DisplayHeight(dpy,scr : longint) : longint;

function DisplayWidthMM(dpy,scr : longint) : longint;

function DisplayHeightMM(dpy,scr : longint) : longint;

function DisplayPlanes(dpy,scr : longint) : longint;

function DisplayCells(dpy,scr : longint) : longint;

function ScreenCount(dpy : longint) : longint;

function ServerVendor(dpy : longint) : longint;

function ProtocolVersion(dpy : longint) : longint;

function ProtocolRevision(dpy : longint) : longint;

function VendorRelease(dpy : longint) : longint;

function DisplayString(dpy : longint) : longint;

function DefaultDepth(dpy,scr : longint) : longint;

function DefaultColormap(dpy,scr : longint) : longint;

function BitmapUnit(dpy : longint) : longint;

function BitmapBitOrder(dpy : longint) : longint;

function BitmapPad(dpy : longint) : longint;

function ImageByteOrder(dpy : longint) : longint;

function NextRequest(dpy : longint) : longint;

function LastKnownRequestProcessed(dpy : longint) : longint;


function ScreenOfDisplay(dpy,scr : longint) : longint;

function DefaultScreenOfDisplay(dpy : longint) : longint;

function DisplayOfScreen(s : longint) : longint;

function RootWindowOfScreen(s : longint) : longint;

function BlackPixelOfScreen(s : longint) : longint;

function WhitePixelOfScreen(s : longint) : longint;

function DefaultColormapOfScreen(s : longint) : longint;

function DefaultDepthOfScreen(s : longint) : longint;

function DefaultGCOfScreen(s : longint) : longint;

function DefaultVisualOfScreen(s : longint) : longint;

function WidthOfScreen(s : longint) : longint;

function HeightOfScreen(s : longint) : longint;

function WidthMMOfScreen(s : longint) : longint;

function HeightMMOfScreen(s : longint) : longint;

function PlanesOfScreen(s : longint) : longint;

function CellsOfScreen(s : longint) : longint;

function MinCmapsOfScreen(s : longint) : longint;

function MaxCmapsOfScreen(s : longint) : longint;

function DoesSaveUnders(s : longint) : longint;

function DoesBackingStore(s : longint) : longint;

function EventMaskOfScreen(s : longint) : longint;






type
  T_XExtData = record
      number : longint;
      next : ^T_XExtData;
      free_private : function (extension:PT_XExtData):longint;cdecl;
      private_data : TXPointer;
    end;
  TXExtData = T_XExtData;







  TXExtCodes = record
      extension : longint;
      major_opcode : longint;
      first_event : longint;
      first_error : longint;
    end;


  TXPixmapFormatValues = record
      depth : longint;
      bits_per_pixel : longint;
      scanline_pad : longint;
    end;






















  TXGCValues = record
      _function : longint;
      plane_mask : dword;
      foreground : dword;
      background : dword;
      line_width : longint;
      line_style : longint;
      cap_style : longint;
      join_style : longint;
      fill_style : longint;
      fill_rule : longint;
      arc_mode : longint;
      tile : TPixmap;
      stipple : TPixmap;
      ts_x_origin : longint;
      ts_y_origin : longint;
      font : TFont;
      subwindow_mode : longint;
      graphics_exposures : TBool;
      clip_x_origin : longint;
      clip_y_origin : longint;
      clip_mask : TPixmap;
      dash_offset : longint;
      dashes : char;
    end;

//// {$ifdef XLIB_ILLEGAL_ACCESS}



//// {$endif}
type
  T_XGC = ^record
      ext_data : ^TXExtData;
      gid : TGContext;
    end;
  TGC = ^T_XGC;



//// {$if defined(__cplusplus) || defined(c_plusplus)}

//// {$else}

//// {$endif}



type
  TVisual = record
      ext_data : ^TXExtData;
      visualid : TVisualID;
      c_class : longint;
      _class : longint;
      red_mask : dword;
      green_mask : dword;
      blue_mask : dword;
      bits_per_rgb : longint;
      map_entries : longint;
    end;





  TDepth = record
      depth : longint;
      nvisuals : longint;
      visuals : ^TVisual;
    end;

  T_XDisplay = record
      {undefined structure}
    end;


















  TScreen = record
      ext_data : ^TXExtData;
      display : ^T_XDisplay;
      root : TWindow;
      width : longint;
      height : longint;
      mwidth : longint;
      mheight : longint;
      ndepths : longint;
      depths : ^TDepth;
      root_depth : longint;
      root_visual : ^TVisual;
      default_gc : TGC;
      cmap : TColormap;
      white_pixel : dword;
      black_pixel : dword;
      max_maps : longint;
      min_maps : longint;
      backing_store : longint;
      save_unders : TBool;
      root_input_mask : longint;
    end;






  TScreenFormat = record
      ext_data : ^TXExtData;
      depth : longint;
      bits_per_pixel : longint;
      scanline_pad : longint;
    end;

















  TXSetWindowAttributes = record
      background_pixmap : TPixmap;
      background_pixel : dword;
      border_pixmap : TPixmap;
      border_pixel : dword;
      bit_gravity : longint;
      win_gravity : longint;
      backing_store : longint;
      backing_planes : dword;
      backing_pixel : dword;
      save_under : TBool;
      event_mask : longint;
      do_not_propagate_mask : longint;
      override_redirect : TBool;
      colormap : TColormap;
      cursor : TCursor;
    end;






//// {$if defined(__cplusplus) || defined(c_plusplus)}

//// {$else}

//// {$endif}














type
  TXWindowAttributes = record
      x : longint;
      y : longint;
      width : longint;
      height : longint;
      border_width : longint;
      depth : longint;
      visual : ^TVisual;
      root : TWindow;
      c_class : longint;
      _class : longint;
      bit_gravity : longint;
      win_gravity : longint;
      backing_store : longint;
      backing_planes : dword;
      backing_pixel : dword;
      save_under : TBool;
      colormap : TColormap;
      map_installed : TBool;
      map_state : longint;
      all_event_masks : longint;
      your_event_mask : longint;
      do_not_propagate_mask : longint;
      override_redirect : TBool;
      screen : ^TScreen;
    end;





  TXHostAddress = record
      family : longint;
      length : longint;
      address : ^char;
    end;






  TXServerInterpretedAddress = record
      typelength : longint;
      valuelength : longint;
      _type : ^char;
      value : ^char;
    end;
















  T_XImage = record
      width : longint;
      height : longint;
      xoffset : longint;
      format : longint;
      data : ^char;
      byte_order : longint;
      bitmap_unit : longint;
      bitmap_bit_order : longint;
      bitmap_pad : longint;
      depth : longint;
      bytes_per_line : longint;
      bits_per_pixel : longint;
      red_mask : dword;
      green_mask : dword;
      blue_mask : dword;
      obdata : TXPointer;
      f : record
          create_image : function (_para1:PT_XDisplay; _para2:PTVisual; _para3:dword; _para4:longint; _para5:longint; 
                       _para6:Pchar; _para7:dword; _para8:dword; _para9:longint; _para10:longint):PT_XImage;cdecl;
          destroy_image : function (_para1:PT_XImage):longint;cdecl;
          get_pixel : function (_para1:PT_XImage; _para2:longint; _para3:longint):dword;cdecl;
          put_pixel : function (_para1:PT_XImage; _para2:longint; _para3:longint; _para4:dword):longint;cdecl;
          sub_image : function (_para1:PT_XImage; _para2:longint; _para3:longint; _para4:dword; _para5:dword):PT_XImage;cdecl;
          add_pixel : function (_para1:PT_XImage; _para2:longint):longint;cdecl;
        end;
    end;
  TXImage = T_XImage;


  TXWindowChanges = record
      x : longint;
      y : longint;
      width : longint;
      height : longint;
      border_width : longint;
      sibling : TWindow;
      stack_mode : longint;
    end;



  TXColor = record
      pixel : dword;
      red : word;
      green : word;
      blue : word;
      flags : char;
      pad : char;
    end;


  TXSegment = record
      x1 : smallint;
      y1 : smallint;
      x2 : smallint;
      y2 : smallint;
    end;

  TXPoint = record
      x : smallint;
      y : smallint;
    end;

  TXRectangle = record
      x : smallint;
      y : smallint;
      width : word;
      height : word;
    end;

  TXArc = record
      x : smallint;
      y : smallint;
      width : word;
      height : word;
      angle1 : smallint;
      angle2 : smallint;
    end;



  TXKeyboardControl = record
      key_click_percent : longint;
      bell_percent : longint;
      bell_pitch : longint;
      bell_duration : longint;
      led : longint;
      led_mode : longint;
      key : longint;
      auto_repeat_mode : longint;
    end;


  TXKeyboardState = record
      key_click_percent : longint;
      bell_percent : longint;
      bell_pitch : dword;
      bell_duration : dword;
      led_mask : dword;
      global_auto_repeat : longint;
      auto_repeats : array[0..31] of char;
    end;


  TXTimeCoord = record
      time : TTime;
      x : smallint;
      y : smallint;
    end;




  TXModifierKeymap = record
      max_keypermod : longint;
      modifiermap : ^TKeyCode;
    end;

//// {$ifndef XLIB_ILLEGAL_ACCESS}
type
  T_XDisplay = TDisplay;
//// {$endif}
type
  T_XPrivate = record
      {undefined structure}
    end;


  T_XrmHashBucketRec = record
      {undefined structure}
    end;

//// {$ifdef XLIB_ILLEGAL_ACCESS}
//// {$endif}


























//// {$ifdef XLIB_ILLEGAL_ACCESS}
//// {$endif}
type
  T_XDisplay = record
      ext_data : ^TXExtData;
      private1 : ^T_XPrivate;
      fd : longint;
      private2 : longint;
      proto_major_version : longint;
      proto_minor_version : longint;
      vendor : ^char;
      private3 : TXID;
      private4 : TXID;
      private5 : TXID;
      private6 : longint;
      resource_alloc : function (_para1:PT_XDisplay):TXID;cdecl;
      byte_order : longint;
      bitmap_unit : longint;
      bitmap_pad : longint;
      bitmap_bit_order : longint;
      nformats : longint;
      pixmap_format : ^TScreenFormat;
      private8 : longint;
      release : longint;
      private9 : ^T_XPrivate;
      private10 : ^T_XPrivate;
      qlen : longint;
      last_request_read : dword;
      request : dword;
      private11 : TXPointer;
      private12 : TXPointer;
      private13 : TXPointer;
      private14 : TXPointer;
      max_request_size : dword;
      db : ^T_XrmHashBucketRec;
      private15 : function (_para1:PT_XDisplay):longint;cdecl;
      display_name : ^char;
      default_screen : longint;
      nscreens : longint;
      screens : ^TScreen;
      motion_buffer : dword;
      private16 : dword;
      min_keycode : longint;
      max_keycode : longint;
      private17 : TXPointer;
      private18 : TXPointer;
      private19 : longint;
      xdefaults : ^char;
    end;
  TDisplay = T_XDisplay;
  T_XPrivDisplay = ^T_XDisplay;
//// {$undef _XEVENT_}
//// {$ifndef _XEVENT_}














type
  TXKeyEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      window : TWindow;
      root : TWindow;
      subwindow : TWindow;
      time : TTime;
      x : longint;
      y : longint;
      x_root : longint;
      y_root : longint;
      state : dword;
      keycode : dword;
      same_screen : TBool;
    end;

  TXKeyPressedEvent = TXKeyEvent;

  TXKeyReleasedEvent = TXKeyEvent;














  TXButtonEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      window : TWindow;
      root : TWindow;
      subwindow : TWindow;
      time : TTime;
      x : longint;
      y : longint;
      x_root : longint;
      y_root : longint;
      state : dword;
      button : dword;
      same_screen : TBool;
    end;

  TXButtonPressedEvent = TXButtonEvent;

  TXButtonReleasedEvent = TXButtonEvent;














  TXMotionEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      window : TWindow;
      root : TWindow;
      subwindow : TWindow;
      time : TTime;
      x : longint;
      y : longint;
      x_root : longint;
      y_root : longint;
      state : dword;
      is_hint : char;
      same_screen : TBool;
    end;

  TXPointerMovedEvent = TXMotionEvent;
















  TXCrossingEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      window : TWindow;
      root : TWindow;
      subwindow : TWindow;
      time : TTime;
      x : longint;
      y : longint;
      x_root : longint;
      y_root : longint;
      mode : longint;
      detail : longint;
      same_screen : TBool;
      focus : TBool;
      state : dword;
    end;

  TXEnterWindowEvent = TXCrossingEvent;

  TXLeaveWindowEvent = TXCrossingEvent;








  TXFocusChangeEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      window : TWindow;
      mode : longint;
      detail : longint;
    end;

  TXFocusInEvent = TXFocusChangeEvent;

  TXFocusOutEvent = TXFocusChangeEvent;





  TXKeymapEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      window : TWindow;
      key_vector : array[0..31] of char;
    end;





  TXExposeEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      window : TWindow;
      x : longint;
      y : longint;
      width : longint;
      height : longint;
      count : longint;
    end;







  TXGraphicsExposeEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      drawable : TDrawable;
      x : longint;
      y : longint;
      width : longint;
      height : longint;
      count : longint;
      major_code : longint;
      minor_code : longint;
    end;






  TXNoExposeEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      drawable : TDrawable;
      major_code : longint;
      minor_code : longint;
    end;





  TXVisibilityEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      window : TWindow;
      state : longint;
    end;










  TXCreateWindowEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      parent : TWindow;
      window : TWindow;
      x : longint;
      y : longint;
      width : longint;
      height : longint;
      border_width : longint;
      override_redirect : TBool;
    end;




  TXDestroyWindowEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      event : TWindow;
      window : TWindow;
    end;




  TXUnmapEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      event : TWindow;
      window : TWindow;
      from_configure : TBool;
    end;





  TXMapEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      event : TWindow;
      window : TWindow;
      override_redirect : TBool;
    end;




  TXMapRequestEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      parent : TWindow;
      window : TWindow;
    end;




  TXReparentEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      event : TWindow;
      window : TWindow;
      parent : TWindow;
      x : longint;
      y : longint;
      override_redirect : TBool;
    end;




  TXConfigureEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      event : TWindow;
      window : TWindow;
      x : longint;
      y : longint;
      width : longint;
      height : longint;
      border_width : longint;
      above : TWindow;
      override_redirect : TBool;
    end;




  TXGravityEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      event : TWindow;
      window : TWindow;
      x : longint;
      y : longint;
    end;




  TXResizeRequestEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      window : TWindow;
      width : longint;
      height : longint;
    end;





  TXConfigureRequestEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      parent : TWindow;
      window : TWindow;
      x : longint;
      y : longint;
      width : longint;
      height : longint;
      border_width : longint;
      above : TWindow;
      detail : longint;
      value_mask : dword;
    end;





  TXCirculateEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      event : TWindow;
      window : TWindow;
      place : longint;
    end;





  TXCirculateRequestEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      parent : TWindow;
      window : TWindow;
      place : longint;
    end;





  TXPropertyEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      window : TWindow;
      atom : TAtom;
      time : TTime;
      state : longint;
    end;




  TXSelectionClearEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      window : TWindow;
      selection : TAtom;
      time : TTime;
    end;




  TXSelectionRequestEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      owner : TWindow;
      requestor : TWindow;
      selection : TAtom;
      target : TAtom;
      _property : TAtom;
      time : TTime;
    end;





  TXSelectionEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      requestor : TWindow;
      selection : TAtom;
      target : TAtom;
      _property : TAtom;
      time : TTime;
    end;




//// {$if defined(__cplusplus) || defined(c_plusplus)}

//// {$else}
//// {$endif}

type
  TXColormapEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      window : TWindow;
      colormap : TColormap;
      c_new : TBool;
      _new : TBool;
      state : longint;
    end;




  TXClientMessageEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      window : TWindow;
      message_type : TAtom;
      format : longint;
      data : record
          case longint of
            0 : ( b : array[0..19] of char );
            1 : ( s : array[0..9] of smallint );
            2 : ( l : array[0..4] of longint );
          end;
    end;








  TXMappingEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      window : TWindow;
      request : longint;
      first_keycode : longint;
      count : longint;
    end;







  TXErrorEvent = record
      _type : longint;
      display : ^TDisplay;
      resourceid : TXID;
      serial : dword;
      error_code : byte;
      request_code : byte;
      minor_code : byte;
    end;





  TXAnyEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      window : TWindow;
    end;








  TXGenericEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      extension : longint;
      evtype : longint;
    end;







  TXGenericEventCookie = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      extension : longint;
      evtype : longint;
      cookie : dword;
      data : pointer;
    end;



  T_XEvent = record
      case longint of
        0 : ( _type : longint );
        1 : ( xany : TXAnyEvent );
        2 : ( xkey : TXKeyEvent );
        3 : ( xbutton : TXButtonEvent );
        4 : ( xmotion : TXMotionEvent );
        5 : ( xcrossing : TXCrossingEvent );
        6 : ( xfocus : TXFocusChangeEvent );
        7 : ( xexpose : TXExposeEvent );
        8 : ( xgraphicsexpose : TXGraphicsExposeEvent );
        9 : ( xnoexpose : TXNoExposeEvent );
        10 : ( xvisibility : TXVisibilityEvent );
        11 : ( xcreatewindow : TXCreateWindowEvent );
        12 : ( xdestroywindow : TXDestroyWindowEvent );
        13 : ( xunmap : TXUnmapEvent );
        14 : ( xmap : TXMapEvent );
        15 : ( xmaprequest : TXMapRequestEvent );
        16 : ( xreparent : TXReparentEvent );
        17 : ( xconfigure : TXConfigureEvent );
        18 : ( xgravity : TXGravityEvent );
        19 : ( xresizerequest : TXResizeRequestEvent );
        20 : ( xconfigurerequest : TXConfigureRequestEvent );
        21 : ( xcirculate : TXCirculateEvent );
        22 : ( xcirculaterequest : TXCirculateRequestEvent );
        23 : ( xproperty : TXPropertyEvent );
        24 : ( xselectionclear : TXSelectionClearEvent );
        25 : ( xselectionrequest : TXSelectionRequestEvent );
        26 : ( xselection : TXSelectionEvent );
        27 : ( xcolormap : TXColormapEvent );
        28 : ( xclient : TXClientMessageEvent );
        29 : ( xmapping : TXMappingEvent );
        30 : ( xerror : TXErrorEvent );
        31 : ( xkeymap : TXKeymapEvent );
        32 : ( xgeneric : TXGenericEvent );
        33 : ( xcookie : TXGenericEventCookie );
        34 : ( pad : array[0..23] of longint );
      end;
  TXEvent = T_XEvent;
//// {$endif}

function XAllocID(dpy : longint) : longint;








type
  TXCharStruct = record
      lbearing : smallint;
      rbearing : smallint;
      width : smallint;
      ascent : smallint;
      descent : smallint;
      attributes : word;
    end;


  TXFontProp = record
      name : TAtom;
      card32 : dword;
    end;

















  TXFontStruct = record
      ext_data : ^TXExtData;
      fid : TFont;
      direction : dword;
      min_char_or_byte2 : dword;
      max_char_or_byte2 : dword;
      min_byte1 : dword;
      max_byte1 : dword;
      all_chars_exist : TBool;
      default_char : dword;
      n_properties : longint;
      properties : ^TXFontProp;
      min_bounds : TXCharStruct;
      max_bounds : TXCharStruct;
      per_char : ^TXCharStruct;
      ascent : longint;
      descent : longint;
    end;






  TXTextItem = record
      chars : ^char;
      nchars : longint;
      delta : longint;
      font : TFont;
    end;


  TXChar2b = record
      byte1 : byte;
      byte2 : byte;
    end;





  TXTextItem16 = record
      chars : ^TXChar2b;
      nchars : longint;
      delta : longint;
      font : TFont;
    end;

  TXEDataObject = record
      case longint of
        0 : ( display : ^TDisplay );
        1 : ( gc : TGC );
        2 : ( visual : ^TVisual );
        3 : ( screen : ^TScreen );
        4 : ( pixmap_format : ^TScreenFormat );
        5 : ( font : ^TXFontStruct );
      end;

  TXFontSetExtents = record
      max_ink_extent : TXRectangle;
      max_logical_extent : TXRectangle;
    end;


  TXOM = ^T_XOM;

  TXOC = ^T_XOC;
  TXFontSet = ^TXOC;

  TXmbTextItem = record
      chars : ^char;
      nchars : longint;
      delta : longint;
      font_set : TXFontSet;
    end;

  TXwcTextItem = record
      chars : ^Twchar_t;
      nchars : longint;
      delta : longint;
      font_set : TXFontSet;
    end;

const
  XNRequiredCharSet = 'requiredCharSet';  
  XNQueryOrientation = 'queryOrientation';  
  XNBaseFontName = 'baseFontName';  
  XNOMAutomatic = 'omAutomatic';  
  XNMissingCharSet = 'missingCharSet';  
  XNDefaultString = 'defaultString';  
  XNOrientation = 'orientation';  
  XNDirectionalDependentDrawing = 'directionalDependentDrawing';  
  XNContextualDrawing = 'contextualDrawing';  
  XNFontInfo = 'fontInfo';  
type
  TXOMCharSetList = record
      charset_count : longint;
      charset_list : ^^char;
    end;

  TXOrientation = (XOMOrientation_LTR_TTB,XOMOrientation_RTL_TTB,
    XOMOrientation_TTB_LTR,XOMOrientation_TTB_RTL,
    XOMOrientation_Context);


  TXOMOrientation = record
      num_orientation : longint;
      orientation : ^TXOrientation;
    end;

  TXOMFontInfo = record
      num_font : longint;
      font_struct_list : ^^TXFontStruct;
      font_name_list : ^^char;
    end;

  TXIM = ^T_XIM;

  TXIC = ^T_XIC;

  TXIMProc = procedure (_para1:TXIM; _para2:TXPointer; _para3:TXPointer);cdecl;

  TXICProc = function (_para1:TXIC; _para2:TXPointer; _para3:TXPointer):TBool;cdecl;

  TXIDProc = procedure (_para1:PTDisplay; _para2:TXPointer; _para3:TXPointer);cdecl;

  TXIMStyle = dword;

  TXIMStyles = record
      count_styles : word;
      supported_styles : ^TXIMStyle;
    end;

const
  XIMPreeditArea = $0001;  
  XIMPreeditCallbacks = $0002;  
  XIMPreeditPosition = $0004;  
  XIMPreeditNothing = $0008;  
  XIMPreeditNone = $0010;  
  XIMStatusArea = $0100;  
  XIMStatusCallbacks = $0200;  
  XIMStatusNothing = $0400;  
  XIMStatusNone = $0800;  
  XNVaNestedList = 'XNVaNestedList';  
  XNQueryInputStyle = 'queryInputStyle';  
  XNClientWindow = 'clientWindow';  
  XNInputStyle = 'inputStyle';  
  XNFocusWindow = 'focusWindow';  
  XNResourceName = 'resourceName';  
  XNResourceClass = 'resourceClass';  
  XNGeometryCallback = 'geometryCallback';  
  XNDestroyCallback = 'destroyCallback';  
  XNFilterEvents = 'filterEvents';  
  XNPreeditStartCallback = 'preeditStartCallback';  
  XNPreeditDoneCallback = 'preeditDoneCallback';  
  XNPreeditDrawCallback = 'preeditDrawCallback';  
  XNPreeditCaretCallback = 'preeditCaretCallback';  
  XNPreeditStateNotifyCallback = 'preeditStateNotifyCallback';  
  XNPreeditAttributes = 'preeditAttributes';  
  XNStatusStartCallback = 'statusStartCallback';  
  XNStatusDoneCallback = 'statusDoneCallback';  
  XNStatusDrawCallback = 'statusDrawCallback';  
  XNStatusAttributes = 'statusAttributes';  
  XNArea = 'area';  
  XNAreaNeeded = 'areaNeeded';  
  XNSpotLocation = 'spotLocation';  
  XNColormap = 'colorMap';  
  XNStdColormap = 'stdColorMap';  
  XNForeground = 'foreground';  
  XNBackground = 'background';  
  XNBackgroundPixmap = 'backgroundPixmap';  
  XNFontSet = 'fontSet';  
  XNLineSpace = 'lineSpace';  
  XNCursor = 'cursor';  
  XNQueryIMValuesList = 'queryIMValuesList';  
  XNQueryICValuesList = 'queryICValuesList';  
  XNVisiblePosition = 'visiblePosition';  
  XNR6PreeditCallback = 'r6PreeditCallback';  
  XNStringConversionCallback = 'stringConversionCallback';  
  XNStringConversion = 'stringConversion';  
  XNResetState = 'resetState';  
  XNHotKey = 'hotKey';  
  XNHotKeyState = 'hotKeyState';  
  XNPreeditState = 'preeditState';  
  XNSeparatorofNestedList = 'separatorofNestedList';  
  XBufferOverflow = -(1);  
  XLookupNone = 1;  
  XLookupChars = 2;  
  XLookupKeySym = 3;  
  XLookupBoth = 4;  
type
  TXVaNestedList = pointer;

  TXIMCallback = record
      client_data : TXPointer;
      callback : TXIMProc;
    end;

  TXICCallback = record
      client_data : TXPointer;
      callback : TXICProc;
    end;

  TXIMFeedback = dword;

const
  XIMReverse = 1;  
  XIMUnderline = 1 shl 1;  
  XIMHighlight = 1 shl 2;  
  XIMPrimary = 1 shl 5;  
  XIMSecondary = 1 shl 6;  
  XIMTertiary = 1 shl 7;  
  XIMVisibleToForward = 1 shl 8;  
  XIMVisibleToBackword = 1 shl 9;  
  XIMVisibleToCenter = 1 shl 10;  
type
  T_XIMText = record
      length : word;
      feedback : ^TXIMFeedback;
      encoding_is_wchar : TBool;
      _string : record
          case longint of
            0 : ( multi_byte : ^char );
            1 : ( wide_char : ^Twchar_t );
          end;
    end;
  TXIMText = T_XIMText;

  TXIMPreeditState = dword;

const
  XIMPreeditUnKnown = 0;  
  XIMPreeditEnable = 1;  
  XIMPreeditDisable = 1 shl 1;  
type
  T_XIMPreeditStateNotifyCallbackStruct = record
      state : TXIMPreeditState;
    end;
  TXIMPreeditStateNotifyCallbackStruct = T_XIMPreeditStateNotifyCallbackStruct;

  TXIMResetState = dword;

const
  XIMInitialState = 1;  
  XIMPreserveState = 1 shl 1;  
type
  TXIMStringConversionFeedback = dword;

const
  XIMStringConversionLeftEdge = $00000001;  
  XIMStringConversionRightEdge = $00000002;  
  XIMStringConversionTopEdge = $00000004;  
  XIMStringConversionBottomEdge = $00000008;  
  XIMStringConversionConcealed = $00000010;  
  XIMStringConversionWrapped = $00000020;  
type
  T_XIMStringConversionText = record
      length : word;
      feedback : ^TXIMStringConversionFeedback;
      encoding_is_wchar : TBool;
      _string : record
          case longint of
            0 : ( mbs : ^char );
            1 : ( wcs : ^Twchar_t );
          end;
    end;
  TXIMStringConversionText = T_XIMStringConversionText;

  TXIMStringConversionPosition = word;

  TXIMStringConversionType = word;

const
  XIMStringConversionBuffer = $0001;  
  XIMStringConversionLine = $0002;  
  XIMStringConversionWord = $0003;  
  XIMStringConversionChar = $0004;  
type
  TXIMStringConversionOperation = word;

const
  XIMStringConversionSubstitution = $0001;  
  XIMStringConversionRetrieval = $0002;  
type
  TXIMCaretDirection = (XIMForwardChar,XIMBackwardChar,XIMForwardWord,
    XIMBackwardWord,XIMCaretUp,XIMCaretDown,
    XIMNextLine,XIMPreviousLine,XIMLineStart,
    XIMLineEnd,XIMAbsolutePosition,XIMDontChange
    );

  T_XIMStringConversionCallbackStruct = record
      position : TXIMStringConversionPosition;
      direction : TXIMCaretDirection;
      operation : TXIMStringConversionOperation;
      factor : word;
      text : ^TXIMStringConversionText;
    end;
  TXIMStringConversionCallbackStruct = T_XIMStringConversionCallbackStruct;




  T_XIMPreeditDrawCallbackStruct = record
      caret : longint;
      chg_first : longint;
      chg_length : longint;
      text : ^TXIMText;
    end;
  TXIMPreeditDrawCallbackStruct = T_XIMPreeditDrawCallbackStruct;




  TXIMCaretStyle = (XIMIsInvisible,XIMIsPrimary,XIMIsSecondary
    );




  T_XIMPreeditCaretCallbackStruct = record
      position : longint;
      direction : TXIMCaretDirection;
      style : TXIMCaretStyle;
    end;
  TXIMPreeditCaretCallbackStruct = T_XIMPreeditCaretCallbackStruct;

  TXIMStatusDataType = (XIMTextType,XIMBitmapType);

  T_XIMStatusDrawCallbackStruct = record
      _type : TXIMStatusDataType;
      data : record
          case longint of
            0 : ( text : ^TXIMText );
            1 : ( bitmap : TPixmap );
          end;
    end;
  TXIMStatusDrawCallbackStruct = T_XIMStatusDrawCallbackStruct;

  T_XIMHotKeyTrigger = record
      keysym : TKeySym;
      modifier : longint;
      modifier_mask : longint;
    end;
  TXIMHotKeyTrigger = T_XIMHotKeyTrigger;

  T_XIMHotKeyTriggers = record
      num_hot_key : longint;
      key : ^TXIMHotKeyTrigger;
    end;
  TXIMHotKeyTriggers = T_XIMHotKeyTriggers;

  TXIMHotKeyState = dword;

const
  XIMHotKeyStateON = $0001;  
  XIMHotKeyStateOFF = $0002;  
type
  TXIMValuesList = record
      count_values : word;
      supported_values : ^^char;
    end;
//// {$if defined(WIN32) && !defined(_XLIBINT_)}
//// (* error 
//// #define _Xdebug (*_Xdebug_p)
in define line 1389 *)
//// {$endif}
      var
        _Xdebug : longint;cvar;external;
//// (* error 
////     _Xconst char*	/* name */

 in declarator_list *)


function XQueryFont(_para1:PTDisplay; _para2:TXID):^TXFontStruct;cdecl;external;

function XGetMotionEvents(_para1:PTDisplay; _para2:TWindow; _para3:TTime; _para4:TTime; _para5:Plongint):^TXTimeCoord;cdecl;external;
//// {$if NeedWidePrototypes}
//// {$else}
//// {$endif}


function XDeleteModifiermapEntry(_para1:PTXModifierKeymap; _para2:dword; _para3:TKeyCode; _para4:longint):^TXModifierKeymap;cdecl;external;

function XGetModifierMapping(_para1:PTDisplay):^TXModifierKeymap;cdecl;external;
//// {$if NeedWidePrototypes}
//// {$else}
//// {$endif}


function XInsertModifiermapEntry(_para1:PTXModifierKeymap; _para2:dword; _para3:TKeyCode; _para4:longint):^TXModifierKeymap;cdecl;external;

function XNewModifiermap(_para1:longint):^TXModifierKeymap;cdecl;external;

function XCreateImage(_para1:PTDisplay; _para2:PTVisual; _para3:dword; _para4:longint; _para5:longint; 
               _para6:Pchar; _para7:dword; _para8:dword; _para9:longint; _para10:longint):^TXImage;cdecl;external;

function XInitImage(_para1:PTXImage):TStatus;cdecl;external;

function XGetImage(_para1:PTDisplay; _para2:TDrawable; _para3:longint; _para4:longint; _para5:dword; 
               _para6:dword; _para7:dword; _para8:longint):^TXImage;cdecl;external;

function XGetSubImage(_para1:PTDisplay; _para2:TDrawable; _para3:longint; _para4:longint; _para5:dword; 
               _para6:dword; _para7:dword; _para8:longint; _para9:PTXImage; _para10:longint; 
               _para11:longint):^TXImage;cdecl;external;

//// (* error 
////     _Xconst char*	/* display_name */

 in declarator_list *)
procedure XrmInitialize;cdecl;external;

function XFetchBytes(_para1:PTDisplay; _para2:Plongint):^char;cdecl;external;

function XFetchBuffer(_para1:PTDisplay; _para2:Plongint; _para3:longint):^char;cdecl;external;

function XGetAtomName(_para1:PTDisplay; _para2:TAtom):^char;cdecl;external;

function XGetAtomNames(_para1:PTDisplay; _para2:PTAtom; _para3:longint; _para4:PPchar):TStatus;cdecl;external;
//// (* error 
////     _Xconst char*	/* program */,
//// (* error 
////     _Xconst char*	/* option */

 in declarator_list *)
 in declarator_list *)
//// (* error 
////     _Xconst char*	/* string */

 in declarator_list *)

function XKeysymToString(_para1:TKeySym):^char;cdecl;external;


function XSynchronize(_para1:PTDisplay; _para2:TBool):function (_para1:PTDisplay):longint;cdecl;external;



function XSetAfterFunction(_para1:PTDisplay; _para2:function (_para1:PTDisplay):longint):function (_para1:PTDisplay):longint;cdecl;external;
//// (* error 
////     _Xconst char*	/* atom_name */,

//// (* error 
//// );
 in declarator_list *)
 in declarator_list *)

function XInternAtoms(_para1:PTDisplay; _para2:PPchar; _para3:longint; _para4:TBool; _para5:PTAtom):TStatus;cdecl;external;

function XCopyColormapAndFree(_para1:PTDisplay; _para2:TColormap):TColormap;cdecl;external;

function XCreateColormap(_para1:PTDisplay; _para2:TWindow; _para3:PTVisual; _para4:longint):TColormap;cdecl;external;

function XCreatePixmapCursor(_para1:PTDisplay; _para2:TPixmap; _para3:TPixmap; _para4:PTXColor; _para5:PTXColor; 
               _para6:dword; _para7:dword):TCursor;cdecl;external;
//// (* error 
////     XColor _Xconst *	/* foreground_color */,
//// (* error 
////     XColor _Xconst *	/* background_color */

 in declarator_list *)
 in declarator_list *)

function XCreateFontCursor(_para1:PTDisplay; _para2:dword):TCursor;cdecl;external;
//// (* error 
////     _Xconst char*	/* name */

 in declarator_list *)

function XCreateGC(_para1:PTDisplay; _para2:TDrawable; _para3:dword; _para4:PTXGCValues):TGC;cdecl;external;

function XGContextFromGC(_para1:TGC):TGContext;cdecl;external;

procedure XFlushGC(_para1:PTDisplay; _para2:TGC);cdecl;external;

function XCreatePixmap(_para1:PTDisplay; _para2:TDrawable; _para3:dword; _para4:dword; _para5:dword):TPixmap;cdecl;external;
//// (* error 
////     _Xconst char*	/* data */,
//// (* error 
////     unsigned int	/* width */,
//// (* error 
////     unsigned int	/* height */

 in declarator_list *)
 in declarator_list *)
 in declarator_list *)

function XCreatePixmapFromBitmapData(_para1:PTDisplay; _para2:TDrawable; _para3:Pchar; _para4:dword; _para5:dword; 
               _para6:dword; _para7:dword; _para8:dword):TPixmap;cdecl;external;

function XCreateSimpleWindow(_para1:PTDisplay; _para2:TWindow; _para3:longint; _para4:longint; _para5:dword; 
               _para6:dword; _para7:dword; _para8:dword; _para9:dword):TWindow;cdecl;external;

function XGetSelectionOwner(_para1:PTDisplay; _para2:TAtom):TWindow;cdecl;external;

function XCreateWindow(_para1:PTDisplay; _para2:TWindow; _para3:longint; _para4:longint; _para5:dword; 
               _para6:dword; _para7:dword; _para8:longint; _para9:dword; _para10:PTVisual; 
               _para11:dword; _para12:PTXSetWindowAttributes):TWindow;cdecl;external;

function XListInstalledColormaps(_para1:PTDisplay; _para2:TWindow; _para3:Plongint):^TColormap;cdecl;external;
//// (* error 
////     _Xconst char*	/* pattern */,
//// (* error 
////     int			/* maxnames */,
//// (* error 
////     int*		/* actual_count_return */

 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     _Xconst char*	/* pattern */,
//// (* error 
////     int			/* maxnames */,
//// (* error 
////     int*		/* count_return */,
//// (* error 
////     XFontStruct**	/* info_return */

 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)

function XGetFontPath(_para1:PTDisplay; _para2:Plongint):^^char;cdecl;external;

function XListExtensions(_para1:PTDisplay; _para2:Plongint):^^char;cdecl;external;

function XListProperties(_para1:PTDisplay; _para2:TWindow; _para3:Plongint):^TAtom;cdecl;external;

function XListHosts(_para1:PTDisplay; _para2:Plongint; _para3:PTBool):^TXHostAddress;cdecl;external;
//// (* error 
//// extern KeySym XKeycodeToKeysym(
//// {$if NeedWidePrototypes}
//// {$else}
//// {$endif}

in declaration at line 1695 *)


function XLookupKeysym(_para1:PTXKeyEvent; _para2:longint):TKeySym;cdecl;external;
//// {$if NeedWidePrototypes}
//// {$else}
//// {$endif}


function XGetKeyboardMapping(_para1:PTDisplay; _para2:dword; _para3:TKeyCode; _para4:longint; _para5:Plongint):^TKeySym;cdecl;external;
//// (* error 
////     _Xconst char*	/* string */

 in declarator_list *)

function XMaxRequestSize(_para1:PTDisplay):longint;cdecl;external;

function XExtendedMaxRequestSize(_para1:PTDisplay):longint;cdecl;external;

function XResourceManagerString(_para1:PTDisplay):^char;cdecl;external;

function XScreenResourceString(_para1:PTScreen):^char;cdecl;external;

function XDisplayMotionBufferSize(_para1:PTDisplay):dword;cdecl;external;

function XVisualIDFromVisual(_para1:PTVisual):TVisualID;cdecl;external;

function XInitThreads:TStatus;cdecl;external;

procedure XLockDisplay(_para1:PTDisplay);cdecl;external;

procedure XUnlockDisplay(_para1:PTDisplay);cdecl;external;

//// (* error 
////     _Xconst char*	/* name */

 in declarator_list *)

function XAddExtension(_para1:PTDisplay):^TXExtCodes;cdecl;external;

function XFindOnExtensionList(_para1:PPTXExtData; _para2:longint):^TXExtData;cdecl;external;

function XEHeadOfExtensionList(_para1:TXEDataObject):^^TXExtData;cdecl;external;


function XRootWindow(_para1:PTDisplay; _para2:longint):TWindow;cdecl;external;

function XDefaultRootWindow(_para1:PTDisplay):TWindow;cdecl;external;

function XRootWindowOfScreen(_para1:PTScreen):TWindow;cdecl;external;

function XDefaultVisual(_para1:PTDisplay; _para2:longint):^TVisual;cdecl;external;

function XDefaultVisualOfScreen(_para1:PTScreen):^TVisual;cdecl;external;

function XDefaultGC(_para1:PTDisplay; _para2:longint):TGC;cdecl;external;

function XDefaultGCOfScreen(_para1:PTScreen):TGC;cdecl;external;

function XBlackPixel(_para1:PTDisplay; _para2:longint):dword;cdecl;external;

function XWhitePixel(_para1:PTDisplay; _para2:longint):dword;cdecl;external;
function XAllPlanes:dword;cdecl;external;

function XBlackPixelOfScreen(_para1:PTScreen):dword;cdecl;external;

function XWhitePixelOfScreen(_para1:PTScreen):dword;cdecl;external;

function XNextRequest(_para1:PTDisplay):dword;cdecl;external;

function XLastKnownRequestProcessed(_para1:PTDisplay):dword;cdecl;external;

function XServerVendor(_para1:PTDisplay):^char;cdecl;external;

function XDisplayString(_para1:PTDisplay):^char;cdecl;external;

function XDefaultColormap(_para1:PTDisplay; _para2:longint):TColormap;cdecl;external;

function XDefaultColormapOfScreen(_para1:PTScreen):TColormap;cdecl;external;

function XDisplayOfScreen(_para1:PTScreen):^TDisplay;cdecl;external;

function XScreenOfDisplay(_para1:PTDisplay; _para2:longint):^TScreen;cdecl;external;

function XDefaultScreenOfDisplay(_para1:PTDisplay):^TScreen;cdecl;external;

function XEventMaskOfScreen(_para1:PTScreen):longint;cdecl;external;

function XScreenNumberOfScreen(_para1:PTScreen):longint;cdecl;external;


    type

      TXErrorHandler = function (_para1:PTDisplay; _para2:PTXErrorEvent):longint;cdecl;


function XSetErrorHandler(_para1:TXErrorHandler):TXErrorHandler;cdecl;external;


    type

      TXIOErrorHandler = function (_para1:PTDisplay):longint;cdecl;


function XSetIOErrorHandler(_para1:TXIOErrorHandler):TXIOErrorHandler;cdecl;external;



    type

      TXIOErrorExitHandler = procedure (_para1:PTDisplay; _para2:pointer);cdecl;




procedure XSetIOErrorExitHandler(_para1:PTDisplay; _para2:TXIOErrorExitHandler; _para3:pointer);cdecl;external;

function XListPixmapFormats(_para1:PTDisplay; _para2:Plongint):^TXPixmapFormatValues;cdecl;external;

function XListDepths(_para1:PTDisplay; _para2:longint; _para3:Plongint):^longint;cdecl;external;



function XReconfigureWMWindow(_para1:PTDisplay; _para2:TWindow; _para3:longint; _para4:dword; _para5:PTXWindowChanges):TStatus;cdecl;external;

function XGetWMProtocols(_para1:PTDisplay; _para2:TWindow; _para3:PPTAtom; _para4:Plongint):TStatus;cdecl;external;

function XSetWMProtocols(_para1:PTDisplay; _para2:TWindow; _para3:PTAtom; _para4:longint):TStatus;cdecl;external;

function XIconifyWindow(_para1:PTDisplay; _para2:TWindow; _para3:longint):TStatus;cdecl;external;

function XWithdrawWindow(_para1:PTDisplay; _para2:TWindow; _para3:longint):TStatus;cdecl;external;

function XGetCommand(_para1:PTDisplay; _para2:TWindow; _para3:PPPchar; _para4:Plongint):TStatus;cdecl;external;

function XGetWMColormapWindows(_para1:PTDisplay; _para2:TWindow; _para3:PPTWindow; _para4:Plongint):TStatus;cdecl;external;

function XSetWMColormapWindows(_para1:PTDisplay; _para2:TWindow; _para3:PTWindow; _para4:longint):TStatus;cdecl;external;

procedure XFreeStringList(_para1:PPchar);cdecl;external;

function XSetTransientForHint(_para1:PTDisplay; _para2:TWindow; _para3:TWindow):longint;cdecl;external;


function XActivateScreenSaver(_para1:PTDisplay):longint;cdecl;external;

function XAddHost(_para1:PTDisplay; _para2:PTXHostAddress):longint;cdecl;external;

function XAddHosts(_para1:PTDisplay; _para2:PTXHostAddress; _para3:longint):longint;cdecl;external;

function XAddToExtensionList(_para1:PPT_XExtData; _para2:PTXExtData):longint;cdecl;external;

function XAddToSaveSet(_para1:PTDisplay; _para2:TWindow):longint;cdecl;external;

function XAllocColor(_para1:PTDisplay; _para2:TColormap; _para3:PTXColor):TStatus;cdecl;external;

function XAllocColorCells(_para1:PTDisplay; _para2:TColormap; _para3:TBool; _para4:Pdword; _para5:dword; 
               _para6:Pdword; _para7:dword):TStatus;cdecl;external;

function XAllocColorPlanes(_para1:PTDisplay; _para2:TColormap; _para3:TBool; _para4:Pdword; _para5:longint; 
               _para6:longint; _para7:longint; _para8:longint; _para9:Pdword; _para10:Pdword; 
               _para11:Pdword):TStatus;cdecl;external;
//// (* error 
////     _Xconst char*	/* color_name */,
//// (* error 
////     XColor*		/* screen_def_return */,
//// (* error 
////     XColor*		/* exact_def_return */

 in declarator_list *)
 in declarator_list *)
 in declarator_list *)

function XAllowEvents(_para1:PTDisplay; _para2:longint; _para3:TTime):longint;cdecl;external;

function XAutoRepeatOff(_para1:PTDisplay):longint;cdecl;external;

function XAutoRepeatOn(_para1:PTDisplay):longint;cdecl;external;

function XBell(_para1:PTDisplay; _para2:longint):longint;cdecl;external;

function XBitmapBitOrder(_para1:PTDisplay):longint;cdecl;external;

function XBitmapPad(_para1:PTDisplay):longint;cdecl;external;

function XBitmapUnit(_para1:PTDisplay):longint;cdecl;external;

function XCellsOfScreen(_para1:PTScreen):longint;cdecl;external;

function XChangeActivePointerGrab(_para1:PTDisplay; _para2:dword; _para3:TCursor; _para4:TTime):longint;cdecl;external;

function XChangeGC(_para1:PTDisplay; _para2:TGC; _para3:dword; _para4:PTXGCValues):longint;cdecl;external;

function XChangeKeyboardControl(_para1:PTDisplay; _para2:dword; _para3:PTXKeyboardControl):longint;cdecl;external;

function XChangeKeyboardMapping(_para1:PTDisplay; _para2:longint; _para3:longint; _para4:PTKeySym; _para5:longint):longint;cdecl;external;

function XChangePointerControl(_para1:PTDisplay; _para2:TBool; _para3:TBool; _para4:longint; _para5:longint; 
               _para6:longint):longint;cdecl;external;
//// (* error 
////     _Xconst unsigned char*	/* data */,
//// (* error 
////     int			/* nelements */

 in declarator_list *)
 in declarator_list *)

function XChangeSaveSet(_para1:PTDisplay; _para2:TWindow; _para3:longint):longint;cdecl;external;

function XChangeWindowAttributes(_para1:PTDisplay; _para2:TWindow; _para3:dword; _para4:PTXSetWindowAttributes):longint;cdecl;external;


function XCheckIfEvent(_para1:PTDisplay; _para2:PTXEvent; _para3:function (_para1:PTDisplay; _para2:PTXEvent; _para3:TXPointer):TBool; _para4:TXPointer):TBool;cdecl;external;

function XCheckMaskEvent(_para1:PTDisplay; _para2:longint; _para3:PTXEvent):TBool;cdecl;external;

function XCheckTypedEvent(_para1:PTDisplay; _para2:longint; _para3:PTXEvent):TBool;cdecl;external;

function XCheckTypedWindowEvent(_para1:PTDisplay; _para2:TWindow; _para3:longint; _para4:PTXEvent):TBool;cdecl;external;

function XCheckWindowEvent(_para1:PTDisplay; _para2:TWindow; _para3:longint; _para4:PTXEvent):TBool;cdecl;external;

function XCirculateSubwindows(_para1:PTDisplay; _para2:TWindow; _para3:longint):longint;cdecl;external;

function XCirculateSubwindowsDown(_para1:PTDisplay; _para2:TWindow):longint;cdecl;external;

function XCirculateSubwindowsUp(_para1:PTDisplay; _para2:TWindow):longint;cdecl;external;

function XClearArea(_para1:PTDisplay; _para2:TWindow; _para3:longint; _para4:longint; _para5:dword; 
               _para6:dword; _para7:TBool):longint;cdecl;external;

function XClearWindow(_para1:PTDisplay; _para2:TWindow):longint;cdecl;external;

function XCloseDisplay(_para1:PTDisplay):longint;cdecl;external;

function XConfigureWindow(_para1:PTDisplay; _para2:TWindow; _para3:dword; _para4:PTXWindowChanges):longint;cdecl;external;

function XConnectionNumber(_para1:PTDisplay):longint;cdecl;external;

function XConvertSelection(_para1:PTDisplay; _para2:TAtom; _para3:TAtom; _para4:TAtom; _para5:TWindow; 
               _para6:TTime):longint;cdecl;external;

function XCopyArea(_para1:PTDisplay; _para2:TDrawable; _para3:TDrawable; _para4:TGC; _para5:longint; 
               _para6:longint; _para7:dword; _para8:dword; _para9:longint; _para10:longint):longint;cdecl;external;

function XCopyGC(_para1:PTDisplay; _para2:TGC; _para3:dword; _para4:TGC):longint;cdecl;external;

function XCopyPlane(_para1:PTDisplay; _para2:TDrawable; _para3:TDrawable; _para4:TGC; _para5:longint; 
               _para6:longint; _para7:dword; _para8:dword; _para9:longint; _para10:longint; 
               _para11:dword):longint;cdecl;external;

function XDefaultDepth(_para1:PTDisplay; _para2:longint):longint;cdecl;external;

function XDefaultDepthOfScreen(_para1:PTScreen):longint;cdecl;external;

function XDefaultScreen(_para1:PTDisplay):longint;cdecl;external;

function XDefineCursor(_para1:PTDisplay; _para2:TWindow; _para3:TCursor):longint;cdecl;external;

function XDeleteProperty(_para1:PTDisplay; _para2:TWindow; _para3:TAtom):longint;cdecl;external;

function XDestroyWindow(_para1:PTDisplay; _para2:TWindow):longint;cdecl;external;

function XDestroySubwindows(_para1:PTDisplay; _para2:TWindow):longint;cdecl;external;

function XDoesBackingStore(_para1:PTScreen):longint;cdecl;external;

function XDoesSaveUnders(_para1:PTScreen):TBool;cdecl;external;

function XDisableAccessControl(_para1:PTDisplay):longint;cdecl;external;

function XDisplayCells(_para1:PTDisplay; _para2:longint):longint;cdecl;external;

function XDisplayHeight(_para1:PTDisplay; _para2:longint):longint;cdecl;external;

function XDisplayHeightMM(_para1:PTDisplay; _para2:longint):longint;cdecl;external;

function XDisplayKeycodes(_para1:PTDisplay; _para2:Plongint; _para3:Plongint):longint;cdecl;external;

function XDisplayPlanes(_para1:PTDisplay; _para2:longint):longint;cdecl;external;

function XDisplayWidth(_para1:PTDisplay; _para2:longint):longint;cdecl;external;

function XDisplayWidthMM(_para1:PTDisplay; _para2:longint):longint;cdecl;external;

function XDrawArc(_para1:PTDisplay; _para2:TDrawable; _para3:TGC; _para4:longint; _para5:longint; 
               _para6:dword; _para7:dword; _para8:longint; _para9:longint):longint;cdecl;external;

function XDrawArcs(_para1:PTDisplay; _para2:TDrawable; _para3:TGC; _para4:PTXArc; _para5:longint):longint;cdecl;external;
//// (* error 
////     _Xconst char*	/* string */,
//// (* error 
////     int			/* length */

 in declarator_list *)
 in declarator_list *)
//// (* error 
////     _Xconst XChar2b*	/* string */,
//// (* error 
////     int			/* length */

 in declarator_list *)
 in declarator_list *)

function XDrawLine(_para1:PTDisplay; _para2:TDrawable; _para3:TGC; _para4:longint; _para5:longint; 
               _para6:longint; _para7:longint):longint;cdecl;external;

function XDrawLines(_para1:PTDisplay; _para2:TDrawable; _para3:TGC; _para4:PTXPoint; _para5:longint; 
               _para6:longint):longint;cdecl;external;

function XDrawPoint(_para1:PTDisplay; _para2:TDrawable; _para3:TGC; _para4:longint; _para5:longint):longint;cdecl;external;

function XDrawPoints(_para1:PTDisplay; _para2:TDrawable; _para3:TGC; _para4:PTXPoint; _para5:longint; 
               _para6:longint):longint;cdecl;external;

function XDrawRectangle(_para1:PTDisplay; _para2:TDrawable; _para3:TGC; _para4:longint; _para5:longint; 
               _para6:dword; _para7:dword):longint;cdecl;external;

function XDrawRectangles(_para1:PTDisplay; _para2:TDrawable; _para3:TGC; _para4:PTXRectangle; _para5:longint):longint;cdecl;external;

function XDrawSegments(_para1:PTDisplay; _para2:TDrawable; _para3:TGC; _para4:PTXSegment; _para5:longint):longint;cdecl;external;
//// (* error 
////     _Xconst char*	/* string */,
//// (* error 
////     int			/* length */

 in declarator_list *)
 in declarator_list *)
//// (* error 
////     _Xconst XChar2b*	/* string */,
//// (* error 
////     int			/* length */

 in declarator_list *)
 in declarator_list *)

function XDrawText(_para1:PTDisplay; _para2:TDrawable; _para3:TGC; _para4:longint; _para5:longint; 
               _para6:PTXTextItem; _para7:longint):longint;cdecl;external;

function XDrawText16(_para1:PTDisplay; _para2:TDrawable; _para3:TGC; _para4:longint; _para5:longint; 
               _para6:PTXTextItem16; _para7:longint):longint;cdecl;external;

function XEnableAccessControl(_para1:PTDisplay):longint;cdecl;external;

function XEventsQueued(_para1:PTDisplay; _para2:longint):longint;cdecl;external;

function XFetchName(_para1:PTDisplay; _para2:TWindow; _para3:PPchar):TStatus;cdecl;external;

function XFillArc(_para1:PTDisplay; _para2:TDrawable; _para3:TGC; _para4:longint; _para5:longint; 
               _para6:dword; _para7:dword; _para8:longint; _para9:longint):longint;cdecl;external;

function XFillArcs(_para1:PTDisplay; _para2:TDrawable; _para3:TGC; _para4:PTXArc; _para5:longint):longint;cdecl;external;

function XFillPolygon(_para1:PTDisplay; _para2:TDrawable; _para3:TGC; _para4:PTXPoint; _para5:longint; 
               _para6:longint; _para7:longint):longint;cdecl;external;

function XFillRectangle(_para1:PTDisplay; _para2:TDrawable; _para3:TGC; _para4:longint; _para5:longint; 
               _para6:dword; _para7:dword):longint;cdecl;external;

function XFillRectangles(_para1:PTDisplay; _para2:TDrawable; _para3:TGC; _para4:PTXRectangle; _para5:longint):longint;cdecl;external;

function XFlush(_para1:PTDisplay):longint;cdecl;external;

function XForceScreenSaver(_para1:PTDisplay; _para2:longint):longint;cdecl;external;

function XFree(_para1:pointer):longint;cdecl;external;

function XFreeColormap(_para1:PTDisplay; _para2:TColormap):longint;cdecl;external;

function XFreeColors(_para1:PTDisplay; _para2:TColormap; _para3:Pdword; _para4:longint; _para5:dword):longint;cdecl;external;

function XFreeCursor(_para1:PTDisplay; _para2:TCursor):longint;cdecl;external;

function XFreeExtensionList(_para1:PPchar):longint;cdecl;external;

function XFreeFont(_para1:PTDisplay; _para2:PTXFontStruct):longint;cdecl;external;

function XFreeFontInfo(_para1:PPchar; _para2:PTXFontStruct; _para3:longint):longint;cdecl;external;

function XFreeFontNames(_para1:PPchar):longint;cdecl;external;

function XFreeFontPath(_para1:PPchar):longint;cdecl;external;

function XFreeGC(_para1:PTDisplay; _para2:TGC):longint;cdecl;external;

function XFreeModifiermap(_para1:PTXModifierKeymap):longint;cdecl;external;

function XFreePixmap(_para1:PTDisplay; _para2:TPixmap):longint;cdecl;external;
//// (* error 
////     _Xconst char*	/* position */,
//// (* error 
////     _Xconst char*	/* default_position */,
//// (* error 
////     unsigned int	/* bwidth */,
//// (* error 
////     unsigned int	/* fwidth */,
//// (* error 
////     unsigned int	/* fheight */,
//// (* error 
////     int			/* xadder */,
//// (* error 
////     int			/* yadder */,
//// (* error 
////     int*		/* x_return */,
//// (* error 
////     int*		/* y_return */,
//// (* error 
////     int*		/* width_return */,
//// (* error 
////     int*		/* height_return */

 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     _Xconst char*	/* name */,
//// (* error 
////     _Xconst char*	/* message */,
//// (* error 
////     _Xconst char*	/* default_string */,
//// (* error 
////     char*		/* buffer_return */,
//// (* error 
////     int			/* length */

 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)

function XGetErrorText(_para1:PTDisplay; _para2:longint; _para3:Pchar; _para4:longint):longint;cdecl;external;

function XGetFontProperty(_para1:PTXFontStruct; _para2:TAtom; _para3:Pdword):TBool;cdecl;external;

function XGetGCValues(_para1:PTDisplay; _para2:TGC; _para3:dword; _para4:PTXGCValues):TStatus;cdecl;external;

function XGetGeometry(_para1:PTDisplay; _para2:TDrawable; _para3:PTWindow; _para4:Plongint; _para5:Plongint; 
               _para6:Pdword; _para7:Pdword; _para8:Pdword; _para9:Pdword):TStatus;cdecl;external;

function XGetIconName(_para1:PTDisplay; _para2:TWindow; _para3:PPchar):TStatus;cdecl;external;

function XGetInputFocus(_para1:PTDisplay; _para2:PTWindow; _para3:Plongint):longint;cdecl;external;

function XGetKeyboardControl(_para1:PTDisplay; _para2:PTXKeyboardState):longint;cdecl;external;

function XGetPointerControl(_para1:PTDisplay; _para2:Plongint; _para3:Plongint; _para4:Plongint):longint;cdecl;external;

function XGetPointerMapping(_para1:PTDisplay; _para2:Pbyte; _para3:longint):longint;cdecl;external;

function XGetScreenSaver(_para1:PTDisplay; _para2:Plongint; _para3:Plongint; _para4:Plongint; _para5:Plongint):longint;cdecl;external;

function XGetTransientForHint(_para1:PTDisplay; _para2:TWindow; _para3:PTWindow):TStatus;cdecl;external;

function XGetWindowProperty(_para1:PTDisplay; _para2:TWindow; _para3:TAtom; _para4:longint; _para5:longint; 
               _para6:TBool; _para7:TAtom; _para8:PTAtom; _para9:Plongint; _para10:Pdword; 
               _para11:Pdword; _para12:PPbyte):longint;cdecl;external;

function XGetWindowAttributes(_para1:PTDisplay; _para2:TWindow; _para3:PTXWindowAttributes):TStatus;cdecl;external;

function XGrabButton(_para1:PTDisplay; _para2:dword; _para3:dword; _para4:TWindow; _para5:TBool; 
               _para6:dword; _para7:longint; _para8:longint; _para9:TWindow; _para10:TCursor):longint;cdecl;external;

function XGrabKey(_para1:PTDisplay; _para2:longint; _para3:dword; _para4:TWindow; _para5:TBool; 
               _para6:longint; _para7:longint):longint;cdecl;external;

function XGrabKeyboard(_para1:PTDisplay; _para2:TWindow; _para3:TBool; _para4:longint; _para5:longint; 
               _para6:TTime):longint;cdecl;external;

function XGrabPointer(_para1:PTDisplay; _para2:TWindow; _para3:TBool; _para4:dword; _para5:longint; 
               _para6:longint; _para7:TWindow; _para8:TCursor; _para9:TTime):longint;cdecl;external;

function XGrabServer(_para1:PTDisplay):longint;cdecl;external;

function XHeightMMOfScreen(_para1:PTScreen):longint;cdecl;external;

function XHeightOfScreen(_para1:PTScreen):longint;cdecl;external;


function XIfEvent(_para1:PTDisplay; _para2:PTXEvent; _para3:function (_para1:PTDisplay; _para2:PTXEvent; _para3:TXPointer):TBool; _para4:TXPointer):longint;cdecl;external;

function XImageByteOrder(_para1:PTDisplay):longint;cdecl;external;

function XInstallColormap(_para1:PTDisplay; _para2:TColormap):longint;cdecl;external;

function XKeysymToKeycode(_para1:PTDisplay; _para2:TKeySym):TKeyCode;cdecl;external;

function XKillClient(_para1:PTDisplay; _para2:TXID):longint;cdecl;external;
//// (* error 
////     _Xconst char*	/* color_name */,
//// (* error 
////     XColor*		/* exact_def_return */,
//// (* error 
////     XColor*		/* screen_def_return */

 in declarator_list *)
 in declarator_list *)
 in declarator_list *)

function XLowerWindow(_para1:PTDisplay; _para2:TWindow):longint;cdecl;external;

function XMapRaised(_para1:PTDisplay; _para2:TWindow):longint;cdecl;external;

function XMapSubwindows(_para1:PTDisplay; _para2:TWindow):longint;cdecl;external;

function XMapWindow(_para1:PTDisplay; _para2:TWindow):longint;cdecl;external;

function XMaskEvent(_para1:PTDisplay; _para2:longint; _para3:PTXEvent):longint;cdecl;external;

function XMaxCmapsOfScreen(_para1:PTScreen):longint;cdecl;external;

function XMinCmapsOfScreen(_para1:PTScreen):longint;cdecl;external;

function XMoveResizeWindow(_para1:PTDisplay; _para2:TWindow; _para3:longint; _para4:longint; _para5:dword; 
               _para6:dword):longint;cdecl;external;

function XMoveWindow(_para1:PTDisplay; _para2:TWindow; _para3:longint; _para4:longint):longint;cdecl;external;

function XNextEvent(_para1:PTDisplay; _para2:PTXEvent):longint;cdecl;external;

function XNoOp(_para1:PTDisplay):longint;cdecl;external;
//// (* error 
////     _Xconst char*	/* spec */,
//// (* error 
////     XColor*		/* exact_def_return */

 in declarator_list *)
 in declarator_list *)
//// (* error 
////     _Xconst char*	/* parsestring */,
//// (* error 
////     int*		/* x_return */,
//// (* error 
////     int*		/* y_return */,
//// (* error 
////     unsigned int*	/* width_return */,
//// (* error 
////     unsigned int*	/* height_return */

 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)

function XPeekEvent(_para1:PTDisplay; _para2:PTXEvent):longint;cdecl;external;


function XPeekIfEvent(_para1:PTDisplay; _para2:PTXEvent; _para3:function (_para1:PTDisplay; _para2:PTXEvent; _para3:TXPointer):TBool; _para4:TXPointer):longint;cdecl;external;

function XPending(_para1:PTDisplay):longint;cdecl;external;

function XPlanesOfScreen(_para1:PTScreen):longint;cdecl;external;

function XProtocolRevision(_para1:PTDisplay):longint;cdecl;external;

function XProtocolVersion(_para1:PTDisplay):longint;cdecl;external;

function XPutBackEvent(_para1:PTDisplay; _para2:PTXEvent):longint;cdecl;external;

function XPutImage(_para1:PTDisplay; _para2:TDrawable; _para3:TGC; _para4:PTXImage; _para5:longint; 
               _para6:longint; _para7:longint; _para8:longint; _para9:dword; _para10:dword):longint;cdecl;external;

function XQLength(_para1:PTDisplay):longint;cdecl;external;

function XQueryBestCursor(_para1:PTDisplay; _para2:TDrawable; _para3:dword; _para4:dword; _para5:Pdword; 
               _para6:Pdword):TStatus;cdecl;external;

function XQueryBestSize(_para1:PTDisplay; _para2:longint; _para3:TDrawable; _para4:dword; _para5:dword; 
               _para6:Pdword; _para7:Pdword):TStatus;cdecl;external;

function XQueryBestStipple(_para1:PTDisplay; _para2:TDrawable; _para3:dword; _para4:dword; _para5:Pdword; 
               _para6:Pdword):TStatus;cdecl;external;

function XQueryBestTile(_para1:PTDisplay; _para2:TDrawable; _para3:dword; _para4:dword; _para5:Pdword; 
               _para6:Pdword):TStatus;cdecl;external;

function XQueryColor(_para1:PTDisplay; _para2:TColormap; _para3:PTXColor):longint;cdecl;external;

function XQueryColors(_para1:PTDisplay; _para2:TColormap; _para3:PTXColor; _para4:longint):longint;cdecl;external;
//// (* error 
////     _Xconst char*	/* name */,
//// (* error 
////     int*		/* major_opcode_return */,
//// (* error 
////     int*		/* first_event_return */,
//// (* error 
////     int*		/* first_error_return */

 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)

function XQueryKeymap(_para1:PTDisplay; _para2:array[0..31] of char):longint;cdecl;external;

function XQueryPointer(_para1:PTDisplay; _para2:TWindow; _para3:PTWindow; _para4:PTWindow; _para5:Plongint; 
               _para6:Plongint; _para7:Plongint; _para8:Plongint; _para9:Pdword):TBool;cdecl;external;
//// (* error 
////     _Xconst char*	/* string */,
//// (* error 
////     int			/* nchars */,
//// (* error 
////     int*		/* direction_return */,
//// (* error 
////     int*		/* font_ascent_return */,
//// (* error 
////     int*		/* font_descent_return */,
//// (* error 
////     XCharStruct*	/* overall_return */

 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     _Xconst XChar2b*	/* string */,
//// (* error 
////     int			/* nchars */,
//// (* error 
////     int*		/* direction_return */,
//// (* error 
////     int*		/* font_ascent_return */,
//// (* error 
////     int*		/* font_descent_return */,
//// (* error 
////     XCharStruct*	/* overall_return */

 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)

function XQueryTree(_para1:PTDisplay; _para2:TWindow; _para3:PTWindow; _para4:PTWindow; _para5:PPTWindow; 
               _para6:Pdword):TStatus;cdecl;external;

function XRaiseWindow(_para1:PTDisplay; _para2:TWindow):longint;cdecl;external;
//// (* error 
////     _Xconst char*	/* filename */,
//// (* error 
////     unsigned int*	/* width_return */,
//// (* error 
////     unsigned int*	/* height_return */,
//// (* error 
////     Pixmap*		/* bitmap_return */,
//// (* error 
////     int*		/* x_hot_return */,
//// (* error 
////     int*		/* y_hot_return */

 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     _Xconst char*	/* filename */,
//// (* error 
////     unsigned int*	/* width_return */,
//// (* error 
////     unsigned int*	/* height_return */,
//// (* error 
////     unsigned char**	/* data_return */,
//// (* error 
////     int*		/* x_hot_return */,
//// (* error 
////     int*		/* y_hot_return */

 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     _Xconst unsigned char*	/* string */,
//// (* error 
////     int			/* bytes_string */

 in declarator_list *)
 in declarator_list *)

function XRecolorCursor(_para1:PTDisplay; _para2:TCursor; _para3:PTXColor; _para4:PTXColor):longint;cdecl;external;

function XRefreshKeyboardMapping(_para1:PTXMappingEvent):longint;cdecl;external;

function XRemoveFromSaveSet(_para1:PTDisplay; _para2:TWindow):longint;cdecl;external;

function XRemoveHost(_para1:PTDisplay; _para2:PTXHostAddress):longint;cdecl;external;

function XRemoveHosts(_para1:PTDisplay; _para2:PTXHostAddress; _para3:longint):longint;cdecl;external;

function XReparentWindow(_para1:PTDisplay; _para2:TWindow; _para3:TWindow; _para4:longint; _para5:longint):longint;cdecl;external;

function XResetScreenSaver(_para1:PTDisplay):longint;cdecl;external;

function XResizeWindow(_para1:PTDisplay; _para2:TWindow; _para3:dword; _para4:dword):longint;cdecl;external;

function XRestackWindows(_para1:PTDisplay; _para2:PTWindow; _para3:longint):longint;cdecl;external;

function XRotateBuffers(_para1:PTDisplay; _para2:longint):longint;cdecl;external;

function XRotateWindowProperties(_para1:PTDisplay; _para2:TWindow; _para3:PTAtom; _para4:longint; _para5:longint):longint;cdecl;external;

function XScreenCount(_para1:PTDisplay):longint;cdecl;external;

function XSelectInput(_para1:PTDisplay; _para2:TWindow; _para3:longint):longint;cdecl;external;

function XSendEvent(_para1:PTDisplay; _para2:TWindow; _para3:TBool; _para4:longint; _para5:PTXEvent):TStatus;cdecl;external;

function XSetAccessControl(_para1:PTDisplay; _para2:longint):longint;cdecl;external;

function XSetArcMode(_para1:PTDisplay; _para2:TGC; _para3:longint):longint;cdecl;external;

function XSetBackground(_para1:PTDisplay; _para2:TGC; _para3:dword):longint;cdecl;external;

function XSetClipMask(_para1:PTDisplay; _para2:TGC; _para3:TPixmap):longint;cdecl;external;

function XSetClipOrigin(_para1:PTDisplay; _para2:TGC; _para3:longint; _para4:longint):longint;cdecl;external;

function XSetClipRectangles(_para1:PTDisplay; _para2:TGC; _para3:longint; _para4:longint; _para5:PTXRectangle; 
               _para6:longint; _para7:longint):longint;cdecl;external;

function XSetCloseDownMode(_para1:PTDisplay; _para2:longint):longint;cdecl;external;

function XSetCommand(_para1:PTDisplay; _para2:TWindow; _para3:PPchar; _para4:longint):longint;cdecl;external;
//// (* error 
////     _Xconst char*	/* dash_list */,
//// (* error 
////     int			/* n */

 in declarator_list *)
 in declarator_list *)

function XSetFillRule(_para1:PTDisplay; _para2:TGC; _para3:longint):longint;cdecl;external;

function XSetFillStyle(_para1:PTDisplay; _para2:TGC; _para3:longint):longint;cdecl;external;

function XSetFont(_para1:PTDisplay; _para2:TGC; _para3:TFont):longint;cdecl;external;

function XSetFontPath(_para1:PTDisplay; _para2:PPchar; _para3:longint):longint;cdecl;external;

function XSetForeground(_para1:PTDisplay; _para2:TGC; _para3:dword):longint;cdecl;external;

function XSetFunction(_para1:PTDisplay; _para2:TGC; _para3:longint):longint;cdecl;external;

function XSetGraphicsExposures(_para1:PTDisplay; _para2:TGC; _para3:TBool):longint;cdecl;external;
//// (* error 
////     _Xconst char*	/* icon_name */

 in declarator_list *)

function XSetInputFocus(_para1:PTDisplay; _para2:TWindow; _para3:longint; _para4:TTime):longint;cdecl;external;

function XSetLineAttributes(_para1:PTDisplay; _para2:TGC; _para3:dword; _para4:longint; _para5:longint; 
               _para6:longint):longint;cdecl;external;

function XSetModifierMapping(_para1:PTDisplay; _para2:PTXModifierKeymap):longint;cdecl;external;

function XSetPlaneMask(_para1:PTDisplay; _para2:TGC; _para3:dword):longint;cdecl;external;
//// (* error 
////     _Xconst unsigned char*	/* map */,
//// (* error 
////     int			/* nmap */

 in declarator_list *)
 in declarator_list *)

function XSetScreenSaver(_para1:PTDisplay; _para2:longint; _para3:longint; _para4:longint; _para5:longint):longint;cdecl;external;

function XSetSelectionOwner(_para1:PTDisplay; _para2:TAtom; _para3:TWindow; _para4:TTime):longint;cdecl;external;

function XSetState(_para1:PTDisplay; _para2:TGC; _para3:dword; _para4:dword; _para5:longint; 
               _para6:dword):longint;cdecl;external;

function XSetStipple(_para1:PTDisplay; _para2:TGC; _para3:TPixmap):longint;cdecl;external;

function XSetSubwindowMode(_para1:PTDisplay; _para2:TGC; _para3:longint):longint;cdecl;external;

function XSetTSOrigin(_para1:PTDisplay; _para2:TGC; _para3:longint; _para4:longint):longint;cdecl;external;

function XSetTile(_para1:PTDisplay; _para2:TGC; _para3:TPixmap):longint;cdecl;external;

function XSetWindowBackground(_para1:PTDisplay; _para2:TWindow; _para3:dword):longint;cdecl;external;

function XSetWindowBackgroundPixmap(_para1:PTDisplay; _para2:TWindow; _para3:TPixmap):longint;cdecl;external;

function XSetWindowBorder(_para1:PTDisplay; _para2:TWindow; _para3:dword):longint;cdecl;external;

function XSetWindowBorderPixmap(_para1:PTDisplay; _para2:TWindow; _para3:TPixmap):longint;cdecl;external;

function XSetWindowBorderWidth(_para1:PTDisplay; _para2:TWindow; _para3:dword):longint;cdecl;external;

function XSetWindowColormap(_para1:PTDisplay; _para2:TWindow; _para3:TColormap):longint;cdecl;external;
//// (* error 
////     _Xconst char*	/* bytes */,
//// (* error 
////     int			/* nbytes */,
//// (* error 
////     int			/* buffer */

 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     _Xconst char*	/* bytes */,
//// (* error 
////     int			/* nbytes */

 in declarator_list *)
 in declarator_list *)

function XStoreColor(_para1:PTDisplay; _para2:TColormap; _para3:PTXColor):longint;cdecl;external;

function XStoreColors(_para1:PTDisplay; _para2:TColormap; _para3:PTXColor; _para4:longint):longint;cdecl;external;
//// (* error 
////     _Xconst char*	/* window_name */

 in declarator_list *)
//// (* error 
////     _Xconst char*	/* color */,
//// (* error 
////     unsigned long	/* pixel */,
//// (* error 
////     int			/* flags */

 in declarator_list *)
 in declarator_list *)
 in declarator_list *)

function XSync(_para1:PTDisplay; _para2:TBool):longint;cdecl;external;
//// (* error 
////     _Xconst char*	/* string */,
//// (* error 
////     int			/* nchars */,
//// (* error 
////     int*		/* direction_return */,
//// (* error 
////     int*		/* font_ascent_return */,
//// (* error 
////     int*		/* font_descent_return */,
//// (* error 
////     XCharStruct*	/* overall_return */

 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     _Xconst XChar2b*	/* string */,
//// (* error 
////     int			/* nchars */,
//// (* error 
////     int*		/* direction_return */,
//// (* error 
////     int*		/* font_ascent_return */,
//// (* error 
////     int*		/* font_descent_return */,
//// (* error 
////     XCharStruct*	/* overall_return */

 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     _Xconst char*	/* string */,
//// (* error 
////     int			/* count */

 in declarator_list *)
 in declarator_list *)
//// (* error 
////     _Xconst XChar2b*	/* string */,
//// (* error 
////     int			/* count */

 in declarator_list *)
 in declarator_list *)

function XTranslateCoordinates(_para1:PTDisplay; _para2:TWindow; _para3:TWindow; _para4:longint; _para5:longint; 
               _para6:Plongint; _para7:Plongint; _para8:PTWindow):TBool;cdecl;external;

function XUndefineCursor(_para1:PTDisplay; _para2:TWindow):longint;cdecl;external;

function XUngrabButton(_para1:PTDisplay; _para2:dword; _para3:dword; _para4:TWindow):longint;cdecl;external;

function XUngrabKey(_para1:PTDisplay; _para2:longint; _para3:dword; _para4:TWindow):longint;cdecl;external;

function XUngrabKeyboard(_para1:PTDisplay; _para2:TTime):longint;cdecl;external;

function XUngrabPointer(_para1:PTDisplay; _para2:TTime):longint;cdecl;external;

function XUngrabServer(_para1:PTDisplay):longint;cdecl;external;

function XUninstallColormap(_para1:PTDisplay; _para2:TColormap):longint;cdecl;external;

function XUnloadFont(_para1:PTDisplay; _para2:TFont):longint;cdecl;external;

function XUnmapSubwindows(_para1:PTDisplay; _para2:TWindow):longint;cdecl;external;

function XUnmapWindow(_para1:PTDisplay; _para2:TWindow):longint;cdecl;external;

function XVendorRelease(_para1:PTDisplay):longint;cdecl;external;

function XWarpPointer(_para1:PTDisplay; _para2:TWindow; _para3:TWindow; _para4:longint; _para5:longint; 
               _para6:dword; _para7:dword; _para8:longint; _para9:longint):longint;cdecl;external;

function XWidthMMOfScreen(_para1:PTScreen):longint;cdecl;external;

function XWidthOfScreen(_para1:PTScreen):longint;cdecl;external;

function XWindowEvent(_para1:PTDisplay; _para2:TWindow; _para3:longint; _para4:PTXEvent):longint;cdecl;external;
//// (* error 
////     _Xconst char*	/* filename */,
 in declarator_list *)
//// (* error 
////     unsigned int	/* width */,
//// (* error 
////     unsigned int	/* height */,
//// (* error 
////     int			/* x_hot */,
//// (* error 
////     int			/* y_hot */

 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
function XSupportsLocale:TBool;cdecl;external;

function XSetLocaleModifiers(_para1:Pchar):^char;cdecl;external;
//// (* error 
////     _Xconst char*		/* res_name */,
//// (* error 
////     _Xconst char*		/* res_class */

 in declarator_list *)
 in declarator_list *)

function XCloseOM(_para1:TXOM):TStatus;cdecl;external;
//// (* error 
//// ) _X_SENTINEL(0);
 in declarator_list *)
      var
 : char;
//// (* error 
//// ) _X_SENTINEL(0);
 in declarator_list *)
 : char;


function XDisplayOfOM(_para1:TXOM):^TDisplay;cdecl;external;

function XLocaleOfOM(_para1:TXOM):^char;cdecl;external;
//// (* error 
//// ) _X_SENTINEL(0);
 in declarator_list *)
      var
 : TXOC;


procedure XDestroyOC(_para1:TXOC);cdecl;external;

function XOMOfOC(_para1:TXOC):TXOM;cdecl;external;
//// (* error 
//// ) _X_SENTINEL(0);
 in declarator_list *)
      var
 : char;
//// (* error 
//// ) _X_SENTINEL(0);
 in declarator_list *)
 : char;
//// (* error 
////     _Xconst char*	/* base_font_name_list */,
//// (* error 
////     char***		/* missing_charset_list */,
//// (* error 
////     int*		/* missing_charset_count */,
//// (* error 
////     char**		/* def_string */

 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)


procedure XFreeFontSet(_para1:PTDisplay; _para2:TXFontSet);cdecl;external;

function XFontsOfFontSet(_para1:TXFontSet; _para2:PPPTXFontStruct; _para3:PPPchar):longint;cdecl;external;

function XBaseFontNameListOfFontSet(_para1:TXFontSet):^char;cdecl;external;

function XLocaleOfFontSet(_para1:TXFontSet):^char;cdecl;external;

function XContextDependentDrawing(_para1:TXFontSet):TBool;cdecl;external;

function XDirectionalDependentDrawing(_para1:TXFontSet):TBool;cdecl;external;

function XContextualDrawing(_para1:TXFontSet):TBool;cdecl;external;

function XExtentsOfFontSet(_para1:TXFontSet):^TXFontSetExtents;cdecl;external;
//// (* error 
////     _Xconst char*	/* text */,
//// (* error 
////     int			/* bytes_text */

 in declarator_list *)
 in declarator_list *)
//// (* error 
////     _Xconst wchar_t*	/* text */,
//// (* error 
////     int			/* num_wchars */

 in declarator_list *)
 in declarator_list *)
//// (* error 
////     _Xconst char*	/* text */,
//// (* error 
////     int			/* bytes_text */

 in declarator_list *)
 in declarator_list *)
//// (* error 
////     _Xconst char*	/* text */,
//// (* error 
////     int			/* bytes_text */,
//// (* error 
////     XRectangle*		/* overall_ink_return */,
//// (* error 
////     XRectangle*		/* overall_logical_return */

 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     _Xconst wchar_t*	/* text */,
//// (* error 
////     int			/* num_wchars */,
//// (* error 
////     XRectangle*		/* overall_ink_return */,
//// (* error 
////     XRectangle*		/* overall_logical_return */

 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     _Xconst char*	/* text */,
//// (* error 
////     int			/* bytes_text */,
//// (* error 
////     XRectangle*		/* overall_ink_return */,
//// (* error 
////     XRectangle*		/* overall_logical_return */

 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     _Xconst char*	/* text */,
//// (* error 
////     int			/* bytes_text */,
//// (* error 
////     XRectangle*		/* ink_extents_buffer */,
//// (* error 
////     XRectangle*		/* logical_extents_buffer */,
//// (* error 
////     int			/* buffer_size */,
//// (* error 
////     int*		/* num_chars */,
//// (* error 
////     XRectangle*		/* overall_ink_return */,
//// (* error 
////     XRectangle*		/* overall_logical_return */

 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     _Xconst wchar_t*	/* text */,
//// (* error 
////     int			/* num_wchars */,
//// (* error 
////     XRectangle*		/* ink_extents_buffer */,
//// (* error 
////     XRectangle*		/* logical_extents_buffer */,
//// (* error 
////     int			/* buffer_size */,
//// (* error 
////     int*		/* num_chars */,
//// (* error 
////     XRectangle*		/* overall_ink_return */,
//// (* error 
////     XRectangle*		/* overall_logical_return */

 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     _Xconst char*	/* text */,
//// (* error 
////     int			/* bytes_text */,
//// (* error 
////     XRectangle*		/* ink_extents_buffer */,
//// (* error 
////     XRectangle*		/* logical_extents_buffer */,
//// (* error 
////     int			/* buffer_size */,
//// (* error 
////     int*		/* num_chars */,
//// (* error 
////     XRectangle*		/* overall_ink_return */,
//// (* error 
////     XRectangle*		/* overall_logical_return */

 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)

procedure XmbDrawText(_para1:PTDisplay; _para2:TDrawable; _para3:TGC; _para4:longint; _para5:longint; 
                _para6:PTXmbTextItem; _para7:longint);cdecl;external;

procedure XwcDrawText(_para1:PTDisplay; _para2:TDrawable; _para3:TGC; _para4:longint; _para5:longint; 
                _para6:PTXwcTextItem; _para7:longint);cdecl;external;

procedure Xutf8DrawText(_para1:PTDisplay; _para2:TDrawable; _para3:TGC; _para4:longint; _para5:longint; 
                _para6:PTXmbTextItem; _para7:longint);cdecl;external;
//// (* error 
////     _Xconst char*	/* text */,
//// (* error 
////     int			/* bytes_text */

 in declarator_list *)
 in declarator_list *)
//// (* error 
////     _Xconst wchar_t*	/* text */,
//// (* error 
////     int			/* num_wchars */

 in declarator_list *)
 in declarator_list *)
//// (* error 
////     _Xconst char*	/* text */,
//// (* error 
////     int			/* bytes_text */

 in declarator_list *)
 in declarator_list *)
//// (* error 
////     _Xconst char*	/* text */,
//// (* error 
////     int			/* bytes_text */

 in declarator_list *)
 in declarator_list *)
//// (* error 
////     _Xconst wchar_t*	/* text */,
//// (* error 
////     int			/* num_wchars */

 in declarator_list *)
 in declarator_list *)
//// (* error 
////     _Xconst char*	/* text */,
//// (* error 
////     int			/* bytes_text */

 in declarator_list *)
 in declarator_list *)

function XOpenIM(_para1:PTDisplay; _para2:PT_XrmHashBucketRec; _para3:Pchar; _para4:Pchar):TXIM;cdecl;external;

function XCloseIM(_para1:TXIM):TStatus;cdecl;external;
//// (* error 
//// ) _X_SENTINEL(0);
 in declarator_list *)
      var
 : char;
//// (* error 
//// ) _X_SENTINEL(0);
 in declarator_list *)
 : char;


function XDisplayOfIM(_para1:TXIM):^TDisplay;cdecl;external;

function XLocaleOfIM(_para1:TXIM):^char;cdecl;external;
//// (* error 
//// ) _X_SENTINEL(0);
 in declarator_list *)
      var
 : TXIC;


procedure XDestroyIC(_para1:TXIC);cdecl;external;

procedure XSetICFocus(_para1:TXIC);cdecl;external;

procedure XUnsetICFocus(_para1:TXIC);cdecl;external;

function XwcResetIC(_para1:TXIC):^Twchar_t;cdecl;external;

function XmbResetIC(_para1:TXIC):^char;cdecl;external;

function Xutf8ResetIC(_para1:TXIC):^char;cdecl;external;
//// (* error 
//// ) _X_SENTINEL(0);
 in declarator_list *)
      var
 : char;
//// (* error 
//// ) _X_SENTINEL(0);
 in declarator_list *)
 : char;


function XIMOfIC(_para1:TXIC):TXIM;cdecl;external;

function XFilterEvent(_para1:PTXEvent; _para2:TWindow):TBool;cdecl;external;

function XmbLookupString(_para1:TXIC; _para2:PTXKeyPressedEvent; _para3:Pchar; _para4:longint; _para5:PTKeySym; 
               _para6:PTStatus):longint;cdecl;external;

function XwcLookupString(_para1:TXIC; _para2:PTXKeyPressedEvent; _para3:PTwchar_t; _para4:longint; _para5:PTKeySym; 
               _para6:PTStatus):longint;cdecl;external;

function Xutf8LookupString(_para1:TXIC; _para2:PTXKeyPressedEvent; _para3:Pchar; _para4:longint; _para5:PTKeySym; 
               _para6:PTStatus):longint;cdecl;external;
//// (* error 
//// ) _X_SENTINEL(0);
 in declarator_list *)
      var
 : TXVaNestedList;



function XRegisterIMInstantiateCallback(_para1:PTDisplay; _para2:PT_XrmHashBucketRec; _para3:Pchar; _para4:Pchar; _para5:TXIDProc; 
               _para6:TXPointer):TBool;cdecl;external;

function XUnregisterIMInstantiateCallback(_para1:PTDisplay; _para2:PT_XrmHashBucketRec; _para3:Pchar; _para4:Pchar; _para5:TXIDProc; 
               _para6:TXPointer):TBool;cdecl;external;


    type

      TXConnectionWatchProc = procedure (_para1:PTDisplay; _para2:TXPointer; _para3:longint; _para4:TBool; _para5:PTXPointer);cdecl;


function XInternalConnectionNumbers(_para1:PTDisplay; _para2:PPlongint; _para3:Plongint):TStatus;cdecl;external;

procedure XProcessInternalConnection(_para1:PTDisplay; _para2:longint);cdecl;external;

function XAddConnectionWatch(_para1:PTDisplay; _para2:TXConnectionWatchProc; _para3:TXPointer):TStatus;cdecl;external;

procedure XRemoveConnectionWatch(_para1:PTDisplay; _para2:TXConnectionWatchProc; _para3:TXPointer);cdecl;external;

procedure XSetAuthorization(_para1:Pchar; _para2:longint; _para3:Pchar; _para4:longint);cdecl;external;

function _Xmbtowc(_para1:PTwchar_t; _para2:Pchar; _para3:longint):longint;cdecl;external;

function _Xwctomb(_para1:Pchar; _para2:Twchar_t):longint;cdecl;external;

function XGetEventData(_para1:PTDisplay; _para2:PTXGenericEventCookie):TBool;cdecl;external;

procedure XFreeEventData(_para1:PTDisplay; _para2:PTXGenericEventCookie);cdecl;external;
//// {$ifdef __clang__}
//// {$endif}
//// {$endif}

//// (* error 
//// #endif /* _X11_XLIB_H_ */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/X.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/X.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/X.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef X_H}
//// {$define X_H}



const
  X_PROTOCOL = 11;  

  X_PROTOCOL_REVISION = 0;  


//// {$ifndef _XSERVER64}
//// {$ifndef _XTYPEDEF_XID}
//// {$define _XTYPEDEF_XID}
type
  TXID = dword;
//// {$endif}
//// {$ifndef _XTYPEDEF_MASK}
//// {$define _XTYPEDEF_MASK}
type
  TMask = dword;
//// {$endif}
//// {$ifndef _XTYPEDEF_ATOM}
//// {$define _XTYPEDEF_ATOM}
type
  TAtom = dword;

//// {$endif}
type
  TVisualID = dword;

  TTime = dword;
//// {$else}
//// {$include <X11/Xmd.h>}
//// {$ifndef _XTYPEDEF_XID}
//// {$define _XTYPEDEF_XID}
type
  TXID = TCARD32;
//// {$endif}
//// {$ifndef _XTYPEDEF_MASK}
//// {$define _XTYPEDEF_MASK}
type
  TMask = TCARD32;
//// {$endif}
//// {$ifndef _XTYPEDEF_ATOM}
//// {$define _XTYPEDEF_ATOM}
type
  TAtom = TCARD32;
//// {$endif}
type
  TVisualID = TCARD32;

  TTime = TCARD32;
//// {$endif}
type
  TWindow = TXID;

  TDrawable = TXID;
//// {$ifndef _XTYPEDEF_FONT}
//// {$define _XTYPEDEF_FONT}
type
  TFont = TXID;
//// {$endif}
type
  TPixmap = TXID;

  TCursor = TXID;

  TColormap = TXID;

  TGContext = TXID;

  TKeySym = TXID;

  TKeyCode = byte;

//// {$ifndef None}


const
  None = 0;  
//// {$endif}


const
  ParentRelative = 1;  

  CopyFromParent = 0;  

  PointerWindow = 0;  

  InputFocus = 1;  

  PointerRoot = 1;  

  AnyPropertyType = 0;  

  AnyKey = 0;  

  AnyButton = 0;  

  AllTemporary = 0;  

  CurrentTime = 0;  

  NoSymbol = 0;  


  NoEventMask = 0;  
  KeyPressMask = 1 shl 0;  
  KeyReleaseMask = 1 shl 1;  
  ButtonPressMask = 1 shl 2;  
  ButtonReleaseMask = 1 shl 3;  
  EnterWindowMask = 1 shl 4;  
  LeaveWindowMask = 1 shl 5;  
  PointerMotionMask = 1 shl 6;  
  PointerMotionHintMask = 1 shl 7;  
  Button1MotionMask = 1 shl 8;  
  Button2MotionMask = 1 shl 9;  
  Button3MotionMask = 1 shl 10;  
  Button4MotionMask = 1 shl 11;  
  Button5MotionMask = 1 shl 12;  
  ButtonMotionMask = 1 shl 13;  
  KeymapStateMask = 1 shl 14;  
  ExposureMask = 1 shl 15;  
  VisibilityChangeMask = 1 shl 16;  
  StructureNotifyMask = 1 shl 17;  
  ResizeRedirectMask = 1 shl 18;  
  SubstructureNotifyMask = 1 shl 19;  
  SubstructureRedirectMask = 1 shl 20;  
  FocusChangeMask = 1 shl 21;  
  PropertyChangeMask = 1 shl 22;  
  ColormapChangeMask = 1 shl 23;  
  OwnerGrabButtonMask = 1 shl 24;  

  KeyPress = 2;  
  KeyRelease = 3;  
  ButtonPress = 4;  
  ButtonRelease = 5;  
  MotionNotify = 6;  
  EnterNotify = 7;  
  LeaveNotify = 8;  
  FocusIn = 9;  
  FocusOut = 10;  
  KeymapNotify = 11;  
  Expose = 12;  
  GraphicsExpose = 13;  
  NoExpose = 14;  
  VisibilityNotify = 15;  
  CreateNotify = 16;  
  DestroyNotify = 17;  
  UnmapNotify = 18;  
  MapNotify = 19;  
  MapRequest = 20;  
  ReparentNotify = 21;  
  ConfigureNotify = 22;  
  ConfigureRequest = 23;  
  GravityNotify = 24;  
  ResizeRequest = 25;  
  CirculateNotify = 26;  
  CirculateRequest = 27;  
  PropertyNotify = 28;  
  SelectionClear = 29;  
  SelectionRequest = 30;  
  SelectionNotify = 31;  
  ColormapNotify = 32;  
  ClientMessage = 33;  
  MappingNotify = 34;  
  GenericEvent = 35;  

  LASTEvent = 36;  

  ShiftMask = 1 shl 0;  
  LockMask = 1 shl 1;  
  ControlMask = 1 shl 2;  
  Mod1Mask = 1 shl 3;  
  Mod2Mask = 1 shl 4;  
  Mod3Mask = 1 shl 5;  
  Mod4Mask = 1 shl 6;  
  Mod5Mask = 1 shl 7;  

  ShiftMapIndex = 0;  
  LockMapIndex = 1;  
  ControlMapIndex = 2;  
  Mod1MapIndex = 3;  
  Mod2MapIndex = 4;  
  Mod3MapIndex = 5;  
  Mod4MapIndex = 6;  
  Mod5MapIndex = 7;  

  Button1Mask = 1 shl 8;  
  Button2Mask = 1 shl 9;  
  Button3Mask = 1 shl 10;  
  Button4Mask = 1 shl 11;  
  Button5Mask = 1 shl 12;  

  AnyModifier = 1 shl 15;  

  Button1 = 1;  
  Button2 = 2;  
  Button3 = 3;  
  Button4 = 4;  
  Button5 = 5;  

  NotifyNormal = 0;  
  NotifyGrab = 1;  
  NotifyUngrab = 2;  
  NotifyWhileGrabbed = 3;  

  NotifyHint = 1;  

  NotifyAncestor = 0;  
  NotifyVirtual = 1;  
  NotifyInferior = 2;  
  NotifyNonlinear = 3;  
  NotifyNonlinearVirtual = 4;  
  NotifyPointer = 5;  
  NotifyPointerRoot = 6;  
  NotifyDetailNone = 7;  

  VisibilityUnobscured = 0;  
  VisibilityPartiallyObscured = 1;  
  VisibilityFullyObscured = 2;  

  PlaceOnTop = 0;  
  PlaceOnBottom = 1;  


  FamilyInternet = 0;  
  FamilyDECnet = 1;  
  FamilyChaos = 2;  

  FamilyInternet6 = 6;  

  FamilyServerInterpreted = 5;  

  PropertyNewValue = 0;  
  PropertyDelete = 1;  

  ColormapUninstalled = 0;  
  ColormapInstalled = 1;  

  GrabModeSync = 0;  
  GrabModeAsync = 1;  

  GrabSuccess = 0;  
  AlreadyGrabbed = 1;  
  GrabInvalidTime = 2;  
  GrabNotViewable = 3;  
  GrabFrozen = 4;  

  AsyncPointer = 0;  
  SyncPointer = 1;  
  ReplayPointer = 2;  
  AsyncKeyboard = 3;  
  SyncKeyboard = 4;  
  ReplayKeyboard = 5;  
  AsyncBoth = 6;  
  SyncBoth = 7;  


function RevertToNone : longint;  

function RevertToPointerRoot : longint;  

const
  RevertToParent = 2;  


  Success = 0;  

  BadRequest = 1;  

  BadValue = 2;  

  BadWindow = 3;  

  BadPixmap = 4;  

  BadAtom = 5;  

  BadCursor = 6;  

  BadFont = 7;  

  BadMatch = 8;  

  BadDrawable = 9;  

  BadAccess = 10;  

  BadAlloc = 11;  

  BadColor = 12;  

  BadGC = 13;  

  BadIDChoice = 14;  

  BadName = 15;  

  BadLength = 16;  

  BadImplementation = 17;  
  FirstExtensionError = 128;  
  LastExtensionError = 255;  



  InputOutput = 1;  
  InputOnly = 2;  

  CWBackPixmap = 1 shl 0;  
  CWBackPixel = 1 shl 1;  
  CWBorderPixmap = 1 shl 2;  
  CWBorderPixel = 1 shl 3;  
  CWBitGravity = 1 shl 4;  
  CWWinGravity = 1 shl 5;  
  CWBackingStore = 1 shl 6;  
  CWBackingPlanes = 1 shl 7;  
  CWBackingPixel = 1 shl 8;  
  CWOverrideRedirect = 1 shl 9;  
  CWSaveUnder = 1 shl 10;  
  CWEventMask = 1 shl 11;  
  CWDontPropagate = 1 shl 12;  
  CWColormap = 1 shl 13;  
  CWCursor = 1 shl 14;  

  CWX = 1 shl 0;  
  CWY = 1 shl 1;  
  CWWidth = 1 shl 2;  
  CWHeight = 1 shl 3;  
  CWBorderWidth = 1 shl 4;  
  CWSibling = 1 shl 5;  
  CWStackMode = 1 shl 6;  

  ForgetGravity = 0;  
  NorthWestGravity = 1;  
  NorthGravity = 2;  
  NorthEastGravity = 3;  
  WestGravity = 4;  
  CenterGravity = 5;  
  EastGravity = 6;  
  SouthWestGravity = 7;  
  SouthGravity = 8;  
  SouthEastGravity = 9;  
  StaticGravity = 10;  

  UnmapGravity = 0;  

  NotUseful = 0;  
  WhenMapped = 1;  
  Always = 2;  

  IsUnmapped = 0;  
  IsUnviewable = 1;  
  IsViewable = 2;  

  SetModeInsert = 0;  
  SetModeDelete = 1;  

  DestroyAll = 0;  
  RetainPermanent = 1;  
  RetainTemporary = 2;  

  Above = 0;  
  Below = 1;  
  TopIf = 2;  
  BottomIf = 3;  
  Opposite = 4;  

  RaiseLowest = 0;  
  LowerHighest = 1;  

  PropModeReplace = 0;  
  PropModePrepend = 1;  
  PropModeAppend = 2;  



  GXclear = $0;  

  GXand = $1;  

  GXandReverse = $2;  

  GXcopy = $3;  

  GXandInverted = $4;  

  GXnoop = $5;  

  GXxor = $6;  

  GXor = $7;  

  GXnor = $8;  

  GXequiv = $9;  

  GXinvert = $a;  

  GXorReverse = $b;  

  GXcopyInverted = $c;  

  GXorInverted = $d;  

  GXnand = $e;  

  GXset = $f;  

  LineSolid = 0;  
  LineOnOffDash = 1;  
  LineDoubleDash = 2;  

  CapNotLast = 0;  
  CapButt = 1;  
  CapRound = 2;  
  CapProjecting = 3;  

  JoinMiter = 0;  
  JoinRound = 1;  
  JoinBevel = 2;  

  FillSolid = 0;  
  FillTiled = 1;  
  FillStippled = 2;  
  FillOpaqueStippled = 3;  

  EvenOddRule = 0;  
  WindingRule = 1;  

  ClipByChildren = 0;  
  IncludeInferiors = 1;  

  Unsorted = 0;  
  YSorted = 1;  
  YXSorted = 2;  
  YXBanded = 3;  


  CoordModeOrigin = 0;  

  CoordModePrevious = 1;  


  Complex = 0;  

  Nonconvex = 1;  

  Convex = 2;  


  ArcChord = 0;  

  ArcPieSlice = 1;  

  GCFunction = 1 shl 0;  
  GCPlaneMask = 1 shl 1;  
  GCForeground = 1 shl 2;  
  GCBackground = 1 shl 3;  
  GCLineWidth = 1 shl 4;  
  GCLineStyle = 1 shl 5;  
  GCCapStyle = 1 shl 6;  
  GCJoinStyle = 1 shl 7;  
  GCFillStyle = 1 shl 8;  
  GCFillRule = 1 shl 9;  
  GCTile = 1 shl 10;  
  GCStipple = 1 shl 11;  
  GCTileStipXOrigin = 1 shl 12;  
  GCTileStipYOrigin = 1 shl 13;  
  GCFont = 1 shl 14;  
  GCSubwindowMode = 1 shl 15;  
  GCGraphicsExposures = 1 shl 16;  
  GCClipXOrigin = 1 shl 17;  
  GCClipYOrigin = 1 shl 18;  
  GCClipMask = 1 shl 19;  
  GCDashOffset = 1 shl 20;  
  GCDashList = 1 shl 21;  
  GCArcMode = 1 shl 22;  
  GCLastBit = 22;  


  FontLeftToRight = 0;  
  FontRightToLeft = 1;  
  FontChange = 255;  



  XYBitmap = 0;  

  XYPixmap = 1;  

  ZPixmap = 2;  



  AllocNone = 0;  

  AllocAll = 1;  

  DoRed = 1 shl 0;  
  DoGreen = 1 shl 1;  
  DoBlue = 1 shl 2;  



  CursorShape = 0;  

  TileShape = 1;  

  StippleShape = 2;  

  AutoRepeatModeOff = 0;  
  AutoRepeatModeOn = 1;  
  AutoRepeatModeDefault = 2;  
  LedModeOff = 0;  
  LedModeOn = 1;  

  KBKeyClickPercent = 1 shl 0;  
  KBBellPercent = 1 shl 1;  
  KBBellPitch = 1 shl 2;  
  KBBellDuration = 1 shl 3;  
  KBLed = 1 shl 4;  
  KBLedMode = 1 shl 5;  
  KBKey = 1 shl 6;  
  KBAutoRepeatMode = 1 shl 7;  
  MappingSuccess = 0;  
  MappingBusy = 1;  
  MappingFailed = 2;  
  MappingModifier = 0;  
  MappingKeyboard = 1;  
  MappingPointer = 2;  

  DontPreferBlanking = 0;  
  PreferBlanking = 1;  
  DefaultBlanking = 2;  
  DisableScreenSaver = 0;  
  DisableScreenInterval = 0;  
  DontAllowExposures = 0;  
  AllowExposures = 1;  
  DefaultExposures = 2;  

  ScreenSaverReset = 0;  
  ScreenSaverActive = 1;  


  HostInsert = 0;  
  HostDelete = 1;  

  EnableAccess = 1;  
  DisableAccess = 0;  

  StaticGray = 0;  
  GrayScale = 1;  
  StaticColor = 2;  
  PseudoColor = 3;  
  TrueColor = 4;  
  DirectColor = 5;  

  LSBFirst = 0;  
  MSBFirst = 1;  
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/HookObjI.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/HookObjI.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/HookObjI.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XtHookObjI_h}
//// {$define _XtHookObjI_h}

//// (* error 
//// typedef struct _HookObjRec *HookObject;
in declaration at line 34 *)
    type
      THookObjectClass = ^T_HookObjClassRec;
//// (* error 
//// externalref WidgetClass hookObjectClass;
 in declarator_list *)



      T_HookObjPart = record
          createhook_callbacks : TXtCallbackList;
          changehook_callbacks : TXtCallbackList;
          confighook_callbacks : TXtCallbackList;
          geometryhook_callbacks : TXtCallbackList;
          destroyhook_callbacks : TXtCallbackList;
          shells : TWidgetList;
          num_shells : TCardinal;
          max_shells : TCardinal;
          screen : ^TScreen;
        end;
      THookObjPart = T_HookObjPart;

      T_HookObjRec = record
          object : TObjectPart;
          hooks : THookObjPart;
        end;
      THookObjRec = T_HookObjRec;

      T_HookObjClassPart = record
          unused : longint;
        end;
      THookObjClassPart = T_HookObjClassPart;

      T_HookObjClassRec = record
          object_class : TObjectClassPart;
          hook_class : THookObjClassPart;
        end;
      THookObjClassRec = T_HookObjClassRec;
//// (* error 
//// externalref HookObjClassRec hookObjClassRec;
 in declarator_list *)
//// {$endif}

//// (* error 
//// 

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xtos.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xtos.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xtos.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _Xtos_h}
//// {$define _Xtos_h}

function ALLOCATE_LOCAL_FALLBACK(_size : longint) : longint;

function DEALLOCATE_LOCAL_FALLBACK(_ptr : longint) : longint;

//// {$include <X11/Xalloca.h>}
//// {$if defined (_LP64) || \}
//// (* error 
////     defined(__alpha) || defined(__alpha__) || \
//// {$endif}
//// {$endif}



// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/ResourceI.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/ResourceI.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/ResourceI.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    PCardinal  = ^Cardinal;
    Pchar  = ^char;
    PXrmValue  = ^XrmValue;
    PXtArgVal  = ^XtArgVal;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XtresourceI_h}
//// {$define _XtresourceI_h}

function StringToQuark(_string : longint) : longint;

function StringToName(_string : longint) : longint;

function StringToClass(_string : longint) : longint;

//// (* error 
//// extern void _XtDependencies(
in declaration at line 68 *)

procedure _XtResourceDependencies(_para1:TWidgetClass);cdecl;external;

procedure _XtConstraintResDependencies(_para1:TConstraintWidgetClass);cdecl;external;

function _XtGetResources(_para1:TWidget; _para2:TArgList; _para3:TCardinal; _para4:TXtTypedArgList; _para5:PTCardinal):^TXtCacheRef;cdecl;external;

procedure _XtCopyFromParent(_para1:TWidget; _para2:longint; _para3:PTXrmValue);cdecl;external;
procedure _XtCopyToArg(src:Pchar; dst:PTXtArgVal; size:dword);cdecl;external;
procedure _XtCopyFromArg(src:TXtArgVal; dst:Pchar; size:dword);cdecl;external;
function _XtCreateIndirectionTable(resources:TXtResourceList; num_resources:TCardinal):^TXrmResourceList;cdecl;external;
procedure _XtResourceListInitialize;cdecl;external;
//// {$endif}

//// (* error 
//// #endif /* _XtresourceI_h */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xalloca.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xalloca.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xalloca.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef XALLOCA_H}

const
  XALLOCA_H = 1;  
//// {$ifndef INCLUDE_ALLOCA_H}

//// {$if defined(HAVE_ALLOCA_H) || defined(__SUNPRO_C) || defined(__SUNPRO_CC)}
//// {$define INCLUDE_ALLOCA_H}
//// {$endif}
//// {$endif}
//// {$ifdef INCLUDE_ALLOCA_H}
//// {$include <alloca.h>}
//// {$endif}
//// {$ifndef NO_ALLOCA}

//// {$ifdef __GNUC__}
//// {$ifndef alloca}

const
  alloca = __builtin_alloca;  
//// {$endif}


function ALLOCATE_LOCAL(size : longint) : longint;

//// {$else}


//// {$if defined(__sun) || defined(alloca)}


//// {$if !defined(__cplusplus)}

//// {$define __Xnullarg}

function alloca(_para1:T__Xnullarg):pointer;cdecl;external;
//// {$endif}

function ALLOCATE_LOCAL(size : longint) : longint;

//// {$endif}

//// {$endif}

//// {$endif}

//// {$if !defined(ALLOCATE_LOCAL)}
//// {$if defined(ALLOCATE_LOCAL_FALLBACK) && defined(DEALLOCATE_LOCAL_FALLBACK)}

function ALLOCATE_LOCAL(_size : longint) : longint;

function DEALLOCATE_LOCAL(_ptr : longint) : longint;

//// {$else}

//// (* error 
//// #    define ALLOCATE_LOCAL(_size)  ALLOCATE_LOCAL_FALLBACK undefined!
in define line 112 *)
//// (* error 
//// #    define DEALLOCATE_LOCAL(_ptr) DEALLOCATE_LOCAL_FALLBACK undefined!
in define line 113 *)
//// {$endif}

//// {$else}
//// {$if !defined(DEALLOCATE_LOCAL)}
//// (* error 
//// #    define DEALLOCATE_LOCAL(_ptr) do {} while(0)
in define line 117 *)
//// {$endif}
//// {$endif}

//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Shell.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Shell.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Shell.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XtShell_h}
//// {$define _XtShell_h}
//// {$include <X11/SM/SMlib.h>}
//// {$include <X11/Intrinsic.h>}


//// {$ifndef XTSTRINGDEFINES}
//// (* error 
//// #define _XtShell_h_Const const
in define line 64 *)
//// {$endif}



//// {$ifdef XTSTRINGDEFINES}

    const
      XtNiconName = 'iconName';      
      XtCIconName = 'IconName';      
      XtNiconPixmap = 'iconPixmap';      
      XtCIconPixmap = 'IconPixmap';      
      XtNiconWindow = 'iconWindow';      
      XtCIconWindow = 'IconWindow';      
      XtNiconMask = 'iconMask';      
      XtCIconMask = 'IconMask';      
      XtNwindowGroup = 'windowGroup';      
      XtCWindowGroup = 'WindowGroup';      
      XtNvisual = 'visual';      
      XtCVisual = 'Visual';      
      XtNtitleEncoding = 'titleEncoding';      
      XtCTitleEncoding = 'TitleEncoding';      
      XtNsaveUnder = 'saveUnder';      
      XtCSaveUnder = 'SaveUnder';      
      XtNtransient = 'transient';      
      XtCTransient = 'Transient';      
      XtNoverrideRedirect = 'overrideRedirect';      
      XtCOverrideRedirect = 'OverrideRedirect';      
      XtNtransientFor = 'transientFor';      
      XtCTransientFor = 'TransientFor';      
      XtNiconNameEncoding = 'iconNameEncoding';      
      XtCIconNameEncoding = 'IconNameEncoding';      
      XtNallowShellResize = 'allowShellResize';      
      XtCAllowShellResize = 'AllowShellResize';      
      XtNcreatePopupChildProc = 'createPopupChildProc';      
      XtCCreatePopupChildProc = 'CreatePopupChildProc';      
      XtNtitle = 'title';      
      XtCTitle = 'Title';      
//// {$ifndef XtRAtom}

    const
      XtRAtom = 'Atom';      
//// {$endif}

    const
      XtNargc = 'argc';      
      XtCArgc = 'Argc';      
      XtNargv = 'argv';      
      XtCArgv = 'Argv';      
      XtNiconX = 'iconX';      
      XtCIconX = 'IconX';      
      XtNiconY = 'iconY';      
      XtCIconY = 'IconY';      
      XtNinput = 'input';      
      XtCInput = 'Input';      
      XtNiconic = 'iconic';      
      XtCIconic = 'Iconic';      
      XtNinitialState = 'initialState';      
      XtCInitialState = 'InitialState';      
      XtNgeometry = 'geometry';      
      XtCGeometry = 'Geometry';      
      XtNbaseWidth = 'baseWidth';      
      XtCBaseWidth = 'BaseWidth';      
      XtNbaseHeight = 'baseHeight';      
      XtCBaseHeight = 'BaseHeight';      
      XtNwinGravity = 'winGravity';      
      XtCWinGravity = 'WinGravity';      
      XtNminWidth = 'minWidth';      
      XtCMinWidth = 'MinWidth';      
      XtNminHeight = 'minHeight';      
      XtCMinHeight = 'MinHeight';      
      XtNmaxWidth = 'maxWidth';      
      XtCMaxWidth = 'MaxWidth';      
      XtNmaxHeight = 'maxHeight';      
      XtCMaxHeight = 'MaxHeight';      
      XtNwidthInc = 'widthInc';      
      XtCWidthInc = 'WidthInc';      
      XtNheightInc = 'heightInc';      
      XtCHeightInc = 'HeightInc';      
      XtNminAspectY = 'minAspectY';      
      XtCMinAspectY = 'MinAspectY';      
      XtNmaxAspectY = 'maxAspectY';      
      XtCMaxAspectY = 'MaxAspectY';      
      XtNminAspectX = 'minAspectX';      
      XtCMinAspectX = 'MinAspectX';      
      XtNmaxAspectX = 'maxAspectX';      
      XtCMaxAspectX = 'MaxAspectX';      
      XtNwmTimeout = 'wmTimeout';      
      XtCWmTimeout = 'WmTimeout';      
      XtNwaitForWm = 'waitforwm';      
      XtCWaitForWm = 'Waitforwm';      
      XtNwaitforwm = 'waitforwm';      
      XtCWaitforwm = 'Waitforwm';      
      XtNclientLeader = 'clientLeader';      
      XtCClientLeader = 'ClientLeader';      
      XtNwindowRole = 'windowRole';      
      XtCWindowRole = 'WindowRole';      
      XtNurgency = 'urgency';      
      XtCUrgency = 'Urgency';      
      XtNcancelCallback = 'cancelCallback';      
      XtNcloneCommand = 'cloneCommand';      
      XtCCloneCommand = 'CloneCommand';      
      XtNconnection = 'connection';      
      XtCConnection = 'Connection';      
      XtNcurrentDirectory = 'currentDirectory';      
      XtCCurrentDirectory = 'CurrentDirectory';      
      XtNdieCallback = 'dieCallback';      
      XtNdiscardCommand = 'discardCommand';      
      XtCDiscardCommand = 'DiscardCommand';      
      XtNenvironment = 'environment';      
      XtCEnvironment = 'Environment';      
      XtNinteractCallback = 'interactCallback';      
      XtNjoinSession = 'joinSession';      
      XtCJoinSession = 'JoinSession';      
      XtNprogramPath = 'programPath';      
      XtCProgramPath = 'ProgramPath';      
      XtNresignCommand = 'resignCommand';      
      XtCResignCommand = 'ResignCommand';      
      XtNrestartCommand = 'restartCommand';      
      XtCRestartCommand = 'RestartCommand';      
      XtNrestartStyle = 'restartStyle';      
      XtCRestartStyle = 'RestartStyle';      
      XtNsaveCallback = 'saveCallback';      
      XtNsaveCompleteCallback = 'saveCompleteCallback';      
      XtNsessionID = 'sessionID';      
      XtCSessionID = 'SessionID';      
      XtNshutdownCommand = 'shutdownCommand';      
      XtCShutdownCommand = 'ShutdownCommand';      
      XtNerrorCallback = 'errorCallback';      
//// {$else}
//// (* error 
//// extern _XtShell_h_Const char XtShellStrings[];
in declaration at line 189 *)
//// {$ifndef XtNiconName}

    function XtNiconName : TString;      

//// {$endif}
//// {$ifndef XtCIconName}

    function XtCIconName : TString;      

//// {$endif}
//// {$ifndef XtNiconPixmap}

    function XtNiconPixmap : TString;      

//// {$endif}
//// {$ifndef XtCIconPixmap}

    function XtCIconPixmap : TString;      

//// {$endif}
//// {$ifndef XtNiconWindow}

    function XtNiconWindow : TString;      

//// {$endif}
//// {$ifndef XtCIconWindow}

    function XtCIconWindow : TString;      

//// {$endif}
//// {$ifndef XtNiconMask}

    function XtNiconMask : TString;      

//// {$endif}
//// {$ifndef XtCIconMask}

    function XtCIconMask : TString;      

//// {$endif}
//// {$ifndef XtNwindowGroup}

    function XtNwindowGroup : TString;      

//// {$endif}
//// {$ifndef XtCWindowGroup}

    function XtCWindowGroup : TString;      

//// {$endif}
//// {$ifndef XtNvisual}

    function XtNvisual : TString;      

//// {$endif}
//// {$ifndef XtCVisual}

    function XtCVisual : TString;      

//// {$endif}
//// {$ifndef XtNtitleEncoding}

    function XtNtitleEncoding : TString;      

//// {$endif}
//// {$ifndef XtCTitleEncoding}

    function XtCTitleEncoding : TString;      

//// {$endif}
//// {$ifndef XtNsaveUnder}

    function XtNsaveUnder : TString;      

//// {$endif}
//// {$ifndef XtCSaveUnder}

    function XtCSaveUnder : TString;      

//// {$endif}
//// {$ifndef XtNtransient}

    function XtNtransient : TString;      

//// {$endif}
//// {$ifndef XtCTransient}

    function XtCTransient : TString;      

//// {$endif}
//// {$ifndef XtNoverrideRedirect}

    function XtNoverrideRedirect : TString;      

//// {$endif}
//// {$ifndef XtCOverrideRedirect}

    function XtCOverrideRedirect : TString;      

//// {$endif}
//// {$ifndef XtNtransientFor}

    function XtNtransientFor : TString;      

//// {$endif}
//// {$ifndef XtCTransientFor}

    function XtCTransientFor : TString;      

//// {$endif}
//// {$ifndef XtNiconNameEncoding}

    function XtNiconNameEncoding : TString;      

//// {$endif}
//// {$ifndef XtCIconNameEncoding}

    function XtCIconNameEncoding : TString;      

//// {$endif}
//// {$ifndef XtNallowShellResize}

    function XtNallowShellResize : TString;      

//// {$endif}
//// {$ifndef XtCAllowShellResize}

    function XtCAllowShellResize : TString;      

//// {$endif}
//// {$ifndef XtNcreatePopupChildProc}

    function XtNcreatePopupChildProc : TString;      

//// {$endif}
//// {$ifndef XtCCreatePopupChildProc}

    function XtCCreatePopupChildProc : TString;      

//// {$endif}
//// {$ifndef XtNtitle}

    function XtNtitle : TString;      

//// {$endif}
//// {$ifndef XtCTitle}

    function XtCTitle : TString;      

//// {$endif}
//// {$ifndef XtRAtom}

    function XtRAtom : TString;      

//// {$endif}
//// {$ifndef XtNargc}

    function XtNargc : TString;      

//// {$endif}
//// {$ifndef XtCArgc}

    function XtCArgc : TString;      

//// {$endif}
//// {$ifndef XtNargv}

    function XtNargv : TString;      

//// {$endif}
//// {$ifndef XtCArgv}

    function XtCArgv : TString;      

//// {$endif}
//// {$ifndef XtNiconX}

    function XtNiconX : TString;      

//// {$endif}
//// {$ifndef XtCIconX}

    function XtCIconX : TString;      

//// {$endif}
//// {$ifndef XtNiconY}

    function XtNiconY : TString;      

//// {$endif}
//// {$ifndef XtCIconY}

    function XtCIconY : TString;      

//// {$endif}
//// {$ifndef XtNinput}

    function XtNinput : TString;      

//// {$endif}
//// {$ifndef XtCInput}

    function XtCInput : TString;      

//// {$endif}
//// {$ifndef XtNiconic}

    function XtNiconic : TString;      

//// {$endif}
//// {$ifndef XtCIconic}

    function XtCIconic : TString;      

//// {$endif}
//// {$ifndef XtNinitialState}

    function XtNinitialState : TString;      

//// {$endif}
//// {$ifndef XtCInitialState}

    function XtCInitialState : TString;      

//// {$endif}
//// {$ifndef XtNgeometry}

    function XtNgeometry : TString;      

//// {$endif}
//// {$ifndef XtCGeometry}

    function XtCGeometry : TString;      

//// {$endif}
//// {$ifndef XtNbaseWidth}

    function XtNbaseWidth : TString;      

//// {$endif}
//// {$ifndef XtCBaseWidth}

    function XtCBaseWidth : TString;      

//// {$endif}
//// {$ifndef XtNbaseHeight}

    function XtNbaseHeight : TString;      

//// {$endif}
//// {$ifndef XtCBaseHeight}

    function XtCBaseHeight : TString;      

//// {$endif}
//// {$ifndef XtNwinGravity}

    function XtNwinGravity : TString;      

//// {$endif}
//// {$ifndef XtCWinGravity}

    function XtCWinGravity : TString;      

//// {$endif}
//// {$ifndef XtNminWidth}

    function XtNminWidth : TString;      

//// {$endif}
//// {$ifndef XtCMinWidth}

    function XtCMinWidth : TString;      

//// {$endif}
//// {$ifndef XtNminHeight}

    function XtNminHeight : TString;      

//// {$endif}
//// {$ifndef XtCMinHeight}

    function XtCMinHeight : TString;      

//// {$endif}
//// {$ifndef XtNmaxWidth}

    function XtNmaxWidth : TString;      

//// {$endif}
//// {$ifndef XtCMaxWidth}

    function XtCMaxWidth : TString;      

//// {$endif}
//// {$ifndef XtNmaxHeight}

    function XtNmaxHeight : TString;      

//// {$endif}
//// {$ifndef XtCMaxHeight}

    function XtCMaxHeight : TString;      

//// {$endif}
//// {$ifndef XtNwidthInc}

    function XtNwidthInc : TString;      

//// {$endif}
//// {$ifndef XtCWidthInc}

    function XtCWidthInc : TString;      

//// {$endif}
//// {$ifndef XtNheightInc}

    function XtNheightInc : TString;      

//// {$endif}
//// {$ifndef XtCHeightInc}

    function XtCHeightInc : TString;      

//// {$endif}
//// {$ifndef XtNminAspectY}

    function XtNminAspectY : TString;      

//// {$endif}
//// {$ifndef XtCMinAspectY}

    function XtCMinAspectY : TString;      

//// {$endif}
//// {$ifndef XtNmaxAspectY}

    function XtNmaxAspectY : TString;      

//// {$endif}
//// {$ifndef XtCMaxAspectY}

    function XtCMaxAspectY : TString;      

//// {$endif}
//// {$ifndef XtNminAspectX}

    function XtNminAspectX : TString;      

//// {$endif}
//// {$ifndef XtCMinAspectX}

    function XtCMinAspectX : TString;      

//// {$endif}
//// {$ifndef XtNmaxAspectX}

    function XtNmaxAspectX : TString;      

//// {$endif}
//// {$ifndef XtCMaxAspectX}

    function XtCMaxAspectX : TString;      

//// {$endif}
//// {$ifndef XtNwmTimeout}

    function XtNwmTimeout : TString;      

//// {$endif}
//// {$ifndef XtCWmTimeout}

    function XtCWmTimeout : TString;      

//// {$endif}
//// {$ifndef XtNwaitForWm}

    function XtNwaitForWm : TString;      

//// {$endif}
//// {$ifndef XtCWaitForWm}

    function XtCWaitForWm : TString;      

//// {$endif}
//// {$ifndef XtNwaitforwm}

    function XtNwaitforwm : TString;      

//// {$endif}
//// {$ifndef XtCWaitforwm}

    function XtCWaitforwm : TString;      

//// {$endif}
//// {$ifndef XtNclientLeader}

    function XtNclientLeader : TString;      

//// {$endif}
//// {$ifndef XtCClientLeader}

    function XtCClientLeader : TString;      

//// {$endif}
//// {$ifndef XtNwindowRole}

    function XtNwindowRole : TString;      

//// {$endif}
//// {$ifndef XtCWindowRole}

    function XtCWindowRole : TString;      

//// {$endif}
//// {$ifndef XtNurgency}

    function XtNurgency : TString;      

//// {$endif}
//// {$ifndef XtCUrgency}

    function XtCUrgency : TString;      

//// {$endif}
//// {$ifndef XtNcancelCallback}

    function XtNcancelCallback : TString;      

//// {$endif}
//// {$ifndef XtNcloneCommand}

    function XtNcloneCommand : TString;      

//// {$endif}
//// {$ifndef XtCCloneCommand}

    function XtCCloneCommand : TString;      

//// {$endif}
//// {$ifndef XtNconnection}

    function XtNconnection : TString;      

//// {$endif}
//// {$ifndef XtCConnection}

    function XtCConnection : TString;      

//// {$endif}
//// {$ifndef XtNcurrentDirectory}

    function XtNcurrentDirectory : TString;      

//// {$endif}
//// {$ifndef XtCCurrentDirectory}

    function XtCCurrentDirectory : TString;      

//// {$endif}
//// {$ifndef XtNdieCallback}

    function XtNdieCallback : TString;      

//// {$endif}
//// {$ifndef XtNdiscardCommand}

    function XtNdiscardCommand : TString;      

//// {$endif}
//// {$ifndef XtCDiscardCommand}

    function XtCDiscardCommand : TString;      

//// {$endif}
//// {$ifndef XtNenvironment}

    function XtNenvironment : TString;      

//// {$endif}
//// {$ifndef XtCEnvironment}

    function XtCEnvironment : TString;      

//// {$endif}
//// {$ifndef XtNinteractCallback}

    function XtNinteractCallback : TString;      

//// {$endif}
//// {$ifndef XtNjoinSession}

    function XtNjoinSession : TString;      

//// {$endif}
//// {$ifndef XtCJoinSession}

    function XtCJoinSession : TString;      

//// {$endif}
//// {$ifndef XtNprogramPath}

    function XtNprogramPath : TString;      

//// {$endif}
//// {$ifndef XtCProgramPath}

    function XtCProgramPath : TString;      

//// {$endif}
//// {$ifndef XtNresignCommand}

    function XtNresignCommand : TString;      

//// {$endif}
//// {$ifndef XtCResignCommand}

    function XtCResignCommand : TString;      

//// {$endif}
//// {$ifndef XtNrestartCommand}

    function XtNrestartCommand : TString;      

//// {$endif}
//// {$ifndef XtCRestartCommand}

    function XtCRestartCommand : TString;      

//// {$endif}
//// {$ifndef XtNrestartStyle}

    function XtNrestartStyle : TString;      

//// {$endif}
//// {$ifndef XtCRestartStyle}

    function XtCRestartStyle : TString;      

//// {$endif}
//// {$ifndef XtNsaveCallback}

    function XtNsaveCallback : TString;      

//// {$endif}
//// {$ifndef XtNsaveCompleteCallback}

    function XtNsaveCompleteCallback : TString;      

//// {$endif}
//// {$ifndef XtNsessionID}

    function XtNsessionID : TString;      

//// {$endif}
//// {$ifndef XtCSessionID}

    function XtCSessionID : TString;      

//// {$endif}
//// {$ifndef XtNshutdownCommand}

    function XtNshutdownCommand : TString;      

//// {$endif}
//// {$ifndef XtCShutdownCommand}

    function XtCShutdownCommand : TString;      

//// {$endif}
//// {$ifndef XtNerrorCallback}

    function XtNerrorCallback : TString;      

//// {$endif}
//// {$endif}

//// {$ifndef XTSTRINGDEFINES}
//// {$undef _XtShell_h_Const}
//// {$endif}

    type
      TShellWidgetClass = ^T_ShellClassRec;

      TOverrideShellWidgetClass = ^T_OverrideShellClassRec;

      TWMShellWidgetClass = ^T_WMShellClassRec;

      TTransientShellWidgetClass = ^T_TransientShellClassRec;

      TTopLevelShellWidgetClass = ^T_TopLevelShellClassRec;

      TApplicationShellWidgetClass = ^T_ApplicationShellClassRec;

      TSessionShellWidgetClass = ^T_SessionShellClassRec;
//// {$ifndef SHELL}
//// (* error 
//// externalref WidgetClass shellWidgetClass;
 in declarator_list *)
//// (* error 
//// externalref WidgetClass overrideShellWidgetClass;
 in declarator_list *)
//// (* error 
//// externalref WidgetClass wmShellWidgetClass;
 in declarator_list *)
//// (* error 
//// externalref WidgetClass transientShellWidgetClass;
 in declarator_list *)
//// (* error 
//// externalref WidgetClass topLevelShellWidgetClass;
 in declarator_list *)
//// (* error 
//// externalref WidgetClass applicationShellWidgetClass;
 in declarator_list *)
//// (* error 
//// externalref WidgetClass sessionShellWidgetClass;
 in declarator_list *)
//// {$endif}
//// {$endif}



// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xlocale.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xlocale.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xlocale.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _X11_XLOCALE_H_}
//// {$define _X11_XLOCALE_H_}
//// {$include <X11/Xfuncproto.h>}
//// {$include <X11/Xosdefs.h>}
//// {$include <locale.h>}
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Intrinsic.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Intrinsic.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Intrinsic.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    P_XtString  = ^_XtString;
    PAtom  = ^Atom;
    PBoolean  = ^Boolean;
    PCardinal  = ^Cardinal;
    Pchar  = ^char;
    PDimension  = ^Dimension;
    PDisplay  = ^Display;
    Pdword  = ^dword;
    PKeyCode  = ^KeyCode;
    PKeySym  = ^KeySym;
    Plongint  = ^longint;
    PModifiers  = ^Modifiers;
    PPosition  = ^Position;
    PScreen  = ^Screen;
    PString  = ^String;
    PTime  = ^Time;
    PWidget  = ^Widget;
    PXEvent  = ^XEvent;
    PXGCValues  = ^XGCValues;
    PXrmOptionDescRec  = ^XrmOptionDescRec;
    PXrmValue  = ^XrmValue;
    PXtActionList  = ^XtActionList;
    PXtAppContext  = ^XtAppContext;
    PXtCacheRef  = ^XtCacheRef;
    PXtInputId  = ^XtInputId;
    PXtIntervalId  = ^XtIntervalId;
    PXtPointer  = ^XtPointer;
    PXtRequestId  = ^XtRequestId;
    PXtResourceList  = ^XtResourceList;
    PXtSignalId  = ^XtSignalId;
    PXtWidgetGeometry  = ^XtWidgetGeometry;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XtIntrinsic_h}
//// {$define _XtIntrinsic_h}
//// {$include	<X11/Xlib.h>}
//// {$include	<X11/Xutil.h>}
//// {$include	<X11/Xresource.h>}
//// {$include	<X11/Xfuncproto.h>}
//// {$ifdef XT_BC}
//// {$include <X11/Xos.h>		/* for R4 compatibility */}
//// {$else}
//// {$include <X11/Xosdefs.h>}
//// {$include <string.h>		/* for XtNewString */}
//// {$endif}


const
  XtSpecificationRelease = 7;  

//// {$ifdef _CONST_X_STRING}
type
  TString = ^char;
//// {$else}
type
  TString = ^char;
//// {$endif}

//// (* error 
//// #define _XtString char*
in define line 82 *)

//// {$if NeedWidePrototypes}

    const
      _XtBoolean = longint;      
      _XtDimension = dword;      
      _XtKeyCode = dword;      
      _XtPosition = longint;      
      _XtXtEnum = dword;      
//// {$else}

    const
      _XtBoolean = Boolean;      
      _XtDimension = Dimension;      
      _XtKeyCode = KeyCode;      
      _XtPosition = Position;      
      _XtXtEnum = XtEnum;      
//// {$endif}

//// {$include <stddef.h>}
//// {$ifdef VMS}

    const
      externalref = globalref;      
//// (* error 
//// #define externaldef(psect) globaldef {"psect"} noshare
in define line 103 *)
//// {$else}
//// (* error 
//// #define externalref extern
in define line 105 *)
//// (* error 
//// #define externaldef(psect)
in define line 106 *)
//// {$endif}

//// {$ifndef FALSE}

    const
      FALSE = 0;      
      TRUE = 1;      
//// {$endif}

    function XtNumber(arr : longint) : TCardinal;    

    type
      TWidget = ^T_WidgetRec;

      TWidgetList = ^TWidget;

      TWidgetClass = ^T_WidgetClassRec;

      TCompositeWidget = ^T_CompositeRec;

      TXtActionList = ^T_XtActionsRec;

      TXtEventTable = ^T_XtEventRec;

      TXtAppContext = ^T_XtAppStruct;

      TXtValueMask = dword;

      TXtIntervalId = dword;

      TXtInputId = dword;

      TXtWorkProcId = dword;

      TXtSignalId = dword;

      TXtGeometryMask = dword;

      TXtGCMask = dword;


      TPixel = dword;


      TXtCacheType = longint;

    const
      XtCacheNone = $001;      
      XtCacheAll = $002;      
      XtCacheByDisplay = $003;      
      XtCacheRefCount = $100;      

    type
      TBoolean = char;

      TXtArgVal = longint;

      TXtEnum = byte;

      TCardinal = dword;

      TDimension = word;


      TPosition = smallint;


      TXtPointer = pointer;



      TOpaque = TXtPointer;
//// {$include <X11/Core.h>}
//// {$include <X11/Composite.h>}
//// {$include <X11/Constraint.h>}
//// {$include <X11/Object.h>}
//// {$include <X11/RectObj.h>}
    type
      TXtTranslations = ^T_TranslationData;

      TXtAccelerators = ^T_TranslationData;

      TModifiers = dword;


      TXtActionProc = procedure (_para1:TWidget; _para2:PTXEvent; _para3:PTString; _para4:PTCardinal);cdecl;

      TXtBoundActions = ^TXtActionProc;

      T_XtActionsRec = record
          _string : TString;
          proc : TXtActionProc;
        end;
      TXtActionsRec = T_XtActionsRec;










      TXtAddressMode = (XtAddress,XtBaseOffset,XtImmediate,XtResourceString,
        XtResourceQuark,XtWidgetBaseOffset,
        XtProcedureArg);

      TXtConvertArgRec = record
          address_mode : TXtAddressMode;
          address_id : TXtPointer;
          size : TCardinal;
        end;
      TXtConvertArgList = ^TXtConvertArgRec;


      TXtConvertArgProc = procedure (_para1:TWidget; _para2:PTCardinal; _para3:PTXrmValue);cdecl;


      TXtWidgetGeometry = record
          request_mode : TXtGeometryMask;
          x : TPosition;
          y : TPosition;
          width : TDimension;
          height : TDimension;
          border_width : TDimension;
          sibling : TWidget;
          stack_mode : longint;
        end;


    const
      XtCWQueryOnly = 1 shl 7;      

      XtSMDontChange = 5;      


    type

      TXtConverter = procedure (_para1:PTXrmValue; _para2:PTCardinal; _para3:PTXrmValue; _para4:PTXrmValue);cdecl;


      TXtTypeConverter = function (_para1:PTDisplay; _para2:PTXrmValue; _para3:PTCardinal; _para4:PTXrmValue; _para5:PTXrmValue; 
                   _para6:PTXtPointer):TBoolean;cdecl;


      TXtDestructor = procedure (_para1:TXtAppContext; _para2:PTXrmValue; _para3:TXtPointer; _para4:PTXrmValue; _para5:PTCardinal);cdecl;

      TXtCacheRef = TOpaque;

      TXtActionHookId = TOpaque;


      TXtActionHookProc = procedure (_para1:TWidget; _para2:TXtPointer; _para3:TString; _para4:PTXEvent; _para5:PTString; 
                    _para6:PTCardinal);cdecl;

      TXtBlockHookId = dword;


      TXtBlockHookProc = procedure (_para1:TXtPointer);cdecl;


      TXtKeyProc = procedure (_para1:PTDisplay; _para2:T_XtKeyCode; _para3:TModifiers; _para4:PTModifiers; _para5:PTKeySym);cdecl;


      TXtCaseProc = procedure (_para1:PTDisplay; _para2:TKeySym; _para3:PTKeySym; _para4:PTKeySym);cdecl;


      TXtEventHandler = procedure (_para1:TWidget; _para2:TXtPointer; _para3:PTXEvent; _para4:PTBoolean);cdecl;

      TEventMask = dword;

      TXtListPosition = (XtListHead,XtListTail);

      TXtInputMask = dword;

    const
      XtInputNoneMask = 0;      
      XtInputReadMask = 1 shl 0;      
      XtInputWriteMask = 1 shl 1;      
      XtInputExceptMask = 1 shl 2;      

    type

      TXtTimerCallbackProc = procedure (_para1:TXtPointer; _para2:PTXtIntervalId);cdecl;


      TXtInputCallbackProc = procedure (_para1:TXtPointer; _para2:Plongint; _para3:PTXtInputId);cdecl;


      TXtSignalCallbackProc = procedure (_para1:TXtPointer; _para2:PTXtSignalId);cdecl;

      TArg = record
          name : TString;
          value : TXtArgVal;
        end;
      TArgList = ^TArg;

      TXtVarArgsList = TXtPointer;



      TXtCallbackProc = procedure (_para1:TWidget; _para2:TXtPointer; _para3:TXtPointer);cdecl;

      T_XtCallbackRec = record
          callback : TXtCallbackProc;
          closure : TXtPointer;
        end;
      TXtCallbackRec = T_XtCallbackRec;
      TXtCallbackList = ^T_XtCallbackRec;

      TXtCallbackStatus = (XtCallbackNoList,XtCallbackHasNone,
        XtCallbackHasSome);





      TXtGeometryResult = (XtGeometryYes,XtGeometryNo,XtGeometryAlmost,
        XtGeometryDone);

      TXtGrabKind = (XtGrabNone,XtGrabNonexclusive,XtGrabExclusive
        );

      TXtPopdownIDRec = record
          shell_widget : TWidget;
          enable_widget : TWidget;
        end;
      TXtPopdownID = ^TXtPopdownIDRec;








      T_XtResource = record
          resource_name : TString;
          resource_class : TString;
          resource_type : TString;
          resource_size : TCardinal;
          resource_offset : TCardinal;
          default_type : TString;
          default_addr : TXtPointer;
        end;
      TXtResource = T_XtResource;
      TXtResourceList = ^T_XtResource;


      TXtResourceDefaultProc = procedure (_para1:TWidget; _para2:longint; _para3:PTXrmValue);cdecl;


      TXtLanguageProc = function (_para1:PTDisplay; _para2:TString; _para3:TXtPointer):TString;cdecl;


      TXtErrorMsgHandler = procedure (_para1:TString; _para2:TString; _para3:TString; _para4:TString; _para5:PTString; 
                    _para6:PTCardinal);cdecl;


      TXtErrorHandler = procedure (_para1:TString);cdecl;


      TXtCreatePopupChildProc = procedure (_para1:TWidget);cdecl;


      TXtWorkProc = function (_para1:TXtPointer):TBoolean;cdecl;

      TSubstitutionRec = record
          match : char;
          substitution : T_XtString;
        end;
      TSubstitution = ^TSubstitutionRec;


      TXtFilePredicate = function (_para1:TString):TBoolean;cdecl;

      TXtRequestId = TXtPointer;


      TXtConvertSelectionProc = function (_para1:TWidget; _para2:PTAtom; _para3:PTAtom; _para4:PTAtom; _para5:PTXtPointer; 
                   _para6:Pdword; _para7:Plongint):TBoolean;cdecl;


      TXtLoseSelectionProc = procedure (_para1:TWidget; _para2:PTAtom);cdecl;


      TXtSelectionDoneProc = procedure (_para1:TWidget; _para2:PTAtom; _para3:PTAtom);cdecl;


      TXtSelectionCallbackProc = procedure (_para1:TWidget; _para2:TXtPointer; _para3:PTAtom; _para4:PTAtom; _para5:TXtPointer; 
                    _para6:Pdword; _para7:Plongint);cdecl;


      TXtLoseSelectionIncrProc = procedure (_para1:TWidget; _para2:PTAtom; _para3:TXtPointer);cdecl;


      TXtSelectionDoneIncrProc = procedure (_para1:TWidget; _para2:PTAtom; _para3:PTAtom; _para4:PTXtRequestId; _para5:TXtPointer);cdecl;


      TXtConvertSelectionIncrProc = function (_para1:TWidget; _para2:PTAtom; _para3:PTAtom; _para4:PTAtom; _para5:PTXtPointer; 
                   _para6:Pdword; _para7:Plongint; _para8:Pdword; _para9:TXtPointer; _para10:PTXtRequestId):TBoolean;cdecl;


      TXtCancelConvertSelectionProc = procedure (_para1:TWidget; _para2:PTAtom; _para3:PTAtom; _para4:PTXtRequestId; _para5:TXtPointer);cdecl;


      TXtEventDispatchProc = function (_para1:PTXEvent):TBoolean;cdecl;


      TXtExtensionSelectProc = procedure (_para1:TWidget; _para2:Plongint; _para3:PTXtPointer; _para4:longint; _para5:TXtPointer);cdecl;

//// (* error 
//// extern Boolean XtConvertAndStore(

in declaration at line 509 *)


function XtCallConverter(_para1:PTDisplay; _para2:TXtTypeConverter; _para3:TXrmValuePtr; _para4:TCardinal; _para5:TXrmValuePtr; 
               _para6:PTXrmValue; _para7:PTXtCacheRef):TBoolean;cdecl;external;

function XtDispatchEvent(_para1:PTXEvent):TBoolean;cdecl;external;

function XtCallAcceptFocus(_para1:TWidget; _para2:PTTime):TBoolean;cdecl;external;


function XtPeekEvent(_para1:PTXEvent):TBoolean;cdecl;external;

function XtAppPeekEvent(_para1:TXtAppContext; _para2:PTXEvent):TBoolean;cdecl;external;

function XtIsSubclass(_para1:TWidget; _para2:TWidgetClass):TBoolean;cdecl;external;

function XtIsObject(_para1:TWidget):TBoolean;cdecl;external;


function _XtCheckSubclassFlag(_para1:TWidget; _para2:T_XtXtEnum):TBoolean;cdecl;external;


function _XtIsSubclassOf(_para1:TWidget; _para2:TWidgetClass; _para3:TWidgetClass; _para4:T_XtXtEnum):TBoolean;cdecl;external;

function XtIsManaged(_para1:TWidget):TBoolean;cdecl;external;

function XtIsRealized(_para1:TWidget):TBoolean;cdecl;external;

function XtIsSensitive(_para1:TWidget):TBoolean;cdecl;external;

function XtOwnSelection(_para1:TWidget; _para2:TAtom; _para3:TTime; _para4:TXtConvertSelectionProc; _para5:TXtLoseSelectionProc; 
               _para6:TXtSelectionDoneProc):TBoolean;cdecl;external;

function XtOwnSelectionIncremental(_para1:TWidget; _para2:TAtom; _para3:TTime; _para4:TXtConvertSelectionIncrProc; _para5:TXtLoseSelectionIncrProc; 
               _para6:TXtSelectionDoneIncrProc; _para7:TXtCancelConvertSelectionProc; _para8:TXtPointer):TBoolean;cdecl;external;

function XtMakeResizeRequest(_para1:TWidget; _para2:T_XtDimension; _para3:T_XtDimension; _para4:PTDimension; _para5:PTDimension):TXtGeometryResult;cdecl;external;

procedure XtTranslateCoords(_para1:TWidget; _para2:T_XtPosition; _para3:T_XtPosition; _para4:PTPosition; _para5:PTPosition);cdecl;external;

function XtGetKeysymTable(_para1:PTDisplay; _para2:PTKeyCode; _para3:Plongint):^TKeySym;cdecl;external;

procedure XtKeysymToKeycodeList(_para1:PTDisplay; _para2:TKeySym; _para3:PPTKeyCode; _para4:PTCardinal);cdecl;external;


procedure XtStringConversionWarning(_XtString:T_Xconst; _XtString:T_Xconst);cdecl;external;

procedure XtDisplayStringConversionWarning(_para1:PTDisplay; _XtString:T_Xconst; _XtString:T_Xconst);cdecl;external;
//// (* error 
//// externalref XtConvertArgRec const colorConvertArgs[];
 in declarator_list *)
//// (* error 
//// externalref XtConvertArgRec const screenConvertArg[];
 in declarator_list *)


procedure XtAppAddConverter(_para1:TXtAppContext; _XtString:T_Xconst; _XtString:T_Xconst; _para4:TXtConverter; _para5:TXtConvertArgList; 
                _para6:TCardinal);cdecl;external;


procedure XtAddConverter(_XtString:T_Xconst; _XtString:T_Xconst; _para3:TXtConverter; _para4:TXtConvertArgList; _para5:TCardinal);cdecl;external;

procedure XtSetTypeConverter(_XtString:T_Xconst; _XtString:T_Xconst; _para3:TXtTypeConverter; _para4:TXtConvertArgList; _para5:TCardinal; 
                _para6:TXtCacheType; _para7:TXtDestructor);cdecl;external;

procedure XtAppSetTypeConverter(_para1:TXtAppContext; _XtString:T_Xconst; _XtString:T_Xconst; _para4:TXtTypeConverter; _para5:TXtConvertArgList; 
                _para6:TCardinal; _para7:TXtCacheType; _para8:TXtDestructor);cdecl;external;


procedure XtConvert(_para1:TWidget; _XtString:T_Xconst; _para3:PTXrmValue; _XtString:T_Xconst; _para5:PTXrmValue);cdecl;external;


procedure XtDirectConvert(_para1:TXtConverter; _para2:TXrmValuePtr; _para3:TCardinal; _para4:TXrmValuePtr; _para5:PTXrmValue);cdecl;external;


function XtParseTranslationTable(_XtString:T_Xconst):TXtTranslations;cdecl;external;

function XtParseAcceleratorTable(_XtString:T_Xconst):TXtAccelerators;cdecl;external;

procedure XtOverrideTranslations(_para1:TWidget; _para2:TXtTranslations);cdecl;external;

procedure XtAugmentTranslations(_para1:TWidget; _para2:TXtTranslations);cdecl;external;

procedure XtInstallAccelerators(_para1:TWidget; _para2:TWidget);cdecl;external;

procedure XtInstallAllAccelerators(_para1:TWidget; _para2:TWidget);cdecl;external;

procedure XtUninstallTranslations(_para1:TWidget);cdecl;external;

procedure XtAppAddActions(_para1:TXtAppContext; _para2:TXtActionList; _para3:TCardinal);cdecl;external;


procedure XtAddActions(_para1:TXtActionList; _para2:TCardinal);cdecl;external;

function XtAppAddActionHook(_para1:TXtAppContext; _para2:TXtActionHookProc; _para3:TXtPointer):TXtActionHookId;cdecl;external;

procedure XtRemoveActionHook(_para1:TXtActionHookId);cdecl;external;

procedure XtGetActionList(_para1:TWidgetClass; _para2:PTXtActionList; _para3:PTCardinal);cdecl;external;

procedure XtCallActionProc(_para1:TWidget; _XtString:T_Xconst; _para3:PTXEvent; _para4:PTString; _para5:TCardinal);cdecl;external;

procedure XtRegisterGrabAction(_para1:TXtActionProc; _para2:T_XtBoolean; _para3:dword; _para4:longint; _para5:longint);cdecl;external;

procedure XtSetMultiClickTime(_para1:PTDisplay; _para2:longint);cdecl;external;

function XtGetMultiClickTime(_para1:PTDisplay):longint;cdecl;external;

function XtGetActionKeysym(_para1:PTXEvent; _para2:PTModifiers):TKeySym;cdecl;external;


procedure XtTranslateKeycode(_para1:PTDisplay; _para2:T_XtKeyCode; _para3:TModifiers; _para4:PTModifiers; _para5:PTKeySym);cdecl;external;

procedure XtTranslateKey(_para1:PTDisplay; _para2:T_XtKeyCode; _para3:TModifiers; _para4:PTModifiers; _para5:PTKeySym);cdecl;external;

procedure XtSetKeyTranslator(_para1:PTDisplay; _para2:TXtKeyProc);cdecl;external;

procedure XtRegisterCaseConverter(_para1:PTDisplay; _para2:TXtCaseProc; _para3:TKeySym; _para4:TKeySym);cdecl;external;

procedure XtConvertCase(_para1:PTDisplay; _para2:TKeySym; _para3:PTKeySym; _para4:PTKeySym);cdecl;external;


    function XtAllEvents : TEventMask;      


procedure XtAddEventHandler(_para1:TWidget; _para2:TEventMask; _para3:T_XtBoolean; _para4:TXtEventHandler; _para5:TXtPointer);cdecl;external;

procedure XtRemoveEventHandler(_para1:TWidget; _para2:TEventMask; _para3:T_XtBoolean; _para4:TXtEventHandler; _para5:TXtPointer);cdecl;external;

procedure XtAddRawEventHandler(_para1:TWidget; _para2:TEventMask; _para3:T_XtBoolean; _para4:TXtEventHandler; _para5:TXtPointer);cdecl;external;

procedure XtRemoveRawEventHandler(_para1:TWidget; _para2:TEventMask; _para3:T_XtBoolean; _para4:TXtEventHandler; _para5:TXtPointer);cdecl;external;

procedure XtInsertEventHandler(_para1:TWidget; _para2:TEventMask; _para3:T_XtBoolean; _para4:TXtEventHandler; _para5:TXtPointer; 
                _para6:TXtListPosition);cdecl;external;

procedure XtInsertRawEventHandler(_para1:TWidget; _para2:TEventMask; _para3:T_XtBoolean; _para4:TXtEventHandler; _para5:TXtPointer; 
                _para6:TXtListPosition);cdecl;external;

function XtSetEventDispatcher(_para1:PTDisplay; _para2:longint; _para3:TXtEventDispatchProc):TXtEventDispatchProc;cdecl;external;

function XtDispatchEventToWidget(_para1:TWidget; _para2:PTXEvent):TBoolean;cdecl;external;

procedure XtInsertEventTypeHandler(_para1:TWidget; _para2:longint; _para3:TXtPointer; _para4:TXtEventHandler; _para5:TXtPointer; 
                _para6:TXtListPosition);cdecl;external;

procedure XtRemoveEventTypeHandler(_para1:TWidget; _para2:longint; _para3:TXtPointer; _para4:TXtEventHandler; _para5:TXtPointer);cdecl;external;

function XtBuildEventMask(_para1:TWidget):TEventMask;cdecl;external;

procedure XtRegisterExtensionSelector(_para1:PTDisplay; _para2:longint; _para3:longint; _para4:TXtExtensionSelectProc; _para5:TXtPointer);cdecl;external;

procedure XtAddGrab(_para1:TWidget; _para2:T_XtBoolean; _para3:T_XtBoolean);cdecl;external;

procedure XtRemoveGrab(_para1:TWidget);cdecl;external;


procedure XtProcessEvent(_para1:TXtInputMask);cdecl;external;

procedure XtAppProcessEvent(_para1:TXtAppContext; _para2:TXtInputMask);cdecl;external;

procedure XtMainLoop;cdecl;external;

procedure XtAppMainLoop(_para1:TXtAppContext);cdecl;external;

procedure XtAddExposureToRegion(_para1:PTXEvent; _para2:TRegion);cdecl;external;

procedure XtSetKeyboardFocus(_para1:TWidget; _para2:TWidget);cdecl;external;

function XtGetKeyboardFocusWidget(_para1:TWidget):TWidget;cdecl;external;

function XtLastEventProcessed(_para1:PTDisplay):^TXEvent;cdecl;external;

function XtLastTimestampProcessed(_para1:PTDisplay):TTime;cdecl;external;



function XtAddTimeOut(_para1:dword; _para2:TXtTimerCallbackProc; _para3:TXtPointer):TXtIntervalId;cdecl;external;

function XtAppAddTimeOut(_para1:TXtAppContext; _para2:dword; _para3:TXtTimerCallbackProc; _para4:TXtPointer):TXtIntervalId;cdecl;external;

procedure XtRemoveTimeOut(_para1:TXtIntervalId);cdecl;external;


function XtAddInput(_para1:longint; _para2:TXtPointer; _para3:TXtInputCallbackProc; _para4:TXtPointer):TXtInputId;cdecl;external;

function XtAppAddInput(_para1:TXtAppContext; _para2:longint; _para3:TXtPointer; _para4:TXtInputCallbackProc; _para5:TXtPointer):TXtInputId;cdecl;external;

procedure XtRemoveInput(_para1:TXtInputId);cdecl;external;
function XtAddSignal(_para1:TXtSignalCallbackProc; _para2:TXtPointer):TXtSignalId;cdecl;external;

function XtAppAddSignal(_para1:TXtAppContext; _para2:TXtSignalCallbackProc; _para3:TXtPointer):TXtSignalId;cdecl;external;

procedure XtRemoveSignal(_para1:TXtSignalId);cdecl;external;

procedure XtNoticeSignal(_para1:TXtSignalId);cdecl;external;


procedure XtNextEvent(_para1:PTXEvent);cdecl;external;

procedure XtAppNextEvent(_para1:TXtAppContext; _para2:PTXEvent);cdecl;external;
    const
      XtIMXEvent = 1;      
      XtIMTimer = 2;      
      XtIMAlternateInput = 4;      
      XtIMSignal = 8;      
      XtIMAll = ((XtIMXEvent or XtIMTimer) or XtIMAlternateInput) or XtIMSignal;      


function XtPending:TBoolean;cdecl;external;

function XtAppPending(_para1:TXtAppContext):TXtInputMask;cdecl;external;

function XtAppAddBlockHook(_para1:TXtAppContext; _para2:TXtBlockHookProc; _para3:TXtPointer):TXtBlockHookId;cdecl;external;

procedure XtRemoveBlockHook(_para1:TXtBlockHookId);cdecl;external;

    function XtIsRectObj(object : longint) : longint;    

    function XtIsWidget(object : longint) : longint;    

    function XtIsComposite(widget : longint) : longint;    

    function XtIsConstraint(widget : longint) : longint;    

    function XtIsShell(widget : longint) : longint;    

//// {$undef XtIsOverrideShell}
function XtIsOverrideShell(_para1:TWidget):TBoolean;cdecl;external;
    function XtIsOverrideShell(widget : longint) : longint;    

    function XtIsWMShell(widget : longint) : longint;    

//// {$undef XtIsVendorShell}
function XtIsVendorShell(_para1:TWidget):TBoolean;cdecl;external;
    function XtIsVendorShell(widget : longint) : longint;    

//// {$undef XtIsTransientShell}
function XtIsTransientShell(_para1:TWidget):TBoolean;cdecl;external;
    function XtIsTransientShell(widget : longint) : longint;    

    function XtIsTopLevelShell(widget : longint) : longint;    

//// {$undef XtIsApplicationShell}
function XtIsApplicationShell(_para1:TWidget):TBoolean;cdecl;external;
    function XtIsApplicationShell(widget : longint) : longint;    

//// {$undef XtIsSessionShell}
function XtIsSessionShell(_para1:TWidget):TBoolean;cdecl;external;
    function XtIsSessionShell(widget : longint) : longint;    


procedure XtRealizeWidget(_para1:TWidget);cdecl;external;

procedure XtUnrealizeWidget(_para1:TWidget);cdecl;external;

procedure XtDestroyWidget(_para1:TWidget);cdecl;external;

procedure XtSetSensitive(_para1:TWidget; _para2:T_XtBoolean);cdecl;external;

procedure XtSetMappedWhenManaged(_para1:TWidget; _para2:T_XtBoolean);cdecl;external;

function XtNameToWidget(_para1:TWidget; _XtString:T_Xconst):TWidget;cdecl;external;

function XtWindowToWidget(_para1:PTDisplay; _para2:TWindow):TWidget;cdecl;external;

function XtGetClassExtension(_para1:TWidgetClass; _para2:TCardinal; _para3:TXrmQuark; _para4:longint; _para5:TCardinal):TXtPointer;cdecl;external;

//// (* error 
////     ((void)( (arg).name = (n), (arg).value = (XtArgVal)(d) ))
in define line 1161 *)

function XtMergeArgLists(_para1:TArgList; _para2:TCardinal; _para3:TArgList; _para4:TCardinal):TArgList;cdecl;external;

    const
      XtVaNestedList = 'XtVaNestedList';      
      XtVaTypedArg = 'XtVaTypedArg';      
//// (* error 
//// ) _X_SENTINEL(0);
 in declarator_list *)
      var
 : TXtVarArgsList;

//// {$ifndef _XtIntrinsicP_h}



function XtDisplay(_para1:TWidget):^TDisplay;cdecl;external;

function XtDisplayOfObject(_para1:TWidget):^TDisplay;cdecl;external;

function XtScreen(_para1:TWidget):^TScreen;cdecl;external;

function XtScreenOfObject(_para1:TWidget):^TScreen;cdecl;external;

function XtWindow(_para1:TWidget):TWindow;cdecl;external;

function XtWindowOfObject(_para1:TWidget):TWindow;cdecl;external;

function XtName(_para1:TWidget):TString;cdecl;external;

function XtSuperclass(_para1:TWidget):TWidgetClass;cdecl;external;

function XtClass(_para1:TWidget):TWidgetClass;cdecl;external;

function XtParent(_para1:TWidget):TWidget;cdecl;external;
//// {$endif}

//// {$undef XtMapWidget}

procedure XtMapWidget(_para1:TWidget);cdecl;external;
    function XtMapWidget(widget : longint) : longint;    

//// {$undef XtUnmapWidget}
procedure XtUnmapWidget(_para1:TWidget);cdecl;external;
    function XtUnmapWidget(widget : longint) : longint;    


procedure XtAddCallback(_para1:TWidget; _XtString:T_Xconst; _para3:TXtCallbackProc; _para4:TXtPointer);cdecl;external;

procedure XtRemoveCallback(_para1:TWidget; _XtString:T_Xconst; _para3:TXtCallbackProc; _para4:TXtPointer);cdecl;external;

procedure XtAddCallbacks(_para1:TWidget; _XtString:T_Xconst; _para3:TXtCallbackList);cdecl;external;

procedure XtRemoveCallbacks(_para1:TWidget; _XtString:T_Xconst; _para3:TXtCallbackList);cdecl;external;

procedure XtRemoveAllCallbacks(_para1:TWidget; _XtString:T_Xconst);cdecl;external;

procedure XtCallCallbacks(_para1:TWidget; _XtString:T_Xconst; _para3:TXtPointer);cdecl;external;

procedure XtCallCallbackList(_para1:TWidget; _para2:TXtCallbackList; _para3:TXtPointer);cdecl;external;

function XtHasCallbacks(_para1:TWidget; _XtString:T_Xconst):TXtCallbackStatus;cdecl;external;


function XtMakeGeometryRequest(_para1:TWidget; _para2:PTXtWidgetGeometry; _para3:PTXtWidgetGeometry):TXtGeometryResult;cdecl;external;

function XtQueryGeometry(_para1:TWidget; _para2:PTXtWidgetGeometry; _para3:PTXtWidgetGeometry):TXtGeometryResult;cdecl;external;

function XtCreatePopupShell(_XtString:T_Xconst; _para2:TWidgetClass; _para3:TWidget; _para4:TArgList; _para5:TCardinal):TWidget;cdecl;external;
//// (* error 
//// ) _X_SENTINEL(0);
 in declarator_list *)
      var
 : TWidget;


procedure XtPopup(_para1:TWidget; _para2:TXtGrabKind);cdecl;external;

procedure XtPopupSpringLoaded(_para1:TWidget);cdecl;external;

procedure XtCallbackNone(_para1:TWidget; _para2:TXtPointer; _para3:TXtPointer);cdecl;external;

procedure XtCallbackNonexclusive(_para1:TWidget; _para2:TXtPointer; _para3:TXtPointer);cdecl;external;

procedure XtCallbackExclusive(_para1:TWidget; _para2:TXtPointer; _para3:TXtPointer);cdecl;external;

procedure XtPopdown(_para1:TWidget);cdecl;external;

procedure XtCallbackPopdown(_para1:TWidget; _para2:TXtPointer; _para3:TXtPointer);cdecl;external;

procedure XtMenuPopupAction(_para1:TWidget; _para2:PTXEvent; _para3:PTString; _para4:PTCardinal);cdecl;external;

function XtCreateWidget(_XtString:T_Xconst; _para2:TWidgetClass; _para3:TWidget; _para4:TArgList; _para5:TCardinal):TWidget;cdecl;external;

function XtCreateManagedWidget(_XtString:T_Xconst; _para2:TWidgetClass; _para3:TWidget; _para4:TArgList; _para5:TCardinal):TWidget;cdecl;external;
//// (* error 
//// ) _X_SENTINEL(0);
 in declarator_list *)
      var
 : TWidget;
//// (* error 
//// ) _X_SENTINEL(0);
 in declarator_list *)
 : TWidget;



function XtCreateApplicationShell(_XtString:T_Xconst; _para2:TWidgetClass; _para3:TArgList; _para4:TCardinal):TWidget;cdecl;external;

function XtAppCreateShell(_XtString:T_Xconst; _XtString:T_Xconst; _para3:TWidgetClass; _para4:PTDisplay; _para5:TArgList; 
               _para6:TCardinal):TWidget;cdecl;external;
//// (* error 
//// ) _X_SENTINEL(0);
 in declarator_list *)
      var
 : TWidget;


procedure XtToolkitInitialize;cdecl;external;

function XtSetLanguageProc(_para1:TXtAppContext; _para2:TXtLanguageProc; _para3:TXtPointer):TXtLanguageProc;cdecl;external;

procedure XtDisplayInitialize(_para1:TXtAppContext; _para2:PTDisplay; _XtString:T_Xconst; _XtString:T_Xconst; _para5:PTXrmOptionDescRec; 
                _para6:TCardinal; _para7:Plongint; _para8:PT_XtString);cdecl;external;

function XtOpenApplication(_para1:PTXtAppContext; _XtString:T_Xconst; _para3:TXrmOptionDescList; _para4:TCardinal; _para5:Plongint; 
               _para6:PT_XtString; _para7:PTString; _para8:TWidgetClass; _para9:TArgList; _para10:TCardinal):TWidget;cdecl;external;
//// (* error 
//// ) _X_SENTINEL(0);
 in declarator_list *)
      var
 : TWidget;



function XtAppInitialize(_para1:PTXtAppContext; _XtString:T_Xconst; _para3:TXrmOptionDescList; _para4:TCardinal; _para5:Plongint; 
               _para6:PT_XtString; _para7:PTString; _para8:TArgList; _para9:TCardinal):TWidget;cdecl;external;

//// (* error 
//// ) _X_SENTINEL(0);
 in declarator_list *)
      var
 : TWidget;



function XtInitialize(_XtString:T_Xconst; _XtString:T_Xconst; _para3:PTXrmOptionDescRec; _para4:TCardinal; _para5:Plongint; 
               _para6:PT_XtString):TWidget;cdecl;external;

function XtOpenDisplay(_para1:TXtAppContext; _XtString:T_Xconst; _XtString:T_Xconst; _XtString:T_Xconst; _para5:PTXrmOptionDescRec; 
               _para6:TCardinal; _para7:Plongint; _para8:PT_XtString):^TDisplay;cdecl;external;
function XtCreateApplicationContext:TXtAppContext;cdecl;external;

procedure XtAppSetFallbackResources(_para1:TXtAppContext; _para2:PTString);cdecl;external;

procedure XtDestroyApplicationContext(_para1:TXtAppContext);cdecl;external;

procedure XtInitializeWidgetClass(_para1:TWidgetClass);cdecl;external;

function XtWidgetToApplicationContext(_para1:TWidget):TXtAppContext;cdecl;external;

function XtDisplayToApplicationContext(_para1:PTDisplay):TXtAppContext;cdecl;external;

function XtDatabase(_para1:PTDisplay):TXrmDatabase;cdecl;external;

function XtScreenDatabase(_para1:PTScreen):TXrmDatabase;cdecl;external;

procedure XtCloseDisplay(_para1:PTDisplay);cdecl;external;

procedure XtGetApplicationResources(_para1:TWidget; _para2:TXtPointer; _para3:TXtResourceList; _para4:TCardinal; _para5:TArgList; 
                _para6:TCardinal);cdecl;external;
//// (* error 
//// ) _X_SENTINEL(0);
 in declarator_list *)
      var
 : pointer;


procedure XtGetSubresources(_para1:TWidget; _para2:TXtPointer; _XtString:T_Xconst; _XtString:T_Xconst; _para5:TXtResourceList; 
                _para6:TCardinal; _para7:TArgList; _para8:TCardinal);cdecl;external;
//// (* error 
//// ) _X_SENTINEL(0);
 in declarator_list *)
      var
 : pointer;


procedure XtSetValues(_para1:TWidget; _para2:TArgList; _para3:TCardinal);cdecl;external;
//// (* error 
//// ) _X_SENTINEL(0);
 in declarator_list *)
      var
 : pointer;


procedure XtGetValues(_para1:TWidget; _para2:TArgList; _para3:TCardinal);cdecl;external;
//// (* error 
//// ) _X_SENTINEL(0);
 in declarator_list *)
      var
 : pointer;


procedure XtSetSubvalues(_para1:TXtPointer; _para2:TXtResourceList; _para3:TCardinal; _para4:TArgList; _para5:TCardinal);cdecl;external;
//// (* error 
//// ) _X_SENTINEL(0);
 in declarator_list *)
      var
 : pointer;


procedure XtGetSubvalues(_para1:TXtPointer; _para2:TXtResourceList; _para3:TCardinal; _para4:TArgList; _para5:TCardinal);cdecl;external;
//// (* error 
//// ) _X_SENTINEL(0);
 in declarator_list *)
      var
 : pointer;


procedure XtGetResourceList(_para1:TWidgetClass; _para2:PTXtResourceList; _para3:PTCardinal);cdecl;external;

procedure XtGetConstraintResourceList(_para1:TWidgetClass; _para2:PTXtResourceList; _para3:PTCardinal);cdecl;external;
    function XtUnspecifiedPixmap : TPixmap;      

    const
      XtUnspecifiedShellInt = -(1);      

    function XtUnspecifiedWindow : TWindow;      

    function XtUnspecifiedWindowGroup : TWindow;      

    const
      XtCurrentDirectory = 'XtCurrentDirectory';      
      XtDefaultForeground = 'XtDefaultForeground';      
      XtDefaultBackground = 'XtDefaultBackground';      
      XtDefaultFont = 'XtDefaultFont';      
      XtDefaultFontSet = 'XtDefaultFontSet';      

    function XtOffset(p_type,field : longint) : TCardinal;    

//// {$ifdef offsetof}
    function XtOffsetOf(s_type,field : longint) : longint;    

//// {$else}
//// (* error 
//// #define XtOffsetOf(s_type,field) XtOffset(s_type*,field)
in define line 1675 *)
//// {$endif}







    type
      T_XtCheckpointTokenRec = record
          save_type : longint;
          interact_style : longint;
          shutdown : TBoolean;
          fast : TBoolean;
          cancel_shutdown : TBoolean;
          phase : longint;
          interact_dialog_type : longint;
          request_cancel : TBoolean;
          request_next_phase : TBoolean;
          save_success : TBoolean;
          _type : longint;
          widget : TWidget;
        end;
      TXtCheckpointTokenRec = T_XtCheckpointTokenRec;
      TXtCheckpointToken = ^T_XtCheckpointTokenRec;


function XtSessionGetToken(_para1:TWidget):TXtCheckpointToken;cdecl;external;

procedure XtSessionReturnToken(_para1:TXtCheckpointToken);cdecl;external;

function XtAppSetErrorMsgHandler(_para1:TXtAppContext; _X_NORETURN:TXtErrorMsgHandler):TXtErrorMsgHandler;cdecl;external;

procedure XtSetErrorMsgHandler(_X_NORETURN:TXtErrorMsgHandler);cdecl;external;

function XtAppSetWarningMsgHandler(_para1:TXtAppContext; _para2:TXtErrorMsgHandler):TXtErrorMsgHandler;cdecl;external;


procedure XtSetWarningMsgHandler(_para1:TXtErrorMsgHandler);cdecl;external;

//// (* error 
//// ) _X_NORETURN;
 in declarator_list *)
      var
 : pointer;


//// (* error 
//// ) _X_NORETURN;
 in declarator_list *)
 : pointer;


procedure XtAppWarningMsg(_para1:TXtAppContext; _XtString:T_Xconst; _XtString:T_Xconst; _XtString:T_Xconst; _XtString:T_Xconst; 
                _para6:PTString; _para7:PTCardinal);cdecl;external;


procedure XtWarningMsg(_XtString:T_Xconst; _XtString:T_Xconst; _XtString:T_Xconst; _XtString:T_Xconst; _para5:PTString; 
                _para6:PTCardinal);cdecl;external;
function XtAppSetErrorHandler(_para1:TXtAppContext; _X_NORETURN:TXtErrorHandler):TXtErrorHandler;cdecl;external;

procedure XtSetErrorHandler(_X_NORETURN:TXtErrorHandler);cdecl;external;

function XtAppSetWarningHandler(_para1:TXtAppContext; _para2:TXtErrorHandler):TXtErrorHandler;cdecl;external;


procedure XtSetWarningHandler(_para1:TXtErrorHandler);cdecl;external;

//// (* error 
//// ) _X_NORETURN;
 in declarator_list *)
      var
 : pointer;


//// (* error 
//// ) _X_NORETURN;
 in declarator_list *)
 : pointer;


procedure XtAppWarning(_para1:TXtAppContext; _XtString:T_Xconst);cdecl;external;


procedure XtWarning(_XtString:T_Xconst);cdecl;external;

function XtAppGetErrorDatabase(_para1:TXtAppContext):^TXrmDatabase;cdecl;external;

function XtGetErrorDatabase:^TXrmDatabase;cdecl;external;

procedure XtAppGetErrorDatabaseText(_para1:TXtAppContext; _XtString:T_Xconst; _XtString:T_Xconst; _XtString:T_Xconst; _XtString:T_Xconst; 
                _para6:T_XtString; _para7:longint; _para8:TXrmDatabase);cdecl;external;


procedure XtGetErrorDatabaseText(_XtString:T_Xconst; _XtString:T_Xconst; _XtString:T_Xconst; _XtString:T_Xconst; _para5:T_XtString; 
                _para6:longint);cdecl;external;


function XtMalloc(_para1:TCardinal):^char;cdecl;external;

function XtCalloc(_para1:TCardinal; _para2:TCardinal):^char;cdecl;external;

function XtRealloc(_para1:Pchar; _para2:TCardinal):^char;cdecl;external;

procedure XtFree(_para1:Pchar);cdecl;external;
//// {$ifndef _X_RESTRICT_KYWD}
//// {$define _X_RESTRICT_KYWD}    
//// {$endif}
//// (* error 
////     _Xconst char * _X_RESTRICT_KYWD format,
//// (* error 
////     ...
//// (* error 
//// ) _X_ATTRIBUTE_PRINTF(2,3);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// {$ifdef XTTRACEMEMORY}



function _XtMalloc(_para1:TCardinal; _para2:Pchar; _para3:longint):^char;cdecl;external;


function _XtRealloc(_para1:Pchar; _para2:TCardinal; _para3:Pchar; _para4:longint):^char;cdecl;external;


function _XtCalloc(_para1:TCardinal; _para2:TCardinal; _para3:Pchar; _para4:longint):^char;cdecl;external;


procedure _XtFree(_para1:Pchar);cdecl;external;

function _XtIsValidPointer(_para1:Pchar):TBoolean;cdecl;external;

procedure _XtPrintMemory(_para1:Pchar);cdecl;external;
    function XtMalloc(size : longint) : longint;    

    function XtRealloc(ptr,size : longint) : longint;    

    function XtCalloc(num,size : longint) : longint;    

    function XtFree(ptr : longint) : longint;    

//// {$endif}


    function XtNew(_type : longint) : pTtype;    

//// {$undef XtNewString}
function XtNewString(_para1:TString):TString;cdecl;external;
    function XtNewString(str : longint) : longint;    




function XtAddWorkProc(_para1:TXtWorkProc; _para2:TXtPointer):TXtWorkProcId;cdecl;external;

function XtAppAddWorkProc(_para1:TXtAppContext; _para2:TXtWorkProc; _para3:TXtPointer):TXtWorkProcId;cdecl;external;

procedure XtRemoveWorkProc(_para1:TXtWorkProcId);cdecl;external;


function XtGetGC(_para1:TWidget; _para2:TXtGCMask; _para3:PTXGCValues):TGC;cdecl;external;

function XtAllocateGC(_para1:TWidget; _para2:TCardinal; _para3:TXtGCMask; _para4:PTXGCValues; _para5:TXtGCMask; 
               _para6:TXtGCMask):TGC;cdecl;external;



procedure XtDestroyGC(_para1:TGC);cdecl;external;

procedure XtReleaseGC(_para1:TWidget; _para2:TGC);cdecl;external;

procedure XtAppReleaseCacheRefs(_para1:TXtAppContext; _para2:PTXtCacheRef);cdecl;external;


procedure XtCallbackReleaseCacheRef(_para1:TWidget; _para2:TXtPointer; _para3:TXtPointer);cdecl;external;


procedure XtCallbackReleaseCacheRefList(_para1:TWidget; _para2:TXtPointer; _para3:TXtPointer);cdecl;external;

procedure XtSetWMColormapWindows(_para1:TWidget; _para2:PTWidget; _para3:TCardinal);cdecl;external;

function XtFindFile(_XtString:T_Xconst; _para2:TSubstitution; _para3:TCardinal; _para4:TXtFilePredicate):T_XtString;cdecl;external;

function XtResolvePathname(_para1:PTDisplay; _XtString:T_Xconst; _XtString:T_Xconst; _XtString:T_Xconst; _XtString:T_Xconst; 
               _para6:TSubstitution; _para7:TCardinal; _para8:TXtFilePredicate):T_XtString;cdecl;external;

    function XT_CONVERT_FAIL : TAtom;      


procedure XtDisownSelection(_para1:TWidget; _para2:TAtom; _para3:TTime);cdecl;external;

procedure XtGetSelectionValue(_para1:TWidget; _para2:TAtom; _para3:TAtom; _para4:TXtSelectionCallbackProc; _para5:TXtPointer; 
                _para6:TTime);cdecl;external;

procedure XtGetSelectionValues(_para1:TWidget; _para2:TAtom; _para3:PTAtom; _para4:longint; _para5:TXtSelectionCallbackProc; 
                _para6:PTXtPointer; _para7:TTime);cdecl;external;

procedure XtAppSetSelectionTimeout(_para1:TXtAppContext; _para2:dword);cdecl;external;


procedure XtSetSelectionTimeout(_para1:dword);cdecl;external;

function XtAppGetSelectionTimeout(_para1:TXtAppContext):dword;cdecl;external;

function XtGetSelectionTimeout:dword;cdecl;external;

function XtGetSelectionRequest(_para1:TWidget; _para2:TAtom; _para3:TXtRequestId):^TXSelectionRequestEvent;cdecl;external;

procedure XtGetSelectionValueIncremental(_para1:TWidget; _para2:TAtom; _para3:TAtom; _para4:TXtSelectionCallbackProc; _para5:TXtPointer; 
                _para6:TTime);cdecl;external;

procedure XtGetSelectionValuesIncremental(_para1:TWidget; _para2:TAtom; _para3:PTAtom; _para4:longint; _para5:TXtSelectionCallbackProc; 
                _para6:PTXtPointer; _para7:TTime);cdecl;external;

procedure XtSetSelectionParameters(_para1:TWidget; _para2:TAtom; _para3:TAtom; _para4:TXtPointer; _para5:dword; 
                _para6:longint);cdecl;external;

procedure XtGetSelectionParameters(_para1:TWidget; _para2:TAtom; _para3:TXtRequestId; _para4:PTAtom; _para5:PTXtPointer; 
                _para6:Pdword; _para7:Plongint);cdecl;external;

procedure XtCreateSelectionRequest(_para1:TWidget; _para2:TAtom);cdecl;external;

procedure XtSendSelectionRequest(_para1:TWidget; _para2:TAtom; _para3:TTime);cdecl;external;

procedure XtCancelSelectionRequest(_para1:TWidget; _para2:TAtom);cdecl;external;

function XtReservePropertyAtom(_para1:TWidget):TAtom;cdecl;external;

procedure XtReleasePropertyAtom(_para1:TWidget; _para2:TAtom);cdecl;external;

procedure XtGrabKey(_para1:TWidget; _para2:T_XtKeyCode; _para3:TModifiers; _para4:T_XtBoolean; _para5:longint; 
                _para6:longint);cdecl;external;

procedure XtUngrabKey(_para1:TWidget; _para2:T_XtKeyCode; _para3:TModifiers);cdecl;external;

function XtGrabKeyboard(_para1:TWidget; _para2:T_XtBoolean; _para3:longint; _para4:longint; _para5:TTime):longint;cdecl;external;

procedure XtUngrabKeyboard(_para1:TWidget; _para2:TTime);cdecl;external;

procedure XtGrabButton(_para1:TWidget; _para2:longint; _para3:TModifiers; _para4:T_XtBoolean; _para5:dword; 
                _para6:longint; _para7:longint; _para8:TWindow; _para9:TCursor);cdecl;external;

procedure XtUngrabButton(_para1:TWidget; _para2:dword; _para3:TModifiers);cdecl;external;

function XtGrabPointer(_para1:TWidget; _para2:T_XtBoolean; _para3:dword; _para4:longint; _para5:longint; 
               _para6:TWindow; _para7:TCursor; _para8:TTime):longint;cdecl;external;

procedure XtUngrabPointer(_para1:TWidget; _para2:TTime);cdecl;external;

procedure XtGetApplicationNameAndClass(_para1:PTDisplay; _para2:PTString; _para3:PTString);cdecl;external;

procedure XtRegisterDrawable(_para1:PTDisplay; _para2:TDrawable; _para3:TWidget);cdecl;external;

procedure XtUnregisterDrawable(_para1:PTDisplay; _para2:TDrawable);cdecl;external;

function XtHooksOfDisplay(_para1:PTDisplay):TWidget;cdecl;external;
    type
      TXtCreateHookDataRec = record
          _type : TString;
          widget : TWidget;
          args : TArgList;
          num_args : TCardinal;
        end;
      TXtCreateHookData = ^TXtCreateHookDataRec;

      TXtChangeHookDataRec = record
          _type : TString;
          widget : TWidget;
          event_data : TXtPointer;
          num_event_data : TCardinal;
        end;
      TXtChangeHookData = ^TXtChangeHookDataRec;

      TXtChangeHookSetValuesDataRec = record
          old : TWidget;
          req : TWidget;
          args : TArgList;
          num_args : TCardinal;
        end;
      TXtChangeHookSetValuesData = ^TXtChangeHookSetValuesDataRec;

      TXtConfigureHookDataRec = record
          _type : TString;
          widget : TWidget;
          changeMask : TXtGeometryMask;
          changes : TXWindowChanges;
        end;
      TXtConfigureHookData = ^TXtConfigureHookDataRec;

      TXtGeometryHookDataRec = record
          _type : TString;
          widget : TWidget;
          request : ^TXtWidgetGeometry;
          reply : ^TXtWidgetGeometry;
          result : TXtGeometryResult;
        end;
      TXtGeometryHookData = ^TXtGeometryHookDataRec;

      TXtDestroyHookDataRec = record
          _type : TString;
          widget : TWidget;
        end;
      TXtDestroyHookData = ^TXtDestroyHookDataRec;


procedure XtGetDisplays(_para1:TXtAppContext; _para2:PPPTDisplay; _para3:PTCardinal);cdecl;external;
function XtToolkitThreadInitialize:TBoolean;cdecl;external;

procedure XtAppSetExitFlag(_para1:TXtAppContext);cdecl;external;

function XtAppGetExitFlag(_para1:TXtAppContext):TBoolean;cdecl;external;

procedure XtAppLock(_para1:TXtAppContext);cdecl;external;

procedure XtAppUnlock(_para1:TXtAppContext);cdecl;external;




function XtCvtStringToAcceleratorTable(_para1:PTDisplay; _para2:TXrmValuePtr; _para3:PTCardinal; _para4:TXrmValuePtr; _para5:TXrmValuePtr; 
               _para6:PTXtPointer):TBoolean;cdecl;external;


function XtCvtStringToAtom(_para1:PTDisplay; _para2:TXrmValuePtr; _para3:PTCardinal; _para4:TXrmValuePtr; _para5:TXrmValuePtr; 
               _para6:PTXtPointer):TBoolean;cdecl;external;


function XtCvtStringToBool(_para1:PTDisplay; _para2:TXrmValuePtr; _para3:PTCardinal; _para4:TXrmValuePtr; _para5:TXrmValuePtr; 
               _para6:PTXtPointer):TBoolean;cdecl;external;


function XtCvtStringToBoolean(_para1:PTDisplay; _para2:TXrmValuePtr; _para3:PTCardinal; _para4:TXrmValuePtr; _para5:TXrmValuePtr; 
               _para6:PTXtPointer):TBoolean;cdecl;external;


function XtCvtStringToCommandArgArray(_para1:PTDisplay; _para2:TXrmValuePtr; _para3:PTCardinal; _para4:TXrmValuePtr; _para5:TXrmValuePtr; 
               _para6:PTXtPointer):TBoolean;cdecl;external;


function XtCvtStringToCursor(_para1:PTDisplay; _para2:TXrmValuePtr; _para3:PTCardinal; _para4:TXrmValuePtr; _para5:TXrmValuePtr; 
               _para6:PTXtPointer):TBoolean;cdecl;external;


function XtCvtStringToDimension(_para1:PTDisplay; _para2:TXrmValuePtr; _para3:PTCardinal; _para4:TXrmValuePtr; _para5:TXrmValuePtr; 
               _para6:PTXtPointer):TBoolean;cdecl;external;


function XtCvtStringToDirectoryString(_para1:PTDisplay; _para2:TXrmValuePtr; _para3:PTCardinal; _para4:TXrmValuePtr; _para5:TXrmValuePtr; 
               _para6:PTXtPointer):TBoolean;cdecl;external;


function XtCvtStringToDisplay(_para1:PTDisplay; _para2:TXrmValuePtr; _para3:PTCardinal; _para4:TXrmValuePtr; _para5:TXrmValuePtr; 
               _para6:PTXtPointer):TBoolean;cdecl;external;


function XtCvtStringToFile(_para1:PTDisplay; _para2:TXrmValuePtr; _para3:PTCardinal; _para4:TXrmValuePtr; _para5:TXrmValuePtr; 
               _para6:PTXtPointer):TBoolean;cdecl;external;


function XtCvtStringToFloat(_para1:PTDisplay; _para2:TXrmValuePtr; _para3:PTCardinal; _para4:TXrmValuePtr; _para5:TXrmValuePtr; 
               _para6:PTXtPointer):TBoolean;cdecl;external;


function XtCvtStringToFont(_para1:PTDisplay; _para2:TXrmValuePtr; _para3:PTCardinal; _para4:TXrmValuePtr; _para5:TXrmValuePtr; 
               _para6:PTXtPointer):TBoolean;cdecl;external;


function XtCvtStringToFontSet(_para1:PTDisplay; _para2:TXrmValuePtr; _para3:PTCardinal; _para4:TXrmValuePtr; _para5:TXrmValuePtr; 
               _para6:PTXtPointer):TBoolean;cdecl;external;


function XtCvtStringToFontStruct(_para1:PTDisplay; _para2:TXrmValuePtr; _para3:PTCardinal; _para4:TXrmValuePtr; _para5:TXrmValuePtr; 
               _para6:PTXtPointer):TBoolean;cdecl;external;

function XtCvtStringToGravity(_para1:PTDisplay; _para2:TXrmValuePtr; _para3:PTCardinal; _para4:TXrmValuePtr; _para5:TXrmValuePtr; 
               _para6:PTXtPointer):TBoolean;cdecl;external;


function XtCvtStringToInitialState(_para1:PTDisplay; _para2:TXrmValuePtr; _para3:PTCardinal; _para4:TXrmValuePtr; _para5:TXrmValuePtr; 
               _para6:PTXtPointer):TBoolean;cdecl;external;


function XtCvtStringToInt(_para1:PTDisplay; _para2:TXrmValuePtr; _para3:PTCardinal; _para4:TXrmValuePtr; _para5:TXrmValuePtr; 
               _para6:PTXtPointer):TBoolean;cdecl;external;


function XtCvtStringToPixel(_para1:PTDisplay; _para2:TXrmValuePtr; _para3:PTCardinal; _para4:TXrmValuePtr; _para5:TXrmValuePtr; 
               _para6:PTXtPointer):TBoolean;cdecl;external;
    const
      XtCvtStringToPosition = XtCvtStringToShort;      



function XtCvtStringToRestartStyle(_para1:PTDisplay; _para2:TXrmValuePtr; _para3:PTCardinal; _para4:TXrmValuePtr; _para5:TXrmValuePtr; 
               _para6:PTXtPointer):TBoolean;cdecl;external;


function XtCvtStringToShort(_para1:PTDisplay; _para2:TXrmValuePtr; _para3:PTCardinal; _para4:TXrmValuePtr; _para5:TXrmValuePtr; 
               _para6:PTXtPointer):TBoolean;cdecl;external;


function XtCvtStringToTranslationTable(_para1:PTDisplay; _para2:TXrmValuePtr; _para3:PTCardinal; _para4:TXrmValuePtr; _para5:TXrmValuePtr; 
               _para6:PTXtPointer):TBoolean;cdecl;external;


function XtCvtStringToUnsignedChar(_para1:PTDisplay; _para2:TXrmValuePtr; _para3:PTCardinal; _para4:TXrmValuePtr; _para5:TXrmValuePtr; 
               _para6:PTXtPointer):TBoolean;cdecl;external;


function XtCvtStringToVisual(_para1:PTDisplay; _para2:TXrmValuePtr; _para3:PTCardinal; _para4:TXrmValuePtr; _para5:TXrmValuePtr; 
               _para6:PTXtPointer):TBoolean;cdecl;external;



function XtCvtIntToBool(_para1:PTDisplay; _para2:TXrmValuePtr; _para3:PTCardinal; _para4:TXrmValuePtr; _para5:TXrmValuePtr; 
               _para6:PTXtPointer):TBoolean;cdecl;external;


function XtCvtIntToBoolean(_para1:PTDisplay; _para2:TXrmValuePtr; _para3:PTCardinal; _para4:TXrmValuePtr; _para5:TXrmValuePtr; 
               _para6:PTXtPointer):TBoolean;cdecl;external;


function XtCvtIntToColor(_para1:PTDisplay; _para2:TXrmValuePtr; _para3:PTCardinal; _para4:TXrmValuePtr; _para5:TXrmValuePtr; 
               _para6:PTXtPointer):TBoolean;cdecl;external;
    const
      XtCvtIntToDimension = XtCvtIntToShort;      



function XtCvtIntToFloat(_para1:PTDisplay; _para2:TXrmValuePtr; _para3:PTCardinal; _para4:TXrmValuePtr; _para5:TXrmValuePtr; 
               _para6:PTXtPointer):TBoolean;cdecl;external;


function XtCvtIntToFont(_para1:PTDisplay; _para2:TXrmValuePtr; _para3:PTCardinal; _para4:TXrmValuePtr; _para5:TXrmValuePtr; 
               _para6:PTXtPointer):TBoolean;cdecl;external;


function XtCvtIntToPixel(_para1:PTDisplay; _para2:TXrmValuePtr; _para3:PTCardinal; _para4:TXrmValuePtr; _para5:TXrmValuePtr; 
               _para6:PTXtPointer):TBoolean;cdecl;external;


function XtCvtIntToPixmap(_para1:PTDisplay; _para2:TXrmValuePtr; _para3:PTCardinal; _para4:TXrmValuePtr; _para5:TXrmValuePtr; 
               _para6:PTXtPointer):TBoolean;cdecl;external;
    const
      XtCvtIntToPosition = XtCvtIntToShort;      



function XtCvtIntToShort(_para1:PTDisplay; _para2:TXrmValuePtr; _para3:PTCardinal; _para4:TXrmValuePtr; _para5:TXrmValuePtr; 
               _para6:PTXtPointer):TBoolean;cdecl;external;


function XtCvtIntToUnsignedChar(_para1:PTDisplay; _para2:TXrmValuePtr; _para3:PTCardinal; _para4:TXrmValuePtr; _para5:TXrmValuePtr; 
               _para6:PTXtPointer):TBoolean;cdecl;external;



function XtCvtColorToPixel(_para1:PTDisplay; _para2:TXrmValuePtr; _para3:PTCardinal; _para4:TXrmValuePtr; _para5:TXrmValuePtr; 
               _para6:PTXtPointer):TBoolean;cdecl;external;

    const
      XtCvtPixelToColor = XtCvtIntToColor;      
//// {$endif}


//// (* error 
//// /* DON'T ADD STUFF AFTER THIS #endif */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/EventI.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/EventI.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/EventI.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    Plongint  = ^longint;
    PWidget  = ^Widget;
    PXEvent  = ^XEvent;
    PXtEventTable  = ^XtEventTable;
    PXtGrabRec  = ^XtGrabRec;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _Event_h_}
//// {$define _Event_h_}
type
  TXtGrabList = ^T_XtGrabRec;
//// {$include "PassivGraI.h"}
//// (* error 
//// extern void _XtEventInitialize(
in declaration at line 68 *)


    type
      T_XtEventRec = record
          next : TXtEventTable;
          mask : TEventMask;
          proc : TXtEventHandler;
          closure : TXtPointer;
          flag0 : word;
        end;
      TXtEventRec = T_XtEventRec;

    const
      bm__XtEventRec_select = $1;
      bp__XtEventRec_select = 0;
      bm__XtEventRec_has_type_specifier = $2;
      bp__XtEventRec_has_type_specifier = 1;
      bm__XtEventRec_async = $4;
      bp__XtEventRec_async = 2;

    function select(var a : _XtEventRec) : dword;
    procedure set_select(var a : _XtEventRec; __select : dword);
    function has_type_specifier(var a : _XtEventRec) : dword;
    procedure set_has_type_specifier(var a : _XtEventRec; __has_type_specifier : dword);
    function async(var a : _XtEventRec) : dword;
    procedure set_async(var a : _XtEventRec; __async : dword);
    type
      T_XtGrabRec = record
          next : TXtGrabList;
          widget : TWidget;
          flag0 : word;
        end;
      TXtGrabRec = T_XtGrabRec;

    const
      bm__XtGrabRec_exclusive = $1;
      bp__XtGrabRec_exclusive = 0;
      bm__XtGrabRec_spring_loaded = $2;
      bp__XtGrabRec_spring_loaded = 1;

    function exclusive(var a : _XtGrabRec) : dword;
    procedure set_exclusive(var a : _XtGrabRec; __exclusive : dword);
    function spring_loaded(var a : _XtGrabRec) : dword;
    procedure set_spring_loaded(var a : _XtGrabRec; __spring_loaded : dword);
    type
      T_BlockHookRec = record
          next : ^T_BlockHookRec;
          app : TXtAppContext;
          proc : TXtBlockHookProc;
          closure : TXtPointer;
        end;
      TBlockHookRec = T_BlockHookRec;
      TBlockHook = ^T_BlockHookRec;


procedure _XtFreeEventTable(_para1:PTXtEventTable);cdecl;external;

function _XtOnGrabList(_para1:TWidget; _para2:PTXtGrabRec):TBoolean;cdecl;external;

procedure _XtRemoveAllInputs(_para1:TXtAppContext);cdecl;external;

procedure _XtRefreshMapping(_para1:PTXEvent; _para2:T_XtBoolean);cdecl;external;
procedure _XtSendFocusEvent(_para1:TWidget; _para2:longint);cdecl;external;

function _XtConvertTypeToMask(_para1:longint):TEventMask;cdecl;external;

function _XtFindRemapWidget(event:PTXEvent; widget:TWidget; mask:TEventMask; pdi:TXtPerDisplayInput):TWidget;cdecl;external;
procedure _XtUngrabBadGrabs(event:PTXEvent; widget:TWidget; mask:TEventMask; pdi:TXtPerDisplayInput);cdecl;external;
procedure _XtFillAncestorList(listPtr:PPTWidget; maxElemsPtr:Plongint; numElemsPtr:Plongint; start:TWidget; breakWidget:TWidget);cdecl;external;

      var
        XtAppPeekEvent_SkipTimer : TBoolean;cvar;external;
//// {$endif}

//// (* error 
//// #endif /* _Event_h_ */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Vendor.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Vendor.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Vendor.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XtVendor_h}
//// {$define _XtVendor_h}
//// {$include <X11/Intrinsic.h>}


type
  TVendorShellWidgetClass = ^T_VendorShellClassRec;
//// (* error 
//// externalref WidgetClass vendorShellWidgetClass;
 in declarator_list *)
//// {$endif}


//// (* error 
//// /* DON'T ADD STUFF AFTER THIS #endif */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/cursorfont.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/cursorfont.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/cursorfont.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _X11_CURSORFONT_H_}
//// {$define _X11_CURSORFONT_H_}

const
  XC_num_glyphs = 154;  
  XC_X_cursor = 0;  
  XC_arrow = 2;  
  XC_based_arrow_down = 4;  
  XC_based_arrow_up = 6;  
  XC_boat = 8;  
  XC_bogosity = 10;  
  XC_bottom_left_corner = 12;  
  XC_bottom_right_corner = 14;  
  XC_bottom_side = 16;  
  XC_bottom_tee = 18;  
  XC_box_spiral = 20;  
  XC_center_ptr = 22;  
  XC_circle = 24;  
  XC_clock = 26;  
  XC_coffee_mug = 28;  
  XC_cross = 30;  
  XC_cross_reverse = 32;  
  XC_crosshair = 34;  
  XC_diamond_cross = 36;  
  XC_dot = 38;  
  XC_dotbox = 40;  
  XC_double_arrow = 42;  
  XC_draft_large = 44;  
  XC_draft_small = 46;  
  XC_draped_box = 48;  
  XC_exchange = 50;  
  XC_fleur = 52;  
  XC_gobbler = 54;  
  XC_gumby = 56;  
  XC_hand1 = 58;  
  XC_hand2 = 60;  
  XC_heart = 62;  
  XC_icon = 64;  
  XC_iron_cross = 66;  
  XC_left_ptr = 68;  
  XC_left_side = 70;  
  XC_left_tee = 72;  
  XC_leftbutton = 74;  
  XC_ll_angle = 76;  
  XC_lr_angle = 78;  
  XC_man = 80;  
  XC_middlebutton = 82;  
  XC_mouse = 84;  
  XC_pencil = 86;  
  XC_pirate = 88;  
  XC_plus = 90;  
  XC_question_arrow = 92;  
  XC_right_ptr = 94;  
  XC_right_side = 96;  
  XC_right_tee = 98;  
  XC_rightbutton = 100;  
  XC_rtl_logo = 102;  
  XC_sailboat = 104;  
  XC_sb_down_arrow = 106;  
  XC_sb_h_double_arrow = 108;  
  XC_sb_left_arrow = 110;  
  XC_sb_right_arrow = 112;  
  XC_sb_up_arrow = 114;  
  XC_sb_v_double_arrow = 116;  
  XC_shuttle = 118;  
  XC_sizing = 120;  
  XC_spider = 122;  
  XC_spraycan = 124;  
  XC_star = 126;  
  XC_target = 128;  
  XC_tcross = 130;  
  XC_top_left_arrow = 132;  
  XC_top_left_corner = 134;  
  XC_top_right_corner = 136;  
  XC_top_side = 138;  
  XC_top_tee = 140;  
  XC_trek = 142;  
  XC_ul_angle = 144;  
  XC_umbrella = 146;  
  XC_ur_angle = 148;  
  XC_watch = 150;  
  XC_xterm = 152;  
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/StringDefs.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/StringDefs.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/StringDefs.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XtStringDefs_h_}
//// {$define _XtStringDefs_h_}
//// {$ifndef XTSTRINGDEFINES}
//// (* error 
//// #define _XtStringDefs_h_Const const
in define line 52 *)
//// {$endif}



//// {$ifdef XTSTRINGDEFINES}

    const
      XtNaccelerators = 'accelerators';      
      XtNallowHoriz = 'allowHoriz';      
      XtNallowVert = 'allowVert';      
      XtNancestorSensitive = 'ancestorSensitive';      
      XtNbackground = 'background';      
      XtNbackgroundPixmap = 'backgroundPixmap';      
      XtNbitmap = 'bitmap';      
      XtNborderColor = 'borderColor';      
      XtNborder = 'borderColor';      
      XtNborderPixmap = 'borderPixmap';      
      XtNborderWidth = 'borderWidth';      
      XtNcallback = 'callback';      
      XtNchildren = 'children';      
      XtNcolormap = 'colormap';      
      XtNdepth = 'depth';      
      XtNdestroyCallback = 'destroyCallback';      
      XtNeditType = 'editType';      
      XtNfile = 'file';      
      XtNfont = 'font';      
      XtNforceBars = 'forceBars';      
      XtNforeground = 'foreground';      
      XtNfunction = 'function';      
      XtNheight = 'height';      
      XtNhighlight = 'highlight';      
      XtNhSpace = 'hSpace';      
      XtNindex = 'index';      
      XtNinitialResourcesPersistent = 'initialResourcesPersistent';      
      XtNinnerHeight = 'innerHeight';      
      XtNinnerWidth = 'innerWidth';      
      XtNinnerWindow = 'innerWindow';      
      XtNinsertPosition = 'insertPosition';      
      XtNinternalHeight = 'internalHeight';      
      XtNinternalWidth = 'internalWidth';      
      XtNjumpProc = 'jumpProc';      
      XtNjustify = 'justify';      
      XtNknobHeight = 'knobHeight';      
      XtNknobIndent = 'knobIndent';      
      XtNknobPixel = 'knobPixel';      
      XtNknobWidth = 'knobWidth';      
      XtNlabel = 'label';      
      XtNlength = 'length';      
      XtNlowerRight = 'lowerRight';      
      XtNmappedWhenManaged = 'mappedWhenManaged';      
      XtNmenuEntry = 'menuEntry';      
      XtNname = 'name';      
      XtNnotify = 'notify';      
      XtNnumChildren = 'numChildren';      
      XtNorientation = 'orientation';      
      XtNparameter = 'parameter';      
      XtNpixmap = 'pixmap';      
      XtNpopupCallback = 'popupCallback';      
      XtNpopdownCallback = 'popdownCallback';      
      XtNresize = 'resize';      
      XtNreverseVideo = 'reverseVideo';      
      XtNscreen = 'screen';      
      XtNscrollProc = 'scrollProc';      
      XtNscrollDCursor = 'scrollDCursor';      
      XtNscrollHCursor = 'scrollHCursor';      
      XtNscrollLCursor = 'scrollLCursor';      
      XtNscrollRCursor = 'scrollRCursor';      
      XtNscrollUCursor = 'scrollUCursor';      
      XtNscrollVCursor = 'scrollVCursor';      
      XtNselection = 'selection';      
      XtNselectionArray = 'selectionArray';      
      XtNsensitive = 'sensitive';      
      XtNshown = 'shown';      
      XtNspace = 'space';      
      XtNstring = 'string';      
      XtNtextOptions = 'textOptions';      
      XtNtextSink = 'textSink';      
      XtNtextSource = 'textSource';      
      XtNthickness = 'thickness';      
      XtNthumb = 'thumb';      
      XtNthumbProc = 'thumbProc';      
      XtNtop = 'top';      
      XtNtranslations = 'translations';      
      XtNunrealizeCallback = 'unrealizeCallback';      
      XtNupdate = 'update';      
      XtNuseBottom = 'useBottom';      
      XtNuseRight = 'useRight';      
      XtNvalue = 'value';      
      XtNvSpace = 'vSpace';      
      XtNwidth = 'width';      
      XtNwindow = 'window';      
      XtNx = 'x';      
      XtNy = 'y';      
      XtCAccelerators = 'Accelerators';      
      XtCBackground = 'Background';      
      XtCBitmap = 'Bitmap';      
      XtCBoolean = 'Boolean';      
      XtCBorderColor = 'BorderColor';      
      XtCBorderWidth = 'BorderWidth';      
      XtCCallback = 'Callback';      
      XtCColormap = 'Colormap';      
      XtCColor = 'Color';      
      XtCCursor = 'Cursor';      
      XtCDepth = 'Depth';      
      XtCEditType = 'EditType';      
      XtCEventBindings = 'EventBindings';      
      XtCFile = 'File';      
      XtCFont = 'Font';      
      XtCForeground = 'Foreground';      
      XtCFraction = 'Fraction';      
      XtCFunction = 'Function';      
      XtCHeight = 'Height';      
      XtCHSpace = 'HSpace';      
      XtCIndex = 'Index';      
      XtCInitialResourcesPersistent = 'InitialResourcesPersistent';      
      XtCInsertPosition = 'InsertPosition';      
      XtCInterval = 'Interval';      
      XtCJustify = 'Justify';      
      XtCKnobIndent = 'KnobIndent';      
      XtCKnobPixel = 'KnobPixel';      
      XtCLabel = 'Label';      
      XtCLength = 'Length';      
      XtCMappedWhenManaged = 'MappedWhenManaged';      
      XtCMargin = 'Margin';      
      XtCMenuEntry = 'MenuEntry';      
      XtCNotify = 'Notify';      
      XtCOrientation = 'Orientation';      
      XtCParameter = 'Parameter';      
      XtCPixmap = 'Pixmap';      
      XtCPosition = 'Position';      
      XtCReadOnly = 'ReadOnly';      
      XtCResize = 'Resize';      
      XtCReverseVideo = 'ReverseVideo';      
      XtCScreen = 'Screen';      
      XtCScrollProc = 'ScrollProc';      
      XtCScrollDCursor = 'ScrollDCursor';      
      XtCScrollHCursor = 'ScrollHCursor';      
      XtCScrollLCursor = 'ScrollLCursor';      
      XtCScrollRCursor = 'ScrollRCursor';      
      XtCScrollUCursor = 'ScrollUCursor';      
      XtCScrollVCursor = 'ScrollVCursor';      
      XtCSelection = 'Selection';      
      XtCSensitive = 'Sensitive';      
      XtCSelectionArray = 'SelectionArray';      
      XtCSpace = 'Space';      
      XtCString = 'String';      
      XtCTextOptions = 'TextOptions';      
      XtCTextPosition = 'TextPosition';      
      XtCTextSink = 'TextSink';      
      XtCTextSource = 'TextSource';      
      XtCThickness = 'Thickness';      
      XtCThumb = 'Thumb';      
      XtCTranslations = 'Translations';      
      XtCValue = 'Value';      
      XtCVSpace = 'VSpace';      
      XtCWidth = 'Width';      
      XtCWindow = 'Window';      
      XtCX = 'X';      
      XtCY = 'Y';      
      XtRAcceleratorTable = 'AcceleratorTable';      
//// {$ifndef XtRAtom}

    const
      XtRAtom = 'Atom';      
//// {$endif}

    const
      XtRBitmap = 'Bitmap';      
      XtRBool = 'Bool';      
      XtRBoolean = 'Boolean';      
      XtRCallback = 'Callback';      
      XtRCallProc = 'CallProc';      
      XtRCardinal = 'Cardinal';      
      XtRColor = 'Color';      
      XtRColormap = 'Colormap';      
      XtRCursor = 'Cursor';      
      XtRDimension = 'Dimension';      
      XtRDisplay = 'Display';      
      XtREditMode = 'EditMode';      
      XtREnum = 'Enum';      
      XtRFile = 'File';      
      XtRFloat = 'Float';      
      XtRFont = 'Font';      
      XtRFontStruct = 'FontStruct';      
      XtRFunction = 'Function';      
      XtRGeometry = 'Geometry';      
      XtRImmediate = 'Immediate';      
      XtRInitialState = 'InitialState';      
      XtRInt = 'Int';      
      XtRJustify = 'Justify';      
      XtRLongBoolean = 'Bool';      
      XtRObject = 'Object';      
      XtROrientation = 'Orientation';      
      XtRPixel = 'Pixel';      
      XtRPixmap = 'Pixmap';      
      XtRPointer = 'Pointer';      
      XtRPosition = 'Position';      
      XtRScreen = 'Screen';      
      XtRShort = 'Short';      
      XtRString = 'String';      
      XtRStringArray = 'StringArray';      
      XtRStringTable = 'StringTable';      
      XtRUnsignedChar = 'UnsignedChar';      
      XtRTranslationTable = 'TranslationTable';      
      XtRVisual = 'Visual';      
      XtRWidget = 'Widget';      
      XtRWidgetClass = 'WidgetClass';      
      XtRWidgetList = 'WidgetList';      
      XtRWindow = 'Window';      
      XtEoff = 'off';      
      XtEfalse = 'false';      
      XtEno = 'no';      
      XtEon = 'on';      
      XtEtrue = 'true';      
      XtEyes = 'yes';      
      XtEvertical = 'vertical';      
      XtEhorizontal = 'horizontal';      
      XtEtextRead = 'read';      
      XtEtextAppend = 'append';      
      XtEtextEdit = 'edit';      
      XtExtdefaultbackground = 'xtdefaultbackground';      
      XtExtdefaultforeground = 'xtdefaultforeground';      
      XtExtdefaultfont = 'xtdefaultfont';      
      XtNfontSet = 'fontSet';      
      XtRFontSet = 'FontSet';      
      XtCFontSet = 'FontSet';      
      XtRGravity = 'Gravity';      
      XtNcreateHook = 'createHook';      
      XtNchangeHook = 'changeHook';      
      XtNconfigureHook = 'configureHook';      
      XtNgeometryHook = 'geometryHook';      
      XtNdestroyHook = 'destroyHook';      
      XtNshells = 'shells';      
      XtNnumShells = 'numShells';      
      XtRCommandArgArray = 'CommandArgArray';      
      XtRDirectoryString = 'DirectoryString';      
      XtREnvironmentArray = 'EnvironmentArray';      
      XtRRestartStyle = 'RestartStyle';      
      XtRSmcConn = 'SmcConn';      
      XtHcreate = 'Xtcreate';      
      XtHsetValues = 'XtsetValues';      
      XtHmanageChildren = 'XtmanageChildren';      
      XtHunmanageChildren = 'XtunmanageChildren';      
      XtHmanageSet = 'XtmanageSet';      
      XtHunmanageSet = 'XtunmanageSet';      
      XtHrealizeWidget = 'XtrealizeWidget';      
      XtHunrealizeWidget = 'XtunrealizeWidget';      
      XtHaddCallback = 'XtaddCallback';      
      XtHaddCallbacks = 'XtaddCallbacks';      
      XtHremoveCallback = 'XtremoveCallback';      
      XtHremoveCallbacks = 'XtremoveCallbacks';      
      XtHremoveAllCallbacks = 'XtremoveAllCallbacks';      
      XtHaugmentTranslations = 'XtaugmentTranslations';      
      XtHoverrideTranslations = 'XtoverrideTranslations';      
      XtHuninstallTranslations = 'XtuninstallTranslations';      
      XtHsetKeyboardFocus = 'XtsetKeyboardFocus';      
      XtHsetWMColormapWindows = 'XtsetWMColormapWindows';      
      XtHsetMappedWhenManaged = 'XtsetMappedWhenManaged';      
      XtHmapWidget = 'XtmapWidget';      
      XtHunmapWidget = 'XtunmapWidget';      
      XtHpopup = 'Xtpopup';      
      XtHpopupSpringLoaded = 'XtpopupSpringLoaded';      
      XtHpopdown = 'Xtpopdown';      
      XtHconfigure = 'Xtconfigure';      
      XtHpreGeometry = 'XtpreGeometry';      
      XtHpostGeometry = 'XtpostGeometry';      
      XtHdestroy = 'Xtdestroy';      
//// {$else}
//// (* error 
//// extern _XtStringDefs_h_Const char XtStrings[];
in declaration at line 316 *)
//// {$ifndef XtNaccelerators}

    function XtNaccelerators : TString;      

//// {$endif}
//// {$ifndef XtNallowHoriz}

    function XtNallowHoriz : TString;      

//// {$endif}
//// {$ifndef XtNallowVert}

    function XtNallowVert : TString;      

//// {$endif}
//// {$ifndef XtNancestorSensitive}

    function XtNancestorSensitive : TString;      

//// {$endif}
//// {$ifndef XtNbackground}

    function XtNbackground : TString;      

//// {$endif}
//// {$ifndef XtNbackgroundPixmap}

    function XtNbackgroundPixmap : TString;      

//// {$endif}
//// {$ifndef XtNbitmap}

    function XtNbitmap : TString;      

//// {$endif}
//// {$ifndef XtNborderColor}

    function XtNborderColor : TString;      

//// {$endif}
//// {$ifndef XtNborder}

    function XtNborder : TString;      

//// {$endif}
//// {$ifndef XtNborderPixmap}

    function XtNborderPixmap : TString;      

//// {$endif}
//// {$ifndef XtNborderWidth}

    function XtNborderWidth : TString;      

//// {$endif}
//// {$ifndef XtNcallback}

    function XtNcallback : TString;      

//// {$endif}
//// {$ifndef XtNchildren}

    function XtNchildren : TString;      

//// {$endif}
//// {$ifndef XtNcolormap}

    function XtNcolormap : TString;      

//// {$endif}
//// {$ifndef XtNdepth}

    function XtNdepth : TString;      

//// {$endif}
//// {$ifndef XtNdestroyCallback}

    function XtNdestroyCallback : TString;      

//// {$endif}
//// {$ifndef XtNeditType}

    function XtNeditType : TString;      

//// {$endif}
//// {$ifndef XtNfile}

    function XtNfile : TString;      

//// {$endif}
//// {$ifndef XtNfont}

    function XtNfont : TString;      

//// {$endif}
//// {$ifndef XtNforceBars}

    function XtNforceBars : TString;      

//// {$endif}
//// {$ifndef XtNforeground}

    function XtNforeground : TString;      

//// {$endif}
//// {$ifndef XtNfunction}

    function XtNfunction : TString;      

//// {$endif}
//// {$ifndef XtNheight}

    function XtNheight : TString;      

//// {$endif}
//// {$ifndef XtNhighlight}

    function XtNhighlight : TString;      

//// {$endif}
//// {$ifndef XtNhSpace}

    function XtNhSpace : TString;      

//// {$endif}
//// {$ifndef XtNindex}

    function XtNindex : TString;      

//// {$endif}
//// {$ifndef XtNinitialResourcesPersistent}

    function XtNinitialResourcesPersistent : TString;      

//// {$endif}
//// {$ifndef XtNinnerHeight}

    function XtNinnerHeight : TString;      

//// {$endif}
//// {$ifndef XtNinnerWidth}

    function XtNinnerWidth : TString;      

//// {$endif}
//// {$ifndef XtNinnerWindow}

    function XtNinnerWindow : TString;      

//// {$endif}
//// {$ifndef XtNinsertPosition}

    function XtNinsertPosition : TString;      

//// {$endif}
//// {$ifndef XtNinternalHeight}

    function XtNinternalHeight : TString;      

//// {$endif}
//// {$ifndef XtNinternalWidth}

    function XtNinternalWidth : TString;      

//// {$endif}
//// {$ifndef XtNjumpProc}

    function XtNjumpProc : TString;      

//// {$endif}
//// {$ifndef XtNjustify}

    function XtNjustify : TString;      

//// {$endif}
//// {$ifndef XtNknobHeight}

    function XtNknobHeight : TString;      

//// {$endif}
//// {$ifndef XtNknobIndent}

    function XtNknobIndent : TString;      

//// {$endif}
//// {$ifndef XtNknobPixel}

    function XtNknobPixel : TString;      

//// {$endif}
//// {$ifndef XtNknobWidth}

    function XtNknobWidth : TString;      

//// {$endif}
//// {$ifndef XtNlabel}

    function XtNlabel : TString;      

//// {$endif}
//// {$ifndef XtNlength}

    function XtNlength : TString;      

//// {$endif}
//// {$ifndef XtNlowerRight}

    function XtNlowerRight : TString;      

//// {$endif}
//// {$ifndef XtNmappedWhenManaged}

    function XtNmappedWhenManaged : TString;      

//// {$endif}
//// {$ifndef XtNmenuEntry}

    function XtNmenuEntry : TString;      

//// {$endif}
//// {$ifndef XtNname}

    function XtNname : TString;      

//// {$endif}
//// {$ifndef XtNnotify}

    function XtNnotify : TString;      

//// {$endif}
//// {$ifndef XtNnumChildren}

    function XtNnumChildren : TString;      

//// {$endif}
//// {$ifndef XtNorientation}

    function XtNorientation : TString;      

//// {$endif}
//// {$ifndef XtNparameter}

    function XtNparameter : TString;      

//// {$endif}
//// {$ifndef XtNpixmap}

    function XtNpixmap : TString;      

//// {$endif}
//// {$ifndef XtNpopupCallback}

    function XtNpopupCallback : TString;      

//// {$endif}
//// {$ifndef XtNpopdownCallback}

    function XtNpopdownCallback : TString;      

//// {$endif}
//// {$ifndef XtNresize}

    function XtNresize : TString;      

//// {$endif}
//// {$ifndef XtNreverseVideo}

    function XtNreverseVideo : TString;      

//// {$endif}
//// {$ifndef XtNscreen}

    function XtNscreen : TString;      

//// {$endif}
//// {$ifndef XtNscrollProc}

    function XtNscrollProc : TString;      

//// {$endif}
//// {$ifndef XtNscrollDCursor}

    function XtNscrollDCursor : TString;      

//// {$endif}
//// {$ifndef XtNscrollHCursor}

    function XtNscrollHCursor : TString;      

//// {$endif}
//// {$ifndef XtNscrollLCursor}

    function XtNscrollLCursor : TString;      

//// {$endif}
//// {$ifndef XtNscrollRCursor}

    function XtNscrollRCursor : TString;      

//// {$endif}
//// {$ifndef XtNscrollUCursor}

    function XtNscrollUCursor : TString;      

//// {$endif}
//// {$ifndef XtNscrollVCursor}

    function XtNscrollVCursor : TString;      

//// {$endif}
//// {$ifndef XtNselection}

    function XtNselection : TString;      

//// {$endif}
//// {$ifndef XtNselectionArray}

    function XtNselectionArray : TString;      

//// {$endif}
//// {$ifndef XtNsensitive}

    function XtNsensitive : TString;      

//// {$endif}
//// {$ifndef XtNshown}

    function XtNshown : TString;      

//// {$endif}
//// {$ifndef XtNspace}

    function XtNspace : TString;      

//// {$endif}
//// {$ifndef XtNstring}

    function XtNstring : TString;      

//// {$endif}
//// {$ifndef XtNtextOptions}

    function XtNtextOptions : TString;      

//// {$endif}
//// {$ifndef XtNtextSink}

    function XtNtextSink : TString;      

//// {$endif}
//// {$ifndef XtNtextSource}

    function XtNtextSource : TString;      

//// {$endif}
//// {$ifndef XtNthickness}

    function XtNthickness : TString;      

//// {$endif}
//// {$ifndef XtNthumb}

    function XtNthumb : TString;      

//// {$endif}
//// {$ifndef XtNthumbProc}

    function XtNthumbProc : TString;      

//// {$endif}
//// {$ifndef XtNtop}

    function XtNtop : TString;      

//// {$endif}
//// {$ifndef XtNtranslations}

    function XtNtranslations : TString;      

//// {$endif}
//// {$ifndef XtNunrealizeCallback}

    function XtNunrealizeCallback : TString;      

//// {$endif}
//// {$ifndef XtNupdate}

    function XtNupdate : TString;      

//// {$endif}
//// {$ifndef XtNuseBottom}

    function XtNuseBottom : TString;      

//// {$endif}
//// {$ifndef XtNuseRight}

    function XtNuseRight : TString;      

//// {$endif}
//// {$ifndef XtNvalue}

    function XtNvalue : TString;      

//// {$endif}
//// {$ifndef XtNvSpace}

    function XtNvSpace : TString;      

//// {$endif}
//// {$ifndef XtNwidth}

    function XtNwidth : TString;      

//// {$endif}
//// {$ifndef XtNwindow}

    function XtNwindow : TString;      

//// {$endif}
//// {$ifndef XtNx}

    function XtNx : TString;      

//// {$endif}
//// {$ifndef XtNy}

    function XtNy : TString;      

//// {$endif}
//// {$ifndef XtCAccelerators}

    function XtCAccelerators : TString;      

//// {$endif}
//// {$ifndef XtCBackground}

    function XtCBackground : TString;      

//// {$endif}
//// {$ifndef XtCBitmap}

    function XtCBitmap : TString;      

//// {$endif}
//// {$ifndef XtCBoolean}

    function XtCBoolean : TString;      

//// {$endif}
//// {$ifndef XtCBorderColor}

    function XtCBorderColor : TString;      

//// {$endif}
//// {$ifndef XtCBorderWidth}

    function XtCBorderWidth : TString;      

//// {$endif}
//// {$ifndef XtCCallback}

    function XtCCallback : TString;      

//// {$endif}
//// {$ifndef XtCColormap}

    function XtCColormap : TString;      

//// {$endif}
//// {$ifndef XtCColor}

    function XtCColor : TString;      

//// {$endif}
//// {$ifndef XtCCursor}

    function XtCCursor : TString;      

//// {$endif}
//// {$ifndef XtCDepth}

    function XtCDepth : TString;      

//// {$endif}
//// {$ifndef XtCEditType}

    function XtCEditType : TString;      

//// {$endif}
//// {$ifndef XtCEventBindings}

    function XtCEventBindings : TString;      

//// {$endif}
//// {$ifndef XtCFile}

    function XtCFile : TString;      

//// {$endif}
//// {$ifndef XtCFont}

    function XtCFont : TString;      

//// {$endif}
//// {$ifndef XtCForeground}

    function XtCForeground : TString;      

//// {$endif}
//// {$ifndef XtCFraction}

    function XtCFraction : TString;      

//// {$endif}
//// {$ifndef XtCFunction}

    function XtCFunction : TString;      

//// {$endif}
//// {$ifndef XtCHeight}

    function XtCHeight : TString;      

//// {$endif}
//// {$ifndef XtCHSpace}

    function XtCHSpace : TString;      

//// {$endif}
//// {$ifndef XtCIndex}

    function XtCIndex : TString;      

//// {$endif}
//// {$ifndef XtCInitialResourcesPersistent}

    function XtCInitialResourcesPersistent : TString;      

//// {$endif}
//// {$ifndef XtCInsertPosition}

    function XtCInsertPosition : TString;      

//// {$endif}
//// {$ifndef XtCInterval}

    function XtCInterval : TString;      

//// {$endif}
//// {$ifndef XtCJustify}

    function XtCJustify : TString;      

//// {$endif}
//// {$ifndef XtCKnobIndent}

    function XtCKnobIndent : TString;      

//// {$endif}
//// {$ifndef XtCKnobPixel}

    function XtCKnobPixel : TString;      

//// {$endif}
//// {$ifndef XtCLabel}

    function XtCLabel : TString;      

//// {$endif}
//// {$ifndef XtCLength}

    function XtCLength : TString;      

//// {$endif}
//// {$ifndef XtCMappedWhenManaged}

    function XtCMappedWhenManaged : TString;      

//// {$endif}
//// {$ifndef XtCMargin}

    function XtCMargin : TString;      

//// {$endif}
//// {$ifndef XtCMenuEntry}

    function XtCMenuEntry : TString;      

//// {$endif}
//// {$ifndef XtCNotify}

    function XtCNotify : TString;      

//// {$endif}
//// {$ifndef XtCOrientation}

    function XtCOrientation : TString;      

//// {$endif}
//// {$ifndef XtCParameter}

    function XtCParameter : TString;      

//// {$endif}
//// {$ifndef XtCPixmap}

    function XtCPixmap : TString;      

//// {$endif}
//// {$ifndef XtCPosition}

    function XtCPosition : TString;      

//// {$endif}
//// {$ifndef XtCReadOnly}

    function XtCReadOnly : TString;      

//// {$endif}
//// {$ifndef XtCResize}

    function XtCResize : TString;      

//// {$endif}
//// {$ifndef XtCReverseVideo}

    function XtCReverseVideo : TString;      

//// {$endif}
//// {$ifndef XtCScreen}

    function XtCScreen : TString;      

//// {$endif}
//// {$ifndef XtCScrollProc}

    function XtCScrollProc : TString;      

//// {$endif}
//// {$ifndef XtCScrollDCursor}

    function XtCScrollDCursor : TString;      

//// {$endif}
//// {$ifndef XtCScrollHCursor}

    function XtCScrollHCursor : TString;      

//// {$endif}
//// {$ifndef XtCScrollLCursor}

    function XtCScrollLCursor : TString;      

//// {$endif}
//// {$ifndef XtCScrollRCursor}

    function XtCScrollRCursor : TString;      

//// {$endif}
//// {$ifndef XtCScrollUCursor}

    function XtCScrollUCursor : TString;      

//// {$endif}
//// {$ifndef XtCScrollVCursor}

    function XtCScrollVCursor : TString;      

//// {$endif}
//// {$ifndef XtCSelection}

    function XtCSelection : TString;      

//// {$endif}
//// {$ifndef XtCSensitive}

    function XtCSensitive : TString;      

//// {$endif}
//// {$ifndef XtCSelectionArray}

    function XtCSelectionArray : TString;      

//// {$endif}
//// {$ifndef XtCSpace}

    function XtCSpace : TString;      

//// {$endif}
//// {$ifndef XtCString}

    function XtCString : TString;      

//// {$endif}
//// {$ifndef XtCTextOptions}

    function XtCTextOptions : TString;      

//// {$endif}
//// {$ifndef XtCTextPosition}

    function XtCTextPosition : TString;      

//// {$endif}
//// {$ifndef XtCTextSink}

    function XtCTextSink : TString;      

//// {$endif}
//// {$ifndef XtCTextSource}

    function XtCTextSource : TString;      

//// {$endif}
//// {$ifndef XtCThickness}

    function XtCThickness : TString;      

//// {$endif}
//// {$ifndef XtCThumb}

    function XtCThumb : TString;      

//// {$endif}
//// {$ifndef XtCTranslations}

    function XtCTranslations : TString;      

//// {$endif}
//// {$ifndef XtCValue}

    function XtCValue : TString;      

//// {$endif}
//// {$ifndef XtCVSpace}

    function XtCVSpace : TString;      

//// {$endif}
//// {$ifndef XtCWidth}

    function XtCWidth : TString;      

//// {$endif}
//// {$ifndef XtCWindow}

    function XtCWindow : TString;      

//// {$endif}
//// {$ifndef XtCX}

    function XtCX : TString;      

//// {$endif}
//// {$ifndef XtCY}

    function XtCY : TString;      

//// {$endif}
//// {$ifndef XtRAcceleratorTable}

    function XtRAcceleratorTable : TString;      

//// {$endif}
//// {$ifndef XtRAtom}

    function XtRAtom : TString;      

//// {$endif}
//// {$ifndef XtRBitmap}

    function XtRBitmap : TString;      

//// {$endif}
//// {$ifndef XtRBool}

    function XtRBool : TString;      

//// {$endif}
//// {$ifndef XtRBoolean}

    function XtRBoolean : TString;      

//// {$endif}
//// {$ifndef XtRCallback}

    function XtRCallback : TString;      

//// {$endif}
//// {$ifndef XtRCallProc}

    function XtRCallProc : TString;      

//// {$endif}
//// {$ifndef XtRCardinal}

    function XtRCardinal : TString;      

//// {$endif}
//// {$ifndef XtRColor}

    function XtRColor : TString;      

//// {$endif}
//// {$ifndef XtRColormap}

    function XtRColormap : TString;      

//// {$endif}
//// {$ifndef XtRCursor}

    function XtRCursor : TString;      

//// {$endif}
//// {$ifndef XtRDimension}

    function XtRDimension : TString;      

//// {$endif}
//// {$ifndef XtRDisplay}

    function XtRDisplay : TString;      

//// {$endif}
//// {$ifndef XtREditMode}

    function XtREditMode : TString;      

//// {$endif}
//// {$ifndef XtREnum}

    function XtREnum : TString;      

//// {$endif}
//// {$ifndef XtRFile}

    function XtRFile : TString;      

//// {$endif}
//// {$ifndef XtRFloat}

    function XtRFloat : TString;      

//// {$endif}
//// {$ifndef XtRFont}

    function XtRFont : TString;      

//// {$endif}
//// {$ifndef XtRFontStruct}

    function XtRFontStruct : TString;      

//// {$endif}
//// {$ifndef XtRFunction}

    function XtRFunction : TString;      

//// {$endif}
//// {$ifndef XtRGeometry}

    function XtRGeometry : TString;      

//// {$endif}
//// {$ifndef XtRImmediate}

    function XtRImmediate : TString;      

//// {$endif}
//// {$ifndef XtRInitialState}

    function XtRInitialState : TString;      

//// {$endif}
//// {$ifndef XtRInt}

    function XtRInt : TString;      

//// {$endif}
//// {$ifndef XtRJustify}

    function XtRJustify : TString;      

//// {$endif}
//// {$ifndef XtRLongBoolean}

    function XtRLongBoolean : TString;      

//// {$endif}
//// {$ifndef XtRObject}

    function XtRObject : TString;      

//// {$endif}
//// {$ifndef XtROrientation}

    function XtROrientation : TString;      

//// {$endif}
//// {$ifndef XtRPixel}

    function XtRPixel : TString;      

//// {$endif}
//// {$ifndef XtRPixmap}

    function XtRPixmap : TString;      

//// {$endif}
//// {$ifndef XtRPointer}

    function XtRPointer : TString;      

//// {$endif}
//// {$ifndef XtRPosition}

    function XtRPosition : TString;      

//// {$endif}
//// {$ifndef XtRScreen}

    function XtRScreen : TString;      

//// {$endif}
//// {$ifndef XtRShort}

    function XtRShort : TString;      

//// {$endif}
//// {$ifndef XtRString}

    function XtRString : TString;      

//// {$endif}
//// {$ifndef XtRStringArray}

    function XtRStringArray : TString;      

//// {$endif}
//// {$ifndef XtRStringTable}

    function XtRStringTable : TString;      

//// {$endif}
//// {$ifndef XtRUnsignedChar}

    function XtRUnsignedChar : TString;      

//// {$endif}
//// {$ifndef XtRTranslationTable}

    function XtRTranslationTable : TString;      

//// {$endif}
//// {$ifndef XtRVisual}

    function XtRVisual : TString;      

//// {$endif}
//// {$ifndef XtRWidget}

    function XtRWidget : TString;      

//// {$endif}
//// {$ifndef XtRWidgetClass}

    function XtRWidgetClass : TString;      

//// {$endif}
//// {$ifndef XtRWidgetList}

    function XtRWidgetList : TString;      

//// {$endif}
//// {$ifndef XtRWindow}

    function XtRWindow : TString;      

//// {$endif}
//// {$ifndef XtEoff}

    function XtEoff : TString;      

//// {$endif}
//// {$ifndef XtEfalse}

    function XtEfalse : TString;      

//// {$endif}
//// {$ifndef XtEno}

    function XtEno : TString;      

//// {$endif}
//// {$ifndef XtEon}

    function XtEon : TString;      

//// {$endif}
//// {$ifndef XtEtrue}

    function XtEtrue : TString;      

//// {$endif}
//// {$ifndef XtEyes}

    function XtEyes : TString;      

//// {$endif}
//// {$ifndef XtEvertical}

    function XtEvertical : TString;      

//// {$endif}
//// {$ifndef XtEhorizontal}

    function XtEhorizontal : TString;      

//// {$endif}
//// {$ifndef XtEtextRead}

    function XtEtextRead : TString;      

//// {$endif}
//// {$ifndef XtEtextAppend}

    function XtEtextAppend : TString;      

//// {$endif}
//// {$ifndef XtEtextEdit}

    function XtEtextEdit : TString;      

//// {$endif}
//// {$ifndef XtExtdefaultbackground}

    function XtExtdefaultbackground : TString;      

//// {$endif}
//// {$ifndef XtExtdefaultforeground}

    function XtExtdefaultforeground : TString;      

//// {$endif}
//// {$ifndef XtExtdefaultfont}

    function XtExtdefaultfont : TString;      

//// {$endif}
//// {$ifndef XtNfontSet}

    function XtNfontSet : TString;      

//// {$endif}
//// {$ifndef XtRFontSet}

    function XtRFontSet : TString;      

//// {$endif}
//// {$ifndef XtCFontSet}

    function XtCFontSet : TString;      

//// {$endif}
//// {$ifndef XtRGravity}

    function XtRGravity : TString;      

//// {$endif}
//// {$ifndef XtNcreateHook}

    function XtNcreateHook : TString;      

//// {$endif}
//// {$ifndef XtNchangeHook}

    function XtNchangeHook : TString;      

//// {$endif}
//// {$ifndef XtNconfigureHook}

    function XtNconfigureHook : TString;      

//// {$endif}
//// {$ifndef XtNgeometryHook}

    function XtNgeometryHook : TString;      

//// {$endif}
//// {$ifndef XtNdestroyHook}

    function XtNdestroyHook : TString;      

//// {$endif}
//// {$ifndef XtNshells}

    function XtNshells : TString;      

//// {$endif}
//// {$ifndef XtNnumShells}

    function XtNnumShells : TString;      

//// {$endif}
//// {$ifndef XtRCommandArgArray}

    function XtRCommandArgArray : TString;      

//// {$endif}
//// {$ifndef XtRDirectoryString}

    function XtRDirectoryString : TString;      

//// {$endif}
//// {$ifndef XtREnvironmentArray}

    function XtREnvironmentArray : TString;      

//// {$endif}
//// {$ifndef XtRRestartStyle}

    function XtRRestartStyle : TString;      

//// {$endif}
//// {$ifndef XtRSmcConn}

    function XtRSmcConn : TString;      

//// {$endif}
//// {$ifndef XtHcreate}

    function XtHcreate : TString;      

//// {$endif}
//// {$ifndef XtHsetValues}

    function XtHsetValues : TString;      

//// {$endif}
//// {$ifndef XtHmanageChildren}

    function XtHmanageChildren : TString;      

//// {$endif}
//// {$ifndef XtHunmanageChildren}

    function XtHunmanageChildren : TString;      

//// {$endif}
//// {$ifndef XtHmanageSet}

    function XtHmanageSet : TString;      

//// {$endif}
//// {$ifndef XtHunmanageSet}

    function XtHunmanageSet : TString;      

//// {$endif}
//// {$ifndef XtHrealizeWidget}

    function XtHrealizeWidget : TString;      

//// {$endif}
//// {$ifndef XtHunrealizeWidget}

    function XtHunrealizeWidget : TString;      

//// {$endif}
//// {$ifndef XtHaddCallback}

    function XtHaddCallback : TString;      

//// {$endif}
//// {$ifndef XtHaddCallbacks}

    function XtHaddCallbacks : TString;      

//// {$endif}
//// {$ifndef XtHremoveCallback}

    function XtHremoveCallback : TString;      

//// {$endif}
//// {$ifndef XtHremoveCallbacks}

    function XtHremoveCallbacks : TString;      

//// {$endif}
//// {$ifndef XtHremoveAllCallbacks}

    function XtHremoveAllCallbacks : TString;      

//// {$endif}
//// {$ifndef XtHaugmentTranslations}

    function XtHaugmentTranslations : TString;      

//// {$endif}
//// {$ifndef XtHoverrideTranslations}

    function XtHoverrideTranslations : TString;      

//// {$endif}
//// {$ifndef XtHuninstallTranslations}

    function XtHuninstallTranslations : TString;      

//// {$endif}
//// {$ifndef XtHsetKeyboardFocus}

    function XtHsetKeyboardFocus : TString;      

//// {$endif}
//// {$ifndef XtHsetWMColormapWindows}

    function XtHsetWMColormapWindows : TString;      

//// {$endif}
//// {$ifndef XtHsetMappedWhenManaged}

    function XtHsetMappedWhenManaged : TString;      

//// {$endif}
//// {$ifndef XtHmapWidget}

    function XtHmapWidget : TString;      

//// {$endif}
//// {$ifndef XtHunmapWidget}

    function XtHunmapWidget : TString;      

//// {$endif}
//// {$ifndef XtHpopup}

    function XtHpopup : TString;      

//// {$endif}
//// {$ifndef XtHpopupSpringLoaded}

    function XtHpopupSpringLoaded : TString;      

//// {$endif}
//// {$ifndef XtHpopdown}

    function XtHpopdown : TString;      

//// {$endif}
//// {$ifndef XtHconfigure}

    function XtHconfigure : TString;      

//// {$endif}
//// {$ifndef XtHpreGeometry}

    function XtHpreGeometry : TString;      

//// {$endif}
//// {$ifndef XtHpostGeometry}

    function XtHpostGeometry : TString;      

//// {$endif}
//// {$ifndef XtHdestroy}

    function XtHdestroy : TString;      

//// {$endif}
//// {$endif}

//// {$ifndef XTSTRINGDEFINES}
//// {$undef _XtStringDefs_h_Const}
//// {$endif}
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Sunkeysym.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Sunkeysym.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Sunkeysym.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}






const
  SunXK_FA_Grave = $1005FF00;  
  SunXK_FA_Circum = $1005FF01;  
  SunXK_FA_Tilde = $1005FF02;  
  SunXK_FA_Acute = $1005FF03;  
  SunXK_FA_Diaeresis = $1005FF04;  
  SunXK_FA_Cedilla = $1005FF05;  


  SunXK_F36 = $1005FF10;  

  SunXK_F37 = $1005FF11;  
  SunXK_Sys_Req = $1005FF60;  

  SunXK_Print_Screen = $0000FF61;  


  SunXK_Compose = $0000FF20;  

  SunXK_AltGraph = $0000FF7E;  


  SunXK_PageUp = $0000FF55;  

  SunXK_PageDown = $0000FF56;  


  SunXK_Undo = $0000FF65;  

  SunXK_Again = $0000FF66;  

  SunXK_Find = $0000FF68;  

  SunXK_Stop = $0000FF69;  
  SunXK_Props = $1005FF70;  
  SunXK_Front = $1005FF71;  
  SunXK_Copy = $1005FF72;  
  SunXK_Open = $1005FF73;  
  SunXK_Paste = $1005FF74;  
  SunXK_Cut = $1005FF75;  
  SunXK_PowerSwitch = $1005FF76;  
  SunXK_AudioLowerVolume = $1005FF77;  
  SunXK_AudioMute = $1005FF78;  
  SunXK_AudioRaiseVolume = $1005FF79;  
  SunXK_VideoDegauss = $1005FF7A;  
  SunXK_VideoLowerBrightness = $1005FF7B;  
  SunXK_VideoRaiseBrightness = $1005FF7C;  
  SunXK_PowerSwitchShift = $1005FF7D;  

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/CompositeP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/CompositeP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/CompositeP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XtCompositeP_h}
//// {$define _XtCompositeP_h}
//// {$include <X11/Composite.h>}

//// (* error 
//// typedef struct _CompositePart {
in declaration at line 62 *)

      var
        num_children : TCardinal;cvar;public;

        num_slots : TCardinal;cvar;public;

        insert_position : TXtOrderProc;cvar;public;

//// (* error 
//// } CompositePart,*CompositePtr;
in declaration at line 66 *)
    type
      T_CompositeRec = record
          core : TCorePart;
          composite : TCompositePart;
        end;
      TCompositeRec = T_CompositeRec;







      T_CompositeClassPart = record
          geometry_manager : TXtGeometryHandler;
          change_managed : TXtWidgetProc;
          insert_child : TXtWidgetProc;
          delete_child : TXtWidgetProc;
          extension : TXtPointer;
        end;
      TCompositeClassPart = T_CompositeClassPart;
      TCompositePartPtr = ^T_CompositeClassPart;





      TCompositeClassExtensionRec = record
          next_extension : TXtPointer;
          record_type : TXrmQuark;
          version : longint;
          record_size : TCardinal;
          accepts_objects : TBoolean;
          allows_change_managed_set : TBoolean;
        end;
      TCompositeClassExtension = ^TCompositeClassExtensionRec;

      T_CompositeClassRec = record
          core_class : TCoreClassPart;
          composite_class : TCompositeClassPart;
        end;
      TCompositeClassRec = T_CompositeClassRec;
//// (* error 
//// externalref CompositeClassRec compositeClassRec;
 in declarator_list *)
//// (* error 
//// #define XtCompositeExtensionVersion 2L
in define line 106 *)

    function XtInheritGeometryManager : TXtGeometryHandler;      

    function XtInheritChangeManaged : TXtWidgetProc;      

    function XtInheritInsertChild : TXtWidgetProc;      

    function XtInheritDeleteChild : TXtWidgetProc;      

//// {$endif}



// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/XKBlib.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/XKBlib.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/XKBlib.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _X11_XKBLIB_H_}
//// {$define _X11_XKBLIB_H_}
//// {$include <X11/Xlib.h>}
//// {$include <X11/extensions/XKBstr.h>}







type
  T_XkbAnyEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      time : TTime;
      xkb_type : longint;
      device : dword;
    end;
  TXkbAnyEvent = T_XkbAnyEvent;
















  T_XkbNewKeyboardNotify = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      time : TTime;
      xkb_type : longint;
      device : longint;
      old_device : longint;
      min_key_code : longint;
      max_key_code : longint;
      old_min_key_code : longint;
      old_max_key_code : longint;
      changed : dword;
      req_major : char;
      req_minor : char;
    end;
  TXkbNewKeyboardNotifyEvent = T_XkbNewKeyboardNotify;













  T_XkbMapNotifyEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      time : TTime;
      xkb_type : longint;
      device : longint;
      changed : dword;
      flags : dword;
      first_type : longint;
      num_types : longint;
      min_key_code : TKeyCode;
      max_key_code : TKeyCode;
      first_key_sym : TKeyCode;
      first_key_act : TKeyCode;
      first_key_behavior : TKeyCode;
      first_key_explicit : TKeyCode;
      first_modmap_key : TKeyCode;
      first_vmodmap_key : TKeyCode;
      num_key_syms : longint;
      num_key_acts : longint;
      num_key_behaviors : longint;
      num_key_explicit : longint;
      num_modmap_keys : longint;
      num_vmodmap_keys : longint;
      vmods : dword;
    end;
  TXkbMapNotifyEvent = T_XkbMapNotifyEvent;



























  T_XkbStateNotifyEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      time : TTime;
      xkb_type : longint;
      device : longint;
      changed : dword;
      group : longint;
      base_group : longint;
      latched_group : longint;
      locked_group : longint;
      mods : dword;
      base_mods : dword;
      latched_mods : dword;
      locked_mods : dword;
      compat_state : longint;
      grab_mods : byte;
      compat_grab_mods : byte;
      lookup_mods : byte;
      compat_lookup_mods : byte;
      ptr_buttons : longint;
      keycode : TKeyCode;
      event_type : char;
      req_major : char;
      req_minor : char;
    end;
  TXkbStateNotifyEvent = T_XkbStateNotifyEvent;
















  T_XkbControlsNotify = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      time : TTime;
      xkb_type : longint;
      device : longint;
      changed_ctrls : dword;
      enabled_ctrls : dword;
      enabled_ctrl_changes : dword;
      num_groups : longint;
      keycode : TKeyCode;
      event_type : char;
      req_major : char;
      req_minor : char;
    end;
  TXkbControlsNotifyEvent = T_XkbControlsNotify;










  T_XkbIndicatorNotify = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      time : TTime;
      xkb_type : longint;
      device : longint;
      changed : dword;
      state : dword;
    end;
  TXkbIndicatorNotifyEvent = T_XkbIndicatorNotify;




















  T_XkbNamesNotify = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      time : TTime;
      xkb_type : longint;
      device : longint;
      changed : dword;
      first_type : longint;
      num_types : longint;
      first_lvl : longint;
      num_lvls : longint;
      num_aliases : longint;
      num_radio_groups : longint;
      changed_vmods : dword;
      changed_groups : dword;
      changed_indicators : dword;
      first_key : longint;
      num_keys : longint;
    end;
  TXkbNamesNotifyEvent = T_XkbNamesNotify;












  T_XkbCompatMapNotify = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      time : TTime;
      xkb_type : longint;
      device : longint;
      changed_groups : dword;
      first_si : longint;
      num_si : longint;
      num_total_si : longint;
    end;
  TXkbCompatMapNotifyEvent = T_XkbCompatMapNotify;
















  T_XkbBellNotify = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      time : TTime;
      xkb_type : longint;
      device : longint;
      percent : longint;
      pitch : longint;
      duration : longint;
      bell_class : longint;
      bell_id : longint;
      name : TAtom;
      window : TWindow;
      event_only : TBool;
    end;
  TXkbBellNotifyEvent = T_XkbBellNotify;














  T_XkbActionMessage = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      time : TTime;
      xkb_type : longint;
      device : longint;
      keycode : TKeyCode;
      press : TBool;
      key_event_follows : TBool;
      group : longint;
      mods : dword;
      message : array[0..(XkbActionMessageLength+1)-1] of char;
    end;
  TXkbActionMessageEvent = T_XkbActionMessage;












  T_XkbAccessXNotify = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      time : TTime;
      xkb_type : longint;
      device : longint;
      detail : longint;
      keycode : longint;
      sk_delay : longint;
      debounce_delay : longint;
    end;
  TXkbAccessXNotifyEvent = T_XkbAccessXNotify;


















  T_XkbExtensionDeviceNotify = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      time : TTime;
      xkb_type : longint;
      device : longint;
      reason : dword;
      supported : dword;
      unsupported : dword;
      first_btn : longint;
      num_btns : longint;
      leds_defined : dword;
      led_state : dword;
      led_class : longint;
      led_id : longint;
    end;
  TXkbExtensionDeviceNotifyEvent = T_XkbExtensionDeviceNotify;

  T_XkbEvent = record
      case longint of
        0 : ( _type : longint );
        1 : ( any : TXkbAnyEvent );
        2 : ( new_kbd : TXkbNewKeyboardNotifyEvent );
        3 : ( map : TXkbMapNotifyEvent );
        4 : ( state : TXkbStateNotifyEvent );
        5 : ( ctrls : TXkbControlsNotifyEvent );
        6 : ( indicators : TXkbIndicatorNotifyEvent );
        7 : ( names : TXkbNamesNotifyEvent );
        8 : ( compat : TXkbCompatMapNotifyEvent );
        9 : ( bell : TXkbBellNotifyEvent );
        10 : ( message : TXkbActionMessageEvent );
        11 : ( accessx : TXkbAccessXNotifyEvent );
        12 : ( device : TXkbExtensionDeviceNotifyEvent );
        13 : ( core : TXEvent );
      end;
  TXkbEvent = T_XkbEvent;
//// (* error 
//// typedef struct	_XkbKbdDpyState	XkbKbdDpyStateRec,*XkbKbdDpyStatePtr;












//// {$if NeedWidePrototypes}
//// {$else}
//// {$endif}




































































































































//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/RectObjP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/RectObjP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/RectObjP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _Xt_RectObjP_h_}
//// {$define _Xt_RectObjP_h_}
//// {$include <X11/RectObj.h>}
//// {$include <X11/ObjectP.h>}


//// (* error 
//// typedef struct _RectObjPart {
in declaration at line 63 *)

      var
        width : TDimension;cvar;public;

        border_width : TDimension;cvar;public;

        managed : TBoolean;cvar;public;

        sensitive : TBoolean;cvar;public;

        ancestor_sensitive : TBoolean;cvar;public;

//// (* error 
//// }RectObjPart;
in declaration at line 69 *)
    type
      T_RectObjRec = record
          object : TObjectPart;
          rectangle : TRectObjPart;
        end;
      TRectObjRec = T_RectObjRec;




































      T_RectObjClassPart = record
          superclass : TWidgetClass;
          class_name : TString;
          widget_size : TCardinal;
          class_initialize : TXtProc;
          class_part_initialize : TXtWidgetClassProc;
          class_inited : TXtEnum;
          initialize : TXtInitProc;
          initialize_hook : TXtArgsProc;
          rect1 : TXtProc;
          rect2 : TXtPointer;
          rect3 : TCardinal;
          resources : TXtResourceList;
          num_resources : TCardinal;
          xrm_class : TXrmClass;
          rect4 : TBoolean;
          rect5 : TXtEnum;
          rect6 : TBoolean;
          rect7 : TBoolean;
          destroy : TXtWidgetProc;
          resize : TXtWidgetProc;
          expose : TXtExposeProc;
          set_values : TXtSetValuesFunc;
          set_values_hook : TXtArgsFunc;
          set_values_almost : TXtAlmostProc;
          get_values_hook : TXtArgsProc;
          rect9 : TXtProc;
          version : TXtVersionType;
          callback_private : TXtPointer;
          rect10 : TString;
          query_geometry : TXtGeometryHandler;
          rect11 : TXtProc;
          extension : TXtPointer;
        end;
      TRectObjClassPart = T_RectObjClassPart;

      T_RectObjClassRec = record
          rect_class : TRectObjClassPart;
        end;
      TRectObjClassRec = T_RectObjClassRec;
//// (* error 
//// externalref RectObjClassRec rectObjClassRec;
 in declarator_list *)
//// {$endif}

//// (* error 
//// #endif /*_Xt_RectObjP_h_*/

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/DECkeysym.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/DECkeysym.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/DECkeysym.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}






const
  DXK_ring_accent = $1000FEB0;  
  DXK_circumflex_accent = $1000FE5E;  
  DXK_cedilla_accent = $1000FE2C;  
  DXK_acute_accent = $1000FE27;  
  DXK_grave_accent = $1000FE60;  
  DXK_tilde = $1000FE7E;  
  DXK_diaeresis = $1000FE22;  


  DXK_Remove = $1000FF00;  

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xprotostr.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xprotostr.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xprotostr.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}


//// {$ifndef XPROTOSTRUCTS_H}
//// {$define XPROTOSTRUCTS_H}

//// {$include <X11/Xmd.h>}

type
  T_xSegment = record
      x1 : TINT16;
      y1 : TINT16;
      x2 : TINT16;
      y2 : TINT16;
    end;
  TxSegment = T_xSegment;


  T_xPoint = record
      x : TINT16;
      y : TINT16;
    end;
  TxPoint = T_xPoint;

  T_xRectangle = record
      x : TINT16;
      y : TINT16;
      width : TCARD16;
      height : TCARD16;
    end;
  TxRectangle = T_xRectangle;


  T_xArc = record
      x : TINT16;
      y : TINT16;
      width : TCARD16;
      height : TCARD16;
      angle1 : TINT16;
      angle2 : TINT16;
    end;
  TxArc = T_xArc;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/ThreadsI.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/ThreadsI.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/ThreadsI.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    PBoolean  = ^Boolean;
    Plongint  = ^longint;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}





//// {$ifndef _XtThreadsI_h}
//// {$define _XtThreadsI_h}
//// {$include <X11/XlibConf.h>}
//// {$ifdef XTHREADS}
type
  TLockPtr = ^T_LockRec;


  TThreadAppProc = procedure (_para1:TXtAppContext);cdecl;





  TThreadAppYieldLockProc = procedure (_para1:TXtAppContext; _para2:PTBoolean; _para3:PTBoolean; _para4:Plongint);cdecl;



  TThreadAppRestoreLockProc = procedure (_para1:TXtAppContext; _para2:longint; _para3:PTBoolean);cdecl;
//// (* error 
//// extern void (*_XtProcessLock)(
in declaration at line 83 *)
      var
        _XtProcessUnlock : procedure ;cvar;external;

        _XtInitAppLock : procedure (_para1:TXtAppContext);cvar;external;
//// (* error 
//// #define INIT_APP_LOCK(app) if(_XtInitAppLock) (*_XtInitAppLock)(app)
in define line 95 *)
//// (* error 
//// #define FREE_APP_LOCK(app) if(app && app->free_lock)(*app->free_lock)(app)
in define line 96 *)
//// (* error 
//// #define LOCK_PROCESS if(_XtProcessLock)(*_XtProcessLock)()
in define line 98 *)
//// (* error 
//// #define UNLOCK_PROCESS if(_XtProcessUnlock)(*_XtProcessUnlock)()
in define line 99 *)
//// (* error 
//// #define LOCK_APP(app) if(app && app->lock)(*app->lock)(app)
in define line 100 *)
//// (* error 
//// #define UNLOCK_APP(app) if(app && app->unlock)(*app->unlock)(app)
in define line 101 *)
//// (* error 
//// 	 if(app && app->yield_lock) (*app->yield_lock)(app,push,pushed,level)
in define line 104 *)
//// (* error 
//// 	 if(app && app->restore_lock) (*app->restore_lock)(app,level,pushed)
in define line 106 *)
//// (* error 
////     XtAppContext app = (w && _XtProcessLock ? \
in define line 110 *)
//// (* error 
////     XtAppContext app = (_XtProcessLock ? XtDisplayToApplicationContext(d): NULL)
in define line 113 *)
//// {$else}

//// {$define LOCK_PROCESS}    
//// {$define UNLOCK_PROCESS}    
//// (* error 
//// #define LOCK_APP(app)
in define line 119 *)
//// (* error 
//// #define UNLOCK_APP(app)
in define line 120 *)
//// (* error 
//// #define INIT_APP_LOCK(app)
in define line 122 *)
//// (* error 
//// #define FREE_APP_LOCK(app)
in define line 123 *)
//// (* error 
//// #define WIDGET_TO_APPCON(w)
in define line 125 *)
//// (* error 
//// #define DPY_TO_APPCON(d)
in define line 126 *)
//// {$endif}

//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xlib-xcb.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xlib-xcb.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xlib-xcb.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

Type
PDisplay  = ^Display;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _X11_XLIB_XCB_H_}
//// {$define _X11_XLIB_XCB_H_}
//// {$include <xcb/xcb.h>}
//// {$include <X11/Xlib.h>}
//// {$include <X11/Xfuncproto.h>}
//// (* error 
//// xcb_connection_t *XGetXCBConnection(Display *dpy);
 in declarator_list *)
type
  TXEventQueueOwner = (XlibOwnsEventQueue := 0,XCBOwnsEventQueue
    );


procedure XSetEventQueueOwner(dpy:PTDisplay; owner:TXEventQueueOwner);cdecl;external;
//// {$endif}

//// (* error 
//// #endif /* _X11_XLIB_XCB_H_ */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xthreads.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xthreads.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xthreads.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XTHREADS_H_}
//// {$define _XTHREADS_H_}

//// {$ifndef xmalloc}

const
  xmalloc = malloc;  
//// {$endif}
//// {$ifndef xfree}

const
  xfree = free;  
//// {$endif}
//// {$ifdef CTHREADS}
//// {$include <cthreads.h>}
type
  Txthread_t = Tcthread_t;
  Tcondition = Txcondition_rec;
  Tmutex = Txmutex_rec;

function xthread_init : longint;

const
  xthread_self = cthread_self;  

function xthread_fork(func,closure : longint) : longint;

function xthread_yield : longint;

function xthread_exit(v : longint) : longint;

function xthread_set_name(t,str : longint) : longint;

function xmutex_init(m : longint) : longint;

function xmutex_clear(m : longint) : longint;

function xmutex_lock(m : longint) : longint;

function xmutex_unlock(m : longint) : longint;

function xmutex_set_name(m,str : longint) : longint;

function xcondition_init(cv : longint) : longint;

function xcondition_clear(cv : longint) : longint;

function xcondition_wait(cv,m : longint) : longint;

function xcondition_signal(cv : longint) : longint;

function xcondition_broadcast(cv : longint) : longint;

function xcondition_set_name(cv,str : longint) : longint;

//// {$else}

//// {$if defined(SVR4)}
//// {$include <thread.h>}
//// {$include <synch.h>}
type
  Txthread_t = Tthread_t;

  Txthread_key_t = Tthread_key_t;

  Txcondition_rec = Tcond_t;

  Txmutex_rec = Tmutex_t;
//// {$if defined(__UNIXWARE__)}
  var
    _x11_thr_self : function :Txthread_t;cvar;external;

const
  xthread_self = _x11_thr_self;  
//// {$else}

const
  xthread_self = thr_self;  
//// {$endif}

function xthread_fork(func,closure : longint) : longint;

function xthread_yield : longint;

function xthread_exit(v : longint) : longint;

function xthread_key_create(kp,d : longint) : longint;

//// {$ifdef __sun}

function xthread_key_delete(k : longint) : longint;

//// {$else}

function xthread_key_delete(k : longint) : longint;

//// {$endif}

function xthread_set_specific(k,v : longint) : longint;

function xthread_get_specific(k,vp : longint) : longint;

function xmutex_init(m : longint) : longint;

function xmutex_clear(m : longint) : longint;

function xmutex_lock(m : longint) : longint;

function xmutex_unlock(m : longint) : longint;

function xcondition_init(cv : longint) : longint;

function xcondition_clear(cv : longint) : longint;

function xcondition_wait(cv,m : longint) : longint;

function xcondition_signal(cv : longint) : longint;

function xcondition_broadcast(cv : longint) : longint;

//// {$else}

//// {$ifdef WIN32}
//// {$include <X11/Xwindows.h>}
type
  Txthread_t = TDWORD;

  Txthread_key_t = TDWORD;
  T_xthread_waiter = record
      sem : THANDLE;
      next : ^T_xthread_waiter;
    end;


  Txcondition_rec = record
      cs : TCRITICAL_SECTION;
      waiters : ^T_xthread_waiter;
    end;

  Txmutex_rec = TCRITICAL_SECTION;

procedure _Xthread_init;cdecl;external;
function xthread_init : longint;

const
  xthread_self = GetCurrentThreadId;  
//// (* error 
//// #    define xthread_fork(func,closure) { \
in declaration at line 114 *)
//// (* error 
////     DWORD _tmptid; \
//// (* error 
////     CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)func, (LPVOID)closure, 0, \
in declaration at line 116 *)
//// (* error 
//// 		 &_tmptid); \
//// (* error 
//// }
in define line 118 *)

    function xthread_exit(v : longint) : longint;    

//// (* error 
//// #    define xthread_key_create(kp,d) *(kp) = TlsAlloc()
in define line 120 *)
    function xthread_key_delete(k : longint) : longint;    

    function xthread_set_specific(k,v : longint) : longint;    

    function xthread_get_specific(k,vp : longint) : longint;    

    function xmutex_init(m : longint) : longint;    

    function xmutex_clear(m : longint) : longint;    

//// {$define _XMUTEX_NESTS}    
    function xmutex_lock(m : longint) : longint;    

    function xmutex_unlock(m : longint) : longint;    

//// (* error 
//// #    define xcondition_init(cv) { \
in declaration at line 130 *)
//// (* error 
////     InitializeCriticalSection(&(cv)->cs); \
//// (* error 
////     (cv)->waiters = NULL; \
in declaration at line 131 *)
//// (* error 
////     (cv)->waiters = NULL; \
//// (* error 
//// }
in define line 133 *)
function _Xthread_waiter:^T_xthread_waiter;cdecl;external;
//// (* error 
//// #    define xcondition_wait(cv,m) { \
in declaration at line 136 *)
//// (* error 
////     struct _xthread_waiter *_tmpthr = _Xthread_waiter(); \
//// (* error 
////     EnterCriticalSection(&(cv)->cs); \
in declaration at line 137 *)
//// (* error 
////     EnterCriticalSection(&(cv)->cs); \
//// (* error 
////     _tmpthr->next = (cv)->waiters; \
in declaration at line 138 *)
//// (* error 
////     _tmpthr->next = (cv)->waiters; \
//// (* error 
////     (cv)->waiters = _tmpthr; \
in declaration at line 139 *)
//// (* error 
////     (cv)->waiters = _tmpthr; \
//// (* error 
////     LeaveCriticalSection(&(cv)->cs); \
in declaration at line 140 *)
//// (* error 
////     LeaveCriticalSection(&(cv)->cs); \
//// (* error 
////     LeaveCriticalSection(m); \
in declaration at line 141 *)
//// (* error 
////     LeaveCriticalSection(m); \
//// (* error 
////     WaitForSingleObject(_tmpthr->sem, INFINITE); \
in declaration at line 142 *)
//// (* error 
////     WaitForSingleObject(_tmpthr->sem, INFINITE); \
//// (* error 
////     EnterCriticalSection(m); \
in declaration at line 143 *)
//// (* error 
////     EnterCriticalSection(m); \
//// (* error 
//// }
in declaration at line 146 *)
//// (* error 
////     EnterCriticalSection(&(cv)->cs); \
//// (* error 
////     if ((cv)->waiters) { \
in declaration at line 148 *)
//// (* error 
////         ReleaseSemaphore((cv)->waiters->sem, 1, NULL); \
//// (* error 
//// 	(cv)->waiters = (cv)->waiters->next; \
in declaration at line 149 *)
//// (* error 
//// 	(cv)->waiters = (cv)->waiters->next; \
//// (* error 
////     } \
in declaration at line 151 *)
//// (* error 
////     LeaveCriticalSection(&(cv)->cs); \
//// (* error 
//// }
in declaration at line 154 *)
//// (* error 
////     struct _xthread_waiter *_tmpthr; \
//// (* error 
////     EnterCriticalSection(&(cv)->cs); \
in declaration at line 155 *)
//// (* error 
////     EnterCriticalSection(&(cv)->cs); \
//// (* error 
////     for (_tmpthr = (cv)->waiters; _tmpthr; _tmpthr = _tmpthr->next) \
in declaration at line 156 *)
//// (* error 
////     for (_tmpthr = (cv)->waiters; _tmpthr; _tmpthr = _tmpthr->next) \
in declaration at line 156 *)
//// (* error 
////     for (_tmpthr = (cv)->waiters; _tmpthr; _tmpthr = _tmpthr->next) \
in declaration at line 157 *)
//// (* error 
//// 	ReleaseSemaphore(_tmpthr->sem, 1, NULL); \
//// (* error 
////     (cv)->waiters = NULL; \
in declaration at line 158 *)
//// (* error 
////     (cv)->waiters = NULL; \
//// (* error 
////     LeaveCriticalSection(&(cv)->cs); \
in declaration at line 159 *)
//// (* error 
////     LeaveCriticalSection(&(cv)->cs); \
//// (* error 
//// }
//// {$else}

//// {$ifdef USE_TIS_SUPPORT}

//// {$include <tis.h>}
in declaration at line 168 *)
    type
      Txthread_key_t = Tpthread_key_t;

      Txcondition_rec = Tpthread_cond_t;

      Txmutex_rec = Tpthread_mutex_t;

    const
      xthread_self = tis_self;      
//// (* error 
//// #     define xthread_fork(func,closure) { pthread_t _tmpxthr; \
in declaration at line 173 *)
//// (* error 
//// #     define xthread_fork(func,closure) { pthread_t _tmpxthr; \
//// (* error 
////         pthread_create(&_tmpxthr,NULL,func,closure); }
in declaration at line 174 *)
//// (* error 
////         pthread_create(&_tmpxthr,NULL,func,closure); }
in define line 175 *)

    function xthread_exit(v : longint) : longint;    

    function xthread_key_create(kp,d : longint) : longint;    

    function xthread_key_delete(k : longint) : longint;    

    function xthread_set_specific(k,v : longint) : longint;    

//// (* error 
//// #     define xthread_get_specific(k,vp) *(vp) = tis_getspecific(k)
in define line 180 *)
    const
      XMUTEX_INITIALIZER = PTHREAD_MUTEX_INITIALIZER;      

    function xmutex_init(m : longint) : longint;    

    function xmutex_clear(m : longint) : longint;    

    function xmutex_lock(m : longint) : longint;    

    function xmutex_unlock(m : longint) : longint;    

    function xcondition_init(c : longint) : longint;    

    function xcondition_clear(c : longint) : longint;    

    function xcondition_wait(c,m : longint) : longint;    

    function xcondition_signal(c : longint) : longint;    

    function xcondition_broadcast(c : longint) : longint;    

//// {$else}
//// {$ifdef USE_NBSD_THREADLIB}

//// {$include <threadlib.h>}
    type
      Txthread_t = Tthr_t;

      Txthread_key_t = Tthread_key_t;

      Txcondition_rec = Tcond_t;

      Txmutex_rec = Tmutex_t;

    const
      xthread_self = thr_self;      
//// (* error 
//// #      define xthread_fork(func,closure) { thr_t _tmpxthr; \
in declaration at line 203 *)
//// (* error 
//// #      define xthread_fork(func,closure) { thr_t _tmpxthr; \
//// (* error 
//// 	/* XXX Create it detached?  --thorpej */ \
in declaration at line 205 *)
//// (* error 
//// 	thr_create(&_tmpxthr,NULL,func,closure); }
in define line 206 *)

    function xthread_exit(v : longint) : longint;    

    function xthread_key_create(kp,d : longint) : longint;    

    function xthread_key_delete(k : longint) : longint;    

    function xthread_set_specific(k,v : longint) : longint;    

//// (* error 
//// #      define xthread_get_specific(k,vp) *(vp) = thr_getspecific(k)
in define line 211 *)
    const
      XMUTEX_INITIALIZER = MUTEX_INITIALIZER;      

    function xmutex_init(m : longint) : longint;    

    function xmutex_clear(m : longint) : longint;    

    function xmutex_lock(m : longint) : longint;    

    function xmutex_unlock(m : longint) : longint;    

    function xcondition_init(c : longint) : longint;    

    function xcondition_clear(c : longint) : longint;    

    function xcondition_wait(c,m : longint) : longint;    

    function xcondition_signal(c : longint) : longint;    

    function xcondition_broadcast(c : longint) : longint;    

//// {$else}
//// {$include <pthread.h>}
    type
      Txthread_t = Tpthread_t;

      Txthread_key_t = Tpthread_key_t;

      Txcondition_rec = Tpthread_cond_t;

      Txmutex_rec = Tpthread_mutex_t;

    const
      xthread_self = pthread_self;      

    function xthread_yield : longint;    

    function xthread_exit(v : longint) : longint;    

    function xthread_set_specific(k,v : longint) : longint;    

    function xmutex_clear(m : longint) : longint;    

    function xmutex_lock(m : longint) : longint;    

    function xmutex_unlock(m : longint) : longint;    

//// {$ifndef XPRE_STANDARD_API}

    function xthread_key_create(kp,d : longint) : longint;    

    function xthread_key_delete(k : longint) : longint;    

//// (* error 
//// #       define xthread_get_specific(k,vp) *(vp) = pthread_getspecific(k)
in define line 238 *)
//// (* error 
//// #       define xthread_fork(func,closure) { pthread_t _tmpxthr; \
in declaration at line 239 *)
//// (* error 
//// #       define xthread_fork(func,closure) { pthread_t _tmpxthr; \
//// (* error 
//// 	pthread_create(&_tmpxthr,NULL,func,closure); }
in declaration at line 240 *)
//// (* error 
//// 	pthread_create(&_tmpxthr,NULL,func,closure); }
in define line 241 *)
    function xmutex_init(m : longint) : longint;    

    function xcondition_init(c : longint) : longint;    

//// {$else}


    function xthread_key_create(kp,d : longint) : longint;    

    function xthread_key_delete(k : longint) : longint;    

    function xthread_get_specific(k,vp : longint) : longint;    

//// (* error 
//// #       define xthread_fork(func,closure) { pthread_t _tmpxthr; \
in declaration at line 248 *)
//// (* error 
//// #       define xthread_fork(func,closure) { pthread_t _tmpxthr; \
//// (* error 
//// 	pthread_create(&_tmpxthr,pthread_attr_default,func,closure); }
in declaration at line 249 *)
//// (* error 
//// 	pthread_create(&_tmpxthr,pthread_attr_default,func,closure); }
in define line 250 *)
    function xcondition_init(c : longint) : longint;    

//// {$endif}


    function xcondition_clear(c : longint) : longint;    

    function xcondition_wait(c,m : longint) : longint;    

    function xcondition_signal(c : longint) : longint;    

    function xcondition_broadcast(c : longint) : longint;    

//// {$if defined(_DECTHREADS_)}
//// (* error 
//// static xthread_t _X_no_thread_id;
 in declarator_list *)

    function xthread_have_id(id : longint) : longint;    

//// (* error 
//// #       define xthread_clear_id(id) id = _X_no_thread_id
in define line 260 *)
    function xthread_equal(id1,id2 : longint) : longint;    

//// {$endif}

//// {$if defined(__linux__)}

    function xthread_have_id(id : longint) : longint;    

//// (* error 
//// #       define xthread_clear_id(id) id = 0
in define line 265 *)
    function xthread_equal(id1,id2 : longint) : longint;    

//// {$endif}

//// {$if defined(_CMA_VENDOR_) && defined(_CMA__IBM) && (_CMA_VENDOR_ == _CMA__IBM)}
//// {$ifdef DEBUG		/* too much of a hack to enable normally */}

//// (* error 
//// #        define xmutex_set_name(m,str) ((char**)(m)->field1)[5] = (str)
in define line 271 *)
//// (* error 
//// #        define xcondition_set_name(cv,str) ((char**)(cv)->field1)[5] = (str)
in define line 272 *)
//// {$endif}

//// {$endif}

//// {$endif}

//// {$endif}

//// {$endif}

//// {$endif}

//// {$endif}

    type
      Txcondition_t = ^Txcondition_rec;

      Txmutex_t = ^Txmutex_rec;
//// {$ifndef xcondition_malloc}

    function xcondition_malloc : Txcondition_t;    

//// {$endif}
//// {$ifndef xcondition_free}

    function xcondition_free(c : longint) : longint;    

//// {$endif}
//// {$ifndef xmutex_malloc}

    function xmutex_malloc : Txmutex_t;    

//// {$endif}
//// {$ifndef xmutex_free}

    function xmutex_free(m : longint) : longint;    

//// {$endif}
//// {$ifndef xthread_have_id}

    function xthread_have_id(id : longint) : longint;    

//// {$endif}
//// {$ifndef xthread_clear_id}
//// (* error 
//// #  define xthread_clear_id(id) id = 0
in define line 298 *)
//// {$endif}
//// {$ifndef xthread_equal}

    function xthread_equal(id1,id2 : longint) : longint;    

//// {$endif}

//// {$ifndef xthread_set_name}
//// (* error 
//// #  define xthread_set_name(t,str)
in define line 305 *)
//// {$endif}
//// {$ifndef xmutex_set_name}
//// (* error 
//// #  define xmutex_set_name(m,str)
in define line 308 *)
//// {$endif}
//// {$ifndef xcondition_set_name}
//// (* error 
//// #  define xcondition_set_name(cv,str)
in define line 311 *)
//// {$endif}
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xdmcp.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xdmcp.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xdmcp.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    Pbyte  = ^byte;
    Plongint  = ^longint;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XDMCP_H_}
//// {$define _XDMCP_H_}
//// {$include <X11/Xmd.h>}
//// {$include <X11/Xfuncproto.h>}
//// (* error 
//// #define XDM_PROTOCOL_VERSION	1
in define line 25 *)

    const
      XDM_UDP_PORT = 177;      

      XDM_DEFAULT_MCAST_ADDR6 = 'ff02:0:0:0:0:0:0:12b';      
      XDM_MAX_MSGLEN = 8192;      
      XDM_MIN_RTX = 2;      
      XDM_MAX_RTX = 32;      
      XDM_RTX_LIMIT = 7;      
      XDM_KA_RTX_LIMIT = 4;      

      XDM_DEF_DORMANCY = 3*60;      

      XDM_MAX_DORMANCY = (24*60)*60;      
    type
      TxdmOpCode = (BROADCAST_QUERY := 1,QUERY,INDIRECT_QUERY,
        FORWARD_QUERY,WILLING,UNWILLING,REQUEST,
        ACCEPT,DECLINE,MANAGE,REFUSE,FAILED,KEEPALIVE,
        ALIVE);
//// {$if defined(IPv6) && defined(AF_INET6)}
//// {$endif}
    type
      Txdmcp_states = (XDM_QUERY,XDM_BROADCAST,XDM_INDIRECT,
        XDM_COLLECT_QUERY,XDM_COLLECT_BROADCAST_QUERY,
        XDM_COLLECT_INDIRECT_QUERY,XDM_START_CONNECTION,
        XDM_AWAIT_REQUEST_RESPONSE,XDM_AWAIT_MANAGE_RESPONSE,
        XDM_MANAGE,XDM_RUN_SESSION,XDM_OFF,XDM_AWAIT_USER_INPUT,
        XDM_KEEPALIVE,XDM_AWAIT_ALIVE_RESPONSE,
        XDM_MULTICAST,XDM_COLLECT_MULTICAST_QUERY,
        XDM_KEEP_ME_LAST);
//// {$ifdef NOTDEF}


    const
      XDM_MAX_STR_LEN = 21;      
      XDM_MAX_HOSTS = 20;      
    type
      Txdm_host_table = record
          sockaddr : Tsockaddr_in;
          name : array[0..(XDM_MAX_STR_LEN)-1] of char;
          status : array[0..(XDM_MAX_STR_LEN)-1] of char;
        end;

//// {$endif}

    type
      TCARD8Ptr = ^TCARD8;

      TCARD16Ptr = ^TCARD16;

      TCARD32Ptr = ^TCARD32;

      T_ARRAY8 = record
          length : TCARD16;
          data : TCARD8Ptr;
        end;
      TARRAY8 = T_ARRAY8;
      TARRAY8Ptr = ^T_ARRAY8;

      T_ARRAY16 = record
          length : TCARD8;
          data : TCARD16Ptr;
        end;
      TARRAY16 = T_ARRAY16;
      TARRAY16Ptr = ^T_ARRAY16;

      T_ARRAY32 = record
          length : TCARD8;
          data : TCARD32Ptr;
        end;
      TARRAY32 = T_ARRAY32;
      TARRAY32Ptr = ^T_ARRAY32;

      T_ARRAYofARRAY8 = record
          length : TCARD8;
          data : TARRAY8Ptr;
        end;
      TARRAYofARRAY8 = T_ARRAYofARRAY8;
      TARRAYofARRAY8Ptr = ^T_ARRAYofARRAY8;

      T_XdmcpHeader = record
          version : TCARD16;
          opcode : TCARD16;
          length : TCARD16;
        end;
      TXdmcpHeader = T_XdmcpHeader;
      TXdmcpHeaderPtr = ^T_XdmcpHeader;




      T_XdmcpBuffer = record
          data : ^TBYTE;
          size : longint;
          pointer : longint;
          count : longint;
        end;
      TXdmcpBuffer = T_XdmcpBuffer;
      TXdmcpBufferPtr = ^T_XdmcpBuffer;

      T_XdmAuthKey = record
          data : array[0..7] of TBYTE;
        end;
      TXdmAuthKeyRec = T_XdmAuthKey;
      TXdmAuthKeyPtr = ^T_XdmAuthKey;


      TXdmcpNetaddr = ^char;

function XdmcpWriteARRAY16(buffer:TXdmcpBufferPtr; array:TARRAY16Ptr):longint;cdecl;external;
function XdmcpWriteARRAY32(buffer:TXdmcpBufferPtr; array:TARRAY32Ptr):longint;cdecl;external;
function XdmcpWriteARRAY8(buffer:TXdmcpBufferPtr; array:TARRAY8Ptr):longint;cdecl;external;
function XdmcpWriteARRAYofARRAY8(buffer:TXdmcpBufferPtr; array:TARRAYofARRAY8Ptr):longint;cdecl;external;
function XdmcpWriteCARD16(buffer:TXdmcpBufferPtr; value:dword):longint;cdecl;external;
function XdmcpWriteCARD32(buffer:TXdmcpBufferPtr; value:dword):longint;cdecl;external;
function XdmcpWriteCARD8(buffer:TXdmcpBufferPtr; value:dword):longint;cdecl;external;
function XdmcpWriteHeader(buffer:TXdmcpBufferPtr; header:TXdmcpHeaderPtr):longint;cdecl;external;
function XdmcpFlush(fd:longint; buffer:TXdmcpBufferPtr; to:TXdmcpNetaddr; tolen:longint):longint;cdecl;external;
function XdmcpReadARRAY16(buffer:TXdmcpBufferPtr; array:TARRAY16Ptr):longint;cdecl;external;
function XdmcpReadARRAY32(buffer:TXdmcpBufferPtr; array:TARRAY32Ptr):longint;cdecl;external;
function XdmcpReadARRAY8(buffer:TXdmcpBufferPtr; array:TARRAY8Ptr):longint;cdecl;external;
function XdmcpReadARRAYofARRAY8(buffer:TXdmcpBufferPtr; array:TARRAYofARRAY8Ptr):longint;cdecl;external;
function XdmcpReadCARD16(buffer:TXdmcpBufferPtr; valuep:TCARD16Ptr):longint;cdecl;external;
function XdmcpReadCARD32(buffer:TXdmcpBufferPtr; valuep:TCARD32Ptr):longint;cdecl;external;
function XdmcpReadCARD8(buffer:TXdmcpBufferPtr; valuep:TCARD8Ptr):longint;cdecl;external;
function XdmcpReadHeader(buffer:TXdmcpBufferPtr; header:TXdmcpHeaderPtr):longint;cdecl;external;
function XdmcpFill(fd:longint; buffer:TXdmcpBufferPtr; from:TXdmcpNetaddr; fromlen:Plongint):longint;cdecl;external;
function XdmcpReadRemaining(buffer:TXdmcpBufferPtr):longint;cdecl;external;
procedure XdmcpDisposeARRAY8(array:TARRAY8Ptr);cdecl;external;
procedure XdmcpDisposeARRAY16(array:TARRAY16Ptr);cdecl;external;
procedure XdmcpDisposeARRAY32(array:TARRAY32Ptr);cdecl;external;
procedure XdmcpDisposeARRAYofARRAY8(array:TARRAYofARRAY8Ptr);cdecl;external;
function XdmcpCopyARRAY8(src:TARRAY8Ptr; dst:TARRAY8Ptr):longint;cdecl;external;
function XdmcpARRAY8Equal(array1:TARRAY8Ptr; array2:TARRAY8Ptr):longint;cdecl;external;
procedure XdmcpGenerateKey(key:TXdmAuthKeyPtr);cdecl;external;
procedure XdmcpIncrementKey(key:TXdmAuthKeyPtr);cdecl;external;
procedure XdmcpDecrementKey(key:TXdmAuthKeyPtr);cdecl;external;
//// {$ifdef HASXDMAUTH}
procedure XdmcpWrap(input:Pbyte; wrapper:Pbyte; output:Pbyte; bytes:longint);cdecl;external;
procedure XdmcpUnwrap(input:Pbyte; wrapper:Pbyte; output:Pbyte; bytes:longint);cdecl;external;
//// {$endif}
//// {$ifndef TRUE}

    const
      TRUE = 1;      
      FALSE = 0;      
//// {$endif}

function XdmcpCompareKeys(a:TXdmAuthKeyPtr; b:TXdmAuthKeyPtr):longint;cdecl;external;
function XdmcpAllocARRAY16(array:TARRAY16Ptr; length:longint):longint;cdecl;external;
function XdmcpAllocARRAY32(array:TARRAY32Ptr; length:longint):longint;cdecl;external;
function XdmcpAllocARRAY8(array:TARRAY8Ptr; length:longint):longint;cdecl;external;
function XdmcpAllocARRAYofARRAY8(array:TARRAYofARRAY8Ptr; length:longint):longint;cdecl;external;
function XdmcpReallocARRAY16(array:TARRAY16Ptr; length:longint):longint;cdecl;external;
function XdmcpReallocARRAY32(array:TARRAY32Ptr; length:longint):longint;cdecl;external;
function XdmcpReallocARRAY8(array:TARRAY8Ptr; length:longint):longint;cdecl;external;
function XdmcpReallocARRAYofARRAY8(array:TARRAYofARRAY8Ptr; length:longint):longint;cdecl;external;
//// {$endif}

//// (* error 
//// #endif /* _XDMCP_H_ */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/SM/SMlib.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/SM/SMlib.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/SM/SMlib.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    Pchar  = ^char;
    Pdword  = ^dword;
    PSmcCallbacks  = ^SmcCallbacks;
    PSmProp  = ^SmProp;
    PSmsCallbacks  = ^SmsCallbacks;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _SMLIB_H_}
//// {$define _SMLIB_H_}
//// {$include <X11/SM/SM.h>}
//// {$include <X11/ICE/ICElib.h>}

type
  TSmPointer = TIcePointer;


  TSmcConn = ^T_SmcConn;

  TSmsConn = ^T_SmsConn;




  TSmPropValue = record
      length : longint;
      value : TSmPointer;
    end;





  TSmProp = record
      name : ^char;
      _type : ^char;
      num_vals : longint;
      vals : ^TSmPropValue;
    end;


  TSmcCloseStatus = (SmcClosedNow,SmcClosedASAP,SmcConnectionInUse
    );



  TSmcSaveYourselfProc = procedure (_para1:TSmcConn; _para2:TSmPointer; _para3:longint; _para4:TBool; _para5:longint; 
                _para6:TBool);cdecl;


  TSmcSaveYourselfPhase2Proc = procedure (_para1:TSmcConn; _para2:TSmPointer);cdecl;


  TSmcInteractProc = procedure (_para1:TSmcConn; _para2:TSmPointer);cdecl;


  TSmcDieProc = procedure (_para1:TSmcConn; _para2:TSmPointer);cdecl;


  TSmcShutdownCancelledProc = procedure (_para1:TSmcConn; _para2:TSmPointer);cdecl;


  TSmcSaveCompleteProc = procedure (_para1:TSmcConn; _para2:TSmPointer);cdecl;


  TSmcPropReplyProc = procedure (_para1:TSmcConn; _para2:TSmPointer; _para3:longint; _para4:PPTSmProp);cdecl;


  TSmcCallbacks = record
      save_yourself : record
          callback : TSmcSaveYourselfProc;
          client_data : TSmPointer;
        end;
      die : record
          callback : TSmcDieProc;
          client_data : TSmPointer;
        end;
      save_complete : record
          callback : TSmcSaveCompleteProc;
          client_data : TSmPointer;
        end;
      shutdown_cancelled : record
          callback : TSmcShutdownCancelledProc;
          client_data : TSmPointer;
        end;
    end;

const
  SmcSaveYourselfProcMask = 1 shl 0;  
  SmcDieProcMask = 1 shl 1;  
  SmcSaveCompleteProcMask = 1 shl 2;  
  SmcShutdownCancelledProcMask = 1 shl 3;  


type

  TSmsRegisterClientProc = function (_para1:TSmsConn; _para2:TSmPointer; _para3:Pchar):TStatus;cdecl;


  TSmsInteractRequestProc = procedure (_para1:TSmsConn; _para2:TSmPointer; _para3:longint);cdecl;


  TSmsInteractDoneProc = procedure (_para1:TSmsConn; _para2:TSmPointer; _para3:TBool);cdecl;


  TSmsSaveYourselfRequestProc = procedure (_para1:TSmsConn; _para2:TSmPointer; _para3:longint; _para4:TBool; _para5:longint; 
                _para6:TBool; _para7:TBool);cdecl;


  TSmsSaveYourselfPhase2RequestProc = procedure (_para1:TSmsConn; _para2:TSmPointer);cdecl;


  TSmsSaveYourselfDoneProc = procedure (_para1:TSmsConn; _para2:TSmPointer; _para3:TBool);cdecl;


  TSmsCloseConnectionProc = procedure (_para1:TSmsConn; _para2:TSmPointer; _para3:longint; _para4:PPchar);cdecl;


  TSmsSetPropertiesProc = procedure (_para1:TSmsConn; _para2:TSmPointer; _para3:longint; _para4:PPTSmProp);cdecl;


  TSmsDeletePropertiesProc = procedure (_para1:TSmsConn; _para2:TSmPointer; _para3:longint; _para4:PPchar);cdecl;


  TSmsGetPropertiesProc = procedure (_para1:TSmsConn; _para2:TSmPointer);cdecl;


  TSmsCallbacks = record
      register_client : record
          callback : TSmsRegisterClientProc;
          manager_data : TSmPointer;
        end;
      interact_request : record
          callback : TSmsInteractRequestProc;
          manager_data : TSmPointer;
        end;
      interact_done : record
          callback : TSmsInteractDoneProc;
          manager_data : TSmPointer;
        end;
      save_yourself_request : record
          callback : TSmsSaveYourselfRequestProc;
          manager_data : TSmPointer;
        end;
      save_yourself_phase2_request : record
          callback : TSmsSaveYourselfPhase2RequestProc;
          manager_data : TSmPointer;
        end;
      save_yourself_done : record
          callback : TSmsSaveYourselfDoneProc;
          manager_data : TSmPointer;
        end;
      close_connection : record
          callback : TSmsCloseConnectionProc;
          manager_data : TSmPointer;
        end;
      set_properties : record
          callback : TSmsSetPropertiesProc;
          manager_data : TSmPointer;
        end;
      delete_properties : record
          callback : TSmsDeletePropertiesProc;
          manager_data : TSmPointer;
        end;
      get_properties : record
          callback : TSmsGetPropertiesProc;
          manager_data : TSmPointer;
        end;
    end;

const
  SmsRegisterClientProcMask = 1 shl 0;  
  SmsInteractRequestProcMask = 1 shl 1;  
  SmsInteractDoneProcMask = 1 shl 2;  
  SmsSaveYourselfRequestProcMask = 1 shl 3;  
  SmsSaveYourselfP2RequestProcMask = 1 shl 4;  
  SmsSaveYourselfDoneProcMask = 1 shl 5;  
  SmsCloseConnectionProcMask = 1 shl 6;  
  SmsSetPropertiesProcMask = 1 shl 7;  
  SmsDeletePropertiesProcMask = 1 shl 8;  
  SmsGetPropertiesProcMask = 1 shl 9;  

type

  TSmsNewClientProc = function (_para1:TSmsConn; _para2:TSmPointer; _para3:Pdword; _para4:PTSmsCallbacks; _para5:PPchar):TStatus;cdecl;



  TSmcErrorHandler = procedure (_para1:TSmcConn; _para2:TBool; _para3:longint; _para4:dword; _para5:longint; 
                _para6:longint; _para7:TSmPointer);cdecl;


  TSmsErrorHandler = procedure (_para1:TSmsConn; _para2:TBool; _para3:longint; _para4:dword; _para5:longint; 
                _para6:longint; _para7:TSmPointer);cdecl;

//// (* error 
//// extern SmcConn SmcOpenConnection (

in declaration at line 359 *)


function SmcCloseConnection(_para1:TSmcConn; _para2:longint; _para3:PPchar):TSmcCloseStatus;cdecl;external;

procedure SmcModifyCallbacks(_para1:TSmcConn; _para2:dword; _para3:PTSmcCallbacks);cdecl;external;

procedure SmcSetProperties(_para1:TSmcConn; _para2:longint; _para3:PPTSmProp);cdecl;external;

procedure SmcDeleteProperties(_para1:TSmcConn; _para2:longint; _para3:PPchar);cdecl;external;

function SmcGetProperties(_para1:TSmcConn; _para2:TSmcPropReplyProc; _para3:TSmPointer):TStatus;cdecl;external;

function SmcInteractRequest(_para1:TSmcConn; _para2:longint; _para3:TSmcInteractProc; _para4:TSmPointer):TStatus;cdecl;external;

procedure SmcInteractDone(_para1:TSmcConn; _para2:TBool);cdecl;external;

procedure SmcRequestSaveYourself(_para1:TSmcConn; _para2:longint; _para3:TBool; _para4:longint; _para5:TBool; 
                _para6:TBool);cdecl;external;

function SmcRequestSaveYourselfPhase2(_para1:TSmcConn; _para2:TSmcSaveYourselfPhase2Proc; _para3:TSmPointer):TStatus;cdecl;external;

procedure SmcSaveYourselfDone(_para1:TSmcConn; _para2:TBool);cdecl;external;

function SmcProtocolVersion(_para1:TSmcConn):longint;cdecl;external;

function SmcProtocolRevision(_para1:TSmcConn):longint;cdecl;external;

function SmcVendor(_para1:TSmcConn):^char;cdecl;external;

function SmcRelease(_para1:TSmcConn):^char;cdecl;external;

function SmcClientID(_para1:TSmcConn):^char;cdecl;external;

function SmcGetIceConnection(_para1:TSmcConn):TIceConn;cdecl;external;

function SmsInitialize(_para1:Pchar; _para2:Pchar; _para3:TSmsNewClientProc; _para4:TSmPointer; _para5:TIceHostBasedAuthProc; 
               _para6:longint; _para7:Pchar):TStatus;cdecl;external;

function SmsClientHostName(_para1:TSmsConn):^char;cdecl;external;

function SmsGenerateClientID(_para1:TSmsConn):^char;cdecl;external;

function SmsRegisterClientReply(_para1:TSmsConn; _para2:Pchar):TStatus;cdecl;external;

procedure SmsSaveYourself(_para1:TSmsConn; _para2:longint; _para3:TBool; _para4:longint; _para5:TBool);cdecl;external;

procedure SmsSaveYourselfPhase2(_para1:TSmsConn);cdecl;external;

procedure SmsInteract(_para1:TSmsConn);cdecl;external;

procedure SmsDie(_para1:TSmsConn);cdecl;external;

procedure SmsSaveComplete(_para1:TSmsConn);cdecl;external;

procedure SmsShutdownCancelled(_para1:TSmsConn);cdecl;external;

procedure SmsReturnProperties(_para1:TSmsConn; _para2:longint; _para3:PPTSmProp);cdecl;external;

procedure SmsCleanUp(_para1:TSmsConn);cdecl;external;

function SmsProtocolVersion(_para1:TSmsConn):longint;cdecl;external;

function SmsProtocolRevision(_para1:TSmsConn):longint;cdecl;external;

function SmsClientID(_para1:TSmsConn):^char;cdecl;external;

function SmsGetIceConnection(_para1:TSmsConn):TIceConn;cdecl;external;

function SmcSetErrorHandler(_para1:TSmcErrorHandler):TSmcErrorHandler;cdecl;external;

function SmsSetErrorHandler(_para1:TSmsErrorHandler):TSmsErrorHandler;cdecl;external;

procedure SmFreeProperty(_para1:PTSmProp);cdecl;external;

procedure SmFreeReasons(_para1:longint; _para2:PPchar);cdecl;external;
//// {$endif}

//// (* error 
//// #endif /* _SMLIB_H_ */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/SM/SMproto.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/SM/SMproto.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/SM/SMproto.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _SMPROTO_H_}
//// {$define _SMPROTO_H_}
//// {$include <X11/Xmd.h>}
//// (* error 
////     CARD32	length B32;
 in declarator_list *)

type
  TsmRegisterClientMsg = record
      majorOpcode : TCARD8;
      minorOpcode : TCARD8;
      unused : array[0..1] of TCARD8;
;
    end;
//// (* error 
////     CARD32	length B32;
 in declarator_list *)


  TsmRegisterClientReplyMsg = record
      majorOpcode : TCARD8;
      minorOpcode : TCARD8;
      unused : array[0..1] of TCARD8;
;
    end;
//// (* error 
////     CARD32	length B32;
 in declarator_list *)

  TsmSaveYourselfMsg = record
      majorOpcode : TCARD8;
      minorOpcode : TCARD8;
      unused1 : array[0..1] of TCARD8;
;
      saveType : TCARD8;
      shutdown : TCARD8;
      interactStyle : TCARD8;
      fast : TCARD8;
      unused2 : array[0..3] of TCARD8;
    end;
//// (* error 
////     CARD32	length B32;
 in declarator_list *)

  TsmSaveYourselfRequestMsg = record
      majorOpcode : TCARD8;
      minorOpcode : TCARD8;
      unused1 : array[0..1] of TCARD8;
;
      saveType : TCARD8;
      shutdown : TCARD8;
      interactStyle : TCARD8;
      fast : TCARD8;
      global : TCARD8;
      unused2 : array[0..2] of TCARD8;
    end;
//// (* error 
////     CARD32	length B32;
 in declarator_list *)

  TsmInteractRequestMsg = record
      majorOpcode : TCARD8;
      minorOpcode : TCARD8;
      dialogType : TCARD8;
      unused : TCARD8;
;
    end;
//// (* error 
////     CARD32	length B32;
 in declarator_list *)

  TsmInteractMsg = record
      majorOpcode : TCARD8;
      minorOpcode : TCARD8;
      unused : array[0..1] of TCARD8;
;
    end;
//// (* error 
////     CARD32	length B32;
 in declarator_list *)

  TsmInteractDoneMsg = record
      majorOpcode : TCARD8;
      minorOpcode : TCARD8;
      cancelShutdown : TCARD8;
      unused : TCARD8;
;
    end;
//// (* error 
////     CARD32	length B32;
 in declarator_list *)

  TsmSaveYourselfDoneMsg = record
      majorOpcode : TCARD8;
      minorOpcode : TCARD8;
      success : TCARD8;
      unused : TCARD8;
;
    end;
//// (* error 
////     CARD32	length B32;
 in declarator_list *)

  TsmDieMsg = record
      majorOpcode : TCARD8;
      minorOpcode : TCARD8;
      unused : array[0..1] of TCARD8;
;
    end;
//// (* error 
////     CARD32	length B32;
 in declarator_list *)

  TsmShutdownCancelledMsg = record
      majorOpcode : TCARD8;
      minorOpcode : TCARD8;
      unused : array[0..1] of TCARD8;
;
    end;
//// (* error 
////     CARD32	length B32;
 in declarator_list *)


  TsmCloseConnectionMsg = record
      majorOpcode : TCARD8;
      minorOpcode : TCARD8;
      unused : array[0..1] of TCARD8;
;
    end;
//// (* error 
////     CARD32	length B32;
 in declarator_list *)


  TsmSetPropertiesMsg = record
      majorOpcode : TCARD8;
      minorOpcode : TCARD8;
      unused : array[0..1] of TCARD8;
;
    end;
//// (* error 
////     CARD32	length B32;
 in declarator_list *)


  TsmDeletePropertiesMsg = record
      majorOpcode : TCARD8;
      minorOpcode : TCARD8;
      unused : array[0..1] of TCARD8;
;
    end;
//// (* error 
////     CARD32	length B32;
 in declarator_list *)

  TsmGetPropertiesMsg = record
      majorOpcode : TCARD8;
      minorOpcode : TCARD8;
      unused : array[0..1] of TCARD8;
;
    end;
//// (* error 
////     CARD32	length B32;
 in declarator_list *)


  TsmPropertiesReplyMsg = record
      majorOpcode : TCARD8;
      minorOpcode : TCARD8;
      unused : array[0..1] of TCARD8;
;
    end;
//// (* error 
////     CARD32	length B32;
 in declarator_list *)

  TsmSaveYourselfPhase2RequestMsg = record
      majorOpcode : TCARD8;
      minorOpcode : TCARD8;
      unused : array[0..1] of TCARD8;
;
    end;
//// (* error 
////     CARD32	length B32;
 in declarator_list *)

  TsmSaveYourselfPhase2Msg = record
      majorOpcode : TCARD8;
      minorOpcode : TCARD8;
      unused : array[0..1] of TCARD8;
;
    end;
//// (* error 
////     CARD32	length B32;
 in declarator_list *)

  TsmSaveCompleteMsg = record
      majorOpcode : TCARD8;
      minorOpcode : TCARD8;
      unused : array[0..1] of TCARD8;
;
    end;


const
  sz_smRegisterClientMsg = 8;  
  sz_smRegisterClientReplyMsg = 8;  
  sz_smSaveYourselfMsg = 16;  
  sz_smSaveYourselfRequestMsg = 16;  
  sz_smInteractRequestMsg = 8;  
  sz_smInteractMsg = 8;  
  sz_smInteractDoneMsg = 8;  
  sz_smSaveYourselfDoneMsg = 8;  
  sz_smDieMsg = 8;  
  sz_smShutdownCancelledMsg = 8;  
  sz_smCloseConnectionMsg = 8;  
  sz_smSetPropertiesMsg = 8;  
  sz_smDeletePropertiesMsg = 8;  
  sz_smGetPropertiesMsg = 8;  
  sz_smPropertiesReplyMsg = 8;  
  sz_smSaveYourselfPhase2RequestMsg = 8;  
  sz_smSaveYourselfPhase2Msg = 8;  
  sz_smSaveCompleteMsg = 8;  
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/SM/SM.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/SM/SM.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/SM/SM.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _SM_H_}
//// {$define _SM_H_}


const
  SmProtoMajor = 1;  
  SmProtoMinor = 0;  

  SmInteractStyleNone = 0;  
  SmInteractStyleErrors = 1;  
  SmInteractStyleAny = 2;  

  SmDialogError = 0;  
  SmDialogNormal = 1;  

  SmSaveGlobal = 0;  
  SmSaveLocal = 1;  
  SmSaveBoth = 2;  

  SmRestartIfRunning = 0;  
  SmRestartAnyway = 1;  
  SmRestartImmediately = 2;  
  SmRestartNever = 3;  

  SmCloneCommand = 'CloneCommand';  
  SmCurrentDirectory = 'CurrentDirectory';  
  SmDiscardCommand = 'DiscardCommand';  
  SmEnvironment = 'Environment';  
  SmProcessID = 'ProcessID';  
  SmProgram = 'Program';  
  SmRestartCommand = 'RestartCommand';  
  SmResignCommand = 'ResignCommand';  
  SmRestartStyleHint = 'RestartStyleHint';  
  SmShutdownCommand = 'ShutdownCommand';  
  SmUserID = 'UserID';  

  SmCARD8 = 'CARD8';  
  SmARRAY8 = 'ARRAY8';  
  SmLISTofARRAY8 = 'LISTofARRAY8';  

  SM_Error = 0;  
  SM_RegisterClient = 1;  
  SM_RegisterClientReply = 2;  
  SM_SaveYourself = 3;  
  SM_SaveYourselfRequest = 4;  
  SM_InteractRequest = 5;  
  SM_Interact = 6;  
  SM_InteractDone = 7;  
  SM_SaveYourselfDone = 8;  
  SM_Die = 9;  
  SM_ShutdownCancelled = 10;  
  SM_CloseConnection = 11;  
  SM_SetProperties = 12;  
  SM_DeleteProperties = 13;  
  SM_GetProperties = 14;  
  SM_PropertiesReply = 15;  
  SM_SaveYourselfPhase2Request = 16;  
  SM_SaveYourselfPhase2 = 17;  
  SM_SaveComplete = 18;  
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/xtestproto.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/xtestproto.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/xtestproto.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XTESTPROTO_H_}
//// {$define _XTESTPROTO_H_}
//// {$include <X11/extensions/xtestconst.h>}

const
  Window = CARD32;  
  Time = CARD32;  
  Cursor = CARD32;  
  X_XTestGetVersion = 0;  
  X_XTestCompareCursor = 1;  
  X_XTestFakeInput = 2;  
  X_XTestGrabControl = 3;  


type
  TxXTestGetVersionReq = record
      reqType : TCARD8;
      xtReqType : TCARD8;
      length : TCARD16;
      majorVersion : TCARD8;
      pad : TCARD8;
      minorVersion : TCARD16;
    end;

const
  sz_xXTestGetVersionReq = 8;  

type
  TxXTestGetVersionReply = record
      _type : TBYTE;
      majorVersion : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      minorVersion : TCARD16;
      pad0 : TCARD16;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_xXTestGetVersionReply = 32;  


type
  TxXTestCompareCursorReq = record
      reqType : TCARD8;
      xtReqType : TCARD8;
      length : TCARD16;
      window : TWindow;
      cursor : TCursor;
    end;

const
  sz_xXTestCompareCursorReq = 12;  

type
  TxXTestCompareCursorReply = record
      _type : TBYTE;
      same : TBOOL;
      sequenceNumber : TCARD16;
      length : TCARD32;
      pad0 : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_xXTestCompareCursorReply = 32;  



type
  TxXTestFakeInputReq = record
      reqType : TCARD8;
      xtReqType : TCARD8;
      length : TCARD16;
      _type : TBYTE;
      detail : TBYTE;
      pad0 : TCARD16;
      time : TTime;
      root : TWindow;
      pad1 : TCARD32;
      pad2 : TCARD32;
      rootX : TINT16;
      rootY : TINT16;
      pad3 : TCARD32;
      pad4 : TCARD16;
      pad5 : TCARD8;
      deviceid : TCARD8;
    end;

const
  sz_xXTestFakeInputReq = 36;  


type
  TxXTestGrabControlReq = record
      reqType : TCARD8;
      xtReqType : TCARD8;
      length : TCARD16;
      impervious : TBOOL;
      pad0 : TCARD8;
      pad1 : TCARD8;
      pad2 : TCARD8;
    end;

const
  sz_xXTestGrabControlReq = 8;  
//// {$undef Window}
//// {$undef Time}
//// {$undef Cursor}
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/xcmiscproto.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/xcmiscproto.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/xcmiscproto.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XCMISCPROTO_H_}
//// {$define _XCMISCPROTO_H_}

const
  X_XCMiscGetVersion = 0;  
  X_XCMiscGetXIDRange = 1;  
  X_XCMiscGetXIDList = 2;  
  XCMiscNumberEvents = 0;  
  XCMiscNumberErrors = 0;  
  XCMiscMajorVersion = 1;  
  XCMiscMinorVersion = 1;  
  XCMiscExtensionName = 'XC-MISC';  


type
  TxXCMiscGetVersionReq = record
      reqType : TCARD8;
      miscReqType : TCARD8;
      length : TCARD16;
      majorVersion : TCARD16;
      minorVersion : TCARD16;
    end;

const
  sz_xXCMiscGetVersionReq = 8;  

type
  TxXCMiscGetVersionReply = record
      _type : TBYTE;
      pad0 : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      majorVersion : TCARD16;
      minorVersion : TCARD16;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_xXCMiscGetVersionReply = 32;  


type
  TxXCMiscGetXIDRangeReq = record
      reqType : TCARD8;
      miscReqType : TCARD8;
      length : TCARD16;
    end;

const
  sz_xXCMiscGetXIDRangeReq = 4;  

type
  TxXCMiscGetXIDRangeReply = record
      _type : TBYTE;
      pad0 : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      start_id : TCARD32;
      count : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
    end;

const
  sz_xXCMiscGetXIDRangeReply = 32;  



type
  TxXCMiscGetXIDListReq = record
      reqType : TCARD8;
      miscReqType : TCARD8;
      length : TCARD16;
      count : TCARD32;
    end;

const
  sz_xXCMiscGetXIDListReq = 8;  


type
  TxXCMiscGetXIDListReply = record
      _type : TBYTE;
      pad0 : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      count : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_xXCMiscGetXIDListReply = 32;  
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/XKBgeom.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/XKBgeom.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/XKBgeom.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    PDisplay  = ^Display;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XKBGEOM_H_}
//// {$define _XKBGEOM_H_}
//// {$include <X11/extensions/XKBstr.h>}
type
  T_XkbProperty = record
      name : ^char;
      value : ^char;
    end;
  TXkbPropertyRec = T_XkbProperty;
  TXkbPropertyPtr = ^T_XkbProperty;

  T_XkbColor = record
      pixel : dword;
      spec : ^char;
    end;
  TXkbColorRec = T_XkbColor;
  TXkbColorPtr = ^T_XkbColor;

  T_XkbPoint = record
      x : smallint;
      y : smallint;
    end;
  TXkbPointRec = T_XkbPoint;
  TXkbPointPtr = ^T_XkbPoint;

  T_XkbBounds = record
      x1 : smallint;
      y1 : smallint;
      x2 : smallint;
      y2 : smallint;
    end;
  TXkbBoundsRec = T_XkbBounds;
  TXkbBoundsPtr = ^T_XkbBounds;

function XkbBoundsWidth(b : longint) : longint;

function XkbBoundsHeight(b : longint) : longint;


type
  T_XkbOutline = record
      num_points : word;
      sz_points : word;
      corner_radius : word;
      points : TXkbPointPtr;
    end;
  TXkbOutlineRec = T_XkbOutline;
  TXkbOutlinePtr = ^T_XkbOutline;

  T_XkbShape = record
      name : TAtom;
      num_outlines : word;
      sz_outlines : word;
      outlines : TXkbOutlinePtr;
      approx : TXkbOutlinePtr;
      primary : TXkbOutlinePtr;
      bounds : TXkbBoundsRec;
    end;
  TXkbShapeRec = T_XkbShape;
  TXkbShapePtr = ^T_XkbShape;

function XkbOutlineIndex(s,o : longint) : longint;

type
  T_XkbShapeDoodad = record
      name : TAtom;
      _type : byte;
      priority : byte;
      top : smallint;
      left : smallint;
      angle : smallint;
      color_ndx : word;
      shape_ndx : word;
    end;
  TXkbShapeDoodadRec = T_XkbShapeDoodad;
  TXkbShapeDoodadPtr = ^T_XkbShapeDoodad;

function XkbShapeDoodadColor(g,d : longint) : longint;

function XkbShapeDoodadShape(g,d : longint) : longint;

function XkbSetShapeDoodadColor(g,d,c : longint) : longint;

function XkbSetShapeDoodadShape(g,d,s : longint) : longint;

type
  T_XkbTextDoodad = record
      name : TAtom;
      _type : byte;
      priority : byte;
      top : smallint;
      left : smallint;
      angle : smallint;
      width : smallint;
      height : smallint;
      color_ndx : word;
      text : ^char;
      font : ^char;
    end;
  TXkbTextDoodadRec = T_XkbTextDoodad;
  TXkbTextDoodadPtr = ^T_XkbTextDoodad;

function XkbTextDoodadColor(g,d : longint) : longint;

function XkbSetTextDoodadColor(g,d,c : longint) : longint;

type
  T_XkbIndicatorDoodad = record
      name : TAtom;
      _type : byte;
      priority : byte;
      top : smallint;
      left : smallint;
      angle : smallint;
      shape_ndx : word;
      on_color_ndx : word;
      off_color_ndx : word;
    end;
  TXkbIndicatorDoodadRec = T_XkbIndicatorDoodad;
  TXkbIndicatorDoodadPtr = ^T_XkbIndicatorDoodad;

function XkbIndicatorDoodadShape(g,d : longint) : longint;

function XkbIndicatorDoodadOnColor(g,d : longint) : longint;

function XkbIndicatorDoodadOffColor(g,d : longint) : longint;

function XkbSetIndicatorDoodadOnColor(g,d,c : longint) : longint;

function XkbSetIndicatorDoodadOffColor(g,d,c : longint) : longint;

function XkbSetIndicatorDoodadShape(g,d,s : longint) : longint;

type
  T_XkbLogoDoodad = record
      name : TAtom;
      _type : byte;
      priority : byte;
      top : smallint;
      left : smallint;
      angle : smallint;
      color_ndx : word;
      shape_ndx : word;
      logo_name : ^char;
    end;
  TXkbLogoDoodadRec = T_XkbLogoDoodad;
  TXkbLogoDoodadPtr = ^T_XkbLogoDoodad;

function XkbLogoDoodadColor(g,d : longint) : longint;

function XkbLogoDoodadShape(g,d : longint) : longint;

function XkbSetLogoDoodadColor(g,d,c : longint) : longint;

function XkbSetLogoDoodadShape(g,d,s : longint) : longint;

type
  T_XkbAnyDoodad = record
      name : TAtom;
      _type : byte;
      priority : byte;
      top : smallint;
      left : smallint;
      angle : smallint;
    end;
  TXkbAnyDoodadRec = T_XkbAnyDoodad;
  TXkbAnyDoodadPtr = ^T_XkbAnyDoodad;

  T_XkbDoodad = record
      case longint of
        0 : ( any : TXkbAnyDoodadRec );
        1 : ( shape : TXkbShapeDoodadRec );
        2 : ( text : TXkbTextDoodadRec );
        3 : ( indicator : TXkbIndicatorDoodadRec );
        4 : ( logo : TXkbLogoDoodadRec );
      end;
  TXkbDoodadRec = T_XkbDoodad;
  TXkbDoodadPtr = ^T_XkbDoodad;

const
  XkbUnknownDoodad = 0;  
  XkbOutlineDoodad = 1;  
  XkbSolidDoodad = 2;  
  XkbTextDoodad = 3;  
  XkbIndicatorDoodad = 4;  
  XkbLogoDoodad = 5;  
type
  T_XkbKey = record
      name : TXkbKeyNameRec;
      gap : smallint;
      shape_ndx : byte;
      color_ndx : byte;
    end;
  TXkbKeyRec = T_XkbKey;
  TXkbKeyPtr = ^T_XkbKey;

function XkbKeyShape(g,k : longint) : longint;

function XkbKeyColor(g,k : longint) : longint;

function XkbSetKeyShape(g,k,s : longint) : longint;

function XkbSetKeyColor(g,k,c : longint) : longint;

type
  T_XkbRow = record
      top : smallint;
      left : smallint;
      num_keys : word;
      sz_keys : word;
      vertical : longint;
      keys : TXkbKeyPtr;
      bounds : TXkbBoundsRec;
    end;
  TXkbRowRec = T_XkbRow;
  TXkbRowPtr = ^T_XkbRow;

  T_XkbSection = record
      name : TAtom;
      priority : byte;
      top : smallint;
      left : smallint;
      width : word;
      height : word;
      angle : smallint;
      num_rows : word;
      num_doodads : word;
      num_overlays : word;
      sz_rows : word;
      sz_doodads : word;
      sz_overlays : word;
      rows : TXkbRowPtr;
      doodads : TXkbDoodadPtr;
      bounds : TXkbBoundsRec;
      overlays : ^T_XkbOverlay;
    end;
  TXkbSectionRec = T_XkbSection;
  TXkbSectionPtr = ^T_XkbSection;

  T_XkbOverlayKey = record
      over : TXkbKeyNameRec;
      under : TXkbKeyNameRec;
    end;
  TXkbOverlayKeyRec = T_XkbOverlayKey;
  TXkbOverlayKeyPtr = ^T_XkbOverlayKey;

  T_XkbOverlayRow = record
      row_under : word;
      num_keys : word;
      sz_keys : word;
      keys : TXkbOverlayKeyPtr;
    end;
  TXkbOverlayRowRec = T_XkbOverlayRow;
  TXkbOverlayRowPtr = ^T_XkbOverlayRow;

  T_XkbOverlay = record
      name : TAtom;
      section_under : TXkbSectionPtr;
      num_rows : word;
      sz_rows : word;
      rows : TXkbOverlayRowPtr;
      bounds : TXkbBoundsPtr;
    end;
  TXkbOverlayRec = T_XkbOverlay;
  TXkbOverlayPtr = ^T_XkbOverlay;

  T_XkbGeometry = record
      name : TAtom;
      width_mm : word;
      height_mm : word;
      label_font : ^char;
      label_color : TXkbColorPtr;
      base_color : TXkbColorPtr;
      sz_properties : word;
      sz_colors : word;
      sz_shapes : word;
      sz_sections : word;
      sz_doodads : word;
      sz_key_aliases : word;
      num_properties : word;
      num_colors : word;
      num_shapes : word;
      num_sections : word;
      num_doodads : word;
      num_key_aliases : word;
      properties : TXkbPropertyPtr;
      colors : TXkbColorPtr;
      shapes : TXkbShapePtr;
      sections : TXkbSectionPtr;
      doodads : TXkbDoodadPtr;
      key_aliases : TXkbKeyAliasPtr;
    end;
  TXkbGeometryRec = T_XkbGeometry;

function XkbGeomColorIndex(g,c : longint) : longint;

const
  XkbGeomPropertiesMask = 1 shl 0;  
  XkbGeomColorsMask = 1 shl 1;  
  XkbGeomShapesMask = 1 shl 2;  
  XkbGeomSectionsMask = 1 shl 3;  
  XkbGeomDoodadsMask = 1 shl 4;  
  XkbGeomKeyAliasesMask = 1 shl 5;  
  XkbGeomAllMask = $3f;  
type
  T_XkbGeometrySizes = record
      which : dword;
      num_properties : word;
      num_colors : word;
      num_shapes : word;
      num_sections : word;
      num_doodads : word;
      num_key_aliases : word;
    end;
  TXkbGeometrySizesRec = T_XkbGeometrySizes;
  TXkbGeometrySizesPtr = ^T_XkbGeometrySizes;
//// (* error 
//// extern	XkbPropertyPtr

in declaration at line 284 *)
//// (* error 
////     _Xconst char *	/* alias */,
//// (* error 
////     _Xconst char *	/* real */

 in declarator_list *)
 in declarator_list *)
//// (* error 
////     _Xconst char *	/* spec */,
//// (* error 
////     unsigned int	/* pixel */

 in declarator_list *)
 in declarator_list *)


function XkbAddGeomOutline(_para1:TXkbShapePtr; _para2:longint):TXkbOutlinePtr;cdecl;external;

function XkbAddGeomShape(_para1:TXkbGeometryPtr; _para2:TAtom; _para3:longint):TXkbShapePtr;cdecl;external;

function XkbAddGeomKey(_para1:TXkbRowPtr):TXkbKeyPtr;cdecl;external;

function XkbAddGeomRow(_para1:TXkbSectionPtr; _para2:longint):TXkbRowPtr;cdecl;external;

function XkbAddGeomSection(_para1:TXkbGeometryPtr; _para2:TAtom; _para3:longint; _para4:longint; _para5:longint):TXkbSectionPtr;cdecl;external;

function XkbAddGeomOverlay(_para1:TXkbSectionPtr; _para2:TAtom; _para3:longint):TXkbOverlayPtr;cdecl;external;

function XkbAddGeomOverlayRow(_para1:TXkbOverlayPtr; _para2:longint; _para3:longint):TXkbOverlayRowPtr;cdecl;external;
//// (* error 
////     _Xconst char *	/* over */,
//// (* error 
////     _Xconst char *	/* under */

 in declarator_list *)
 in declarator_list *)

function XkbAddGeomDoodad(_para1:TXkbGeometryPtr; _para2:TXkbSectionPtr; _para3:TAtom):TXkbDoodadPtr;cdecl;external;

procedure XkbFreeGeomKeyAliases(_para1:TXkbGeometryPtr; _para2:longint; _para3:longint; _para4:TBool);cdecl;external;

procedure XkbFreeGeomColors(_para1:TXkbGeometryPtr; _para2:longint; _para3:longint; _para4:TBool);cdecl;external;

procedure XkbFreeGeomDoodads(_para1:TXkbDoodadPtr; _para2:longint; _para3:TBool);cdecl;external;

procedure XkbFreeGeomProperties(_para1:TXkbGeometryPtr; _para2:longint; _para3:longint; _para4:TBool);cdecl;external;

procedure XkbFreeGeomOverlayKeys(_para1:TXkbOverlayRowPtr; _para2:longint; _para3:longint; _para4:TBool);cdecl;external;

procedure XkbFreeGeomOverlayRows(_para1:TXkbOverlayPtr; _para2:longint; _para3:longint; _para4:TBool);cdecl;external;

procedure XkbFreeGeomOverlays(_para1:TXkbSectionPtr; _para2:longint; _para3:longint; _para4:TBool);cdecl;external;

procedure XkbFreeGeomKeys(_para1:TXkbRowPtr; _para2:longint; _para3:longint; _para4:TBool);cdecl;external;

procedure XkbFreeGeomRows(_para1:TXkbSectionPtr; _para2:longint; _para3:longint; _para4:TBool);cdecl;external;

procedure XkbFreeGeomSections(_para1:TXkbGeometryPtr; _para2:longint; _para3:longint; _para4:TBool);cdecl;external;

procedure XkbFreeGeomPoints(_para1:TXkbOutlinePtr; _para2:longint; _para3:longint; _para4:TBool);cdecl;external;

procedure XkbFreeGeomOutlines(_para1:TXkbShapePtr; _para2:longint; _para3:longint; _para4:TBool);cdecl;external;

procedure XkbFreeGeomShapes(_para1:TXkbGeometryPtr; _para2:longint; _para3:longint; _para4:TBool);cdecl;external;

procedure XkbFreeGeometry(_para1:TXkbGeometryPtr; _para2:dword; _para3:TBool);cdecl;external;

function XkbAllocGeomProps(_para1:TXkbGeometryPtr; _para2:longint):TStatus;cdecl;external;

function XkbAllocGeomKeyAliases(_para1:TXkbGeometryPtr; _para2:longint):TStatus;cdecl;external;

function XkbAllocGeomColors(_para1:TXkbGeometryPtr; _para2:longint):TStatus;cdecl;external;

function XkbAllocGeomShapes(_para1:TXkbGeometryPtr; _para2:longint):TStatus;cdecl;external;

function XkbAllocGeomSections(_para1:TXkbGeometryPtr; _para2:longint):TStatus;cdecl;external;

function XkbAllocGeomOverlays(_para1:TXkbSectionPtr; _para2:longint):TStatus;cdecl;external;

function XkbAllocGeomOverlayRows(_para1:TXkbOverlayPtr; _para2:longint):TStatus;cdecl;external;

function XkbAllocGeomOverlayKeys(_para1:TXkbOverlayRowPtr; _para2:longint):TStatus;cdecl;external;

function XkbAllocGeomDoodads(_para1:TXkbGeometryPtr; _para2:longint):TStatus;cdecl;external;

function XkbAllocGeomSectionDoodads(_para1:TXkbSectionPtr; _para2:longint):TStatus;cdecl;external;

function XkbAllocGeomOutlines(_para1:TXkbShapePtr; _para2:longint):TStatus;cdecl;external;

function XkbAllocGeomRows(_para1:TXkbSectionPtr; _para2:longint):TStatus;cdecl;external;

function XkbAllocGeomPoints(_para1:TXkbOutlinePtr; _para2:longint):TStatus;cdecl;external;

function XkbAllocGeomKeys(_para1:TXkbRowPtr; _para2:longint):TStatus;cdecl;external;

function XkbAllocGeometry(_para1:TXkbDescPtr; _para2:TXkbGeometrySizesPtr):TStatus;cdecl;external;

function XkbSetGeometry(_para1:PTDisplay; _para2:dword; _para3:TXkbGeometryPtr):TStatus;cdecl;external;

function XkbComputeShapeTop(_para1:TXkbShapePtr; _para2:TXkbBoundsPtr):TBool;cdecl;external;

function XkbComputeShapeBounds(_para1:TXkbShapePtr):TBool;cdecl;external;

function XkbComputeRowBounds(_para1:TXkbGeometryPtr; _para2:TXkbSectionPtr; _para3:TXkbRowPtr):TBool;cdecl;external;

function XkbComputeSectionBounds(_para1:TXkbGeometryPtr; _para2:TXkbSectionPtr):TBool;cdecl;external;
//// (* error 
//// 	_Xconst char *		/* under */

 in declarator_list *)

function XkbGetGeometry(_para1:PTDisplay; _para2:TXkbDescPtr):TStatus;cdecl;external;

function XkbGetNamedGeometry(_para1:PTDisplay; _para2:TXkbDescPtr; _para3:TAtom):TStatus;cdecl;external;
//// {$endif}

//// (* error 
//// #endif /* _XKBSTR_H_ */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/dpmsproto.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/dpmsproto.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/dpmsproto.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _DPMSPROTO_H_}
//// {$define _DPMSPROTO_H_}
//// {$include <X11/extensions/dpmsconst.h>}

const
  X_DPMSGetVersion = 0;  
  X_DPMSCapable = 1;  
  X_DPMSGetTimeouts = 2;  
  X_DPMSSetTimeouts = 3;  
  X_DPMSEnable = 4;  
  X_DPMSDisable = 5;  
  X_DPMSForceLevel = 6;  
  X_DPMSInfo = 7;  
  X_DPMSSelectInput = 8;  
  DPMSNumberEvents = 0;  
  DPMSNumberErrors = 0;  


type
  TxDPMSGetVersionReq = record
      reqType : TCARD8;
      dpmsReqType : TCARD8;
      length : TCARD16;
      majorVersion : TCARD16;
      minorVersion : TCARD16;
    end;

const
  sz_xDPMSGetVersionReq = 8;  

type
  TxDPMSGetVersionReply = record
      _type : TBYTE;
      pad0 : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      majorVersion : TCARD16;
      minorVersion : TCARD16;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_xDPMSGetVersionReply = 32;  


type
  TxDPMSCapableReq = record
      reqType : TCARD8;
      dpmsReqType : TCARD8;
      length : TCARD16;
    end;

const
  sz_xDPMSCapableReq = 4;  

type
  TxDPMSCapableReply = record
      _type : TBYTE;
      pad0 : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      capable : TBOOL;
      pad1 : TCARD8;
      pad2 : TCARD16;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
      pad7 : TCARD32;
    end;

const
  sz_xDPMSCapableReply = 32;  


type
  TxDPMSGetTimeoutsReq = record
      reqType : TCARD8;
      dpmsReqType : TCARD8;
      length : TCARD16;
    end;

const
  sz_xDPMSGetTimeoutsReq = 4;  

type
  TxDPMSGetTimeoutsReply = record
      _type : TBYTE;
      pad0 : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      standby : TCARD16;
      suspend : TCARD16;
      off : TCARD16;
      pad1 : TCARD16;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_xDPMSGetTimeoutsReply = 32;  


type
  TxDPMSSetTimeoutsReq = record
      reqType : TCARD8;
      dpmsReqType : TCARD8;
      length : TCARD16;
      standby : TCARD16;
      suspend : TCARD16;
      off : TCARD16;
      pad0 : TCARD16;
    end;

const
  sz_xDPMSSetTimeoutsReq = 12;  


type
  TxDPMSEnableReq = record
      reqType : TCARD8;
      dpmsReqType : TCARD8;
      length : TCARD16;
    end;

const
  sz_xDPMSEnableReq = 4;  


type
  TxDPMSDisableReq = record
      reqType : TCARD8;
      dpmsReqType : TCARD8;
      length : TCARD16;
    end;

const
  sz_xDPMSDisableReq = 4;  



type
  TxDPMSForceLevelReq = record
      reqType : TCARD8;
      dpmsReqType : TCARD8;
      length : TCARD16;
      level : TCARD16;
      pad0 : TCARD16;
    end;

const
  sz_xDPMSForceLevelReq = 8;  


type
  TxDPMSInfoReq = record
      reqType : TCARD8;
      dpmsReqType : TCARD8;
      length : TCARD16;
    end;

const
  sz_xDPMSInfoReq = 4;  

type
  TxDPMSInfoReply = record
      _type : TBYTE;
      pad0 : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      power_level : TCARD16;
      state : TBOOL;
      pad1 : TCARD8;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;

const
  sz_xDPMSInfoReply = 32;  


//// (* error 
////     CARD16	length B16;
 in declarator_list *)
//// (* error 
////     CARD32	eventMask B32;
 in declarator_list *)
type
  TxDPMSSelectInputReq = record
      reqType : TCARD8;
      dpmsReqType : TCARD8;
;
;
    end;

const
  sz_xDPMSSelectInputReq = 8;  
//// (* error 
////     CARD16	sequenceNumber B16;
 in declarator_list *)
//// (* error 
////     CARD16	evtype B16;
 in declarator_list *)
//// (* error 
////     CARD16	pad0 B16;
 in declarator_list *)
//// (* error 
////     Time	timestamp B32;
 in declarator_list *)
//// (* error 
////     CARD16	power_level B16;
 in declarator_list *)
//// (* error 
////     CARD32	pad2 B32;
 in declarator_list *)
//// (* error 
////     CARD32	pad3 B32;
 in declarator_list *)
//// (* error 
////     CARD32	pad4 B32;
 in declarator_list *)
type
  TxDPMSInfoNotifyEvent = record
      _type : TCARD8;
      extension : TCARD8;
;
      length : TCARD32;
;
;
;
;
      state : TBOOL;
      pad1 : TCARD8;
;
;
;
    end;

const
  sz_xDPMSInfoNotifyEvent = 32;  
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/presentproto.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/presentproto.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/presentproto.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _PRESENT_PROTO_H_}
//// {$define _PRESENT_PROTO_H_}
//// {$include <X11/extensions/presenttokens.h>}

const
  Window = CARD32;  
  Pixmap = CARD32;  
  Region = CARD32;  
  XSyncFence = CARD32;  
  EventID = CARD32;  
type
  TxPresentNotify = record
      window : TWindow;
      serial : TCARD32;
    end;

const
  sz_xPresentNotify = 8;  
type
  TxPresentQueryVersionReq = record
      reqType : TCARD8;
      presentReqType : TCARD8;
      length : TCARD16;
      majorVersion : TCARD32;
      minorVersion : TCARD32;
    end;

const
  sz_xPresentQueryVersionReq = 12;  

type
  TxPresentQueryVersionReply = record
      _type : TBYTE;
      pad1 : TBYTE;
      sequenceNumber : TCARD16;
      length : TCARD32;
      majorVersion : TCARD32;
      minorVersion : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_xPresentQueryVersionReply = 32;  

type
  TxPresentPixmapReq = record
      reqType : TCARD8;
      presentReqType : TCARD8;
      length : TCARD16;
      window : TWindow;
      pixmap : TPixmap;
      serial : TCARD32;
      valid : TRegion;
      update : TRegion;
      x_off : TINT16;
      y_off : TINT16;
      target_crtc : TCARD32;
      wait_fence : TXSyncFence;
      idle_fence : TXSyncFence;
      options : TCARD32;
      pad1 : TCARD32;
      target_msc : TCARD64;
      divisor : TCARD64;
      remainder : TCARD64;
    end;

const
  sz_xPresentPixmapReq = 72;  
type
  TxPresentNotifyMSCReq = record
      reqType : TCARD8;
      presentReqType : TCARD8;
      length : TCARD16;
      window : TWindow;
      serial : TCARD32;
      pad0 : TCARD32;
      target_msc : TCARD64;
      divisor : TCARD64;
      remainder : TCARD64;
    end;

const
  sz_xPresentNotifyMSCReq = 40;  
type
  TxPresentSelectInputReq = record
      reqType : TCARD8;
      presentReqType : TCARD8;
      length : TCARD16;
      eid : TCARD32;
      window : TCARD32;
      eventMask : TCARD32;
    end;

const
  sz_xPresentSelectInputReq = 16;  
type
  TxPresentQueryCapabilitiesReq = record
      reqType : TCARD8;
      presentReqType : TCARD8;
      length : TCARD16;
      target : TCARD32;
    end;

const
  sz_xPresentQueryCapabilitiesReq = 8;  

type
  TxPresentQueryCapabilitiesReply = record
      _type : TBYTE;
      pad1 : TBYTE;
      sequenceNumber : TCARD16;
      length : TCARD32;
      capabilities : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
      pad7 : TCARD32;
    end;

const
  sz_xPresentQueryCapabilitiesReply = 32;  

type
  TxPresentConfigureNotify = record
      _type : TCARD8;
      extension : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      evtype : TCARD16;
      pad2 : TCARD16;
      eid : TCARD32;
      window : TCARD32;
      x : TINT16;
      y : TINT16;
      width : TCARD16;
      height : TCARD16;
      off_x : TINT16;
      off_y : TINT16;
      pixmap_width : TCARD16;
      pixmap_height : TCARD16;
      pixmap_flags : TCARD32;
    end;

const
  sz_xPresentConfigureNotify = 40;  
type
  TxPresentCompleteNotify = record
      _type : TCARD8;
      extension : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      evtype : TCARD16;
      kind : TCARD8;
      mode : TCARD8;
      eid : TCARD32;
      window : TWindow;
      serial : TCARD32;
      ust : TCARD64;
      msc : TCARD64;
    end;

const
  sz_xPresentCompleteNotify = 40;  
type
  TxPresentIdleNotify = record
      _type : TCARD8;
      extension : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      evtype : TCARD16;
      pad2 : TCARD16;
      eid : TCARD32;
      window : TWindow;
      serial : TCARD32;
      pixmap : TPixmap;
      idle_fence : TCARD32;
    end;

const
  sz_xPresentIdleNotify = 32;  
//// {$if PRESENT_FUTURE_VERSION}

type
  TxPresentRedirectNotify = record
      _type : TCARD8;
      extension : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      evtype : TCARD16;
      update_window : TCARD8;
      pad1 : TCARD8;
      eid : TCARD32;
      event_window : TWindow;
      window : TWindow;
      pixmap : TPixmap;
      serial : TCARD32;
      valid_region : TRegion;
      update_region : TRegion;
      valid_rect : TxRectangle;
      update_rect : TxRectangle;
      x_off : TINT16;
      y_off : TINT16;
      target_crtc : TCARD32;
      wait_fence : TXSyncFence;
      idle_fence : TXSyncFence;
      options : TCARD32;
      pad2 : TCARD32;
      target_msc : TCARD64;
      divisor : TCARD64;
      remainder : TCARD64;
    end;

const
  sz_xPresentRedirectNotify = 104;  
//// {$endif}
//// {$undef Window}
//// {$undef Pixmap}
//// {$undef Region}
//// {$undef XSyncFence}
//// {$undef EventID}
//// {$endif}

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/render.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/render.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/render.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _RENDER_H_}
//// {$define _RENDER_H_}
//// {$include <X11/Xdefs.h>}
type
  TGlyph = TXID;

  TGlyphSet = TXID;

  TPicture = TXID;

  TPictFormat = TXID;

const
  RENDER_NAME = 'RENDER';  
  RENDER_MAJOR = 0;  
  RENDER_MINOR = 11;  
  X_RenderQueryVersion = 0;  
  X_RenderQueryPictFormats = 1;  

  X_RenderQueryPictIndexValues = 2;  
  X_RenderQueryDithers = 3;  
  X_RenderCreatePicture = 4;  
  X_RenderChangePicture = 5;  
  X_RenderSetPictureClipRectangles = 6;  
  X_RenderFreePicture = 7;  
  X_RenderComposite = 8;  
  X_RenderScale = 9;  
  X_RenderTrapezoids = 10;  
  X_RenderTriangles = 11;  
  X_RenderTriStrip = 12;  
  X_RenderTriFan = 13;  
  X_RenderColorTrapezoids = 14;  
  X_RenderColorTriangles = 15;  

  X_RenderCreateGlyphSet = 17;  
  X_RenderReferenceGlyphSet = 18;  
  X_RenderFreeGlyphSet = 19;  
  X_RenderAddGlyphs = 20;  
  X_RenderAddGlyphsFromPicture = 21;  
  X_RenderFreeGlyphs = 22;  
  X_RenderCompositeGlyphs8 = 23;  
  X_RenderCompositeGlyphs16 = 24;  
  X_RenderCompositeGlyphs32 = 25;  
  X_RenderFillRectangles = 26;  

  X_RenderCreateCursor = 27;  

  X_RenderSetPictureTransform = 28;  
  X_RenderQueryFilters = 29;  
  X_RenderSetPictureFilter = 30;  

  X_RenderCreateAnimCursor = 31;  

  X_RenderAddTraps = 32;  

  X_RenderCreateSolidFill = 33;  
  X_RenderCreateLinearGradient = 34;  
  X_RenderCreateRadialGradient = 35;  
  X_RenderCreateConicalGradient = 36;  
  RenderNumberRequests = X_RenderCreateConicalGradient+1;  
  BadPictFormat = 0;  
  BadPicture = 1;  
  BadPictOp = 2;  
  BadGlyphSet = 3;  
  BadGlyph = 4;  
  RenderNumberErrors = BadGlyph+1;  
  PictTypeIndexed = 0;  
  PictTypeDirect = 1;  
  PictOpMinimum = 0;  
  PictOpClear = 0;  
  PictOpSrc = 1;  
  PictOpDst = 2;  
  PictOpOver = 3;  
  PictOpOverReverse = 4;  
  PictOpIn = 5;  
  PictOpInReverse = 6;  
  PictOpOut = 7;  
  PictOpOutReverse = 8;  
  PictOpAtop = 9;  
  PictOpAtopReverse = 10;  
  PictOpXor = 11;  
  PictOpAdd = 12;  
  PictOpSaturate = 13;  
  PictOpMaximum = 13;  

  PictOpDisjointMinimum = $10;  
  PictOpDisjointClear = $10;  
  PictOpDisjointSrc = $11;  
  PictOpDisjointDst = $12;  
  PictOpDisjointOver = $13;  
  PictOpDisjointOverReverse = $14;  
  PictOpDisjointIn = $15;  
  PictOpDisjointInReverse = $16;  
  PictOpDisjointOut = $17;  
  PictOpDisjointOutReverse = $18;  
  PictOpDisjointAtop = $19;  
  PictOpDisjointAtopReverse = $1a;  
  PictOpDisjointXor = $1b;  
  PictOpDisjointMaximum = $1b;  
  PictOpConjointMinimum = $20;  
  PictOpConjointClear = $20;  
  PictOpConjointSrc = $21;  
  PictOpConjointDst = $22;  
  PictOpConjointOver = $23;  
  PictOpConjointOverReverse = $24;  
  PictOpConjointIn = $25;  
  PictOpConjointInReverse = $26;  
  PictOpConjointOut = $27;  
  PictOpConjointOutReverse = $28;  
  PictOpConjointAtop = $29;  
  PictOpConjointAtopReverse = $2a;  
  PictOpConjointXor = $2b;  
  PictOpConjointMaximum = $2b;  

  PictOpBlendMinimum = $30;  
  PictOpMultiply = $30;  
  PictOpScreen = $31;  
  PictOpOverlay = $32;  
  PictOpDarken = $33;  
  PictOpLighten = $34;  
  PictOpColorDodge = $35;  
  PictOpColorBurn = $36;  
  PictOpHardLight = $37;  
  PictOpSoftLight = $38;  
  PictOpDifference = $39;  
  PictOpExclusion = $3a;  
  PictOpHSLHue = $3b;  
  PictOpHSLSaturation = $3c;  
  PictOpHSLColor = $3d;  
  PictOpHSLLuminosity = $3e;  
  PictOpBlendMaximum = $3e;  
  PolyEdgeSharp = 0;  
  PolyEdgeSmooth = 1;  
  PolyModePrecise = 0;  
  PolyModeImprecise = 1;  
  CPRepeat = 1 shl 0;  
  CPAlphaMap = 1 shl 1;  
  CPAlphaXOrigin = 1 shl 2;  
  CPAlphaYOrigin = 1 shl 3;  
  CPClipXOrigin = 1 shl 4;  
  CPClipYOrigin = 1 shl 5;  
  CPClipMask = 1 shl 6;  
  CPGraphicsExposure = 1 shl 7;  
  CPSubwindowMode = 1 shl 8;  
  CPPolyEdge = 1 shl 9;  
  CPPolyMode = 1 shl 10;  
  CPDither = 1 shl 11;  
  CPComponentAlpha = 1 shl 12;  
  CPLastBit = 12;  

  FilterNearest = 'nearest';  
  FilterBilinear = 'bilinear';  

  FilterConvolution = 'convolution';  
  FilterFast = 'fast';  
  FilterGood = 'good';  
  FilterBest = 'best';  
  FilterAliasNone = -(1);  

  SubPixelUnknown = 0;  
  SubPixelHorizontalRGB = 1;  
  SubPixelHorizontalBGR = 2;  
  SubPixelVerticalRGB = 3;  
  SubPixelVerticalBGR = 4;  
  SubPixelNone = 5;  

  RepeatNone = 0;  
  RepeatNormal = 1;  
  RepeatPad = 2;  
  RepeatReflect = 3;  
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/agproto.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/agproto.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/agproto.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _AGPROTO_H_ /* { */}
//// {$define _AGPROTO_H_}
//// {$include <X11/extensions/ag.h>}

const
  X_XagQueryVersion = 0;  
  X_XagCreate = 1;  
  X_XagDestroy = 2;  
  X_XagGetAttr = 3;  
  X_XagQuery = 4;  
  X_XagCreateAssoc = 5;  
  X_XagDestroyAssoc = 6;  
  XAppGroup = CARD32;  

  Colormap = CARD32;  
  VisualID = CARD32;  
  Window = CARD32;  


type
  T_XagQueryVersion = record
      reqType : TCARD8;
      xagReqType : TCARD8;
      length : TCARD16;
      client_major_version : TCARD16;
      client_minor_version : TCARD16;
    end;
  TxXagQueryVersionReq = T_XagQueryVersion;

const
  sz_xXagQueryVersionReq = 8;  

type
  TxXagQueryVersionReply = record
      _type : TBYTE;
      pad1 : TBOOL;
      sequence_number : TCARD16;
      length : TCARD32;
      server_major_version : TCARD16;
      server_minor_version : TCARD16;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;

const
  sz_xXagQueryVersionReply = 32;  

//// (* error 
//// #define XagSingleScreenMask		1 << 0
in define line 78 *)
//// (* error 
//// #define XagDefaultRootMask		1 << XagNdefaultRoot
in define line 79 *)
//// (* error 
//// #define XagRootVisualMask		1 << XagNrootVisual
in define line 80 *)
//// (* error 
//// #define XagDefaultColormapMask		1 << XagNdefaultColormap
in define line 81 *)
//// (* error 
//// #define XagBlackPixelMask		1 << XagNblackPixel
in define line 82 *)
//// (* error 
//// #define XagWhitePixelMask		1 << XagNwhitePixel
in define line 83 *)
//// (* error 
//// #define XagAppGroupLeaderMask		1 << XagNappGroupLeader
in define line 84 *)



    type
      T_XagCreate = record
          reqType : TCARD8;
          xagReqType : TCARD8;
          length : TCARD16;
          app_group : TXAppGroup;
          attrib_mask : TCARD32;
        end;
      TxXagCreateReq = T_XagCreate;

    const
      sz_xXagCreateReq = 12;      


    type
      T_XagDestroy = record
          reqType : TCARD8;
          xagReqType : TCARD8;
          length : TCARD16;
          app_group : TXAppGroup;
        end;
      TxXagDestroyReq = T_XagDestroy;

    const
      sz_xXagDestroyReq = 8;      


    type
      T_XagGetAttr = record
          reqType : TCARD8;
          xagReqType : TCARD8;
          length : TCARD16;
          app_group : TXAppGroup;
        end;
      TxXagGetAttrReq = T_XagGetAttr;

    const
      sz_xXagGetAttrReq = 8;      

    type
      TxXagGetAttrReply = record
          _type : TBYTE;
          pad1 : TBOOL;
          sequence_number : TCARD16;
          length : TCARD32;
          default_root : TWindow;
          root_visual : TVisualID;
          default_colormap : TColormap;
          black_pixel : TCARD32;
          white_pixel : TCARD32;
          single_screen : TBOOL;
          app_group_leader : TBOOL;
          pad2 : TCARD16;
        end;

    const
      sz_xXagGetAttrReply = 32;      


    type
      T_XagQuery = record
          reqType : TCARD8;
          xagReqType : TCARD8;
          length : TCARD16;
          resource : TCARD32;
        end;
      TxXagQueryReq = T_XagQuery;

    const
      sz_xXagQueryReq = 8;      

    type
      TxXagQueryReply = record
          _type : TBYTE;
          pad1 : TBOOL;
          sequence_number : TCARD16;
          length : TCARD32;
          app_group : TXAppGroup;
          pad2 : TCARD32;
          pad3 : TCARD32;
          pad4 : TCARD32;
          pad5 : TCARD32;
          pad6 : TCARD32;
        end;

    const
      sz_xXagQueryReply = 32;      



    type
      T_XagCreateAssoc = record
          reqType : TCARD8;
          xagReqType : TCARD8;
          length : TCARD16;
          window : TWindow;
          window_type : TCARD16;
          system_window_len : TCARD16;
        end;
      TxXagCreateAssocReq = T_XagCreateAssoc;

    const
      sz_xXagCreateAssocReq = 12;      


    type
      T_XagDestroyAssoc = record
          reqType : TCARD8;
          xagReqType : TCARD8;
          length : TCARD16;
          window : TWindow;
        end;
      TxXagDestroyAssocReq = T_XagDestroyAssoc;

    const
      sz_xXagDestroyAssocReq = 8;      
//// {$undef XAppGroup}

//// {$undef Window}
//// {$undef Colormap}
//// {$undef VisualID}
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/xf86dgastr.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/xf86dgastr.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/xf86dgastr.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}


//// (* error 
//// #warning "xf86dgastr.h is obsolete and may be removed in the future."
//// (* error 
//// #warning "xf86dgastr.h is obsolete and may be removed in the future."
//// {$include <X11/extensions/xf86dgaproto.h>}

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/shapestr.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/shapestr.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/shapestr.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}


//// {$ifndef _SHAPESTR_H_}
//// {$define _SHAPESTR_H_}
//// (* error 
//// #warning "shapestr.h is obsolete and may be removed in the future."
//// (* error 
//// #warning "shapestr.h is obsolete and may be removed in the future."
//// {$include <X11/extensions/shapeproto.h>}
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/Xrandr.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/Xrandr.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/Xrandr.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    PAtom  = ^Atom;
    Pbyte  = ^byte;
    PDisplay  = ^Display;
    Pdword  = ^dword;
    Plongint  = ^longint;
    PRotation  = ^Rotation;
    PRROutput  = ^RROutput;
    PTime  = ^Time;
    PXEvent  = ^XEvent;
    PXRRCrtcGamma  = ^XRRCrtcGamma;
    PXRRCrtcInfo  = ^XRRCrtcInfo;
    PXRRCrtcTransformAttributes  = ^XRRCrtcTransformAttributes;
    PXRRModeInfo  = ^XRRModeInfo;
    PXRRMonitorInfo  = ^XRRMonitorInfo;
    PXRROutputInfo  = ^XRROutputInfo;
    PXRRPanning  = ^XRRPanning;
    PXRRProviderInfo  = ^XRRProviderInfo;
    PXRRProviderResources  = ^XRRProviderResources;
    PXRRScreenConfiguration  = ^XRRScreenConfiguration;
    PXRRScreenResources  = ^XRRScreenResources;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XRANDR_H_}
//// {$define _XRANDR_H_}
//// {$include <X11/extensions/randr.h>}
//// {$include <X11/extensions/Xrender.h>}
//// {$include <X11/Xfuncproto.h>}
//// (* error 
//// typedef XID RROutput;
in declaration at line 39 *)
    type
      TRRCrtc = TXID;

      TRRMode = TXID;

      TRRProvider = TXID;

      TXRRScreenSize = record
          width : longint;
          height : longint;
          mwidth : longint;
          mheight : longint;
        end;










      TXRRScreenChangeNotifyEvent = record
          _type : longint;
          serial : dword;
          send_event : TBool;
          display : ^TDisplay;
          window : TWindow;
          root : TWindow;
          timestamp : TTime;
          config_timestamp : TTime;
          size_index : TSizeID;
          subpixel_order : TSubpixelOrder;
          rotation : TRotation;
          width : longint;
          height : longint;
          mwidth : longint;
          mheight : longint;
        end;







      TXRRNotifyEvent = record
          _type : longint;
          serial : dword;
          send_event : TBool;
          display : ^TDisplay;
          window : TWindow;
          subtype : longint;
        end;












      TXRROutputChangeNotifyEvent = record
          _type : longint;
          serial : dword;
          send_event : TBool;
          display : ^TDisplay;
          window : TWindow;
          subtype : longint;
          output : TRROutput;
          crtc : TRRCrtc;
          mode : TRRMode;
          rotation : TRotation;
          connection : TConnection;
          subpixel_order : TSubpixelOrder;
        end;












      TXRRCrtcChangeNotifyEvent = record
          _type : longint;
          serial : dword;
          send_event : TBool;
          display : ^TDisplay;
          window : TWindow;
          subtype : longint;
          crtc : TRRCrtc;
          mode : TRRMode;
          rotation : TRotation;
          x : longint;
          y : longint;
          width : dword;
          height : dword;
        end;











      TXRROutputPropertyNotifyEvent = record
          _type : longint;
          serial : dword;
          send_event : TBool;
          display : ^TDisplay;
          window : TWindow;
          subtype : longint;
          output : TRROutput;
          _property : TAtom;
          timestamp : TTime;
          state : longint;
        end;









      TXRRProviderChangeNotifyEvent = record
          _type : longint;
          serial : dword;
          send_event : TBool;
          display : ^TDisplay;
          window : TWindow;
          subtype : longint;
          provider : TRRProvider;
          timestamp : TTime;
          current_role : dword;
        end;











      TXRRProviderPropertyNotifyEvent = record
          _type : longint;
          serial : dword;
          send_event : TBool;
          display : ^TDisplay;
          window : TWindow;
          subtype : longint;
          provider : TRRProvider;
          _property : TAtom;
          timestamp : TTime;
          state : longint;
        end;








      TXRRResourceChangeNotifyEvent = record
          _type : longint;
          serial : dword;
          send_event : TBool;
          display : ^TDisplay;
          window : TWindow;
          subtype : longint;
          timestamp : TTime;
        end;

      T_XRRScreenConfiguration = TXRRScreenConfiguration;

function XRRQueryExtension(dpy:PTDisplay; event_base_return:Plongint; error_base_return:Plongint):TBool;cdecl;external;
function XRRQueryVersion(dpy:PTDisplay; major_version_return:Plongint; minor_version_return:Plongint):TStatus;cdecl;external;
function XRRGetScreenInfo(dpy:PTDisplay; window:TWindow):^TXRRScreenConfiguration;cdecl;external;
procedure XRRFreeScreenConfigInfo(config:PTXRRScreenConfiguration);cdecl;external;

function XRRSetScreenConfig(dpy:PTDisplay; config:PTXRRScreenConfiguration; draw:TDrawable; size_index:longint; rotation:TRotation; 
               timestamp:TTime):TStatus;cdecl;external;

function XRRSetScreenConfigAndRate(dpy:PTDisplay; config:PTXRRScreenConfiguration; draw:TDrawable; size_index:longint; rotation:TRotation; 
               rate:smallint; timestamp:TTime):TStatus;cdecl;external;
function XRRConfigRotations(config:PTXRRScreenConfiguration; current_rotation:PTRotation):TRotation;cdecl;external;
function XRRConfigTimes(config:PTXRRScreenConfiguration; config_timestamp:PTTime):TTime;cdecl;external;
function XRRConfigSizes(config:PTXRRScreenConfiguration; nsizes:Plongint):^TXRRScreenSize;cdecl;external;
function XRRConfigRates(config:PTXRRScreenConfiguration; sizeID:longint; nrates:Plongint):^smallint;cdecl;external;
function XRRConfigCurrentConfiguration(config:PTXRRScreenConfiguration; rotation:PTRotation):TSizeID;cdecl;external;
function XRRConfigCurrentRate(config:PTXRRScreenConfiguration):smallint;cdecl;external;
function XRRRootToScreen(dpy:PTDisplay; root:TWindow):longint;cdecl;external;

procedure XRRSelectInput(dpy:PTDisplay; window:TWindow; mask:longint);cdecl;external;

function XRRRotations(dpy:PTDisplay; screen:longint; current_rotation:PTRotation):TRotation;cdecl;external;
function XRRSizes(dpy:PTDisplay; screen:longint; nsizes:Plongint):^TXRRScreenSize;cdecl;external;
function XRRRates(dpy:PTDisplay; screen:longint; sizeID:longint; nrates:Plongint):^smallint;cdecl;external;
function XRRTimes(dpy:PTDisplay; screen:longint; config_timestamp:PTTime):TTime;cdecl;external;


function XRRGetScreenSizeRange(dpy:PTDisplay; window:TWindow; minWidth:Plongint; minHeight:Plongint; maxWidth:Plongint; 
               maxHeight:Plongint):TStatus;cdecl;external;
procedure XRRSetScreenSize(dpy:PTDisplay; window:TWindow; width:longint; height:longint; mmWidth:longint; 
                mmHeight:longint);cdecl;external;
    type
      TXRRModeFlags = dword;

      T_XRRModeInfo = record
          id : TRRMode;
          width : dword;
          height : dword;
          dotClock : dword;
          hSyncStart : dword;
          hSyncEnd : dword;
          hTotal : dword;
          hSkew : dword;
          vSyncStart : dword;
          vSyncEnd : dword;
          vTotal : dword;
          name : ^char;
          nameLength : dword;
          modeFlags : TXRRModeFlags;
        end;
      TXRRModeInfo = T_XRRModeInfo;

      T_XRRScreenResources = record
          timestamp : TTime;
          configTimestamp : TTime;
          ncrtc : longint;
          crtcs : ^TRRCrtc;
          noutput : longint;
          outputs : ^TRROutput;
          nmode : longint;
          modes : ^TXRRModeInfo;
        end;
      TXRRScreenResources = T_XRRScreenResources;

function XRRGetScreenResources(dpy:PTDisplay; window:TWindow):^TXRRScreenResources;cdecl;external;
procedure XRRFreeScreenResources(resources:PTXRRScreenResources);cdecl;external;
    type
      T_XRROutputInfo = record
          timestamp : TTime;
          crtc : TRRCrtc;
          name : ^char;
          nameLen : longint;
          mm_width : dword;
          mm_height : dword;
          connection : TConnection;
          subpixel_order : TSubpixelOrder;
          ncrtc : longint;
          crtcs : ^TRRCrtc;
          nclone : longint;
          clones : ^TRROutput;
          nmode : longint;
          npreferred : longint;
          modes : ^TRRMode;
        end;
      TXRROutputInfo = T_XRROutputInfo;

function XRRGetOutputInfo(dpy:PTDisplay; resources:PTXRRScreenResources; output:TRROutput):^TXRROutputInfo;cdecl;external;
procedure XRRFreeOutputInfo(outputInfo:PTXRROutputInfo);cdecl;external;
function XRRListOutputProperties(dpy:PTDisplay; output:TRROutput; nprop:Plongint):^TAtom;cdecl;external;
    type
      TXRRPropertyInfo = record
          pending : TBool;
          range : TBool;
          immutable : TBool;
          num_values : longint;
          values : ^longint;
        end;

function XRRQueryOutputProperty(dpy:PTDisplay; output:TRROutput; _property:TAtom):^TXRRPropertyInfo;cdecl;external;
procedure XRRConfigureOutputProperty(dpy:PTDisplay; output:TRROutput; _property:TAtom; pending:TBool; range:TBool; 
                num_values:longint; values:Plongint);cdecl;external;
//// (* error 
//// 			 _Xconst unsigned char *data, int nelements);
//// (* error 
//// 			 _Xconst unsigned char *data, int nelements);
 in declarator_list *)
 in declarator_list *)
procedure XRRDeleteOutputProperty(dpy:PTDisplay; output:TRROutput; _property:TAtom);cdecl;external;
function XRRGetOutputProperty(dpy:PTDisplay; output:TRROutput; _property:TAtom; offset:longint; length:longint; 
               _delete:TBool; pending:TBool; req_type:TAtom; actual_type:PTAtom; actual_format:Plongint; 
               nitems:Pdword; bytes_after:Pdword; prop:PPbyte):longint;cdecl;external;
//// (* error 
//// XRRAllocModeInfo (_Xconst char *name, int nameLength);
//// (* error 
//// XRRAllocModeInfo (_Xconst char *name, int nameLength);
 in declarator_list *)
 in declarator_list *)
function XRRCreateMode(dpy:PTDisplay; window:TWindow; modeInfo:PTXRRModeInfo):TRRMode;cdecl;external;
procedure XRRDestroyMode(dpy:PTDisplay; mode:TRRMode);cdecl;external;
procedure XRRAddOutputMode(dpy:PTDisplay; output:TRROutput; mode:TRRMode);cdecl;external;
procedure XRRDeleteOutputMode(dpy:PTDisplay; output:TRROutput; mode:TRRMode);cdecl;external;
procedure XRRFreeModeInfo(modeInfo:PTXRRModeInfo);cdecl;external;
    type
      T_XRRCrtcInfo = record
          timestamp : TTime;
          x : longint;
          y : longint;
          width : dword;
          height : dword;
          mode : TRRMode;
          rotation : TRotation;
          noutput : longint;
          outputs : ^TRROutput;
          rotations : TRotation;
          npossible : longint;
          possible : ^TRROutput;
        end;
      TXRRCrtcInfo = T_XRRCrtcInfo;

function XRRGetCrtcInfo(dpy:PTDisplay; resources:PTXRRScreenResources; crtc:TRRCrtc):^TXRRCrtcInfo;cdecl;external;
procedure XRRFreeCrtcInfo(crtcInfo:PTXRRCrtcInfo);cdecl;external;
function XRRSetCrtcConfig(dpy:PTDisplay; resources:PTXRRScreenResources; crtc:TRRCrtc; timestamp:TTime; x:longint; 
               y:longint; mode:TRRMode; rotation:TRotation; outputs:PTRROutput; noutputs:longint):TStatus;cdecl;external;
function XRRGetCrtcGammaSize(dpy:PTDisplay; crtc:TRRCrtc):longint;cdecl;external;
    type
      T_XRRCrtcGamma = record
          size : longint;
          red : ^word;
          green : ^word;
          blue : ^word;
        end;
      TXRRCrtcGamma = T_XRRCrtcGamma;

function XRRGetCrtcGamma(dpy:PTDisplay; crtc:TRRCrtc):^TXRRCrtcGamma;cdecl;external;
function XRRAllocGamma(size:longint):^TXRRCrtcGamma;cdecl;external;
procedure XRRSetCrtcGamma(dpy:PTDisplay; crtc:TRRCrtc; gamma:PTXRRCrtcGamma);cdecl;external;
procedure XRRFreeGamma(gamma:PTXRRCrtcGamma);cdecl;external;

function XRRGetScreenResourcesCurrent(dpy:PTDisplay; window:TWindow):^TXRRScreenResources;cdecl;external;
//// (* error 
//// 		     _Xconst char *filter,
//// (* error 
//// 		     XFixed	*params,
//// (* error 
//// 		     int	nparams);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
    type
      T_XRRCrtcTransformAttributes = record
          pendingTransform : TXTransform;
          pendingFilter : ^char;
          pendingNparams : longint;
          pendingParams : ^TXFixed;
          currentTransform : TXTransform;
          currentFilter : ^char;
          currentNparams : longint;
          currentParams : ^TXFixed;
        end;
      TXRRCrtcTransformAttributes = T_XRRCrtcTransformAttributes;


function XRRGetCrtcTransform(dpy:PTDisplay; crtc:TRRCrtc; attributes:PPTXRRCrtcTransformAttributes):TStatus;cdecl;external;

function XRRUpdateConfiguration(event:PTXEvent):longint;cdecl;external;
    type
      T_XRRPanning = record
          timestamp : TTime;
          left : dword;
          top : dword;
          width : dword;
          height : dword;
          track_left : dword;
          track_top : dword;
          track_width : dword;
          track_height : dword;
          border_left : longint;
          border_top : longint;
          border_right : longint;
          border_bottom : longint;
        end;
      TXRRPanning = T_XRRPanning;

function XRRGetPanning(dpy:PTDisplay; resources:PTXRRScreenResources; crtc:TRRCrtc):^TXRRPanning;cdecl;external;
procedure XRRFreePanning(panning:PTXRRPanning);cdecl;external;
function XRRSetPanning(dpy:PTDisplay; resources:PTXRRScreenResources; crtc:TRRCrtc; panning:PTXRRPanning):TStatus;cdecl;external;
procedure XRRSetOutputPrimary(dpy:PTDisplay; window:TWindow; output:TRROutput);cdecl;external;
function XRRGetOutputPrimary(dpy:PTDisplay; window:TWindow):TRROutput;cdecl;external;
    type
      T_XRRProviderResources = record
          timestamp : TTime;
          nproviders : longint;
          providers : ^TRRProvider;
        end;
      TXRRProviderResources = T_XRRProviderResources;

function XRRGetProviderResources(dpy:PTDisplay; window:TWindow):^TXRRProviderResources;cdecl;external;
procedure XRRFreeProviderResources(resources:PTXRRProviderResources);cdecl;external;
    type
      T_XRRProviderInfo = record
          capabilities : dword;
          ncrtcs : longint;
          crtcs : ^TRRCrtc;
          noutputs : longint;
          outputs : ^TRROutput;
          name : ^char;
          nassociatedproviders : longint;
          associated_providers : ^TRRProvider;
          associated_capability : ^dword;
          nameLen : longint;
        end;
      TXRRProviderInfo = T_XRRProviderInfo;

function XRRGetProviderInfo(dpy:PTDisplay; resources:PTXRRScreenResources; provider:TRRProvider):^TXRRProviderInfo;cdecl;external;
procedure XRRFreeProviderInfo(provider:PTXRRProviderInfo);cdecl;external;
function XRRSetProviderOutputSource(dpy:PTDisplay; provider:TXID; source_provider:TXID):longint;cdecl;external;
function XRRSetProviderOffloadSink(dpy:PTDisplay; provider:TXID; sink_provider:TXID):longint;cdecl;external;
function XRRListProviderProperties(dpy:PTDisplay; provider:TRRProvider; nprop:Plongint):^TAtom;cdecl;external;
function XRRQueryProviderProperty(dpy:PTDisplay; provider:TRRProvider; _property:TAtom):^TXRRPropertyInfo;cdecl;external;
procedure XRRConfigureProviderProperty(dpy:PTDisplay; provider:TRRProvider; _property:TAtom; pending:TBool; range:TBool; 
                num_values:longint; values:Plongint);cdecl;external;
//// (* error 
//// 			 _Xconst unsigned char *data, int nelements);
//// (* error 
//// 			 _Xconst unsigned char *data, int nelements);
 in declarator_list *)
 in declarator_list *)
procedure XRRDeleteProviderProperty(dpy:PTDisplay; provider:TRRProvider; _property:TAtom);cdecl;external;
function XRRGetProviderProperty(dpy:PTDisplay; provider:TRRProvider; _property:TAtom; offset:longint; length:longint; 
               _delete:TBool; pending:TBool; req_type:TAtom; actual_type:PTAtom; actual_format:Plongint; 
               nitems:Pdword; bytes_after:Pdword; prop:PPbyte):longint;cdecl;external;
    type
      T_XRRMonitorInfo = record
          name : TAtom;
          primary : TBool;
          automatic : TBool;
          noutput : longint;
          x : longint;
          y : longint;
          width : longint;
          height : longint;
          mwidth : longint;
          mheight : longint;
          outputs : ^TRROutput;
        end;
      TXRRMonitorInfo = T_XRRMonitorInfo;

function XRRAllocateMonitor(dpy:PTDisplay; noutput:longint):^TXRRMonitorInfo;cdecl;external;
function XRRGetMonitors(dpy:PTDisplay; window:TWindow; get_active:TBool; nmonitors:Plongint):^TXRRMonitorInfo;cdecl;external;
procedure XRRSetMonitor(dpy:PTDisplay; window:TWindow; monitor:PTXRRMonitorInfo);cdecl;external;
procedure XRRDeleteMonitor(dpy:PTDisplay; window:TWindow; name:TAtom);cdecl;external;
procedure XRRFreeMonitors(monitors:PTXRRMonitorInfo);cdecl;external;
//// {$endif}

//// (* error 
//// #endif /* _XRANDR_H_ */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/Xvproto.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/Xvproto.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/Xvproto.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef XVPROTO_H}
//// {$define XVPROTO_H}

//// {$include <X11/Xmd.h>}


const
  XvPortID = CARD32;  
  XvEncodingID = CARD32;  
  ShmSeg = CARD32;  
  VisualID = CARD32;  
  Drawable = CARD32;  
  GContext = CARD32;  
  Time = CARD32;  
  Atom = CARD32;  

type
  TxvRational = record
      numerator : TINT32;
      denominator : TINT32;
    end;

const
  sz_xvRational = 8;  
type
  TxvAdaptorInfo = record
      base_id : TXvPortID;
      name_size : TCARD16;
      num_ports : TCARD16;
      num_formats : TCARD16;
      _type : TCARD8;
      pad : TCARD8;
    end;

const
  sz_xvAdaptorInfo = 12;  
type
  TxvEncodingInfo = record
      encoding : TXvEncodingID;
      name_size : TCARD16;
      width : TCARD16;
      height : TCARD16;
      pad : TCARD16;
      rate : TxvRational;
    end;

const
  sz_xvEncodingInfo = 12+sz_xvRational;  
type
  TxvFormat = record
      visual : TVisualID;
      depth : TCARD8;
      pad1 : TCARD8;
      pad2 : TCARD16;
    end;

const
  sz_xvFormat = 8;  
type
  TxvAttributeInfo = record
      flags : TCARD32;
      min : TINT32;
      max : TINT32;
      size : TCARD32;
    end;

const
  sz_xvAttributeInfo = 16;  
type
  TxvImageFormatInfo = record
      id : TCARD32;
      _type : TCARD8;
      byte_order : TCARD8;
      pad1 : TCARD16;
      guid : array[0..15] of TCARD8;
      bpp : TCARD8;
      num_planes : TCARD8;
      pad2 : TCARD16;
      depth : TCARD8;
      pad3 : TCARD8;
      pad4 : TCARD16;
      red_mask : TCARD32;
      green_mask : TCARD32;
      blue_mask : TCARD32;
      format : TCARD8;
      pad5 : TCARD8;
      pad6 : TCARD16;
      y_sample_bits : TCARD32;
      u_sample_bits : TCARD32;
      v_sample_bits : TCARD32;
      horz_y_period : TCARD32;
      horz_u_period : TCARD32;
      horz_v_period : TCARD32;
      vert_y_period : TCARD32;
      vert_u_period : TCARD32;
      vert_v_period : TCARD32;
      comp_order : array[0..31] of TCARD8;
      scanline_order : TCARD8;
      pad7 : TCARD8;
      pad8 : TCARD16;
      pad9 : TCARD32;
      pad10 : TCARD32;
    end;

const
  sz_xvImageFormatInfo = 128;  

  xv_QueryExtension = 0;  
  xv_QueryAdaptors = 1;  
  xv_QueryEncodings = 2;  
  xv_GrabPort = 3;  
  xv_UngrabPort = 4;  
  xv_PutVideo = 5;  
  xv_PutStill = 6;  
  xv_GetVideo = 7;  
  xv_GetStill = 8;  
  xv_StopVideo = 9;  
  xv_SelectVideoNotify = 10;  
  xv_SelectPortNotify = 11;  
  xv_QueryBestSize = 12;  
  xv_SetPortAttribute = 13;  
  xv_GetPortAttribute = 14;  
  xv_QueryPortAttributes = 15;  
  xv_ListImageFormats = 16;  
  xv_QueryImageAttributes = 17;  
  xv_PutImage = 18;  
  xv_ShmPutImage = 19;  
  xv_LastRequest = xv_ShmPutImage;  
  xvNumRequests = xv_LastRequest+1;  
type
  TxvQueryExtensionReq = record
      reqType : TCARD8;
      xvReqType : TCARD8;
      length : TCARD16;
    end;

const
  sz_xvQueryExtensionReq = 4;  
type
  TxvQueryAdaptorsReq = record
      reqType : TCARD8;
      xvReqType : TCARD8;
      length : TCARD16;
      window : TCARD32;
    end;

const
  sz_xvQueryAdaptorsReq = 8;  
type
  TxvQueryEncodingsReq = record
      reqType : TCARD8;
      xvReqType : TCARD8;
      length : TCARD16;
      port : TCARD32;
    end;

const
  sz_xvQueryEncodingsReq = 8;  
type
  TxvPutVideoReq = record
      reqType : TCARD8;
      xvReqType : TCARD8;
      length : TCARD16;
      port : TXvPortID;
      drawable : TDrawable;
      gc : TGContext;
      vid_x : TINT16;
      vid_y : TINT16;
      vid_w : TCARD16;
      vid_h : TCARD16;
      drw_x : TINT16;
      drw_y : TINT16;
      drw_w : TCARD16;
      drw_h : TCARD16;
    end;

const
  sz_xvPutVideoReq = 32;  
type
  TxvPutStillReq = record
      reqType : TCARD8;
      xvReqType : TCARD8;
      length : TCARD16;
      port : TXvPortID;
      drawable : TDrawable;
      gc : TGContext;
      vid_x : TINT16;
      vid_y : TINT16;
      vid_w : TCARD16;
      vid_h : TCARD16;
      drw_x : TINT16;
      drw_y : TINT16;
      drw_w : TCARD16;
      drw_h : TCARD16;
    end;

const
  sz_xvPutStillReq = 32;  
type
  TxvGetVideoReq = record
      reqType : TCARD8;
      xvReqType : TCARD8;
      length : TCARD16;
      port : TXvPortID;
      drawable : TDrawable;
      gc : TGContext;
      vid_x : TINT16;
      vid_y : TINT16;
      vid_w : TCARD16;
      vid_h : TCARD16;
      drw_x : TINT16;
      drw_y : TINT16;
      drw_w : TCARD16;
      drw_h : TCARD16;
    end;

const
  sz_xvGetVideoReq = 32;  
type
  TxvGetStillReq = record
      reqType : TCARD8;
      xvReqType : TCARD8;
      length : TCARD16;
      port : TXvPortID;
      drawable : TDrawable;
      gc : TGContext;
      vid_x : TINT16;
      vid_y : TINT16;
      vid_w : TCARD16;
      vid_h : TCARD16;
      drw_x : TINT16;
      drw_y : TINT16;
      drw_w : TCARD16;
      drw_h : TCARD16;
    end;

const
  sz_xvGetStillReq = 32;  
type
  TxvGrabPortReq = record
      reqType : TCARD8;
      xvReqType : TCARD8;
      length : TCARD16;
      port : TXvPortID;
      time : TTime;
    end;

const
  sz_xvGrabPortReq = 12;  
type
  TxvUngrabPortReq = record
      reqType : TCARD8;
      xvReqType : TCARD8;
      length : TCARD16;
      port : TXvPortID;
      time : TTime;
    end;

const
  sz_xvUngrabPortReq = 12;  
type
  TxvSelectVideoNotifyReq = record
      reqType : TCARD8;
      xvReqType : TCARD8;
      length : TCARD16;
      drawable : TDrawable;
      onoff : TBOOL;
      pad1 : TCARD8;
      pad2 : TCARD16;
    end;

const
  sz_xvSelectVideoNotifyReq = 12;  
type
  TxvSelectPortNotifyReq = record
      reqType : TCARD8;
      xvReqType : TCARD8;
      length : TCARD16;
      port : TXvPortID;
      onoff : TBOOL;
      pad1 : TCARD8;
      pad2 : TCARD16;
    end;

const
  sz_xvSelectPortNotifyReq = 12;  
type
  TxvStopVideoReq = record
      reqType : TCARD8;
      xvReqType : TCARD8;
      length : TCARD16;
      port : TXvPortID;
      drawable : TDrawable;
    end;

const
  sz_xvStopVideoReq = 12;  
type
  TxvSetPortAttributeReq = record
      reqType : TCARD8;
      xvReqType : TCARD8;
      length : TCARD16;
      port : TXvPortID;
      attribute : TAtom;
      value : TINT32;
    end;

const
  sz_xvSetPortAttributeReq = 16;  
type
  TxvGetPortAttributeReq = record
      reqType : TCARD8;
      xvReqType : TCARD8;
      length : TCARD16;
      port : TXvPortID;
      attribute : TAtom;
    end;

const
  sz_xvGetPortAttributeReq = 12;  
type
  TxvQueryBestSizeReq = record
      reqType : TCARD8;
      xvReqType : TCARD8;
      length : TCARD16;
      port : TXvPortID;
      vid_w : TCARD16;
      vid_h : TCARD16;
      drw_w : TCARD16;
      drw_h : TCARD16;
      motion : TCARD8;
      pad1 : TCARD8;
      pad2 : TCARD16;
    end;

const
  sz_xvQueryBestSizeReq = 20;  
type
  TxvQueryPortAttributesReq = record
      reqType : TCARD8;
      xvReqType : TCARD8;
      length : TCARD16;
      port : TXvPortID;
    end;

const
  sz_xvQueryPortAttributesReq = 8;  
type
  TxvPutImageReq = record
      reqType : TCARD8;
      xvReqType : TCARD8;
      length : TCARD16;
      port : TXvPortID;
      drawable : TDrawable;
      gc : TGContext;
      id : TCARD32;
      src_x : TINT16;
      src_y : TINT16;
      src_w : TCARD16;
      src_h : TCARD16;
      drw_x : TINT16;
      drw_y : TINT16;
      drw_w : TCARD16;
      drw_h : TCARD16;
      width : TCARD16;
      height : TCARD16;
    end;

const
  sz_xvPutImageReq = 40;  
type
  TxvShmPutImageReq = record
      reqType : TCARD8;
      xvReqType : TCARD8;
      length : TCARD16;
      port : TXvPortID;
      drawable : TDrawable;
      gc : TGContext;
      shmseg : TShmSeg;
      id : TCARD32;
      offset : TCARD32;
      src_x : TINT16;
      src_y : TINT16;
      src_w : TCARD16;
      src_h : TCARD16;
      drw_x : TINT16;
      drw_y : TINT16;
      drw_w : TCARD16;
      drw_h : TCARD16;
      width : TCARD16;
      height : TCARD16;
      send_event : TCARD8;
      pad1 : TCARD8;
      pad2 : TCARD16;
    end;

const
  sz_xvShmPutImageReq = 52;  
type
  TxvListImageFormatsReq = record
      reqType : TCARD8;
      xvReqType : TCARD8;
      length : TCARD16;
      port : TXvPortID;
    end;

const
  sz_xvListImageFormatsReq = 8;  
type
  TxvQueryImageAttributesReq = record
      reqType : TCARD8;
      xvReqType : TCARD8;
      length : TCARD16;
      port : TCARD32;
      id : TCARD32;
      width : TCARD16;
      height : TCARD16;
    end;

const
  sz_xvQueryImageAttributesReq = 16;  


type
  T_QueryExtensionReply = record
      _type : TBYTE;
      padb1 : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      version : TCARD16;
      revision : TCARD16;
      padl4 : TCARD32;
      padl5 : TCARD32;
      padl6 : TCARD32;
      padl7 : TCARD32;
      padl8 : TCARD32;
    end;
  TxvQueryExtensionReply = T_QueryExtensionReply;

const
  sz_xvQueryExtensionReply = 32;  

type
  T_QueryAdaptorsReply = record
      _type : TBYTE;
      padb1 : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      num_adaptors : TCARD16;
      pads3 : TCARD16;
      padl4 : TCARD32;
      padl5 : TCARD32;
      padl6 : TCARD32;
      padl7 : TCARD32;
      padl8 : TCARD32;
    end;
  TxvQueryAdaptorsReply = T_QueryAdaptorsReply;

const
  sz_xvQueryAdaptorsReply = 32;  

type
  T_QueryEncodingsReply = record
      _type : TBYTE;
      padb1 : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      num_encodings : TCARD16;
      padl3 : TCARD16;
      padl4 : TCARD32;
      padl5 : TCARD32;
      padl6 : TCARD32;
      padl7 : TCARD32;
      padl8 : TCARD32;
    end;
  TxvQueryEncodingsReply = T_QueryEncodingsReply;

const
  sz_xvQueryEncodingsReply = 32;  


type
  TxvGrabPortReply = record
      _type : TBYTE;
      result : TBYTE;
      sequenceNumber : TCARD16;
      length : TCARD32;
      padl3 : TCARD32;
      padl4 : TCARD32;
      padl5 : TCARD32;
      padl6 : TCARD32;
      padl7 : TCARD32;
      padl8 : TCARD32;
    end;

const
  sz_xvGrabPortReply = 32;  


type
  TxvGetPortAttributeReply = record
      _type : TBYTE;
      padb1 : TBYTE;
      sequenceNumber : TCARD16;
      length : TCARD32;
      value : TINT32;
      padl4 : TCARD32;
      padl5 : TCARD32;
      padl6 : TCARD32;
      padl7 : TCARD32;
      padl8 : TCARD32;
    end;

const
  sz_xvGetPortAttributeReply = 32;  


type
  TxvQueryBestSizeReply = record
      _type : TBYTE;
      padb1 : TBYTE;
      sequenceNumber : TCARD16;
      length : TCARD32;
      actual_width : TCARD16;
      actual_height : TCARD16;
      padl4 : TCARD32;
      padl5 : TCARD32;
      padl6 : TCARD32;
      padl7 : TCARD32;
      padl8 : TCARD32;
    end;

const
  sz_xvQueryBestSizeReply = 32;  


type
  TxvQueryPortAttributesReply = record
      _type : TBYTE;
      padb1 : TBYTE;
      sequenceNumber : TCARD16;
      length : TCARD32;
      num_attributes : TCARD32;
      text_size : TCARD32;
      padl5 : TCARD32;
      padl6 : TCARD32;
      padl7 : TCARD32;
      padl8 : TCARD32;
    end;

const
  sz_xvQueryPortAttributesReply = 32;  

type
  TxvListImageFormatsReply = record
      _type : TBYTE;
      padb1 : TBYTE;
      sequenceNumber : TCARD16;
      length : TCARD32;
      num_formats : TCARD32;
      padl4 : TCARD32;
      padl5 : TCARD32;
      padl6 : TCARD32;
      padl7 : TCARD32;
      padl8 : TCARD32;
    end;

const
  sz_xvListImageFormatsReply = 32;  

type
  TxvQueryImageAttributesReply = record
      _type : TBYTE;
      padb1 : TBYTE;
      sequenceNumber : TCARD16;
      length : TCARD32;
      num_planes : TCARD32;
      data_size : TCARD32;
      width : TCARD16;
      height : TCARD16;
      padl6 : TCARD32;
      padl7 : TCARD32;
      padl8 : TCARD32;
    end;

const
  sz_xvQueryImageAttributesReply = 32;  

type
  TxvEvent = record
      u : record
          case longint of
            0 : ( u : record
                _type : TBYTE;
                detail : TBYTE;
                sequenceNumber : TCARD16;
              end );
            1 : ( videoNotify : record
                _type : TBYTE;
                reason : TBYTE;
                sequenceNumber : TCARD16;
                time : TTime;
                drawable : TDrawable;
                port : TXvPortID;
                padl5 : TCARD32;
                padl6 : TCARD32;
                padl7 : TCARD32;
                padl8 : TCARD32;
              end );
            2 : ( portNotify : record
                _type : TBYTE;
                padb1 : TBYTE;
                sequenceNumber : TCARD16;
                time : TTime;
                port : TXvPortID;
                attribute : TAtom;
                value : TINT32;
                padl6 : TCARD32;
                padl7 : TCARD32;
                padl8 : TCARD32;
              end );
          end;
    end;
//// {$undef XvPortID}
//// {$undef XvEncodingID}
//// {$undef ShmSeg}
//// {$undef VisualID}
//// {$undef Drawable}
//// {$undef GContext}
//// {$undef Time}
//// {$undef Atom}
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/XInput2.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/XInput2.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/XInput2.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    PAtom  = ^Atom;
    Pbyte  = ^byte;
    PDisplay  = ^Display;
    Pdword  = ^dword;
    Plongint  = ^longint;
    PWindow  = ^Window;
    PXIAnyHierarchyChangeInfo  = ^XIAnyHierarchyChangeInfo;
    PXIBarrierReleasePointerInfo  = ^XIBarrierReleasePointerInfo;
    PXIDeviceInfo  = ^XIDeviceInfo;
    PXIEventMask  = ^XIEventMask;
    PXIGrabModifiers  = ^XIGrabModifiers;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XINPUT2_H_}
//// {$define _XINPUT2_H_}
//// {$include <X11/Xlib.h>}
//// {$include <X11/extensions/XI2.h>}
//// {$include <X11/extensions/Xge.h>}
//// {$include <X11/extensions/Xfixes.h> /* PointerBarrier */}

type
  TXIAddMasterInfo = record
      _type : longint;
      name : ^char;
      send_core : TBool;
      enable : TBool;
    end;


  TXIRemoveMasterInfo = record
      _type : longint;
      deviceid : longint;
      return_mode : longint;
      return_pointer : longint;
      return_keyboard : longint;
    end;

  TXIAttachSlaveInfo = record
      _type : longint;
      deviceid : longint;
      new_master : longint;
    end;

  TXIDetachSlaveInfo = record
      _type : longint;
      deviceid : longint;
    end;


  TXIAnyHierarchyChangeInfo = record
      case longint of
        0 : ( _type : longint );
        1 : ( add : TXIAddMasterInfo );
        2 : ( remove : TXIRemoveMasterInfo );
        3 : ( attach : TXIAttachSlaveInfo );
        4 : ( detach : TXIDetachSlaveInfo );
      end;

  TXIModifierState = record
      base : longint;
      latched : longint;
      locked : longint;
      effective : longint;
    end;

  TXIGroupState = TXIModifierState;

  TXIButtonState = record
      mask_len : longint;
      mask : ^byte;
    end;

  TXIValuatorState = record
      mask_len : longint;
      mask : ^byte;
      values : ^Tdouble;
    end;

  TXIEventMask = record
      deviceid : longint;
      mask_len : longint;
      mask : ^byte;
    end;

  TXIAnyClassInfo = record
      _type : longint;
      sourceid : longint;
    end;

  TXIButtonClassInfo = record
      _type : longint;
      sourceid : longint;
      num_buttons : longint;
      labels : ^TAtom;
      state : TXIButtonState;
    end;

  TXIKeyClassInfo = record
      _type : longint;
      sourceid : longint;
      num_keycodes : longint;
      keycodes : ^longint;
    end;

  TXIValuatorClassInfo = record
      _type : longint;
      sourceid : longint;
      number : longint;
      _label : TAtom;
      min : Tdouble;
      max : Tdouble;
      value : Tdouble;
      resolution : longint;
      mode : longint;
    end;


  TXIScrollClassInfo = record
      _type : longint;
      sourceid : longint;
      number : longint;
      scroll_type : longint;
      increment : Tdouble;
      flags : longint;
    end;

  TXITouchClassInfo = record
      _type : longint;
      sourceid : longint;
      mode : longint;
      num_touches : longint;
    end;


  TXIGestureClassInfo = record
      _type : longint;
      sourceid : longint;
      num_touches : longint;
    end;

  TXIDeviceInfo = record
      deviceid : longint;
      name : ^char;
      use : longint;
      attachment : longint;
      enabled : TBool;
      num_classes : longint;
      classes : ^^TXIAnyClassInfo;
    end;

  TXIGrabModifiers = record
      modifiers : longint;
      status : longint;
    end;

  TBarrierEventID = dword;

  TXIBarrierReleasePointerInfo = record
      deviceid : longint;
      barrier : TPointerBarrier;
      eventid : TBarrierEventID;
    end;







  TXIEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      extension : longint;
      evtype : longint;
      time : TTime;
    end;

  TXIHierarchyInfo = record
      deviceid : longint;
      attachment : longint;
      use : longint;
      enabled : TBool;
      flags : longint;
    end;








  TXIHierarchyEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      extension : longint;
      evtype : longint;
      time : TTime;
      flags : longint;
      num_info : longint;
      info : ^TXIHierarchyInfo;
    end;












  TXIDeviceChangedEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      extension : longint;
      evtype : longint;
      time : TTime;
      deviceid : longint;
      sourceid : longint;
      reason : longint;
      num_classes : longint;
      classes : ^^TXIAnyClassInfo;
    end;






  TXIDeviceEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      extension : longint;
      evtype : longint;
      time : TTime;
      deviceid : longint;
      sourceid : longint;
      detail : longint;
      root : TWindow;
      event : TWindow;
      child : TWindow;
      root_x : Tdouble;
      root_y : Tdouble;
      event_x : Tdouble;
      event_y : Tdouble;
      flags : longint;
      buttons : TXIButtonState;
      valuators : TXIValuatorState;
      mods : TXIModifierState;
      group : TXIGroupState;
    end;








  TXIRawEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      extension : longint;
      evtype : longint;
      time : TTime;
      deviceid : longint;
      sourceid : longint;
      detail : longint;
      flags : longint;
      valuators : TXIValuatorState;
      raw_values : ^Tdouble;
    end;






  TXIEnterEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      extension : longint;
      evtype : longint;
      time : TTime;
      deviceid : longint;
      sourceid : longint;
      detail : longint;
      root : TWindow;
      event : TWindow;
      child : TWindow;
      root_x : Tdouble;
      root_y : Tdouble;
      event_x : Tdouble;
      event_y : Tdouble;
      mode : longint;
      focus : TBool;
      same_screen : TBool;
      buttons : TXIButtonState;
      mods : TXIModifierState;
      group : TXIGroupState;
    end;

  TXILeaveEvent = TXIEnterEvent;

  TXIFocusInEvent = TXIEnterEvent;

  TXIFocusOutEvent = TXIEnterEvent;








  TXIPropertyEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      extension : longint;
      evtype : longint;
      time : TTime;
      deviceid : longint;
      _property : TAtom;
      what : longint;
    end;






  TXITouchOwnershipEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      extension : longint;
      evtype : longint;
      time : TTime;
      deviceid : longint;
      sourceid : longint;
      touchid : dword;
      root : TWindow;
      event : TWindow;
      child : TWindow;
      flags : longint;
    end;






  TXIBarrierEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      extension : longint;
      evtype : longint;
      time : TTime;
      deviceid : longint;
      sourceid : longint;
      event : TWindow;
      root : TWindow;
      root_x : Tdouble;
      root_y : Tdouble;
      dx : Tdouble;
      dy : Tdouble;
      dtime : longint;
      flags : longint;
      barrier : TPointerBarrier;
      eventid : TBarrierEventID;
    end;






  TXIGesturePinchEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      extension : longint;
      evtype : longint;
      time : TTime;
      deviceid : longint;
      sourceid : longint;
      detail : longint;
      root : TWindow;
      event : TWindow;
      child : TWindow;
      root_x : Tdouble;
      root_y : Tdouble;
      event_x : Tdouble;
      event_y : Tdouble;
      delta_x : Tdouble;
      delta_y : Tdouble;
      delta_unaccel_x : Tdouble;
      delta_unaccel_y : Tdouble;
      scale : Tdouble;
      delta_angle : Tdouble;
      flags : longint;
      mods : TXIModifierState;
      group : TXIGroupState;
    end;






  TXIGestureSwipeEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      extension : longint;
      evtype : longint;
      time : TTime;
      deviceid : longint;
      sourceid : longint;
      detail : longint;
      root : TWindow;
      event : TWindow;
      child : TWindow;
      root_x : Tdouble;
      root_y : Tdouble;
      event_x : Tdouble;
      event_y : Tdouble;
      delta_x : Tdouble;
      delta_y : Tdouble;
      delta_unaccel_x : Tdouble;
      delta_unaccel_y : Tdouble;
      flags : longint;
      mods : TXIModifierState;
      group : TXIGroupState;
    end;
//// (* error 
//// extern Bool     XIQueryPointer(
in declaration at line 442 *)

function XIWarpPointer(display:PTDisplay; deviceid:longint; src_win:TWindow; dst_win:TWindow; src_x:Tdouble; 
               src_y:Tdouble; src_width:dword; src_height:dword; dst_x:Tdouble; dst_y:Tdouble):TBool;cdecl;external;
function XIDefineCursor(display:PTDisplay; deviceid:longint; win:TWindow; cursor:TCursor):TStatus;cdecl;external;
function XIUndefineCursor(display:PTDisplay; deviceid:longint; win:TWindow):TStatus;cdecl;external;
function XIChangeHierarchy(display:PTDisplay; changes:PTXIAnyHierarchyChangeInfo; num_changes:longint):TStatus;cdecl;external;
function XISetClientPointer(dpy:PTDisplay; win:TWindow; deviceid:longint):TStatus;cdecl;external;
function XIGetClientPointer(dpy:PTDisplay; win:TWindow; deviceid:Plongint):TBool;cdecl;external;
function XISelectEvents(dpy:PTDisplay; win:TWindow; masks:PTXIEventMask; num_masks:longint):longint;cdecl;external;
function XIGetSelectedEvents(dpy:PTDisplay; win:TWindow; num_masks_return:Plongint):^TXIEventMask;cdecl;external;
function XIQueryVersion(dpy:PTDisplay; major_version_inout:Plongint; minor_version_inout:Plongint):TStatus;cdecl;external;
function XIQueryDevice(dpy:PTDisplay; deviceid:longint; ndevices_return:Plongint):^TXIDeviceInfo;cdecl;external;
function XISetFocus(dpy:PTDisplay; deviceid:longint; focus:TWindow; time:TTime):TStatus;cdecl;external;
function XIGetFocus(dpy:PTDisplay; deviceid:longint; focus_return:PTWindow):TStatus;cdecl;external;
function XIGrabDevice(dpy:PTDisplay; deviceid:longint; grab_window:TWindow; time:TTime; cursor:TCursor; 
               grab_mode:longint; paired_device_mode:longint; owner_events:TBool; mask:PTXIEventMask):TStatus;cdecl;external;
function XIUngrabDevice(dpy:PTDisplay; deviceid:longint; time:TTime):TStatus;cdecl;external;
function XIAllowEvents(display:PTDisplay; deviceid:longint; event_mode:longint; time:TTime):TStatus;cdecl;external;
function XIAllowTouchEvents(display:PTDisplay; deviceid:longint; touchid:dword; grab_window:TWindow; event_mode:longint):TStatus;cdecl;external;
function XIGrabButton(display:PTDisplay; deviceid:longint; button:longint; grab_window:TWindow; cursor:TCursor; 
               grab_mode:longint; paired_device_mode:longint; owner_events:longint; mask:PTXIEventMask; num_modifiers:longint; 
               modifiers_inout:PTXIGrabModifiers):longint;cdecl;external;
function XIGrabKeycode(display:PTDisplay; deviceid:longint; keycode:longint; grab_window:TWindow; grab_mode:longint; 
               paired_device_mode:longint; owner_events:longint; mask:PTXIEventMask; num_modifiers:longint; modifiers_inout:PTXIGrabModifiers):longint;cdecl;external;
function XIGrabEnter(display:PTDisplay; deviceid:longint; grab_window:TWindow; cursor:TCursor; grab_mode:longint; 
               paired_device_mode:longint; owner_events:longint; mask:PTXIEventMask; num_modifiers:longint; modifiers_inout:PTXIGrabModifiers):longint;cdecl;external;
function XIGrabFocusIn(display:PTDisplay; deviceid:longint; grab_window:TWindow; grab_mode:longint; paired_device_mode:longint; 
               owner_events:longint; mask:PTXIEventMask; num_modifiers:longint; modifiers_inout:PTXIGrabModifiers):longint;cdecl;external;
function XIGrabTouchBegin(display:PTDisplay; deviceid:longint; grab_window:TWindow; owner_events:longint; mask:PTXIEventMask; 
               num_modifiers:longint; modifiers_inout:PTXIGrabModifiers):longint;cdecl;external;
function XIGrabPinchGestureBegin(display:PTDisplay; deviceid:longint; grab_window:TWindow; grab_mode:longint; paired_device_mode:longint; 
               owner_events:longint; mask:PTXIEventMask; num_modifiers:longint; modifiers_inout:PTXIGrabModifiers):longint;cdecl;external;
function XIGrabSwipeGestureBegin(display:PTDisplay; deviceid:longint; grab_window:TWindow; grab_mode:longint; paired_device_mode:longint; 
               owner_events:longint; mask:PTXIEventMask; num_modifiers:longint; modifiers_inout:PTXIGrabModifiers):longint;cdecl;external;
function XIUngrabButton(display:PTDisplay; deviceid:longint; button:longint; grab_window:TWindow; num_modifiers:longint; 
               modifiers:PTXIGrabModifiers):TStatus;cdecl;external;
function XIUngrabKeycode(display:PTDisplay; deviceid:longint; keycode:longint; grab_window:TWindow; num_modifiers:longint; 
               modifiers:PTXIGrabModifiers):TStatus;cdecl;external;
function XIUngrabEnter(display:PTDisplay; deviceid:longint; grab_window:TWindow; num_modifiers:longint; modifiers:PTXIGrabModifiers):TStatus;cdecl;external;
function XIUngrabFocusIn(display:PTDisplay; deviceid:longint; grab_window:TWindow; num_modifiers:longint; modifiers:PTXIGrabModifiers):TStatus;cdecl;external;
function XIUngrabTouchBegin(display:PTDisplay; deviceid:longint; grab_window:TWindow; num_modifiers:longint; modifiers:PTXIGrabModifiers):TStatus;cdecl;external;
function XIUngrabPinchGestureBegin(display:PTDisplay; deviceid:longint; grab_window:TWindow; num_modifiers:longint; modifiers:PTXIGrabModifiers):TStatus;cdecl;external;
function XIUngrabSwipeGestureBegin(display:PTDisplay; deviceid:longint; grab_window:TWindow; num_modifiers:longint; modifiers:PTXIGrabModifiers):TStatus;cdecl;external;
function XIListProperties(display:PTDisplay; deviceid:longint; num_props_return:Plongint):^TAtom;cdecl;external;
procedure XIChangeProperty(display:PTDisplay; deviceid:longint; _property:TAtom; _type:TAtom; format:longint; 
                mode:longint; data:Pbyte; num_items:longint);cdecl;external;
procedure XIDeleteProperty(display:PTDisplay; deviceid:longint; _property:TAtom);cdecl;external;
function XIGetProperty(display:PTDisplay; deviceid:longint; _property:TAtom; offset:longint; length:longint; 
               delete_property:TBool; _type:TAtom; type_return:PTAtom; format_return:Plongint; num_items_return:Pdword; 
               bytes_after_return:Pdword; data:PPbyte):TStatus;cdecl;external;
procedure XIBarrierReleasePointers(display:PTDisplay; barriers:PTXIBarrierReleasePointerInfo; num_barriers:longint);cdecl;external;
procedure XIBarrierReleasePointer(display:PTDisplay; deviceid:longint; barrier:TPointerBarrier; eventid:TBarrierEventID);cdecl;external;
procedure XIFreeDeviceInfo(info:PTXIDeviceInfo);cdecl;external;
//// {$endif}

//// (* error 
//// #endif /* XINPUT2_H */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/xf86bigfont.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/xf86bigfont.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/xf86bigfont.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XF86BIGFONT_H_}
//// {$define _XF86BIGFONT_H_}

const
  X_XF86BigfontQueryVersion = 0;  
  X_XF86BigfontQueryFont = 1;  
  XF86BigfontNumberEvents = 0;  
  XF86BigfontNumberErrors = 0;  
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/dpmsconst.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/dpmsconst.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/dpmsconst.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _DPMSCONST_H}

const
  _DPMSCONST_H = 1;  
  DPMSMajorVersion = 1;  
  DPMSMinorVersion = 2;  
  DPMSExtensionName = 'DPMS';  
  DPMSModeOn = 0;  
  DPMSModeStandby = 1;  
  DPMSModeSuspend = 2;  
  DPMSModeOff = 3;  
  DPMSInfoNotifyMask = 1 shl 0;  
  DPMSInfoNotify = 0;  
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/Xinerama.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/Xinerama.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/Xinerama.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

Type
PDisplay  = ^Display;
Plongint  = ^longint;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _Xinerama_h}
//// {$define _Xinerama_h}
//// {$include <X11/Xlib.h>}
type
  TXineramaScreenInfo = record
      screen_number : longint;
      x_org : smallint;
      y_org : smallint;
      width : smallint;
      height : smallint;
    end;
//// (* error 
//// Bool XineramaQueryExtension (
//// (* error 
////    int     *event_base,
//// (* error 
////    int     *error_base
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)

function XineramaQueryVersion(dpy:PTDisplay; major_versionp:Plongint; minor_versionp:Plongint):TStatus;cdecl;external;
function XineramaIsActive(dpy:PTDisplay):TBool;cdecl;external;

function XineramaQueryScreens(dpy:PTDisplay; number:Plongint):^TXineramaScreenInfo;cdecl;external;
//// {$endif}

//// (* error 
//// 

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/cup.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/cup.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/cup.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _CUP_H_}
//// {$define _CUP_H_}

const
  XCUPNAME = 'TOG-CUP';  

  XCUP_MAJOR_VERSION = 1;  
  XCUP_MINOR_VERSION = 0;  
  XcupNumberErrors = 0;  
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/xf86dga1.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/xf86dga1.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/xf86dga1.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

Type
Pchar  = ^char;
PDisplay  = ^Display;
Pdword  = ^dword;
Plongint  = ^longint;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XF86DGA1_H_}
//// {$define _XF86DGA1_H_}
//// {$include <X11/Xfuncproto.h>}
//// {$include <X11/extensions/xf86dga1const.h>}
//// (* error 
//// Bool XF86DGAQueryVersion(
//// (* error 
////     int*		/* majorVersion */,
//// (* error 
////     int*		/* minorVersion */

 in declarator_list *)
 in declarator_list *)
 in declarator_list *)


function XF86DGAQueryExtension(_para1:PTDisplay; _para2:Plongint; _para3:Plongint):TBool;cdecl;external;

function XF86DGAGetVideoLL(_para1:PTDisplay; _para2:longint; _para3:Pdword; _para4:Plongint; _para5:Plongint; 
           _para6:Plongint):TStatus;cdecl;external;

function XF86DGAGetVideo(_para1:PTDisplay; _para2:longint; _para3:PPchar; _para4:Plongint; _para5:Plongint; 
           _para6:Plongint):TStatus;cdecl;external;

function XF86DGADirectVideo(_para1:PTDisplay; _para2:longint; _para3:longint):TStatus;cdecl;external;

function XF86DGADirectVideoLL(_para1:PTDisplay; _para2:longint; _para3:longint):TStatus;cdecl;external;

function XF86DGAGetViewPortSize(_para1:PTDisplay; _para2:longint; _para3:Plongint; _para4:Plongint):TStatus;cdecl;external;

function XF86DGASetViewPort(_para1:PTDisplay; _para2:longint; x:longint; y:longint):TStatus;cdecl;external;

function XF86DGAGetVidPage(_para1:PTDisplay; _para2:longint; _para3:Plongint):TStatus;cdecl;external;

function XF86DGASetVidPage(_para1:PTDisplay; _para2:longint; _para3:longint):TStatus;cdecl;external;

function XF86DGAInstallColormap(_para1:PTDisplay; _para2:longint; _para3:TColormap):TStatus;cdecl;external;
function XF86DGAForkApp(screen:longint):longint;cdecl;external;

function XF86DGAQueryDirectVideo(_para1:PTDisplay; _para2:longint; _para3:Plongint):TStatus;cdecl;external;

function XF86DGAViewPortChanged(_para1:PTDisplay; _para2:longint; _para3:longint):TBool;cdecl;external;
//// {$endif}

//// (* error 
//// #endif /* _XF86DGA1_H_ */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/security.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/security.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/security.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    PDisplay  = ^Display;
    PXauth  = ^Xauth;
    PXSecurityAuthorization  = ^XSecurityAuthorization;
    PXSecurityAuthorizationAttributes  = ^XSecurityAuthorizationAttributes;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _SECURITY_H}
//// {$define _SECURITY_H}
//// {$define _XAUTH_STRUCT_ONLY}
//// {$include <X11/Xauth.h>}
//// {$include <X11/extensions/secur.h>}
//// (* error 
//// Status XSecurityQueryExtension (
//// (* error 
////     int *major_version_return,
//// (* error 
////     int *minor_version_return);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)

function XSecurityAllocXauth:^TXauth;cdecl;external;
procedure XSecurityFreeXauth(auth:PTXauth);cdecl;external;

type
  TXSecurityAuthorization = dword;

  TXSecurityAuthorizationAttributes = record
      timeout : dword;
      trust_level : dword;
      group : TXID;
      event_mask : longint;
    end;

function XSecurityGenerateAuthorization(dpy:PTDisplay; auth_in:PTXauth; valuemask:dword; attributes:PTXSecurityAuthorizationAttributes; auth_id_return:PTXSecurityAuthorization):^TXauth;cdecl;external;
function XSecurityRevokeAuthorization(dpy:PTDisplay; auth_id:TXSecurityAuthorization):TStatus;cdecl;external;
//// (* error 
//// typedef struct {
in declaration at line 70 *)

      var
        serial : dword;cvar;public;

        send_event : TBool;cvar;public;

        display : ^TDisplay;cvar;public;

        auth_id : TXSecurityAuthorization;cvar;public;

//// (* error 
//// } XSecurityAuthorizationRevokedEvent;
in declaration at line 75 *)
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/syncconst.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/syncconst.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/syncconst.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _SYNCCONST_H_}
//// {$define _SYNCCONST_H_}

const
  SYNC_NAME = 'SYNC';  
  SYNC_MAJOR_VERSION = 3;  
  SYNC_MINOR_VERSION = 1;  
  XSyncCounterNotify = 0;  
  XSyncAlarmNotify = 1;  
  XSyncAlarmNotifyMask = 1 shl XSyncAlarmNotify;  
  XSyncNumberEvents = 2;  
  XSyncBadCounter = 0;  
  XSyncBadAlarm = 1;  
  XSyncBadFence = 2;  
  XSyncNumberErrors = XSyncBadFence+1;  

  XSyncCACounter = 1 shl 0;  
  XSyncCAValueType = 1 shl 1;  
  XSyncCAValue = 1 shl 2;  
  XSyncCATestType = 1 shl 3;  
  XSyncCADelta = 1 shl 4;  
  XSyncCAEvents = 1 shl 5;  

//// (* error 
//// #define _XSyncIntToValue(pv, i)     ((pv)->hi=((i<0)?~0:0),(pv)->lo=(i))
in define line 86 *)
//// (* error 
//// #define _XSyncIntsToValue(pv, l, h) ((pv)->lo = (l), (pv)->hi = (h))
in define line 87 *)
//// (* error 
////     ((a).hi>(b).hi || ((a).hi==(b).hi && (a).lo>(b).lo))
in define line 89 *)
//// (* error 
////     ((a).hi<(b).hi || ((a).hi==(b).hi && (a).lo<(b).lo))
in define line 91 *)
//// (* error 
////     ((a).hi>(b).hi || ((a).hi==(b).hi && (a).lo>=(b).lo))
in define line 93 *)
//// (* error 
////     ((a).hi<(b).hi || ((a).hi==(b).hi && (a).lo<=(b).lo))
in define line 95 *)

    function _XSyncValueEqual(a,b : longint) : longint;    

    function _XSyncValueIsNegative(v : longint) : longint;    

    function _XSyncValueIsZero(a : longint) : longint;    

    function _XSyncValueIsPositive(v : longint) : longint;    

    function _XSyncValueLow32(v : longint) : longint;    

    function _XSyncValueHigh32(v : longint) : longint;    

//// (* error 
//// #define _XSyncValueAdd(presult,a,b,poverflow) {\
in declaration at line 103 *)
//// (* error 
//// 	int t = (a).lo;\
//// (* error 
//// 	Bool signa = XSyncValueIsNegative(a);\
in declaration at line 104 *)
//// (* error 
//// 	Bool signa = XSyncValueIsNegative(a);\
//// (* error 
//// 	Bool signb = XSyncValueIsNegative(b);\
in declaration at line 105 *)
//// (* error 
//// 	Bool signb = XSyncValueIsNegative(b);\
//// (* error 
//// 	((presult)->lo = (a).lo + (b).lo);\
in declaration at line 106 *)
//// (* error 
//// 	((presult)->lo = (a).lo + (b).lo);\
//// (* error 
//// 	((presult)->hi = (a).hi + (b).hi);\
in declaration at line 107 *)
//// (* error 
//// 	((presult)->hi = (a).hi + (b).hi);\
//// (* error 
//// 	if (t>(presult)->lo) (presult)->hi++;\
in declaration at line 108 *)
//// (* error 
//// 	if (t>(presult)->lo) (presult)->hi++;\
//// (* error 
//// 	*poverflow = ((signa == signb) && !(signa == XSyncValueIsNegative(*presult)));\
in declaration at line 109 *)
//// (* error 
//// 	*poverflow = ((signa == signb) && !(signa == XSyncValueIsNegative(*presult)));\
//// (* error 
////      }
in declaration at line 112 *)
//// (* error 
//// 	int t = (a).lo;\
//// (* error 
//// 	Bool signa = XSyncValueIsNegative(a);\
in declaration at line 113 *)
//// (* error 
//// 	Bool signa = XSyncValueIsNegative(a);\
//// (* error 
//// 	Bool signb = XSyncValueIsNegative(b);\
in declaration at line 114 *)
//// (* error 
//// 	Bool signb = XSyncValueIsNegative(b);\
//// (* error 
//// 	((presult)->lo = (a).lo - (b).lo);\
in declaration at line 115 *)
//// (* error 
//// 	((presult)->lo = (a).lo - (b).lo);\
//// (* error 
//// 	((presult)->hi = (a).hi - (b).hi);\
in declaration at line 116 *)
//// (* error 
//// 	((presult)->hi = (a).hi - (b).hi);\
//// (* error 
//// 	if (t<(presult)->lo) (presult)->hi--;\
in declaration at line 117 *)
//// (* error 
//// 	if (t<(presult)->lo) (presult)->hi--;\
//// (* error 
//// 	*poverflow = ((signa == signb) && !(signa == XSyncValueIsNegative(*presult)));\
in declaration at line 118 *)
//// (* error 
//// 	*poverflow = ((signa == signb) && !(signa == XSyncValueIsNegative(*presult)));\
//// (* error 
////      }
in define line 120 *)
//// (* error 
//// #define _XSyncMinValue(pv) ((pv)->hi = 0x80000000, (pv)->lo = 0)
in define line 121 *)

    function XSyncIntToValue(pv,i : longint) : longint;    

    function XSyncIntsToValue(pv,l,h : longint) : longint;    

    function XSyncValueGreaterThan(a,b : longint) : longint;    

    function XSyncValueLessThan(a,b : longint) : longint;    

    function XSyncValueGreaterOrEqual(a,b : longint) : longint;    

    function XSyncValueLessOrEqual(a,b : longint) : longint;    

    function XSyncValueEqual(a,b : longint) : longint;    

    function XSyncValueIsNegative(v : longint) : longint;    

    function XSyncValueIsZero(a : longint) : longint;    

    function XSyncValueIsPositive(v : longint) : longint;    

    function XSyncValueLow32(v : longint) : longint;    

    function XSyncValueHigh32(v : longint) : longint;    

    function XSyncValueAdd(presult,a,b,poverflow : longint) : longint;    

    function XSyncValueSubtract(presult,a,b,poverflow : longint) : longint;    

    function XSyncMaxValue(pv : longint) : longint;    

    function XSyncMinValue(pv : longint) : longint;    


    type
      TXSyncValueType = (XSyncAbsolute,XSyncRelative);


      TXSyncTestType = (XSyncPositiveTransition,XSyncNegativeTransition,
        XSyncPositiveComparison,XSyncNegativeComparison
        );


      TXSyncAlarmState = (XSyncAlarmActive,XSyncAlarmInactive,
        XSyncAlarmDestroyed);

      TXSyncCounter = TXID;

      TXSyncAlarm = TXID;

      TXSyncFence = TXID;

      T_XSyncValue = record
          hi : longint;
          lo : dword;
        end;
      TXSyncValue = T_XSyncValue;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/securproto.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/securproto.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/securproto.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _SECURPROTO_H}
//// {$define _SECURPROTO_H}
//// {$include <X11/extensions/secur.h>}

const
  X_SecurityQueryVersion = 0;  
  X_SecurityGenerateAuthorization = 1;  
  X_SecurityRevokeAuthorization = 2;  
type
  TxSecurityQueryVersionReq = record
      reqType : TCARD8;
      securityReqType : TCARD8;
      length : TCARD16;
      majorVersion : TCARD16;
      minorVersion : TCARD16;
    end;

const
  sz_xSecurityQueryVersionReq = 8;  
type
  TxSecurityQueryVersionReply = record
      _type : TCARD8;
      pad0 : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      majorVersion : TCARD16;
      minorVersion : TCARD16;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_xSecurityQueryVersionReply = 32;  



type
  TxSecurityGenerateAuthorizationReq = record
      reqType : TCARD8;
      securityReqType : TCARD8;
      length : TCARD16;
      nbytesAuthProto : TCARD16;
      nbytesAuthData : TCARD16;
      valueMask : TCARD32;
    end;

const
  sz_xSecurityGenerateAuthorizationReq = 12;  
type
  TxSecurityGenerateAuthorizationReply = record
      _type : TCARD8;
      pad0 : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      authId : TCARD32;
      dataLength : TCARD16;
      pad1 : TCARD16;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_xSecurityGenerateAuthorizationReply = 32;  
type
  TxSecurityRevokeAuthorizationReq = record
      reqType : TCARD8;
      securityReqType : TCARD8;
      length : TCARD16;
      authId : TCARD32;
    end;

const
  sz_xSecurityRevokeAuthorizationReq = 8;  
type
  T_xSecurityAuthorizationRevokedEvent = record
      _type : TBYTE;
      detail : TBYTE;
      sequenceNumber : TCARD16;
      authId : TCARD32;
      pad0 : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;
  TxSecurityAuthorizationRevokedEvent = T_xSecurityAuthorizationRevokedEvent;

const
  sz_xSecurityAuthorizationRevokedEvent = 32;  
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/shapeconst.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/shapeconst.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/shapeconst.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _SHAPECONST_H_}
//// {$define _SHAPECONST_H_}


const
  SHAPENAME = 'SHAPE';  

  SHAPE_MAJOR_VERSION = 1;  
  SHAPE_MINOR_VERSION = 1;  
  ShapeSet = 0;  
  ShapeUnion = 1;  
  ShapeIntersect = 2;  
  ShapeSubtract = 3;  
  ShapeInvert = 4;  
  ShapeBounding = 0;  
  ShapeClip = 1;  
  ShapeInput = 2;  
  ShapeNotifyMask = 1 shl 0;  
  ShapeNotify = 0;  
  ShapeNumberEvents = ShapeNotify+1;  
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/panoramiXproto.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/panoramiXproto.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/panoramiXproto.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _PANORAMIXPROTO_H_}
//// {$define _PANORAMIXPROTO_H_}


const
  PANORAMIX_MAJOR_VERSION = 1;  
  PANORAMIX_MINOR_VERSION = 1;  
  PANORAMIX_PROTOCOL_NAME = 'XINERAMA';  
  X_PanoramiXQueryVersion = 0;  
  X_PanoramiXGetState = 1;  
  X_PanoramiXGetScreenCount = 2;  
  X_PanoramiXGetScreenSize = 3;  
  X_XineramaIsActive = 4;  
  X_XineramaQueryScreens = 5;  


type
  T_PanoramiXQueryVersion = record
      reqType : TCARD8;
      panoramiXReqType : TCARD8;
      length : TCARD16;
      clientMajor : TCARD8;
      clientMinor : TCARD8;
      unused : TCARD16;
    end;
  TxPanoramiXQueryVersionReq = T_PanoramiXQueryVersion;

const
  sz_xPanoramiXQueryVersionReq = 8;  









type
  TxPanoramiXQueryVersionReply = record
      _type : TCARD8;
      pad1 : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      majorVersion : TCARD16;
      minorVersion : TCARD16;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;

const
  sz_xPanoramiXQueryVersionReply = 32;  


type
  T_PanoramiXGetState = record
      reqType : TCARD8;
      panoramiXReqType : TCARD8;
      length : TCARD16;
      window : TCARD32;
    end;
  TxPanoramiXGetStateReq = T_PanoramiXGetState;

const
  sz_xPanoramiXGetStateReq = 8;  





type
  TxPanoramiXGetStateReply = record
      _type : TBYTE;
      state : TBYTE;
      sequenceNumber : TCARD16;
      length : TCARD32;
      window : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_panoramiXGetStateReply = 32;  


type
  T_PanoramiXGetScreenCount = record
      reqType : TCARD8;
      panoramiXReqType : TCARD8;
      length : TCARD16;
      window : TCARD32;
    end;
  TxPanoramiXGetScreenCountReq = T_PanoramiXGetScreenCount;

const
  sz_xPanoramiXGetScreenCountReq = 8;  





type
  TxPanoramiXGetScreenCountReply = record
      _type : TBYTE;
      ScreenCount : TBYTE;
      sequenceNumber : TCARD16;
      length : TCARD32;
      window : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_panoramiXGetScreenCountReply = 32;  


type
  T_PanoramiXGetScreenSize = record
      reqType : TCARD8;
      panoramiXReqType : TCARD8;
      length : TCARD16;
      window : TCARD32;
      screen : TCARD32;
    end;
  TxPanoramiXGetScreenSizeReq = T_PanoramiXGetScreenSize;

const
  sz_xPanoramiXGetScreenSizeReq = 12;  


type
  TxPanoramiXGetScreenSizeReply = record
      _type : TBYTE;
      pad1 : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      width : TCARD32;
      height : TCARD32;
      window : TCARD32;
      screen : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
    end;

const
  sz_panoramiXGetScreenSizeReply = 32;  

type
  TxXineramaIsActiveReq = record
      reqType : TCARD8;
      panoramiXReqType : TCARD8;
      length : TCARD16;
    end;

const
  sz_xXineramaIsActiveReq = 4;  
type
  TxXineramaIsActiveReply = record
      _type : TBYTE;
      pad1 : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      state : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;

const
  sz_XineramaIsActiveReply = 32;  
type
  TxXineramaQueryScreensReq = record
      reqType : TCARD8;
      panoramiXReqType : TCARD8;
      length : TCARD16;
    end;

const
  sz_xXineramaQueryScreensReq = 4;  
type
  TxXineramaQueryScreensReply = record
      _type : TBYTE;
      pad1 : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      number : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;

const
  sz_XineramaQueryScreensReply = 32;  
type
  TxXineramaScreenInfo = record
      x_org : TINT16;
      y_org : TINT16;
      width : TCARD16;
      height : TCARD16;
    end;

const
  sz_XineramaScreenInfo = 8;  
//// {$endif}

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/Xcomposite.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/Xcomposite.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/Xcomposite.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    PDisplay  = ^Display;
    Plongint  = ^longint;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XCOMPOSITE_H_}
//// {$define _XCOMPOSITE_H_}
//// {$include <X11/extensions/composite.h>}
//// {$include <X11/extensions/Xfixes.h>}
//// {$include <X11/Xfuncproto.h>}


const
  XCOMPOSITE_MAJOR = COMPOSITE_MAJOR;  
  XCOMPOSITE_MINOR = COMPOSITE_MINOR;  
  XCOMPOSITE_REVISION = 2;  
//// (* error 
//// #define XCOMPOSITE_VERSION	((XCOMPOSITE_MAJOR * 10000) + (XCOMPOSITE_MINOR * 100) + (XCOMPOSITE_REVISION))
in define line 59 *)
//// (* error 
//// Bool XCompositeQueryExtension (Display *dpy,
//// (* error 
////                                int *event_base_return,
//// (* error 
////                                int *error_base_return);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)

function XCompositeQueryVersion(dpy:PTDisplay; major_version_return:Plongint; minor_version_return:Plongint):TStatus;cdecl;external;
function XCompositeVersion:longint;cdecl;external;
procedure XCompositeRedirectWindow(dpy:PTDisplay; window:TWindow; update:longint);cdecl;external;
procedure XCompositeRedirectSubwindows(dpy:PTDisplay; window:TWindow; update:longint);cdecl;external;
procedure XCompositeUnredirectWindow(dpy:PTDisplay; window:TWindow; update:longint);cdecl;external;
procedure XCompositeUnredirectSubwindows(dpy:PTDisplay; window:TWindow; update:longint);cdecl;external;
function XCompositeCreateRegionFromBorderClip(dpy:PTDisplay; window:TWindow):TXserverRegion;cdecl;external;
function XCompositeNameWindowPixmap(dpy:PTDisplay; window:TWindow):TPixmap;cdecl;external;
function XCompositeGetOverlayWindow(dpy:PTDisplay; window:TWindow):TWindow;cdecl;external;
procedure XCompositeReleaseOverlayWindow(dpy:PTDisplay; window:TWindow);cdecl;external;
//// {$endif}

//// (* error 
//// #endif /* _XCOMPOSITE_H_ */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/dbeproto.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/dbeproto.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/dbeproto.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef DBE_PROTO_H}
//// {$define DBE_PROTO_H}
//// {$include <X11/extensions/dbe.h>}


const
  X_DbeGetVersion = 0;  
  X_DbeAllocateBackBufferName = 1;  
  X_DbeDeallocateBackBufferName = 2;  
  X_DbeSwapBuffers = 3;  
  X_DbeBeginIdiom = 4;  
  X_DbeEndIdiom = 5;  
  X_DbeGetVisualInfo = 6;  
  X_DbeGetBackBufferAttributes = 7;  
type
  TxDbeSwapAction = TCARD8;

  TxDbeBackBuffer = TCARD32;






  TxDbeSwapInfo = record
      window : TCARD32;
      swapAction : TxDbeSwapAction;
      pad1 : TCARD8;
      pad2 : TCARD16;
    end;




  TxDbeVisInfo = record
      visualID : TCARD32;
      depth : TCARD8;
      perfLevel : TCARD8;
      pad1 : TCARD16;
    end;

const
  sz_xDbeVisInfo = 8;  

type
  TxDbeScreenVisInfo = record
      n : TCARD32;
    end;



  TxDbeBufferAttributes = record
      window : TCARD32;
    end;








  TxDbeGetVersionReq = record
      reqType : TCARD8;
      dbeReqType : TCARD8;
      length : TCARD16;
      majorVersion : TCARD8;
      minorVersion : TCARD8;
      unused : TCARD16;
    end;

const
  sz_xDbeGetVersionReq = 8;  







type
  TxDbeGetVersionReply = record
      _type : TBYTE;
      unused : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      majorVersion : TCARD8;
      minorVersion : TCARD8;
      pad1 : TCARD16;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;

const
  sz_xDbeGetVersionReply = 32;  







type
  TxDbeAllocateBackBufferNameReq = record
      reqType : TCARD8;
      dbeReqType : TCARD8;
      length : TCARD16;
      window : TCARD32;
      buffer : TxDbeBackBuffer;
      swapAction : TxDbeSwapAction;
      pad1 : TCARD8;
      pad2 : TCARD16;
    end;

const
  sz_xDbeAllocateBackBufferNameReq = 16;  




type
  TxDbeDeallocateBackBufferNameReq = record
      reqType : TCARD8;
      dbeReqType : TCARD8;
      length : TCARD16;
      buffer : TxDbeBackBuffer;
    end;

const
  sz_xDbeDeallocateBackBufferNameReq = 8;  




type
  TxDbeSwapBuffersReq = record
      reqType : TCARD8;
      dbeReqType : TCARD8;
      length : TCARD16;
      n : TCARD32;
    end;


const
  sz_xDbeSwapBuffersReq = 8;  



type
  TxDbeBeginIdiomReq = record
      reqType : TCARD8;
      dbeReqType : TCARD8;
      length : TCARD16;
    end;

const
  sz_xDbeBeginIdiomReq = 4;  



type
  TxDbeEndIdiomReq = record
      reqType : TCARD8;
      dbeReqType : TCARD8;
      length : TCARD16;
    end;

const
  sz_xDbeEndIdiomReq = 4;  




type
  TxDbeGetVisualInfoReq = record
      reqType : TCARD8;
      dbeReqType : TCARD8;
      length : TCARD16;
      n : TCARD32;
    end;


const
  sz_xDbeGetVisualInfoReq = 8;  






type
  TxDbeGetVisualInfoReply = record
      _type : TBYTE;
      unused : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      m : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;


const
  sz_xDbeGetVisualInfoReply = 32;  




type
  TxDbeGetBackBufferAttributesReq = record
      reqType : TCARD8;
      dbeReqType : TCARD8;
      length : TCARD16;
      buffer : TxDbeBackBuffer;
    end;

const
  sz_xDbeGetBackBufferAttributesReq = 8;  






type
  TxDbeGetBackBufferAttributesReply = record
      _type : TBYTE;
      unused : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      attributes : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_xDbeGetBackBufferAttributesReply = 32;  
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/XI.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/XI.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/XI.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XI_H_}
//// {$define _XI_H_}

const
  sz_xGetExtensionVersionReq = 8;  
  sz_xGetExtensionVersionReply = 32;  
  sz_xListInputDevicesReq = 4;  
  sz_xListInputDevicesReply = 32;  
  sz_xOpenDeviceReq = 8;  
  sz_xOpenDeviceReply = 32;  
  sz_xCloseDeviceReq = 8;  
  sz_xSetDeviceModeReq = 8;  
  sz_xSetDeviceModeReply = 32;  
  sz_xSelectExtensionEventReq = 12;  
  sz_xGetSelectedExtensionEventsReq = 8;  
  sz_xGetSelectedExtensionEventsReply = 32;  
  sz_xChangeDeviceDontPropagateListReq = 12;  
  sz_xGetDeviceDontPropagateListReq = 8;  
  sz_xGetDeviceDontPropagateListReply = 32;  
  sz_xGetDeviceMotionEventsReq = 16;  
  sz_xGetDeviceMotionEventsReply = 32;  
  sz_xChangeKeyboardDeviceReq = 8;  
  sz_xChangeKeyboardDeviceReply = 32;  
  sz_xChangePointerDeviceReq = 8;  
  sz_xChangePointerDeviceReply = 32;  
  sz_xGrabDeviceReq = 20;  
  sz_xGrabDeviceReply = 32;  
  sz_xUngrabDeviceReq = 12;  
  sz_xGrabDeviceKeyReq = 20;  
  sz_xGrabDeviceKeyReply = 32;  
  sz_xUngrabDeviceKeyReq = 16;  
  sz_xGrabDeviceButtonReq = 20;  
  sz_xGrabDeviceButtonReply = 32;  
  sz_xUngrabDeviceButtonReq = 16;  
  sz_xAllowDeviceEventsReq = 12;  
  sz_xGetDeviceFocusReq = 8;  
  sz_xGetDeviceFocusReply = 32;  
  sz_xSetDeviceFocusReq = 16;  
  sz_xGetFeedbackControlReq = 8;  
  sz_xGetFeedbackControlReply = 32;  
  sz_xChangeFeedbackControlReq = 12;  
  sz_xGetDeviceKeyMappingReq = 8;  
  sz_xGetDeviceKeyMappingReply = 32;  
  sz_xChangeDeviceKeyMappingReq = 8;  
  sz_xGetDeviceModifierMappingReq = 8;  
  sz_xSetDeviceModifierMappingReq = 8;  
  sz_xSetDeviceModifierMappingReply = 32;  
  sz_xGetDeviceButtonMappingReq = 8;  
  sz_xGetDeviceButtonMappingReply = 32;  
  sz_xSetDeviceButtonMappingReq = 8;  
  sz_xSetDeviceButtonMappingReply = 32;  
  sz_xQueryDeviceStateReq = 8;  
  sz_xQueryDeviceStateReply = 32;  
  sz_xSendExtensionEventReq = 16;  
  sz_xDeviceBellReq = 8;  
  sz_xSetDeviceValuatorsReq = 8;  
  sz_xSetDeviceValuatorsReply = 32;  
  sz_xGetDeviceControlReq = 8;  
  sz_xGetDeviceControlReply = 32;  
  sz_xChangeDeviceControlReq = 8;  
  sz_xChangeDeviceControlReply = 32;  
  sz_xListDevicePropertiesReq = 8;  
  sz_xListDevicePropertiesReply = 32;  
  sz_xChangeDevicePropertyReq = 20;  
  sz_xDeleteDevicePropertyReq = 12;  
  sz_xGetDevicePropertyReq = 24;  
  sz_xGetDevicePropertyReply = 32;  
  INAME = 'XInputExtension';  
  XI_KEYBOARD = 'KEYBOARD';  
  XI_MOUSE = 'MOUSE';  
  XI_TABLET = 'TABLET';  
  XI_TOUCHSCREEN = 'TOUCHSCREEN';  
  XI_TOUCHPAD = 'TOUCHPAD';  
  XI_BARCODE = 'BARCODE';  
  XI_BUTTONBOX = 'BUTTONBOX';  
  XI_KNOB_BOX = 'KNOB_BOX';  
  XI_ONE_KNOB = 'ONE_KNOB';  
  XI_NINE_KNOB = 'NINE_KNOB';  
  XI_TRACKBALL = 'TRACKBALL';  
  XI_QUADRATURE = 'QUADRATURE';  
  XI_ID_MODULE = 'ID_MODULE';  
  XI_SPACEBALL = 'SPACEBALL';  
  XI_DATAGLOVE = 'DATAGLOVE';  
  XI_EYETRACKER = 'EYETRACKER';  
  XI_CURSORKEYS = 'CURSORKEYS';  
  XI_FOOTMOUSE = 'FOOTMOUSE';  
  XI_JOYSTICK = 'JOYSTICK';  

  Dont_Check = 0;  
  XInput_Initial_Release = 1;  
  XInput_Add_XDeviceBell = 2;  
  XInput_Add_XSetDeviceValuators = 3;  
  XInput_Add_XChangeDeviceControl = 4;  
  XInput_Add_DevicePresenceNotify = 5;  
  XInput_Add_DeviceProperties = 6;  

  XI_Absent = 0;  
  XI_Present = 1;  
  XI_Initial_Release_Major = 1;  
  XI_Initial_Release_Minor = 0;  
  XI_Add_XDeviceBell_Major = 1;  
  XI_Add_XDeviceBell_Minor = 1;  
  XI_Add_XSetDeviceValuators_Major = 1;  
  XI_Add_XSetDeviceValuators_Minor = 2;  
  XI_Add_XChangeDeviceControl_Major = 1;  
  XI_Add_XChangeDeviceControl_Minor = 3;  
  XI_Add_DevicePresenceNotify_Major = 1;  
  XI_Add_DevicePresenceNotify_Minor = 4;  
  XI_Add_DeviceProperties_Major = 1;  
  XI_Add_DeviceProperties_Minor = 5;  
  DEVICE_RESOLUTION = 1;  
  DEVICE_ABS_CALIB = 2;  
  DEVICE_CORE = 3;  
  DEVICE_ENABLE = 4;  
  DEVICE_ABS_AREA = 5;  
  NoSuchExtension = 1;  
  COUNT = 0;  
  CREATE = 1;  
  NewPointer = 0;  
  NewKeyboard = 1;  
  XPOINTER = 0;  
  XKEYBOARD = 1;  
  UseXKeyboard = $FF;  
  IsXPointer = 0;  
  IsXKeyboard = 1;  
  IsXExtensionDevice = 2;  
  IsXExtensionKeyboard = 3;  
  IsXExtensionPointer = 4;  
  AsyncThisDevice = 0;  
  SyncThisDevice = 1;  
  ReplayThisDevice = 2;  
  AsyncOtherDevices = 3;  
  AsyncAll = 4;  
  SyncAll = 5;  
  FollowKeyboard = 3;  
//// {$ifndef RevertToFollowKeyboard}

const
  RevertToFollowKeyboard = 3;  
//// {$endif}

const
  DvAccelNum = 1 shl 0;  
  DvAccelDenom = 1 shl 1;  
  DvThreshold = 1 shl 2;  
  DvKeyClickPercent = 1 shl 0;  
  DvPercent = 1 shl 1;  
  DvPitch = 1 shl 2;  
  DvDuration = 1 shl 3;  
  DvLed = 1 shl 4;  
  DvLedMode = 1 shl 5;  
  DvKey = 1 shl 6;  
  DvAutoRepeatMode = 1 shl 7;  
  DvString = 1 shl 0;  
  DvInteger = 1 shl 0;  
  DeviceMode = 1 shl 0;  
  Relative = 0;  
  Absolute = 1;  
  ProximityState = 1 shl 1;  
  InProximity = 0 shl 1;  
  OutOfProximity = 1 shl 1;  
  AddToList = 0;  
  DeleteFromList = 1;  
  KeyClass = 0;  
  ButtonClass = 1;  
  ValuatorClass = 2;  
  FeedbackClass = 3;  
  ProximityClass = 4;  
  FocusClass = 5;  
  OtherClass = 6;  
  AttachClass = 7;  
  KbdFeedbackClass = 0;  
  PtrFeedbackClass = 1;  
  StringFeedbackClass = 2;  
  IntegerFeedbackClass = 3;  
  LedFeedbackClass = 4;  
  BellFeedbackClass = 5;  
  _devicePointerMotionHint = 0;  
  _deviceButton1Motion = 1;  
  _deviceButton2Motion = 2;  
  _deviceButton3Motion = 3;  
  _deviceButton4Motion = 4;  
  _deviceButton5Motion = 5;  
  _deviceButtonMotion = 6;  
  _deviceButtonGrab = 7;  
  _deviceOwnerGrabButton = 8;  
  _noExtensionEvent = 9;  
  _devicePresence = 0;  
  _deviceEnter = 0;  
  _deviceLeave = 1;  

  DeviceAdded = 0;  
  DeviceRemoved = 1;  
  DeviceEnabled = 2;  
  DeviceDisabled = 3;  
  DeviceUnrecoverable = 4;  
  DeviceControlChanged = 5;  

  XI_BadDevice = 0;  
  XI_BadEvent = 1;  
  XI_BadMode = 2;  
  XI_DeviceBusy = 3;  
  XI_BadClass = 4;  

//// {$ifdef _XSERVER64}
type
  TXEventClass = dword;
//// {$else}
type
  TXEventClass = dword;
//// {$endif}

type
  TXExtensionVersion = record
      present : longint;
      major_version : smallint;
      minor_version : smallint;
    end;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/shmproto.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/shmproto.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/shmproto.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _SHMPROTO_H_}
//// {$define _SHMPROTO_H_}
//// {$include <X11/extensions/shm.h>}

const
  ShmSeg = CARD32;  
  Drawable = CARD32;  
  VisualID = CARD32;  
  GContext = CARD32;  
  Pixmap = CARD32;  
  X_ShmQueryVersion = 0;  
  X_ShmAttach = 1;  
  X_ShmDetach = 2;  
  X_ShmPutImage = 3;  
  X_ShmGetImage = 4;  
  X_ShmCreatePixmap = 5;  
  X_ShmAttachFd = 6;  
  X_ShmCreateSegment = 7;  


type
  T_ShmQueryVersion = record
      reqType : TCARD8;
      shmReqType : TCARD8;
      length : TCARD16;
    end;
  TxShmQueryVersionReq = T_ShmQueryVersion;

const
  sz_xShmQueryVersionReq = 4;  



type
  TxShmQueryVersionReply = record
      _type : TBYTE;
      sharedPixmaps : TBOOL;
      sequenceNumber : TCARD16;
      length : TCARD32;
      majorVersion : TCARD16;
      minorVersion : TCARD16;
      uid : TCARD16;
      gid : TCARD16;
      pixmapFormat : TCARD8;
      pad0 : TCARD8;
      pad1 : TCARD16;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
    end;

const
  sz_xShmQueryVersionReply = 32;  


type
  T_ShmAttach = record
      reqType : TCARD8;
      shmReqType : TCARD8;
      length : TCARD16;
      shmseg : TShmSeg;
      shmid : TCARD32;
      readOnly : TBOOL;
      pad0 : TBYTE;
      pad1 : TCARD16;
    end;
  TxShmAttachReq = T_ShmAttach;

const
  sz_xShmAttachReq = 16;  


type
  T_ShmDetach = record
      reqType : TCARD8;
      shmReqType : TCARD8;
      length : TCARD16;
      shmseg : TShmSeg;
    end;
  TxShmDetachReq = T_ShmDetach;

const
  sz_xShmDetachReq = 8;  


type
  T_ShmPutImage = record
      reqType : TCARD8;
      shmReqType : TCARD8;
      length : TCARD16;
      drawable : TDrawable;
      gc : TGContext;
      totalWidth : TCARD16;
      totalHeight : TCARD16;
      srcX : TCARD16;
      srcY : TCARD16;
      srcWidth : TCARD16;
      srcHeight : TCARD16;
      dstX : TINT16;
      dstY : TINT16;
      depth : TCARD8;
      format : TCARD8;
      sendEvent : TCARD8;
      bpad : TCARD8;
      shmseg : TShmSeg;
      offset : TCARD32;
    end;
  TxShmPutImageReq = T_ShmPutImage;

const
  sz_xShmPutImageReq = 40;  


type
  T_ShmGetImage = record
      reqType : TCARD8;
      shmReqType : TCARD8;
      length : TCARD16;
      drawable : TDrawable;
      x : TINT16;
      y : TINT16;
      width : TCARD16;
      height : TCARD16;
      planeMask : TCARD32;
      format : TCARD8;
      pad0 : TCARD8;
      pad1 : TCARD8;
      pad2 : TCARD8;
      shmseg : TShmSeg;
      offset : TCARD32;
    end;
  TxShmGetImageReq = T_ShmGetImage;

const
  sz_xShmGetImageReq = 32;  

type
  T_ShmGetImageReply = record
      _type : TBYTE;
      depth : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      visual : TVisualID;
      size : TCARD32;
      pad0 : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
    end;
  TxShmGetImageReply = T_ShmGetImageReply;

const
  sz_xShmGetImageReply = 32;  


type
  T_ShmCreatePixmap = record
      reqType : TCARD8;
      shmReqType : TCARD8;
      length : TCARD16;
      pid : TPixmap;
      drawable : TDrawable;
      width : TCARD16;
      height : TCARD16;
      depth : TCARD8;
      pad0 : TCARD8;
      pad1 : TCARD8;
      pad2 : TCARD8;
      shmseg : TShmSeg;
      offset : TCARD32;
    end;
  TxShmCreatePixmapReq = T_ShmCreatePixmap;

const
  sz_xShmCreatePixmapReq = 28;  

type
  T_ShmCompletion = record
      _type : TBYTE;
      bpad0 : TBYTE;
      sequenceNumber : TCARD16;
      drawable : TDrawable;
      minorEvent : TCARD16;
      majorEvent : TBYTE;
      bpad1 : TBYTE;
      shmseg : TShmSeg;
      offset : TCARD32;
      pad0 : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
    end;
  TxShmCompletionEvent = T_ShmCompletion;

const
  sz_xShmCompletionEvent = 32;  



type
  T_ShmAttachFd = record
      reqType : TCARD8;
      shmReqType : TCARD8;
      length : TCARD16;
      shmseg : TShmSeg;
      readOnly : TBOOL;
      pad0 : TBYTE;
      pad1 : TCARD16;
    end;
  TxShmAttachFdReq = T_ShmAttachFd;


const
  sz_xShmAttachFdReq = 12;  


type
  T_ShmCreateSegment = record
      reqType : TCARD8;
      shmReqType : TCARD8;
      length : TCARD16;
      shmseg : TShmSeg;
      size : TCARD32;
      readOnly : TBOOL;
      pad0 : TBYTE;
      pad1 : TCARD16;
    end;
  TxShmCreateSegmentReq = T_ShmCreateSegment;

const
  sz_xShmCreateSegmentReq = 16;  










type
  TxShmCreateSegmentReply = record
      _type : TCARD8;
      nfd : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
      pad7 : TCARD32;
    end;


const
  sz_xShmCreateSegmentReply = 32;  
//// {$undef ShmSeg}
//// {$undef Drawable}
//// {$undef VisualID}
//// {$undef GContext}
//// {$undef Pixmap}
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/XTest.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/XTest.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/XTest.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

Type
PDisplay  = ^Display;
Plongint  = ^longint;
PVisual  = ^Visual;
PXDevice  = ^XDevice;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XTEST_H_}
//// {$define _XTEST_H_}
//// {$include <X11/Xfuncproto.h>}
//// {$include <X11/extensions/xtestconst.h>}
//// {$include <X11/extensions/XInput.h>}
//// (* error 
//// Bool XTestQueryExtension(
//// (* error 
////     int*		/* event_basep */,
//// (* error 
////     int*		/* error_basep */,
//// (* error 
////     int*		/* majorp */,
//// (* error 
////     int*		/* minorp */

 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)


function XTestCompareCursorWithWindow(_para1:PTDisplay; _para2:TWindow; _para3:TCursor):TBool;cdecl;external;

function XTestCompareCurrentCursorWithWindow(_para1:PTDisplay; _para2:TWindow):TBool;cdecl;external;

function XTestFakeKeyEvent(_para1:PTDisplay; _para2:dword; _para3:TBool; _para4:dword):longint;cdecl;external;

function XTestFakeButtonEvent(_para1:PTDisplay; _para2:dword; _para3:TBool; _para4:dword):longint;cdecl;external;

function XTestFakeMotionEvent(_para1:PTDisplay; _para2:longint; _para3:longint; _para4:longint; _para5:dword):longint;cdecl;external;

function XTestFakeRelativeMotionEvent(_para1:PTDisplay; _para2:longint; _para3:longint; _para4:dword):longint;cdecl;external;

function XTestFakeDeviceKeyEvent(_para1:PTDisplay; _para2:PTXDevice; _para3:dword; _para4:TBool; _para5:Plongint; 
           _para6:longint; _para7:dword):longint;cdecl;external;

function XTestFakeDeviceButtonEvent(_para1:PTDisplay; _para2:PTXDevice; _para3:dword; _para4:TBool; _para5:Plongint; 
           _para6:longint; _para7:dword):longint;cdecl;external;

function XTestFakeProximityEvent(_para1:PTDisplay; _para2:PTXDevice; _para3:TBool; _para4:Plongint; _para5:longint; 
           _para6:dword):longint;cdecl;external;

function XTestFakeDeviceMotionEvent(_para1:PTDisplay; _para2:PTXDevice; _para3:TBool; _para4:longint; _para5:Plongint; 
           _para6:longint; _para7:dword):longint;cdecl;external;

function XTestGrabControl(_para1:PTDisplay; _para2:TBool):longint;cdecl;external;

procedure XTestSetGContextOfGC(_para1:TGC; _para2:TGContext);cdecl;external;

procedure XTestSetVisualIDOfVisual(_para1:PTVisual; _para2:TVisualID);cdecl;external;

function XTestDiscard(_para1:PTDisplay):TStatus;cdecl;external;
//// {$endif}
//// (* error 
//// #endif

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/xtestext1.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/xtestext1.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/xtestext1.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    PDisplay  = ^Display;
    Pdword  = ^dword;
    Plongint  = ^longint;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XTESTEXT1_H}
//// {$define _XTESTEXT1_H}

//// {$include <X11/extensions/xtestext1const.h>}


type
  TXTestInputActionEvent = record
      _type : longint;
      display : ^TDisplay;
      window : TWindow;
      actions : array[0..(XTestACTIONS_SIZE)-1] of TCARD8;
    end;



  TXTestFakeAckEvent = record
      _type : longint;
      display : ^TDisplay;
      window : TWindow;
    end;
//// (* error 
//// int XTestFakeInput(register Display *dpy, char *action_list_addr, int action_list_size, int ack_flag);
in declaration at line 86 *)
//// (* error 
//// int XTestGetInput(register Display *dpy, int action_handling);
//// (* error 
//// int XTestGetInput(register Display *dpy, int action_handling);
 in declarator_list *)
 in declarator_list *)
//// (* error 
//// int XTestQueryInputSize(register Display *dpy, unsigned long *size_return);
//// (* error 
//// int XTestQueryInputSize(register Display *dpy, unsigned long *size_return);
 in declarator_list *)
 in declarator_list *)

function XTestPressKey(display:PTDisplay; device_id:longint; delay:dword; keycode:dword; key_action:dword):longint;cdecl;external;
function XTestPressButton(display:PTDisplay; device_id:longint; delay:dword; button_number:dword; button_action:dword):longint;cdecl;external;
function XTestMovePointer(display:PTDisplay; device_id:longint; delay:Pdword; x:Plongint; y:Plongint; 
               count:dword):longint;cdecl;external;
function XTestFlush(display:PTDisplay):longint;cdecl;external;
//// (* error 
//// int XTestStopInput(register Display *dpy);
 in declarator_list *)
//// (* error 
//// int XTestReset(register Display *dpy);
 in declarator_list *)
//// {$endif}

//// (* error 
//// #endif /* _XTESTEXT1_H */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/damagewire.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/damagewire.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/damagewire.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _DAMAGEWIRE_H_}
//// {$define _DAMAGEWIRE_H_}

const
  DAMAGE_NAME = 'DAMAGE';  
  DAMAGE_MAJOR = 1;  
  DAMAGE_MINOR = 1;  


  XDamageReportRawRectangles = 0;  
  XDamageReportDeltaRectangles = 1;  
  XDamageReportBoundingBox = 2;  
  XDamageReportNonEmpty = 3;  

  X_DamageQueryVersion = 0;  
  X_DamageCreate = 1;  
  X_DamageDestroy = 2;  
  X_DamageSubtract = 3;  
  X_DamageAdd = 4;  
  XDamageNumberRequests = X_DamageAdd+1;  

  XDamageNotify = 0;  
  XDamageNumberEvents = XDamageNotify+1;  

  BadDamage = 0;  
  XDamageNumberErrors = BadDamage+1;  
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/sync.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/sync.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/sync.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    PBool  = ^Bool;
    PDisplay  = ^Display;
    Plongint  = ^longint;
    PXSyncAlarmAttributes  = ^XSyncAlarmAttributes;
    PXSyncFence  = ^XSyncFence;
    PXSyncSystemCounter  = ^XSyncSystemCounter;
    PXSyncValue  = ^XSyncValue;
    PXSyncWaitCondition  = ^XSyncWaitCondition;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _SYNC_H_}
//// {$define _SYNC_H_}
//// {$include <X11/Xfuncproto.h>}
//// {$include <X11/extensions/syncconst.h>}
//// {$ifdef _SYNC_SERVER}
//// {$include <X11/extensions/syncproto.h>}
//// {$else}

//// {$undef XSyncIntToValue}
//// {$undef XSyncIntsToValue}
//// {$undef XSyncValueGreaterThan}
//// {$undef XSyncValueLessThan}
//// {$undef XSyncValueGreaterOrEqual}
//// {$undef XSyncValueLessOrEqual}
//// {$undef XSyncValueEqual}
//// {$undef XSyncValueIsNegative}
//// {$undef XSyncValueIsZero}
//// {$undef XSyncValueIsPositive}
//// {$undef XSyncValueLow32}
//// {$undef XSyncValueHigh32}
//// {$undef XSyncValueAdd}
//// {$undef XSyncValueSubtract}
//// {$undef XSyncMaxValue}
//// {$undef XSyncMinValue}
//// (* error 
//// extern void XSyncIntToValue(

in declaration at line 83 *)


procedure XSyncIntsToValue(_para1:PTXSyncValue; _para2:dword; _para3:longint);cdecl;external;

function XSyncValueGreaterThan(_para1:TXSyncValue; _para2:TXSyncValue):TBool;cdecl;external;

function XSyncValueLessThan(_para1:TXSyncValue; _para2:TXSyncValue):TBool;cdecl;external;

function XSyncValueGreaterOrEqual(_para1:TXSyncValue; _para2:TXSyncValue):TBool;cdecl;external;

function XSyncValueLessOrEqual(_para1:TXSyncValue; _para2:TXSyncValue):TBool;cdecl;external;

function XSyncValueEqual(_para1:TXSyncValue; _para2:TXSyncValue):TBool;cdecl;external;

function XSyncValueIsNegative(_para1:TXSyncValue):TBool;cdecl;external;

function XSyncValueIsZero(_para1:TXSyncValue):TBool;cdecl;external;

function XSyncValueIsPositive(_para1:TXSyncValue):TBool;cdecl;external;

function XSyncValueLow32(_para1:TXSyncValue):dword;cdecl;external;

function XSyncValueHigh32(_para1:TXSyncValue):longint;cdecl;external;

procedure XSyncValueAdd(_para1:PTXSyncValue; _para2:TXSyncValue; _para3:TXSyncValue; _para4:Plongint);cdecl;external;

procedure XSyncValueSubtract(_para1:PTXSyncValue; _para2:TXSyncValue; _para3:TXSyncValue; _para4:Plongint);cdecl;external;

procedure XSyncMaxValue(_para1:PTXSyncValue);cdecl;external;

procedure XSyncMinValue(_para1:PTXSyncValue);cdecl;external;
//// (* error 
//// typedef struct _XSyncSystemCounter {
in declaration at line 162 *)

      var
        counter : TXSyncCounter;cvar;public;

        resolution : TXSyncValue;cvar;public;

//// (* error 
//// } XSyncSystemCounter;
in declaration at line 165 *)




    type
      TXSyncTrigger = record
          counter : TXSyncCounter;
          value_type : TXSyncValueType;
          wait_value : TXSyncValue;
          test_type : TXSyncTestType;
        end;



      TXSyncWaitCondition = record
          trigger : TXSyncTrigger;
          event_threshold : TXSyncValue;
        end;

      TXSyncAlarmAttributes = record
          trigger : TXSyncTrigger;
          delta : TXSyncValue;
          events : TBool;
          state : TXSyncAlarmState;
        end;












      TXSyncCounterNotifyEvent = record
          _type : longint;
          serial : dword;
          send_event : TBool;
          display : ^TDisplay;
          counter : TXSyncCounter;
          wait_value : TXSyncValue;
          counter_value : TXSyncValue;
          time : TTime;
          count : longint;
          destroyed : TBool;
        end;










      TXSyncAlarmNotifyEvent = record
          _type : longint;
          serial : dword;
          send_event : TBool;
          display : ^TDisplay;
          alarm : TXSyncAlarm;
          counter_value : TXSyncValue;
          alarm_value : TXSyncValue;
          time : TTime;
          state : TXSyncAlarmState;
        end;








      TXSyncAlarmError = record
          _type : longint;
          display : ^TDisplay;
          alarm : TXSyncAlarm;
          serial : dword;
          error_code : byte;
          request_code : byte;
          minor_code : byte;
        end;







      TXSyncCounterError = record
          _type : longint;
          display : ^TDisplay;
          counter : TXSyncCounter;
          serial : dword;
          error_code : byte;
          request_code : byte;
          minor_code : byte;
        end;

//// (* error 
//// extern Status XSyncQueryExtension(

in declaration at line 251 *)


function XSyncInitialize(_para1:PTDisplay; _para2:Plongint; _para3:Plongint):TStatus;cdecl;external;

function XSyncListSystemCounters(_para1:PTDisplay; _para2:Plongint):^TXSyncSystemCounter;cdecl;external;

procedure XSyncFreeSystemCounterList(_para1:PTXSyncSystemCounter);cdecl;external;

function XSyncCreateCounter(_para1:PTDisplay; _para2:TXSyncValue):TXSyncCounter;cdecl;external;

function XSyncSetCounter(_para1:PTDisplay; _para2:TXSyncCounter; _para3:TXSyncValue):TStatus;cdecl;external;

function XSyncChangeCounter(_para1:PTDisplay; _para2:TXSyncCounter; _para3:TXSyncValue):TStatus;cdecl;external;

function XSyncDestroyCounter(_para1:PTDisplay; _para2:TXSyncCounter):TStatus;cdecl;external;

function XSyncQueryCounter(_para1:PTDisplay; _para2:TXSyncCounter; _para3:PTXSyncValue):TStatus;cdecl;external;

function XSyncAwait(_para1:PTDisplay; _para2:PTXSyncWaitCondition; _para3:longint):TStatus;cdecl;external;

function XSyncCreateAlarm(_para1:PTDisplay; _para2:dword; _para3:PTXSyncAlarmAttributes):TXSyncAlarm;cdecl;external;

function XSyncDestroyAlarm(_para1:PTDisplay; _para2:TXSyncAlarm):TStatus;cdecl;external;

function XSyncQueryAlarm(_para1:PTDisplay; _para2:TXSyncAlarm; _para3:PTXSyncAlarmAttributes):TStatus;cdecl;external;

function XSyncChangeAlarm(_para1:PTDisplay; _para2:TXSyncAlarm; _para3:dword; _para4:PTXSyncAlarmAttributes):TStatus;cdecl;external;

function XSyncSetPriority(_para1:PTDisplay; _para2:TXID; _para3:longint):TStatus;cdecl;external;

function XSyncGetPriority(_para1:PTDisplay; _para2:TXID; _para3:Plongint):TStatus;cdecl;external;

function XSyncCreateFence(_para1:PTDisplay; _para2:TDrawable; _para3:TBool):TXSyncFence;cdecl;external;

function XSyncTriggerFence(_para1:PTDisplay; _para2:TXSyncFence):TBool;cdecl;external;

function XSyncResetFence(_para1:PTDisplay; _para2:TXSyncFence):TBool;cdecl;external;

function XSyncDestroyFence(_para1:PTDisplay; _para2:TXSyncFence):TBool;cdecl;external;

function XSyncQueryFence(_para1:PTDisplay; _para2:TXSyncFence; _para3:PTBool):TBool;cdecl;external;

function XSyncAwaitFence(_para1:PTDisplay; _para2:PTXSyncFence; _para3:longint):TBool;cdecl;external;
//// {$endif}

//// {$endif}

//// (* error 
//// #endif /* _SYNC_H_ */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/XShm.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/XShm.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/XShm.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

Type
PBool  = ^Bool;
Pchar  = ^char;
PDisplay  = ^Display;
Plongint  = ^longint;
PVisual  = ^Visual;
PXImage  = ^XImage;
PXShmSegmentInfo  = ^XShmSegmentInfo;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XSHM_H_}
//// {$define _XSHM_H_}
//// {$include <X11/Xfuncproto.h>}
//// {$include <X11/extensions/shm.h>}
//// {$ifndef _XSHM_SERVER_}
type
  TShmSeg = dword;










  TXShmCompletionEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      drawable : TDrawable;
      major_code : longint;
      minor_code : longint;
      shmseg : TShmSeg;
      offset : dword;
    end;





  TXShmSegmentInfo = record
      shmseg : TShmSeg;
      shmid : longint;
      shmaddr : ^char;
      readOnly : TBool;
    end;
//// (* error 
//// Bool XShmQueryExtension(

 in declarator_list *)


function XShmGetEventBase(_para1:PTDisplay):longint;cdecl;external;

function XShmQueryVersion(_para1:PTDisplay; _para2:Plongint; _para3:Plongint; _para4:PTBool):TBool;cdecl;external;

function XShmPixmapFormat(_para1:PTDisplay):longint;cdecl;external;

function XShmAttach(_para1:PTDisplay; _para2:PTXShmSegmentInfo):TBool;cdecl;external;

function XShmDetach(_para1:PTDisplay; _para2:PTXShmSegmentInfo):TBool;cdecl;external;

function XShmPutImage(_para1:PTDisplay; _para2:TDrawable; _para3:TGC; _para4:PTXImage; _para5:longint; 
           _para6:longint; _para7:longint; _para8:longint; _para9:dword; _para10:dword; 
           _para11:TBool):TBool;cdecl;external;

function XShmGetImage(_para1:PTDisplay; _para2:TDrawable; _para3:PTXImage; _para4:longint; _para5:longint; 
           _para6:dword):TBool;cdecl;external;

function XShmCreateImage(_para1:PTDisplay; _para2:PTVisual; _para3:dword; _para4:longint; _para5:Pchar; 
           _para6:PTXShmSegmentInfo; _para7:dword; _para8:dword):^TXImage;cdecl;external;

function XShmCreatePixmap(_para1:PTDisplay; _para2:TDrawable; _para3:Pchar; _para4:PTXShmSegmentInfo; _para5:dword; 
           _para6:dword; _para7:dword):TPixmap;cdecl;external;
//// {$endif}

//// {$endif}
//// (* error 
//// #endif

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/mitmiscconst.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/mitmiscconst.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/mitmiscconst.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _MITMISCCONST_H_}
//// {$define _MITMISCCONST_H_}

const
  MITMiscNumberEvents = 0;  
  MITMiscNumberErrors = 0;  
  MITMISCNAME = 'MIT-SUNDRY-NONSTANDARD';  
//// {$endif}

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/secur.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/secur.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/secur.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _SECUR_H}
//// {$define _SECUR_H}

const
  SECURITY_EXTENSION_NAME = 'SECURITY';  
  SECURITY_MAJOR_VERSION = 1;  
  SECURITY_MINOR_VERSION = 0;  
  XSecurityNumberEvents = 1;  
  XSecurityNumberErrors = 2;  
  XSecurityBadAuthorization = 0;  
  XSecurityBadAuthorizationProtocol = 1;  

  XSecurityClientTrusted = 0;  
  XSecurityClientUntrusted = 1;  

  XSecurityTimeout = 1 shl 0;  
  XSecurityTrustLevel = 1 shl 1;  
  XSecurityGroup = 1 shl 2;  
  XSecurityEventMask = 1 shl 3;  
  XSecurityAllAuthorizationAttributes = ((XSecurityTimeout or XSecurityTrustLevel) or XSecurityGroup) or XSecurityEventMask;  

  XSecurityAuthorizationRevokedMask = 1 shl 0;  
  XSecurityAllEventMasks = XSecurityAuthorizationRevokedMask;  

  XSecurityAuthorizationRevoked = 0;  
  XSecurityAuthorizationName = 'XC-QUERY-SECURITY-1';  
  XSecurityAuthorizationNameLen = 19;  
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/dbe.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/dbe.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/dbe.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef DBE_H}
//// {$define DBE_H}


const
  XdbeUndefined = 0;  
  XdbeBackground = 1;  
  XdbeUntouched = 2;  
  XdbeCopied = 3;  

  XdbeBadBuffer = 0;  
  DBE_PROTOCOL_NAME = 'DOUBLE-BUFFER';  

  DBE_MAJOR_VERSION = 1;  
  DBE_MINOR_VERSION = 0;  

  DbeNumberEvents = 0;  
  DbeBadBuffer = 0;  
  DbeNumberErrors = DbeBadBuffer+1;  
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/panoramiXext.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/panoramiXext.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/panoramiXext.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    PDisplay  = ^Display;
    Plongint  = ^longint;
    PXPanoramiXInfo  = ^XPanoramiXInfo;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}





//// {$ifndef _panoramiXext_h}
//// {$define _panoramiXext_h}
//// {$include <X11/Xfuncproto.h>}






type
  TXPanoramiXInfo = record
      window : TWindow;
      screen : longint;
      State : longint;
      width : longint;
      height : longint;
      ScreenCount : longint;
      eventMask : TXID;
    end;
//// (* error 
//// extern Bool XPanoramiXQueryExtension (

in declaration at line 52 *)


function XPanoramiXQueryVersion(_para1:PTDisplay; _para2:Plongint; _para3:Plongint):TStatus;cdecl;external;
function XPanoramiXAllocInfo:^TXPanoramiXInfo;cdecl;external;

function XPanoramiXGetState(_para1:PTDisplay; _para2:TDrawable; _para3:PTXPanoramiXInfo):TStatus;cdecl;external;

function XPanoramiXGetScreenCount(_para1:PTDisplay; _para2:TDrawable; _para3:PTXPanoramiXInfo):TStatus;cdecl;external;

function XPanoramiXGetScreenSize(_para1:PTDisplay; _para2:TDrawable; _para3:longint; _para4:PTXPanoramiXInfo):TStatus;cdecl;external;
//// {$endif}

//// (* error 
//// #endif /* _panoramiXext_h */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/XLbx.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/XLbx.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/XLbx.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

Type
PDisplay  = ^Display;
Plongint  = ^longint;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XLBX_H_}
//// {$define _XLBX_H_}
//// {$include <X11/Xfuncproto.h>}
//// {$include <X11/Xdefs.h>}
//// {$include <X11/Xlib.h>}
//// {$include <X11/extensions/lbx.h>}
//// (* error 
//// Bool XLbxQueryExtension(
//// (* error 
////     int*		/* requestp */,
//// (* error 
////     int*		/* event_basep */,
//// (* error 
////     int*		/* error_basep */

 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)


function XLbxQueryVersion(_para1:PTDisplay; _para2:Plongint; _para3:Plongint):TBool;cdecl;external;
function XLbxGetEventBase(dpy:PTDisplay):longint;cdecl;external;
//// {$endif}
//// (* error 
//// #endif

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/xf86dgaproto.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/xf86dgaproto.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/xf86dgaproto.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XF86DGAPROTO_H_}
//// {$define _XF86DGAPROTO_H_}
//// {$include <X11/extensions/xf86dga1proto.h>}
//// {$include <X11/extensions/xf86dgaconst.h>}

const
  XF86DGANAME = 'XFree86-DGA';  

  XDGA_MAJOR_VERSION = 2;  
  XDGA_MINOR_VERSION = 0;  


type
  T_XDGAQueryVersion = record
      reqType : TCARD8;
      dgaReqType : TCARD8;
      length : TCARD16;
    end;
  TxXDGAQueryVersionReq = T_XDGAQueryVersion;

const
  sz_xXDGAQueryVersionReq = 4;  



type
  TxXDGAQueryVersionReply = record
      _type : TBYTE;
      pad1 : TBOOL;
      sequenceNumber : TCARD16;
      length : TCARD32;
      majorVersion : TCARD16;
      minorVersion : TCARD16;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;

const
  sz_xXDGAQueryVersionReply = 32;  
type
  T_XDGAQueryModes = record
      reqType : TCARD8;
      dgaReqType : TCARD8;
      length : TCARD16;
      screen : TCARD32;
    end;
  TxXDGAQueryModesReq = T_XDGAQueryModes;

const
  sz_xXDGAQueryModesReq = 8;  


type
  TxXDGAQueryModesReply = record
      _type : TBYTE;
      pad1 : TBOOL;
      sequenceNumber : TCARD16;
      length : TCARD32;
      number : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;

const
  sz_xXDGAQueryModesReply = 32;  


type
  T_XDGASetMode = record
      reqType : TCARD8;
      dgaReqType : TCARD8;
      length : TCARD16;
      screen : TCARD32;
      mode : TCARD32;
      pid : TCARD32;
    end;
  TxXDGASetModeReq = T_XDGASetMode;

const
  sz_xXDGASetModeReq = 16;  


type
  TxXDGASetModeReply = record
      _type : TBYTE;
      pad1 : TBOOL;
      sequenceNumber : TCARD16;
      length : TCARD32;
      offset : TCARD32;
      flags : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_xXDGASetModeReply = 32;  
type
  TxXDGAModeInfo = record
      byte_order : TCARD8;
      depth : TCARD8;
      num : TCARD16;
      bpp : TCARD16;
      name_size : TCARD16;
      vsync_num : TCARD32;
      vsync_den : TCARD32;
      flags : TCARD32;
      image_width : TCARD16;
      image_height : TCARD16;
      pixmap_width : TCARD16;
      pixmap_height : TCARD16;
      bytes_per_scanline : TCARD32;
      red_mask : TCARD32;
      green_mask : TCARD32;
      blue_mask : TCARD32;
      visual_class : TCARD16;
      pad1 : TCARD16;
      viewport_width : TCARD16;
      viewport_height : TCARD16;
      viewport_xstep : TCARD16;
      viewport_ystep : TCARD16;
      viewport_xmax : TCARD16;
      viewport_ymax : TCARD16;
      viewport_flags : TCARD32;
      reserved1 : TCARD32;
      reserved2 : TCARD32;
    end;

const
  sz_xXDGAModeInfo = 72;  
type
  T_XDGAOpenFramebuffer = record
      reqType : TCARD8;
      dgaReqType : TCARD8;
      length : TCARD16;
      screen : TCARD32;
    end;
  TxXDGAOpenFramebufferReq = T_XDGAOpenFramebuffer;

const
  sz_xXDGAOpenFramebufferReq = 8;  







type
  TxXDGAOpenFramebufferReply = record
      _type : TBYTE;
      pad1 : TBOOL;
      sequenceNumber : TCARD16;
      length : TCARD32;
      mem1 : TCARD32;
      mem2 : TCARD32;
      size : TCARD32;
      offset : TCARD32;
      extra : TCARD32;
      pad2 : TCARD32;
    end;

const
  sz_xXDGAOpenFramebufferReply = 32;  
type
  T_XDGACloseFramebuffer = record
      reqType : TCARD8;
      dgaReqType : TCARD8;
      length : TCARD16;
      screen : TCARD32;
    end;
  TxXDGACloseFramebufferReq = T_XDGACloseFramebuffer;

const
  sz_xXDGACloseFramebufferReq = 8;  
type
  T_XDGASetViewport = record
      reqType : TCARD8;
      dgaReqType : TCARD8;
      length : TCARD16;
      screen : TCARD32;
      x : TCARD16;
      y : TCARD16;
      flags : TCARD32;
    end;
  TxXDGASetViewportReq = T_XDGASetViewport;

const
  sz_xXDGASetViewportReq = 16;  
type
  T_XDGAInstallColormap = record
      reqType : TCARD8;
      dgaReqType : TCARD8;
      length : TCARD16;
      screen : TCARD32;
      cmap : TCARD32;
    end;
  TxXDGAInstallColormapReq = T_XDGAInstallColormap;

const
  sz_xXDGAInstallColormapReq = 12;  
type
  T_XDGASelectInput = record
      reqType : TCARD8;
      dgaReqType : TCARD8;
      length : TCARD16;
      screen : TCARD32;
      mask : TCARD32;
    end;
  TxXDGASelectInputReq = T_XDGASelectInput;

const
  sz_xXDGASelectInputReq = 12;  
type
  T_XDGAFillRectangle = record
      reqType : TCARD8;
      dgaReqType : TCARD8;
      length : TCARD16;
      screen : TCARD32;
      x : TCARD16;
      y : TCARD16;
      width : TCARD16;
      height : TCARD16;
      color : TCARD32;
    end;
  TxXDGAFillRectangleReq = T_XDGAFillRectangle;

const
  sz_xXDGAFillRectangleReq = 20;  
type
  T_XDGACopyArea = record
      reqType : TCARD8;
      dgaReqType : TCARD8;
      length : TCARD16;
      screen : TCARD32;
      srcx : TCARD16;
      srcy : TCARD16;
      width : TCARD16;
      height : TCARD16;
      dstx : TCARD16;
      dsty : TCARD16;
    end;
  TxXDGACopyAreaReq = T_XDGACopyArea;

const
  sz_xXDGACopyAreaReq = 20;  
type
  T_XDGACopyTransparentArea = record
      reqType : TCARD8;
      dgaReqType : TCARD8;
      length : TCARD16;
      screen : TCARD32;
      srcx : TCARD16;
      srcy : TCARD16;
      width : TCARD16;
      height : TCARD16;
      dstx : TCARD16;
      dsty : TCARD16;
      key : TCARD32;
    end;
  TxXDGACopyTransparentAreaReq = T_XDGACopyTransparentArea;

const
  sz_xXDGACopyTransparentAreaReq = 24;  
type
  T_XDGAGetViewportStatus = record
      reqType : TCARD8;
      dgaReqType : TCARD8;
      length : TCARD16;
      screen : TCARD32;
    end;
  TxXDGAGetViewportStatusReq = T_XDGAGetViewportStatus;

const
  sz_xXDGAGetViewportStatusReq = 8;  
type
  TxXDGAGetViewportStatusReply = record
      _type : TBYTE;
      pad1 : TBOOL;
      sequenceNumber : TCARD16;
      length : TCARD32;
      status : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;

const
  sz_xXDGAGetViewportStatusReply = 32;  
type
  T_XDGASync = record
      reqType : TCARD8;
      dgaReqType : TCARD8;
      length : TCARD16;
      screen : TCARD32;
    end;
  TxXDGASyncReq = T_XDGASync;

const
  sz_xXDGASyncReq = 8;  
type
  TxXDGASyncReply = record
      _type : TBYTE;
      pad1 : TBOOL;
      sequenceNumber : TCARD16;
      length : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
      pad7 : TCARD32;
    end;

const
  sz_xXDGASyncReply = 32;  
type
  T_XDGASetClientVersion = record
      reqType : TCARD8;
      dgaReqType : TCARD8;
      length : TCARD16;
      major : TCARD16;
      minor : TCARD16;
    end;
  TxXDGASetClientVersionReq = T_XDGASetClientVersion;

const
  sz_xXDGASetClientVersionReq = 8;  
type
  TxXDGAChangePixmapModeReq = record
      reqType : TCARD8;
      dgaReqType : TCARD8;
      length : TCARD16;
      screen : TCARD32;
      x : TCARD16;
      y : TCARD16;
      flags : TCARD32;
    end;

const
  sz_xXDGAChangePixmapModeReq = 16;  
type
  TxXDGAChangePixmapModeReply = record
      _type : TBYTE;
      pad1 : TBOOL;
      sequenceNumber : TCARD16;
      length : TCARD32;
      x : TCARD16;
      y : TCARD16;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
      pad7 : TCARD32;
    end;

const
  sz_xXDGAChangePixmapModeReply = 32;  
type
  T_XDGACreateColormap = record
      reqType : TCARD8;
      dgaReqType : TCARD8;
      length : TCARD16;
      screen : TCARD32;
      id : TCARD32;
      mode : TCARD32;
      alloc : TCARD8;
      pad1 : TCARD8;
      pad2 : TCARD16;
    end;
  TxXDGACreateColormapReq = T_XDGACreateColormap;

const
  sz_xXDGACreateColormapReq = 20;  
type
  TdgaEvent = record
      u : record
          case longint of
            0 : ( u : record
                _type : TBYTE;
                detail : TBYTE;
                sequenceNumber : TCARD16;
              end );
            1 : ( event : record
                pad0 : TCARD32;
                time : TCARD32;
                dx : TINT16;
                dy : TINT16;
                screen : TINT16;
                state : TCARD16;
                pad1 : TCARD32;
                pad2 : TCARD32;
                pad3 : TCARD32;
                pad4 : TCARD32;
              end );
          end;
    end;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/bigreqstr.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/bigreqstr.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/bigreqstr.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}


//// (* error 
//// #warning "bigreqstr.h is obsolete and may be removed in the future."
//// (* error 
//// #warning "bigreqstr.h is obsolete and may be removed in the future."
//// {$include <X11/extensions/bigreqsproto.h>}

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/recordconst.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/recordconst.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/recordconst.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _RECORDCONST_H_}
//// {$define _RECORDCONST_H_}

const
  RECORD_NAME = 'RECORD';  
  RECORD_MAJOR_VERSION = 1;  
  RECORD_MINOR_VERSION = 13;  
  RECORD_LOWEST_MAJOR_VERSION = 1;  
  RECORD_LOWEST_MINOR_VERSION = 12;  

  XRecordBadContext = 0;  
  RecordNumErrors = XRecordBadContext+1;  
  RecordNumEvents = 0;  

  XRecordFromServerTime = $01;  
  XRecordFromClientTime = $02;  
  XRecordFromClientSequence = $04;  
  XRecordCurrentClients = 1;  
  XRecordFutureClients = 2;  
  XRecordAllClients = 3;  
  XRecordFromServer = 0;  
  XRecordFromClient = 1;  
  XRecordClientStarted = 2;  
  XRecordClientDied = 3;  
  XRecordStartOfData = 4;  
  XRecordEndOfData = 5;  
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/dmxproto.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/dmxproto.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/dmxproto.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}





//// {$ifndef _DMXSTR_H_}
//// {$define _DMXSTR_H_}

const
  DMX_EXTENSION_NAME = 'DMX';  
  DMX_EXTENSION_MAJOR = 2;  
  DMX_EXTENSION_MINOR = 2;  
  DMX_EXTENSION_PATCH = 20040604;  

  DMX_BAD_XINERAMA = 1001;  
  DMX_BAD_VALUE = 1002;  
  X_DMXQueryVersion = 0;  
  X_DMXGetScreenCount = 1;  
  X_DMXGetScreenInformationDEPRECATED = 2;  
  X_DMXGetWindowAttributes = 3;  
  X_DMXGetInputCount = 4;  
  X_DMXGetInputAttributes = 5;  
  X_DMXForceWindowCreationDEPRECATED = 6;  
  X_DMXReconfigureScreenDEPRECATED = 7;  
  X_DMXSync = 8;  
  X_DMXForceWindowCreation = 9;  
  X_DMXGetScreenAttributes = 10;  
  X_DMXChangeScreensAttributes = 11;  
  X_DMXAddScreen = 12;  
  X_DMXRemoveScreen = 13;  
  X_DMXGetDesktopAttributes = 14;  
  X_DMXChangeDesktopAttributes = 15;  
  X_DMXAddInput = 16;  
  X_DMXRemoveInput = 17;  



type
  TxDMXQueryVersionReq = record
      reqType : TCARD8;
      dmxReqType : TCARD8;
      length : TCARD16;
    end;

const
  sz_xDMXQueryVersionReq = 4;  


type
  TxDMXQueryVersionReply = record
      _type : TBYTE;
      ununsed : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      majorVersion : TCARD32;
      minorVersion : TCARD32;
      patchVersion : TCARD32;
      pad0 : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
    end;

const
  sz_xDMXQueryVersionReply = 32;  



type
  TxDMXSyncReq = record
      reqType : TCARD8;
      dmxReqType : TCARD8;
      length : TCARD16;
    end;

const
  sz_xDMXSyncReq = 4;  


type
  TxDMXSyncReply = record
      _type : TBYTE;
      unused : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      status : TCARD32;
      pad0 : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
    end;

const
  sz_xDMXSyncReply = 32;  



type
  TxDMXForceWindowCreationReq = record
      reqType : TCARD8;
      dmxReqType : TCARD8;
      length : TCARD16;
      window : TCARD32;
    end;

const
  sz_xDMXForceWindowCreationReq = 8;  


type
  TxDMXForceWindowCreationReply = record
      _type : TBYTE;
      unused : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      status : TCARD32;
      pad0 : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
    end;

const
  sz_xDMXForceWindowCreationReply = 32;  



type
  TxDMXGetScreenCountReq = record
      reqType : TCARD8;
      dmxReqType : TCARD8;
      length : TCARD16;
    end;

const
  sz_xDMXGetScreenCountReq = 4;  


type
  TxDMXGetScreenCountReply = record
      _type : TBYTE;
      unused : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      screenCount : TCARD32;
      pad0 : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
    end;

const
  sz_xDMXGetScreenCountReply = 32;  



type
  TxDMXGetScreenAttributesReq = record
      reqType : TCARD8;
      dmxReqType : TCARD8;
      length : TCARD16;
      physicalScreen : TCARD32;
    end;

const
  sz_xDMXGetScreenAttributesReq = 8;  


type
  TxDMXGetScreenAttributesReply = record
      _type : TBYTE;
      unused : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      displayNameLength : TCARD32;
      logicalScreen : TCARD32;
      screenWindowWidth : TCARD16;
      screenWindowHeight : TCARD16;
      screenWindowXoffset : TINT16;
      screenWindowYoffset : TINT16;
      rootWindowWidth : TCARD16;
      rootWindowHeight : TCARD16;
      rootWindowXoffset : TINT16;
      rootWindowYoffset : TINT16;
      rootWindowXorigin : TINT16;
      rootWindowYorigin : TINT16;
    end;

const
  sz_xDMXGetScreenAttributesReply = 36;  



type
  TxDMXChangeScreensAttributesReq = record
      reqType : TCARD8;
      dmxReqType : TCARD8;
      length : TCARD16;
      screenCount : TCARD32;
      maskCount : TCARD32;
    end;

const
  sz_xDMXChangeScreensAttributesReq = 12;  


type
  TxDMXChangeScreensAttributesReply = record
      _type : TBYTE;
      unused : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      status : TCARD32;
      errorScreen : TCARD32;
      pad0 : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
    end;

const
  sz_xDMXChangeScreensAttributesReply = 32;  



type
  TxDMXAddScreenReq = record
      reqType : TCARD8;
      dmxReqType : TCARD8;
      length : TCARD16;
      displayNameLength : TCARD32;
      physicalScreen : TCARD32;
      valueMask : TCARD32;
    end;

const
  sz_xDMXAddScreenReq = 16;  


type
  TxDMXAddScreenReply = record
      _type : TBYTE;
      unused : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      status : TCARD32;
      physicalScreen : TCARD32;
      pad0 : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
    end;

const
  sz_xDMXAddScreenReply = 32;  



type
  TxDMXRemoveScreenReq = record
      reqType : TCARD8;
      dmxReqType : TCARD8;
      length : TCARD16;
      physicalScreen : TCARD32;
    end;

const
  sz_xDMXRemoveScreenReq = 8;  


type
  TxDMXRemoveScreenReply = record
      _type : TBYTE;
      unused : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      status : TCARD32;
      pad0 : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
    end;

const
  sz_xDMXRemoveScreenReply = 32;  



type
  TxDMXGetWindowAttributesReq = record
      reqType : TCARD8;
      dmxReqType : TCARD8;
      length : TCARD16;
      window : TCARD32;
    end;

const
  sz_xDMXGetWindowAttributesReq = 8;  


type
  TxDMXGetWindowAttributesReply = record
      _type : TBYTE;
      unused : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      screenCount : TCARD32;
      pad0 : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
    end;

const
  sz_xDMXGetWindowAttributesReply = 32;  



type
  TxDMXGetDesktopAttributesReq = record
      reqType : TCARD8;
      dmxReqType : TCARD8;
      length : TCARD16;
    end;

const
  sz_xDMXGetDesktopAttributesReq = 4;  


type
  TxDMXGetDesktopAttributesReply = record
      _type : TBYTE;
      unused : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      width : TINT16;
      height : TINT16;
      shiftX : TINT16;
      shiftY : TINT16;
      pad0 : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
    end;

const
  sz_xDMXGetDesktopAttributesReply = 32;  



type
  TxDMXChangeDesktopAttributesReq = record
      reqType : TCARD8;
      dmxReqType : TCARD8;
      length : TCARD16;
      valueMask : TCARD32;
    end;

const
  sz_xDMXChangeDesktopAttributesReq = 8;  


type
  TxDMXChangeDesktopAttributesReply = record
      _type : TBYTE;
      unused : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      status : TCARD32;
      pad0 : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
    end;

const
  sz_xDMXChangeDesktopAttributesReply = 32;  



type
  TxDMXGetInputCountReq = record
      reqType : TCARD8;
      dmxReqType : TCARD8;
      length : TCARD16;
    end;

const
  sz_xDMXGetInputCountReq = 4;  


type
  TxDMXGetInputCountReply = record
      _type : TBYTE;
      unused : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      inputCount : TCARD32;
      pad0 : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
    end;

const
  sz_xDMXGetInputCountReply = 32;  



type
  TxDMXGetInputAttributesReq = record
      reqType : TCARD8;
      dmxReqType : TCARD8;
      length : TCARD16;
      deviceId : TCARD32;
    end;

const
  sz_xDMXGetInputAttributesReq = 8;  


type
  TxDMXGetInputAttributesReply = record
      _type : TBYTE;
      unused : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      inputType : TCARD32;
      physicalScreen : TCARD32;
      physicalId : TCARD32;
      nameLength : TCARD32;
      isCore : TBOOL;
      sendsCore : TBOOL;
      detached : TBOOL;
      pad0 : TCARD8;
      pad1 : TCARD32;
    end;

const
  sz_xDMXGetInputAttributesReply = 32;  



type
  TxDMXAddInputReq = record
      reqType : TCARD8;
      dmxReqType : TCARD8;
      length : TCARD16;
      displayNameLength : TCARD32;
      valueMask : TCARD32;
    end;

const
  sz_xDMXAddInputReq = 12;  


type
  TxDMXAddInputReply = record
      _type : TBYTE;
      unused : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      status : TCARD32;
      physicalId : TCARD32;
      pad0 : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
    end;

const
  sz_xDMXAddInputReply = 32;  



type
  TxDMXRemoveInputReq = record
      reqType : TCARD8;
      dmxReqType : TCARD8;
      length : TCARD16;
      physicalId : TCARD32;
    end;

const
  sz_xDMXRemoveInputReq = 8;  

type
  TxDMXRemoveInputReply = record
      _type : TBYTE;
      unused : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      status : TCARD32;
      pad0 : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
    end;

const
  sz_xDMXRemoveInputReply = 32;  
//// {$endif}

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/dpms.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/dpms.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/dpms.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    PBOOL  = ^BOOL;
    PCARD16  = ^CARD16;
    PDisplay  = ^Display;
    Plongint  = ^longint;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _X11_EXTENSIONS_DPMS_H}

const
  _X11_EXTENSIONS_DPMS_H = 1;  
//// {$include <X11/X.h>}
//// {$include <X11/Xmd.h>}
//// {$include <X11/extensions/dpmsconst.h>}
//// {$ifndef DPMS_SERVER}
//// (* error 
//// extern Bool DPMSQueryExtension(Display *, int *, int *);
in declaration at line 39 *)

function DPMSGetVersion(_para1:PTDisplay; _para2:Plongint; _para3:Plongint):TStatus;cdecl;external;
function DPMSCapable(_para1:PTDisplay):TBool;cdecl;external;
function DPMSSetTimeouts(_para1:PTDisplay; _para2:TCARD16; _para3:TCARD16; _para4:TCARD16):TStatus;cdecl;external;
function DPMSGetTimeouts(_para1:PTDisplay; _para2:PTCARD16; _para3:PTCARD16; _para4:PTCARD16):TBool;cdecl;external;
function DPMSEnable(_para1:PTDisplay):TStatus;cdecl;external;
function DPMSDisable(_para1:PTDisplay):TStatus;cdecl;external;
function DPMSForceLevel(_para1:PTDisplay; _para2:TCARD16):TStatus;cdecl;external;
function DPMSInfo(_para1:PTDisplay; _para2:PTCARD16; _para3:PTBOOL):TStatus;cdecl;external;
//// {$endif}
//// {$endif}

//// (* error 
//// 

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/EVI.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/EVI.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/EVI.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _EVI_H_}
//// {$define _EVI_H_}

const
  XEVI_TRANSPARENCY_NONE = 0;  
  XEVI_TRANSPARENCY_PIXEL = 1;  
  XEVI_TRANSPARENCY_MASK = 2;  
  EVINAME = 'Extended-Visual-Information';  

  XEVI_MAJOR_VERSION = 1;  
  XEVI_MINOR_VERSION = 0;  
//// {$endif}

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/xf86dga.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/xf86dga.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/xf86dga.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}


//// {$ifdef _XF86DGA_SERVER_}
//// (* error 
//// #warning "xf86dga.h is obsolete and may be removed in the future."
//// (* error 
//// #warning "xf86dga.h is obsolete and may be removed in the future."
//// {$include <X11/extensions/xf86dgaconst.h>}
//// {$else}
//// {$include <X11/extensions/Xxf86dga.h>}
//// {$endif}

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/xf86vmstr.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/xf86vmstr.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/xf86vmstr.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}


//// (* error 
//// #warning "xf86vmstr.h is obsolete and may be removed in the future."
//// (* error 
//// #warning "xf86vmstr.h is obsolete and may be removed in the future."
//// {$include <X11/extensions/xf86vmproto.h>}

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/composite.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/composite.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/composite.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _COMPOSITE_H_}
//// {$define _COMPOSITE_H_}
//// {$include <X11/extensions/xfixeswire.h>}

const
  COMPOSITE_NAME = 'Composite';  
  COMPOSITE_MAJOR = 0;  
  COMPOSITE_MINOR = 4;  
  CompositeRedirectAutomatic = 0;  
  CompositeRedirectManual = 1;  
  X_CompositeQueryVersion = 0;  
  X_CompositeRedirectWindow = 1;  
  X_CompositeRedirectSubwindows = 2;  
  X_CompositeUnredirectWindow = 3;  
  X_CompositeUnredirectSubwindows = 4;  
  X_CompositeCreateRegionFromBorderClip = 5;  
  X_CompositeNameWindowPixmap = 6;  
  X_CompositeGetOverlayWindow = 7;  
  X_CompositeReleaseOverlayWindow = 8;  
  CompositeNumberRequests = X_CompositeReleaseOverlayWindow+1;  
  CompositeNumberEvents = 0;  
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/xfixesproto.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/xfixesproto.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/xfixesproto.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XFIXESPROTO_H_}
//// {$define _XFIXESPROTO_H_}
//// {$include <X11/Xmd.h>}
//// {$include <X11/extensions/xfixeswire.h>}
//// {$include <X11/extensions/shapeconst.h>}

const
  Window = CARD32;  
  Drawable = CARD32;  
  Font = CARD32;  
  Pixmap = CARD32;  
  Cursor = CARD32;  
  Colormap = CARD32;  
  GContext = CARD32;  
  Atom = CARD32;  
  VisualID = CARD32;  
  Time = CARD32;  
  KeyCode = CARD8;  
  KeySym = CARD32;  
  Picture = CARD32;  

type
  TxXFixesReq = record
      reqType : TCARD8;
      xfixesReqType : TCARD8;
      length : TCARD16;
    end;


  TxXFixesQueryVersionReq = record
      reqType : TCARD8;
      xfixesReqType : TCARD8;
      length : TCARD16;
      majorVersion : TCARD32;
      minorVersion : TCARD32;
    end;

const
  sz_xXFixesQueryVersionReq = 12;  

type
  TxXFixesQueryVersionReply = record
      _type : TBYTE;
      pad1 : TBYTE;
      sequenceNumber : TCARD16;
      length : TCARD32;
      majorVersion : TCARD32;
      minorVersion : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_xXFixesQueryVersionReply = 32;  



type
  TxXFixesChangeSaveSetReq = record
      reqType : TCARD8;
      xfixesReqType : TCARD8;
      length : TCARD16;
      mode : TBYTE;
      target : TBYTE;
      map : TBYTE;
      pad1 : TBYTE;
      window : TWindow;
    end;

const
  sz_xXFixesChangeSaveSetReq = 12;  
type
  TxXFixesSelectSelectionInputReq = record
      reqType : TCARD8;
      xfixesReqType : TCARD8;
      length : TCARD16;
      window : TWindow;
      selection : TAtom;
      eventMask : TCARD32;
    end;

const
  sz_xXFixesSelectSelectionInputReq = 16;  
type
  TxXFixesSelectionNotifyEvent = record
      _type : TCARD8;
      subtype : TCARD8;
      sequenceNumber : TCARD16;
      window : TWindow;
      owner : TWindow;
      selection : TAtom;
      timestamp : TTime;
      selectionTimestamp : TTime;
      pad2 : TCARD32;
      pad3 : TCARD32;
    end;

  TxXFixesSelectCursorInputReq = record
      reqType : TCARD8;
      xfixesReqType : TCARD8;
      length : TCARD16;
      window : TWindow;
      eventMask : TCARD32;
    end;

const
  sz_xXFixesSelectCursorInputReq = 12;  

type
  TxXFixesCursorNotifyEvent = record
      _type : TCARD8;
      subtype : TCARD8;
      sequenceNumber : TCARD16;
      window : TWindow;
      cursorSerial : TCARD32;
      timestamp : TTime;
      name : TAtom;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
    end;

  TxXFixesGetCursorImageReq = record
      reqType : TCARD8;
      xfixesReqType : TCARD8;
      length : TCARD16;
    end;

const
  sz_xXFixesGetCursorImageReq = 4;  

type
  TxXFixesGetCursorImageReply = record
      _type : TBYTE;
      pad1 : TBYTE;
      sequenceNumber : TCARD16;
      length : TCARD32;
      x : TINT16;
      y : TINT16;
      width : TCARD16;
      height : TCARD16;
      xhot : TCARD16;
      yhot : TCARD16;
      cursorSerial : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
    end;

const
  sz_xXFixesGetCursorImageReply = 32;  

  Region = CARD32;  

type
  TxXFixesCreateRegionReq = record
      reqType : TCARD8;
      xfixesReqType : TCARD8;
      length : TCARD16;
      region : TRegion;
    end;

const
  sz_xXFixesCreateRegionReq = 8;  
type
  TxXFixesCreateRegionFromBitmapReq = record
      reqType : TCARD8;
      xfixesReqType : TCARD8;
      length : TCARD16;
      region : TRegion;
      bitmap : TPixmap;
    end;

const
  sz_xXFixesCreateRegionFromBitmapReq = 12;  
type
  TxXFixesCreateRegionFromWindowReq = record
      reqType : TCARD8;
      xfixesReqType : TCARD8;
      length : TCARD16;
      region : TRegion;
      window : TWindow;
      kind : TCARD8;
      pad1 : TCARD8;
      pad2 : TCARD16;
    end;

const
  sz_xXFixesCreateRegionFromWindowReq = 16;  
type
  TxXFixesCreateRegionFromGCReq = record
      reqType : TCARD8;
      xfixesReqType : TCARD8;
      length : TCARD16;
      region : TRegion;
      gc : TGContext;
    end;

const
  sz_xXFixesCreateRegionFromGCReq = 12;  
type
  TxXFixesCreateRegionFromPictureReq = record
      reqType : TCARD8;
      xfixesReqType : TCARD8;
      length : TCARD16;
      region : TRegion;
      picture : TPicture;
    end;

const
  sz_xXFixesCreateRegionFromPictureReq = 12;  
type
  TxXFixesDestroyRegionReq = record
      reqType : TCARD8;
      xfixesReqType : TCARD8;
      length : TCARD16;
      region : TRegion;
    end;

const
  sz_xXFixesDestroyRegionReq = 8;  

type
  TxXFixesSetRegionReq = record
      reqType : TCARD8;
      xfixesReqType : TCARD8;
      length : TCARD16;
      region : TRegion;
    end;

const
  sz_xXFixesSetRegionReq = 8;  
type
  TxXFixesCopyRegionReq = record
      reqType : TCARD8;
      xfixesReqType : TCARD8;
      length : TCARD16;
      source : TRegion;
      destination : TRegion;
    end;

const
  sz_xXFixesCopyRegionReq = 12;  
type
  TxXFixesCombineRegionReq = record
      reqType : TCARD8;
      xfixesReqType : TCARD8;
      length : TCARD16;
      source1 : TRegion;
      source2 : TRegion;
      destination : TRegion;
    end;
  TxXFixesUnionRegionReq = TxXFixesCombineRegionReq;
  TxXFixesIntersectRegionReq = TxXFixesCombineRegionReq;
  TxXFixesSubtractRegionReq = TxXFixesCombineRegionReq;

const
  sz_xXFixesCombineRegionReq = 16;  
  sz_xXFixesUnionRegionReq = sz_xXFixesCombineRegionReq;  
  sz_xXFixesIntersectRegionReq = sz_xXFixesCombineRegionReq;  
  sz_xXFixesSubtractRegionReq = sz_xXFixesCombineRegionReq;  
type
  TxXFixesInvertRegionReq = record
      reqType : TCARD8;
      xfixesReqType : TCARD8;
      length : TCARD16;
      source : TRegion;
      x : TINT16;
      y : TINT16;
      width : TCARD16;
      height : TCARD16;
      destination : TRegion;
    end;

const
  sz_xXFixesInvertRegionReq = 20;  
type
  TxXFixesTranslateRegionReq = record
      reqType : TCARD8;
      xfixesReqType : TCARD8;
      length : TCARD16;
      region : TRegion;
      dx : TINT16;
      dy : TINT16;
    end;

const
  sz_xXFixesTranslateRegionReq = 12;  
type
  TxXFixesRegionExtentsReq = record
      reqType : TCARD8;
      xfixesReqType : TCARD8;
      length : TCARD16;
      source : TRegion;
      destination : TRegion;
    end;

const
  sz_xXFixesRegionExtentsReq = 12;  
type
  TxXFixesFetchRegionReq = record
      reqType : TCARD8;
      xfixesReqType : TCARD8;
      length : TCARD16;
      region : TRegion;
    end;

const
  sz_xXFixesFetchRegionReq = 8;  

type
  TxXFixesFetchRegionReply = record
      _type : TBYTE;
      pad1 : TBYTE;
      sequenceNumber : TCARD16;
      length : TCARD32;
      x : TINT16;
      y : TINT16;
      width : TCARD16;
      height : TCARD16;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_xXFixesFetchRegionReply = 32;  
type
  TxXFixesSetGCClipRegionReq = record
      reqType : TCARD8;
      xfixesReqType : TCARD8;
      length : TCARD16;
      gc : TGContext;
      region : TRegion;
      xOrigin : TINT16;
      yOrigin : TINT16;
    end;

const
  sz_xXFixesSetGCClipRegionReq = 16;  
type
  TxXFixesSetWindowShapeRegionReq = record
      reqType : TCARD8;
      xfixesReqType : TCARD8;
      length : TCARD16;
      dest : TWindow;
      destKind : TBYTE;
      pad1 : TCARD8;
      pad2 : TCARD16;
      xOff : TINT16;
      yOff : TINT16;
      region : TRegion;
    end;

const
  sz_xXFixesSetWindowShapeRegionReq = 20;  
type
  TxXFixesSetPictureClipRegionReq = record
      reqType : TCARD8;
      xfixesReqType : TCARD8;
      length : TCARD16;
      picture : TPicture;
      region : TRegion;
      xOrigin : TINT16;
      yOrigin : TINT16;
    end;

const
  sz_xXFixesSetPictureClipRegionReq = 16;  
type
  TxXFixesSetCursorNameReq = record
      reqType : TCARD8;
      xfixesReqType : TCARD8;
      length : TCARD16;
      cursor : TCursor;
      nbytes : TCARD16;
      pad : TCARD16;
    end;

const
  sz_xXFixesSetCursorNameReq = 12;  
type
  TxXFixesGetCursorNameReq = record
      reqType : TCARD8;
      xfixesReqType : TCARD8;
      length : TCARD16;
      cursor : TCursor;
    end;

const
  sz_xXFixesGetCursorNameReq = 8;  

type
  TxXFixesGetCursorNameReply = record
      _type : TBYTE;
      pad1 : TBYTE;
      sequenceNumber : TCARD16;
      length : TCARD32;
      atom : TAtom;
      nbytes : TCARD16;
      pad2 : TCARD16;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;

const
  sz_xXFixesGetCursorNameReply = 32;  
type
  TxXFixesGetCursorImageAndNameReq = record
      reqType : TCARD8;
      xfixesReqType : TCARD8;
      length : TCARD16;
    end;

const
  sz_xXFixesGetCursorImageAndNameReq = 4;  

type
  TxXFixesGetCursorImageAndNameReply = record
      _type : TBYTE;
      pad1 : TBYTE;
      sequenceNumber : TCARD16;
      length : TCARD32;
      x : TINT16;
      y : TINT16;
      width : TCARD16;
      height : TCARD16;
      xhot : TCARD16;
      yhot : TCARD16;
      cursorSerial : TCARD32;
      cursorName : TAtom;
      nbytes : TCARD16;
      pad : TCARD16;
    end;

const
  sz_xXFixesGetCursorImageAndNameReply = 32;  
type
  TxXFixesChangeCursorReq = record
      reqType : TCARD8;
      xfixesReqType : TCARD8;
      length : TCARD16;
      source : TCursor;
      destination : TCursor;
    end;

const
  sz_xXFixesChangeCursorReq = 12;  
type
  TxXFixesChangeCursorByNameReq = record
      reqType : TCARD8;
      xfixesReqType : TCARD8;
      length : TCARD16;
      source : TCursor;
      nbytes : TCARD16;
      pad : TCARD16;
    end;

const
  sz_xXFixesChangeCursorByNameReq = 12;  

type
  TxXFixesExpandRegionReq = record
      reqType : TCARD8;
      xfixesReqType : TCARD8;
      length : TCARD16;
      source : TRegion;
      destination : TRegion;
      left : TCARD16;
      right : TCARD16;
      top : TCARD16;
      bottom : TCARD16;
    end;

const
  sz_xXFixesExpandRegionReq = 20;  

type
  TxXFixesHideCursorReq = record
      reqType : TCARD8;
      xfixesReqType : TCARD8;
      length : TCARD16;
      window : TWindow;
    end;

function sz_xXFixesHideCursorReq : longint; { return type might be wrong }

type
  TxXFixesShowCursorReq = record
      reqType : TCARD8;
      xfixesReqType : TCARD8;
      length : TCARD16;
      window : TWindow;
    end;

function sz_xXFixesShowCursorReq : longint; { return type might be wrong }


const
  Barrier = CARD32;  

type
  TxXFixesCreatePointerBarrierReq = record
      reqType : TCARD8;
      xfixesReqType : TCARD8;
      length : TCARD16;
      barrier : TBarrier;
      window : TWindow;
      x1 : TINT16;
      y1 : TINT16;
      x2 : TINT16;
      y2 : TINT16;
      directions : TCARD32;
      pad : TCARD16;
      num_devices : TCARD16;
    end;

const
  sz_xXFixesCreatePointerBarrierReq = 28;  
type
  TxXFixesDestroyPointerBarrierReq = record
      reqType : TCARD8;
      xfixesReqType : TCARD8;
      length : TCARD16;
      barrier : TBarrier;
    end;

const
  sz_xXFixesDestroyPointerBarrierReq = 8;  

type
  TxXFixesSetClientDisconnectModeReq = record
      reqType : TCARD8;
      xfixesReqType : TCARD8;
      length : TCARD16;
      disconnect_mode : TCARD32;
    end;

const
  sz_xXFixesSetClientDisconnectModeReq = 8;  
type
  TxXFixesGetClientDisconnectModeReq = record
      reqType : TCARD8;
      xfixesReqType : TCARD8;
      length : TCARD16;
    end;

const
  sz_xXFixesGetClientDisconnectModeReq = 4;  

type
  TxXFixesGetClientDisconnectModeReply = record
      _type : TBYTE;
      pad0 : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      disconnect_mode : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_xXFixesGetClientDisconnectModeReply = 32;  
//// {$undef Barrier}
//// {$undef Region}
//// {$undef Picture}
//// {$undef Window}
//// {$undef Drawable}
//// {$undef Font}
//// {$undef Pixmap}
//// {$undef Cursor}
//// {$undef Colormap}
//// {$undef GContext}
//// {$undef Atom}
//// {$undef VisualID}
//// {$undef Time}
//// {$undef KeyCode}
//// {$undef KeySym}
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/dri3proto.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/dri3proto.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/dri3proto.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _DRI3_PROTO_H_}
//// {$define _DRI3_PROTO_H_}

const
  DRI3_NAME = 'DRI3';  
  DRI3_MAJOR = 1;  
  DRI3_MINOR = 2;  
  DRI3NumberErrors = 0;  
  DRI3NumberEvents = 0;  
  X_DRI3QueryVersion = 0;  
  X_DRI3Open = 1;  
  X_DRI3PixmapFromBuffer = 2;  
  X_DRI3BufferFromPixmap = 3;  
  X_DRI3FenceFromFD = 4;  
  X_DRI3FDFromFence = 5;  

  xDRI3GetSupportedModifiers = 6;  
  xDRI3PixmapFromBuffers = 7;  
  xDRI3BuffersFromPixmap = 8;  
  DRI3NumberRequests = 9;  
type
  TxDRI3QueryVersionReq = record
      reqType : TCARD8;
      dri3ReqType : TCARD8;
      length : TCARD16;
      majorVersion : TCARD32;
      minorVersion : TCARD32;
    end;

const
  sz_xDRI3QueryVersionReq = 12;  

type
  TxDRI3QueryVersionReply = record
      _type : TBYTE;
      pad1 : TBYTE;
      sequenceNumber : TCARD16;
      length : TCARD32;
      majorVersion : TCARD32;
      minorVersion : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_xDRI3QueryVersionReply = 32;  
type
  TxDRI3OpenReq = record
      reqType : TCARD8;
      dri3ReqType : TCARD8;
      length : TCARD16;
      drawable : TCARD32;
      provider : TCARD32;
    end;

const
  sz_xDRI3OpenReq = 12;  

type
  TxDRI3OpenReply = record
      _type : TBYTE;
      nfd : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
      pad7 : TCARD32;
    end;

const
  sz_xDRI3OpenReply = 32;  
type
  TxDRI3PixmapFromBufferReq = record
      reqType : TCARD8;
      dri3ReqType : TCARD8;
      length : TCARD16;
      pixmap : TCARD32;
      drawable : TCARD32;
      size : TCARD32;
      width : TCARD16;
      height : TCARD16;
      stride : TCARD16;
      depth : TCARD8;
      bpp : TCARD8;
    end;

const
  sz_xDRI3PixmapFromBufferReq = 24;  
type
  TxDRI3BufferFromPixmapReq = record
      reqType : TCARD8;
      dri3ReqType : TCARD8;
      length : TCARD16;
      pixmap : TCARD32;
    end;

const
  sz_xDRI3BufferFromPixmapReq = 8;  


type
  TxDRI3BufferFromPixmapReply = record
      _type : TBYTE;
      nfd : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      size : TCARD32;
      width : TCARD16;
      height : TCARD16;
      stride : TCARD16;
      depth : TCARD8;
      bpp : TCARD8;
      pad20 : TCARD32;
      pad24 : TCARD32;
      pad28 : TCARD32;
    end;

const
  sz_xDRI3BufferFromPixmapReply = 32;  
type
  TxDRI3FenceFromFDReq = record
      reqType : TCARD8;
      dri3ReqType : TCARD8;
      length : TCARD16;
      drawable : TCARD32;
      fence : TCARD32;
      initially_triggered : TBOOL;
      pad13 : TCARD8;
      pad14 : TCARD16;
    end;

const
  sz_xDRI3FenceFromFDReq = 16;  
type
  TxDRI3FDFromFenceReq = record
      reqType : TCARD8;
      dri3ReqType : TCARD8;
      length : TCARD16;
      drawable : TCARD32;
      fence : TCARD32;
    end;

const
  sz_xDRI3FDFromFenceReq = 12;  


type
  TxDRI3FDFromFenceReply = record
      _type : TBYTE;
      nfd : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      pad08 : TCARD32;
      pad12 : TCARD32;
      pad16 : TCARD32;
      pad20 : TCARD32;
      pad24 : TCARD32;
      pad28 : TCARD32;
    end;

const
  sz_xDRI3FDFromFenceReply = 32;  

type
  TxDRI3GetSupportedModifiersReq = record
      reqType : TCARD8;
      dri3ReqType : TCARD8;
      length : TCARD16;
      window : TCARD32;
      depth : TCARD8;
      bpp : TCARD8;
      pad10 : TCARD16;
    end;

const
  sz_xDRI3GetSupportedModifiersReq = 12;  

type
  TxDRI3GetSupportedModifiersReply = record
      _type : TBYTE;
      pad1 : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      numWindowModifiers : TCARD32;
      numScreenModifiers : TCARD32;
      pad16 : TCARD32;
      pad20 : TCARD32;
      pad24 : TCARD32;
      pad28 : TCARD32;
    end;

const
  sz_xDRI3GetSupportedModifiersReply = 32;  

type
  TxDRI3PixmapFromBuffersReq = record
      reqType : TCARD8;
      dri3ReqType : TCARD8;
      length : TCARD16;
      pixmap : TCARD32;
      window : TCARD32;
      num_buffers : TCARD8;
      pad13 : TCARD8;
      pad14 : TCARD16;
      width : TCARD16;
      height : TCARD16;
      stride0 : TCARD32;
      offset0 : TCARD32;
      stride1 : TCARD32;
      offset1 : TCARD32;
      stride2 : TCARD32;
      offset2 : TCARD32;
      stride3 : TCARD32;
      offset3 : TCARD32;
      depth : TCARD8;
      bpp : TCARD8;
      pad54 : TCARD16;
      modifier : TCARD64;
    end;

const
  sz_xDRI3PixmapFromBuffersReq = 64;  
type
  TxDRI3BuffersFromPixmapReq = record
      reqType : TCARD8;
      dri3ReqType : TCARD8;
      length : TCARD16;
      pixmap : TCARD32;
    end;

const
  sz_xDRI3BuffersFromPixmapReq = 8;  


type
  TxDRI3BuffersFromPixmapReply = record
      _type : TBYTE;
      nfd : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      width : TCARD16;
      height : TCARD16;
      pad12 : TCARD32;
      modifier : TCARD64;
      depth : TCARD8;
      bpp : TCARD8;
      pad26 : TCARD16;
      pad28 : TCARD32;
    end;

const
  sz_xDRI3BuffersFromPixmapReply = 32;  
//// {$endif}

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/recordstr.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/recordstr.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/recordstr.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}


//// (* error 
//// #warning "recordstr.h is obsolete and may be removed in the future."
//// (* error 
//// #warning "recordstr.h is obsolete and may be removed in the future."
//// {$include <X11/extensions/recordproto.h>}

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/xf86dga1const.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/xf86dga1const.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/xf86dga1const.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XF86DGA1CONST_H_}
//// {$define _XF86DGA1CONST_H_}

const
  X_XF86DGAQueryVersion = 0;  
  X_XF86DGAGetVideoLL = 1;  
  X_XF86DGADirectVideo = 2;  
  X_XF86DGAGetViewPortSize = 3;  
  X_XF86DGASetViewPort = 4;  
  X_XF86DGAGetVidPage = 5;  
  X_XF86DGASetVidPage = 6;  
  X_XF86DGAInstallColormap = 7;  
  X_XF86DGAQueryDirectVideo = 8;  
  X_XF86DGAViewPortChanged = 9;  
  XF86DGADirectPresent = $0001;  
  XF86DGADirectGraphics = $0002;  
  XF86DGADirectMouse = $0004;  
  XF86DGADirectKeyb = $0008;  
  XF86DGAHasColormap = $0100;  
  XF86DGADirectColormap = $0200;  
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/presenttokens.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/presenttokens.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/presenttokens.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _PRESENT_TOKENS_H_}
//// {$define _PRESENT_TOKENS_H_}

const
  PRESENT_NAME = 'Present';  
  PRESENT_MAJOR = 1;  
  PRESENT_MINOR = 2;  
  PresentNumberErrors = 0;  
  PresentNumberEvents = 0;  

  X_PresentQueryVersion = 0;  
  X_PresentPixmap = 1;  
  X_PresentNotifyMSC = 2;  
  X_PresentSelectInput = 3;  
  X_PresentQueryCapabilities = 4;  
  PresentNumberRequests = 5;  

  PresentOptionNone = 0;  
  PresentOptionAsync = 1 shl 0;  
  PresentOptionCopy = 1 shl 1;  
  PresentOptionUST = 1 shl 2;  
  PresentOptionSuboptimal = 1 shl 3;  
  PresentAllOptions = ((PresentOptionAsync or PresentOptionCopy) or PresentOptionUST) or PresentOptionSuboptimal;  

  PresentCapabilityNone = 0;  
  PresentCapabilityAsync = 1;  
  PresentCapabilityFence = 2;  
  PresentCapabilityUST = 4;  
  PresentAllCapabilities = (PresentCapabilityAsync or PresentCapabilityFence) or PresentCapabilityUST;  

  PresentConfigureNotify = 0;  
  PresentCompleteNotify = 1;  
  PresentIdleNotify = 2;  
//// {$if PRESENT_FUTURE_VERSION}

const
  PresentRedirectNotify = 3;  
//// {$endif}


const
  PresentConfigureNotifyMask = 1;  
  PresentCompleteNotifyMask = 2;  
  PresentIdleNotifyMask = 4;  
//// {$if PRESENT_FUTURE_VERSION}

const
  PresentRedirectNotifyMask = 8;  
//// {$endif}
//// {$if PRESENT_FUTURE_VERSION}

const
  PRESENT_REDIRECT_NOTIFY_MASK = PresentRedirectNotifyMask;  
//// {$else}

const
  PRESENT_REDIRECT_NOTIFY_MASK = 0;  
//// {$endif}

const
  PresentAllEvents = ((PresentConfigureNotifyMask or PresentCompleteNotifyMask) or PresentIdleNotifyMask) or PRESENT_REDIRECT_NOTIFY_MASK;  

  PresentCompleteKindPixmap = 0;  
  PresentCompleteKindNotifyMSC = 1;  

  PresentCompleteModeCopy = 0;  
  PresentCompleteModeFlip = 1;  
  PresentCompleteModeSkip = 2;  
  PresentCompleteModeSuboptimalCopy = 3;  
//// {$endif}

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/multibufconst.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/multibufconst.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/multibufconst.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _MULTIBUFCONST_H_}
//// {$define _MULTIBUFCONST_H_}

const
  MULTIBUFFER_PROTOCOL_NAME = 'Multi-Buffering';  

  MULTIBUFFER_MAJOR_VERSION = 1;  

  MULTIBUFFER_MINOR_VERSION = 1;  

  MultibufferUpdateActionUndefined = 0;  
  MultibufferUpdateActionBackground = 1;  
  MultibufferUpdateActionUntouched = 2;  
  MultibufferUpdateActionCopied = 3;  

  MultibufferUpdateHintFrequent = 0;  
  MultibufferUpdateHintIntermittent = 1;  
  MultibufferUpdateHintStatic = 2;  

  MultibufferWindowUpdateHint = 1 shl 0;  
  MultibufferBufferEventMask = 1 shl 0;  

  MultibufferModeMono = 0;  
  MultibufferModeStereo = 1;  
  MultibufferSideMono = 0;  
  MultibufferSideLeft = 1;  
  MultibufferSideRight = 2;  

  MultibufferUnclobbered = 0;  
  MultibufferPartiallyClobbered = 1;  
  MultibufferFullyClobbered = 2;  

  MultibufferClobberNotifyMask = $02000000;  
  MultibufferUpdateNotifyMask = $04000000;  
  MultibufferClobberNotify = 0;  
  MultibufferUpdateNotify = 1;  
  MultibufferNumberEvents = MultibufferUpdateNotify+1;  
  MultibufferBadBuffer = 0;  
  MultibufferNumberErrors = MultibufferBadBuffer+1;  
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/xf86bigfproto.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/xf86bigfproto.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/xf86bigfproto.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XF86BIGFPROTO_H_}
//// {$define _XF86BIGFPROTO_H_}
//// {$include <X11/extensions/xf86bigfont.h>}

const
  XF86BIGFONTNAME = 'XFree86-Bigfont';  

  XF86BIGFONT_MAJOR_VERSION = 1;  
  XF86BIGFONT_MINOR_VERSION = 1;  


type
  T_XF86BigfontQueryVersion = record
      reqType : TCARD8;
      xf86bigfontReqType : TCARD8;
      length : TCARD16;
    end;
  TxXF86BigfontQueryVersionReq = T_XF86BigfontQueryVersion;

const
  sz_xXF86BigfontQueryVersionReq = 4;  



type
  TxXF86BigfontQueryVersionReply = record
      _type : TBYTE;
      capabilities : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      majorVersion : TCARD16;
      minorVersion : TCARD16;
      uid : TCARD32;
      gid : TCARD32;
      signature : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
    end;

const
  sz_xXF86BigfontQueryVersionReply = 32;  

  XF86Bigfont_CAP_LocalShm = 1;  


type
  T_XF86BigfontQueryFont = record
      reqType : TCARD8;
      xf86bigfontReqType : TCARD8;
      length : TCARD16;
      id : TCARD32;
      flags : TCARD32;
    end;
  TxXF86BigfontQueryFontReq = T_XF86BigfontQueryFont;

const
  sz_xXF86BigfontQueryFontReq = 12;  

//// {$ifndef WORD64}
//// {$endif}
//// {$ifndef WORD64}
//// {$endif}


type
  TxXF86BigfontQueryFontReply = record
      _type : TBYTE;
      pad1 : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      minBounds : TxCharInfo;
      walign1 : TCARD32;
      maxBounds : TxCharInfo;
      walign2 : TCARD32;
      minCharOrByte2 : TCARD16;
      maxCharOrByte2 : TCARD16;
      defaultChar : TCARD16;
      nFontProps : TCARD16;
      drawDirection : TCARD8;
      minByte1 : TCARD8;
      maxByte1 : TCARD8;
      allCharsExist : TBOOL;
      fontAscent : TINT16;
      fontDescent : TINT16;
      nCharInfos : TCARD32;
      nUniqCharInfos : TCARD32;
      shmid : TCARD32;
      shmsegoffset : TCARD32;
    end;

const
  sz_xXF86BigfontQueryFontReply = 72;  

  XF86Bigfont_FLAGS_Shm = 1;  
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/applewmconst.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/applewmconst.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/applewmconst.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _APPLEWMCONST_H_}
//// {$define _APPLEWMCONST_H_}


const
  AppleWMControllerNotify = 0;  
  AppleWMActivationNotify = 1;  
  AppleWMPasteboardNotify = 2;  
  AppleWMNumberEvents = 3;  
  AppleWMControllerNotifyMask = 1 shl 0;  
  AppleWMActivationNotifyMask = 1 shl 1;  
  AppleWMPasteboardNotifyMask = 1 shl 2;  

  AppleWMMinimizeWindow = 0;  
  AppleWMZoomWindow = 1;  
  AppleWMCloseWindow = 2;  
  AppleWMBringAllToFront = 3;  
  AppleWMHideWindow = 4;  
  AppleWMHideAll = 5;  
  AppleWMShowAll = 6;  
  AppleWMWindowMenuItem = 9;  
  AppleWMWindowMenuNotify = 10;  
  AppleWMNextWindow = 11;  
  AppleWMPreviousWindow = 12;  

  AppleWMIsActive = 0;  
  AppleWMIsInactive = 1;  
  AppleWMReloadPreferences = 2;  

  AppleWMCopyToPasteboard = 0;  

  AppleWMClientNotLocal = 0;  
  AppleWMOperationNotSupported = 1;  
  AppleWMNumberErrors = AppleWMOperationNotSupported+1;  

  AppleWMWindowLevelNormal = 0;  
  AppleWMWindowLevelFloating = 1;  
  AppleWMWindowLevelTornOff = 2;  
  AppleWMWindowLevelDock = 3;  
  AppleWMWindowLevelDesktop = 4;  
  AppleWMNumWindowLevels = 5;  






//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/xfixeswire.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/xfixeswire.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/xfixeswire.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XFIXESWIRE_H_}
//// {$define _XFIXESWIRE_H_}

const
  XFIXES_NAME = 'XFIXES';  
  XFIXES_MAJOR = 6;  
  XFIXES_MINOR = 0;  

  X_XFixesQueryVersion = 0;  
  X_XFixesChangeSaveSet = 1;  
  X_XFixesSelectSelectionInput = 2;  
  X_XFixesSelectCursorInput = 3;  
  X_XFixesGetCursorImage = 4;  

  X_XFixesCreateRegion = 5;  
  X_XFixesCreateRegionFromBitmap = 6;  
  X_XFixesCreateRegionFromWindow = 7;  
  X_XFixesCreateRegionFromGC = 8;  
  X_XFixesCreateRegionFromPicture = 9;  
  X_XFixesDestroyRegion = 10;  
  X_XFixesSetRegion = 11;  
  X_XFixesCopyRegion = 12;  
  X_XFixesUnionRegion = 13;  
  X_XFixesIntersectRegion = 14;  
  X_XFixesSubtractRegion = 15;  
  X_XFixesInvertRegion = 16;  
  X_XFixesTranslateRegion = 17;  
  X_XFixesRegionExtents = 18;  
  X_XFixesFetchRegion = 19;  
  X_XFixesSetGCClipRegion = 20;  
  X_XFixesSetWindowShapeRegion = 21;  
  X_XFixesSetPictureClipRegion = 22;  
  X_XFixesSetCursorName = 23;  
  X_XFixesGetCursorName = 24;  
  X_XFixesGetCursorImageAndName = 25;  
  X_XFixesChangeCursor = 26;  
  X_XFixesChangeCursorByName = 27;  

  X_XFixesExpandRegion = 28;  

  X_XFixesHideCursor = 29;  
  X_XFixesShowCursor = 30;  

  X_XFixesCreatePointerBarrier = 31;  
  X_XFixesDestroyPointerBarrier = 32;  

  X_XFixesSetClientDisconnectMode = 33;  
  X_XFixesGetClientDisconnectMode = 34;  
  XFixesNumberRequests = X_XFixesGetClientDisconnectMode+1;  

  XFixesSelectionNotify = 0;  

  XFixesSetSelectionOwnerNotify = 0;  
  XFixesSelectionWindowDestroyNotify = 1;  
  XFixesSelectionClientCloseNotify = 2;  
  XFixesSetSelectionOwnerNotifyMask = 1 shl 0;  
  XFixesSelectionWindowDestroyNotifyMask = 1 shl 1;  
  XFixesSelectionClientCloseNotifyMask = 1 shl 2;  

  XFixesCursorNotify = 1;  
  XFixesDisplayCursorNotify = 0;  
  XFixesDisplayCursorNotifyMask = 1 shl 0;  
  XFixesNumberEvents = 2;  

  BadRegion = 0;  
  BadBarrier = 1;  
  XFixesNumberErrors = BadBarrier+1;  
  SaveSetNearest = 0;  
  SaveSetRoot = 1;  
  SaveSetMap = 0;  
  SaveSetUnmap = 1;  

  WindowRegionBounding = 0;  
  WindowRegionClip = 1;  

  BarrierPositiveX = 1 shl 0;  
  BarrierPositiveY = 1 shl 1;  
  BarrierNegativeX = 1 shl 2;  
  BarrierNegativeY = 1 shl 3;  


  XFixesClientDisconnectFlagDefault = 0;  

  XFixesClientDisconnectFlagTerminate = 1 shl 0;  
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/Xvlib.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/Xvlib.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/Xvlib.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    Pchar  = ^char;
    PDisplay  = ^Display;
    Pdword  = ^dword;
    Plongint  = ^longint;
    PXShmSegmentInfo  = ^XShmSegmentInfo;
    PXvAdaptorInfo  = ^XvAdaptorInfo;
    PXvEncodingInfo  = ^XvEncodingInfo;
    PXvImage  = ^XvImage;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef XVLIB_H}
//// {$define XVLIB_H}

//// {$include <X11/Xfuncproto.h>}
//// {$include <X11/extensions/Xv.h>}
//// {$include <X11/extensions/XShm.h>}
type
  TXvRational = record
      numerator : longint;
      denominator : longint;
    end;


  TXvAttribute = record
      flags : longint;
      min_value : longint;
      max_value : longint;
      name : ^char;
    end;

  TXvEncodingInfo = record
      encoding_id : TXvEncodingID;
      name : ^char;
      width : dword;
      height : dword;
      rate : TXvRational;
      num_encodings : dword;
    end;

  TXvFormat = record
      depth : char;
      visual_id : dword;
    end;

  TXvAdaptorInfo = record
      base_id : TXvPortID;
      num_ports : dword;
      _type : char;
      name : ^char;
      num_formats : dword;
      formats : ^TXvFormat;
      num_adaptors : dword;
    end;








  TXvVideoNotifyEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      drawable : TDrawable;
      reason : dword;
      port_id : TXvPortID;
      time : TTime;
    end;








  TXvPortNotifyEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      port_id : TXvPortID;
      time : TTime;
      attribute : TAtom;
      value : longint;
    end;

  TXvEvent = record
      case longint of
        0 : ( _type : longint );
        1 : ( xvvideo : TXvVideoNotifyEvent );
        2 : ( xvport : TXvPortNotifyEvent );
        3 : ( pad : array[0..23] of longint );
      end;










  TXvImageFormatValues = record
      id : longint;
      _type : longint;
      byte_order : longint;
      guid : array[0..15] of char;
      bits_per_pixel : longint;
      format : longint;
      num_planes : longint;
      depth : longint;
      red_mask : dword;
      green_mask : dword;
      blue_mask : dword;
      y_sample_bits : dword;
      u_sample_bits : dword;
      v_sample_bits : dword;
      horz_y_period : dword;
      horz_u_period : dword;
      horz_v_period : dword;
      vert_y_period : dword;
      vert_u_period : dword;
      vert_v_period : dword;
      component_order : array[0..31] of char;
      scanline_order : longint;
    end;




  TXvImage = record
      id : longint;
      width : longint;
      height : longint;
      data_size : longint;
      num_planes : longint;
      pitches : ^longint;
      offsets : ^longint;
      data : ^char;
      obdata : TXPointer;
    end;
//// (* error 
//// extern int XvQueryExtension(

in declaration at line 173 *)


function XvQueryAdaptors(_para1:PTDisplay; _para2:TWindow; _para3:Pdword; _para4:PPTXvAdaptorInfo):longint;cdecl;external;

function XvQueryEncodings(_para1:PTDisplay; _para2:TXvPortID; _para3:Pdword; _para4:PPTXvEncodingInfo):longint;cdecl;external;

function XvPutVideo(_para1:PTDisplay; _para2:TXvPortID; _para3:TDrawable; _para4:TGC; _para5:longint; 
               _para6:longint; _para7:dword; _para8:dword; _para9:longint; _para10:longint; 
               _para11:dword; _para12:dword):longint;cdecl;external;

function XvPutStill(_para1:PTDisplay; _para2:TXvPortID; _para3:TDrawable; _para4:TGC; _para5:longint; 
               _para6:longint; _para7:dword; _para8:dword; _para9:longint; _para10:longint; 
               _para11:dword; _para12:dword):longint;cdecl;external;

function XvGetVideo(_para1:PTDisplay; _para2:TXvPortID; _para3:TDrawable; _para4:TGC; _para5:longint; 
               _para6:longint; _para7:dword; _para8:dword; _para9:longint; _para10:longint; 
               _para11:dword; _para12:dword):longint;cdecl;external;

function XvGetStill(_para1:PTDisplay; _para2:TXvPortID; _para3:TDrawable; _para4:TGC; _para5:longint; 
               _para6:longint; _para7:dword; _para8:dword; _para9:longint; _para10:longint; 
               _para11:dword; _para12:dword):longint;cdecl;external;

function XvStopVideo(_para1:PTDisplay; _para2:TXvPortID; _para3:TDrawable):longint;cdecl;external;

function XvGrabPort(_para1:PTDisplay; _para2:TXvPortID; _para3:TTime):longint;cdecl;external;

function XvUngrabPort(_para1:PTDisplay; _para2:TXvPortID; _para3:TTime):longint;cdecl;external;

function XvSelectVideoNotify(_para1:PTDisplay; _para2:TDrawable; _para3:TBool):longint;cdecl;external;

function XvSelectPortNotify(_para1:PTDisplay; _para2:TXvPortID; _para3:TBool):longint;cdecl;external;

function XvSetPortAttribute(_para1:PTDisplay; _para2:TXvPortID; _para3:TAtom; _para4:longint):longint;cdecl;external;

function XvGetPortAttribute(_para1:PTDisplay; _para2:TXvPortID; _para3:TAtom; _para4:Plongint):longint;cdecl;external;

function XvQueryBestSize(_para1:PTDisplay; _para2:TXvPortID; _para3:TBool; _para4:dword; _para5:dword; 
               _para6:dword; _para7:dword; _para8:Pdword; _para9:Pdword):longint;cdecl;external;

function XvQueryPortAttributes(_para1:PTDisplay; _para2:TXvPortID; _para3:Plongint):^TXvAttribute;cdecl;external;

procedure XvFreeAdaptorInfo(_para1:PTXvAdaptorInfo);cdecl;external;

procedure XvFreeEncodingInfo(_para1:PTXvEncodingInfo);cdecl;external;
function XvListImageFormats(display:PTDisplay; port_id:TXvPortID; count_return:Plongint):^TXvImageFormatValues;cdecl;external;
function XvCreateImage(display:PTDisplay; port:TXvPortID; id:longint; data:Pchar; width:longint; 
               height:longint):^TXvImage;cdecl;external;
function XvPutImage(display:PTDisplay; id:TXvPortID; d:TDrawable; gc:TGC; image:PTXvImage; 
               src_x:longint; src_y:longint; src_w:dword; src_h:dword; dest_x:longint; 
               dest_y:longint; dest_w:dword; dest_h:dword):longint;cdecl;external;
function XvShmPutImage(display:PTDisplay; id:TXvPortID; d:TDrawable; gc:TGC; image:PTXvImage; 
               src_x:longint; src_y:longint; src_w:dword; src_h:dword; dest_x:longint; 
               dest_y:longint; dest_w:dword; dest_h:dword; send_event:TBool):longint;cdecl;external;
function XvShmCreateImage(display:PTDisplay; port:TXvPortID; id:longint; data:Pchar; width:longint; 
               height:longint; shminfo:PTXShmSegmentInfo):^TXvImage;cdecl;external;
//// {$endif}

//// (* error 
//// #endif /* XVLIB_H */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/dri2proto.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/dri2proto.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/dri2proto.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _DRI2_PROTO_H_}
//// {$define _DRI2_PROTO_H_}

const
  DRI2_NAME = 'DRI2';  
  DRI2_MAJOR = 1;  
  DRI2_MINOR = 4;  
  DRI2NumberErrors = 0;  
  DRI2NumberEvents = 2;  
  DRI2NumberRequests = 14;  
  X_DRI2QueryVersion = 0;  
  X_DRI2Connect = 1;  
  X_DRI2Authenticate = 2;  
  X_DRI2CreateDrawable = 3;  
  X_DRI2DestroyDrawable = 4;  
  X_DRI2GetBuffers = 5;  
  X_DRI2CopyRegion = 6;  
  X_DRI2GetBuffersWithFormat = 7;  
  X_DRI2SwapBuffers = 8;  
  X_DRI2GetMSC = 9;  
  X_DRI2WaitMSC = 10;  
  X_DRI2WaitSBC = 11;  
  X_DRI2SwapInterval = 12;  
  X_DRI2GetParam = 13;  

  DRI2_BufferSwapComplete = 0;  
  DRI2_InvalidateBuffers = 1;  
type
  TxDRI2Buffer = record
      attachment : TCARD32;
      name : TCARD32;
      pitch : TCARD32;
      cpp : TCARD32;
      flags : TCARD32;
    end;

  TxDRI2QueryVersionReq = record
      reqType : TCARD8;
      dri2ReqType : TCARD8;
      length : TCARD16;
      majorVersion : TCARD32;
      minorVersion : TCARD32;
    end;

const
  sz_xDRI2QueryVersionReq = 12;  

type
  TxDRI2QueryVersionReply = record
      _type : TBYTE;
      pad1 : TBYTE;
      sequenceNumber : TCARD16;
      length : TCARD32;
      majorVersion : TCARD32;
      minorVersion : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_xDRI2QueryVersionReply = 32;  
type
  TxDRI2ConnectReq = record
      reqType : TCARD8;
      dri2ReqType : TCARD8;
      length : TCARD16;
      window : TCARD32;
      driverType : TCARD32;
    end;

const
  sz_xDRI2ConnectReq = 12;  

type
  TxDRI2ConnectReply = record
      _type : TBYTE;
      pad1 : TBYTE;
      sequenceNumber : TCARD16;
      length : TCARD32;
      driverNameLength : TCARD32;
      deviceNameLength : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_xDRI2ConnectReply = 32;  
type
  TxDRI2AuthenticateReq = record
      reqType : TCARD8;
      dri2ReqType : TCARD8;
      length : TCARD16;
      window : TCARD32;
      magic : TCARD32;
    end;

const
  sz_xDRI2AuthenticateReq = 12;  

type
  TxDRI2AuthenticateReply = record
      _type : TBYTE;
      pad1 : TBYTE;
      sequenceNumber : TCARD16;
      length : TCARD32;
      authenticated : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;

const
  sz_xDRI2AuthenticateReply = 32;  
type
  TxDRI2CreateDrawableReq = record
      reqType : TCARD8;
      dri2ReqType : TCARD8;
      length : TCARD16;
      drawable : TCARD32;
    end;

const
  sz_xDRI2CreateDrawableReq = 8;  
type
  TxDRI2DestroyDrawableReq = record
      reqType : TCARD8;
      dri2ReqType : TCARD8;
      length : TCARD16;
      drawable : TCARD32;
    end;

const
  sz_xDRI2DestroyDrawableReq = 8;  
type
  TxDRI2GetBuffersReq = record
      reqType : TCARD8;
      dri2ReqType : TCARD8;
      length : TCARD16;
      drawable : TCARD32;
      count : TCARD32;
    end;

const
  sz_xDRI2GetBuffersReq = 12;  

type
  TxDRI2GetBuffersReply = record
      _type : TBYTE;
      pad1 : TBYTE;
      sequenceNumber : TCARD16;
      length : TCARD32;
      width : TCARD32;
      height : TCARD32;
      count : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
    end;

const
  sz_xDRI2GetBuffersReply = 32;  
type
  TxDRI2CopyRegionReq = record
      reqType : TCARD8;
      dri2ReqType : TCARD8;
      length : TCARD16;
      drawable : TCARD32;
      region : TCARD32;
      dest : TCARD32;
      src : TCARD32;
    end;

const
  sz_xDRI2CopyRegionReq = 20;  

type
  TxDRI2CopyRegionReply = record
      _type : TBYTE;
      pad1 : TBYTE;
      sequenceNumber : TCARD16;
      length : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
      pad7 : TCARD32;
    end;

const
  sz_xDRI2CopyRegionReply = 32;  
type
  TxDRI2SwapBuffersReq = record
      reqType : TCARD8;
      dri2ReqType : TCARD8;
      length : TCARD16;
      drawable : TCARD32;
      target_msc_hi : TCARD32;
      target_msc_lo : TCARD32;
      divisor_hi : TCARD32;
      divisor_lo : TCARD32;
      remainder_hi : TCARD32;
      remainder_lo : TCARD32;
    end;

const
  sz_xDRI2SwapBuffersReq = 32;  

type
  TxDRI2SwapBuffersReply = record
      _type : TBYTE;
      pad1 : TBYTE;
      sequenceNumber : TCARD16;
      length : TCARD32;
      swap_hi : TCARD32;
      swap_lo : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_xDRI2SwapBuffersReply = 32;  
type
  TxDRI2GetMSCReq = record
      reqType : TCARD8;
      dri2ReqType : TCARD8;
      length : TCARD16;
      drawable : TCARD32;
    end;

const
  sz_xDRI2GetMSCReq = 8;  
type
  TxDRI2WaitMSCReq = record
      reqType : TCARD8;
      dri2ReqType : TCARD8;
      length : TCARD16;
      drawable : TCARD32;
      target_msc_hi : TCARD32;
      target_msc_lo : TCARD32;
      divisor_hi : TCARD32;
      divisor_lo : TCARD32;
      remainder_hi : TCARD32;
      remainder_lo : TCARD32;
    end;

const
  sz_xDRI2WaitMSCReq = 32;  
type
  TxDRI2WaitSBCReq = record
      reqType : TCARD8;
      dri2ReqType : TCARD8;
      length : TCARD16;
      drawable : TCARD32;
      target_sbc_hi : TCARD32;
      target_sbc_lo : TCARD32;
    end;

const
  sz_xDRI2WaitSBCReq = 16;  
type
  TxDRI2MSCReply = record
      _type : TCARD8;
      pad1 : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      ust_hi : TCARD32;
      ust_lo : TCARD32;
      msc_hi : TCARD32;
      msc_lo : TCARD32;
      sbc_hi : TCARD32;
      sbc_lo : TCARD32;
    end;

const
  sz_xDRI2MSCReply = 32;  
type
  TxDRI2SwapIntervalReq = record
      reqType : TCARD8;
      dri2ReqType : TCARD8;
      length : TCARD16;
      drawable : TCARD32;
      interval : TCARD32;
    end;

const
  sz_xDRI2SwapIntervalReq = 12;  
type
  TxDRI2BufferSwapComplete = record
      _type : TCARD8;
      pad : TCARD8;
      sequenceNumber : TCARD16;
      event_type : TCARD16;
      pad2 : TCARD16;
      drawable : TCARD32;
      ust_hi : TCARD32;
      ust_lo : TCARD32;
      msc_hi : TCARD32;
      msc_lo : TCARD32;
      sbc_hi : TCARD32;
      sbc_lo : TCARD32;
    end;

const
  sz_xDRI2BufferSwapComplete = 32;  
type
  TxDRI2BufferSwapComplete2 = record
      _type : TCARD8;
      pad : TCARD8;
      sequenceNumber : TCARD16;
      event_type : TCARD16;
      pad2 : TCARD16;
      drawable : TCARD32;
      ust_hi : TCARD32;
      ust_lo : TCARD32;
      msc_hi : TCARD32;
      msc_lo : TCARD32;
      sbc : TCARD32;
    end;

const
  sz_xDRI2BufferSwapComplete2 = 32;  
type
  TxDRI2InvalidateBuffers = record
      _type : TCARD8;
      pad : TCARD8;
      sequenceNumber : TCARD16;
      drawable : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;

const
  sz_xDRI2InvalidateBuffers = 32;  
type
  TxDRI2GetParamReq = record
      reqType : TCARD8;
      dri2ReqType : TCARD8;
      length : TCARD16;
      drawable : TCARD32;
      param : TCARD32;
    end;

const
  sz_xDRI2GetParamReq = 12;  

type
  TxDRI2GetParamReply = record
      _type : TBYTE;
      is_param_recognized : TBOOL;
      sequenceNumber : TCARD16;
      length : TCARD32;
      value_hi : TCARD32;
      value_lo : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
    end;

const
  sz_xDRI2GetParamReply = 32;  
//// {$endif}

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/randrproto.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/randrproto.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/randrproto.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}





//// {$ifndef _XRANDRP_H_}
//// {$define _XRANDRP_H_}
//// {$include <X11/extensions/randr.h>}
//// {$include <X11/extensions/renderproto.h>}

const
  Window = CARD32;  
  Drawable = CARD32;  
  Font = CARD32;  
  Pixmap = CARD32;  
  Cursor = CARD32;  
  Colormap = CARD32;  
  GContext = CARD32;  
  Atom = CARD32;  
  Time = CARD32;  
  KeyCode = CARD8;  
  KeySym = CARD32;  
  RROutput = CARD32;  
  RRMode = CARD32;  
  RRCrtc = CARD32;  
  RRProvider = CARD32;  
  RRModeFlags = CARD32;  
  RRLease = CARD32;  
  Rotation = CARD16;  
  SizeID = CARD16;  
  SubpixelOrder = CARD16;  

type
  TxScreenSizes = record
      widthInPixels : TCARD16;
      heightInPixels : TCARD16;
      widthInMillimeters : TCARD16;
      heightInMillimeters : TCARD16;
    end;

const
  sz_xScreenSizes = 8;  

type
  TxRRQueryVersionReq = record
      reqType : TCARD8;
      randrReqType : TCARD8;
      length : TCARD16;
      majorVersion : TCARD32;
      minorVersion : TCARD32;
    end;

const
  sz_xRRQueryVersionReq = 12;  

type
  TxRRQueryVersionReply = record
      _type : TBYTE;
      pad1 : TBYTE;
      sequenceNumber : TCARD16;
      length : TCARD32;
      majorVersion : TCARD32;
      minorVersion : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_xRRQueryVersionReply = 32;  
type
  TxRRGetScreenInfoReq = record
      reqType : TCARD8;
      randrReqType : TCARD8;
      length : TCARD16;
      window : TWindow;
    end;

const
  sz_xRRGetScreenInfoReq = 8;  


type
  TxRRGetScreenInfoReply = record
      _type : TBYTE;
      setOfRotations : TBYTE;
      sequenceNumber : TCARD16;
      length : TCARD32;
      root : TWindow;
      timestamp : TTime;
      configTimestamp : TTime;
      nSizes : TCARD16;
      sizeID : TSizeID;
      rotation : TRotation;
      rate : TCARD16;
      nrateEnts : TCARD16;
      pad : TCARD16;
    end;

const
  sz_xRRGetScreenInfoReply = 32;  
type
  TxRR1_0SetScreenConfigReq = record
      reqType : TCARD8;
      randrReqType : TCARD8;
      length : TCARD16;
      drawable : TDrawable;
      timestamp : TTime;
      configTimestamp : TTime;
      sizeID : TSizeID;
      rotation : TRotation;
    end;

const
  sz_xRR1_0SetScreenConfigReq = 20;  
type
  TxRRSetScreenConfigReq = record
      reqType : TCARD8;
      randrReqType : TCARD8;
      length : TCARD16;
      drawable : TDrawable;
      timestamp : TTime;
      configTimestamp : TTime;
      sizeID : TSizeID;
      rotation : TRotation;
      rate : TCARD16;
      pad : TCARD16;
    end;

const
  sz_xRRSetScreenConfigReq = 24;  

type
  TxRRSetScreenConfigReply = record
      _type : TBYTE;
      status : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      newTimestamp : TTime;
      newConfigTimestamp : TTime;
      root : TWindow;
      subpixelOrder : TCARD16;
      pad4 : TCARD16;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;

const
  sz_xRRSetScreenConfigReply = 32;  
type
  TxRRSelectInputReq = record
      reqType : TCARD8;
      randrReqType : TCARD8;
      length : TCARD16;
      window : TWindow;
      enable : TCARD16;
      pad2 : TCARD16;
    end;

const
  sz_xRRSelectInputReq = 12;  

type
  T_xRRModeInfo = record
      id : TRRMode;
      width : TCARD16;
      height : TCARD16;
      dotClock : TCARD32;
      hSyncStart : TCARD16;
      hSyncEnd : TCARD16;
      hTotal : TCARD16;
      hSkew : TCARD16;
      vSyncStart : TCARD16;
      vSyncEnd : TCARD16;
      vTotal : TCARD16;
      nameLength : TCARD16;
      modeFlags : TRRModeFlags;
    end;
  TxRRModeInfo = T_xRRModeInfo;

const
  sz_xRRModeInfo = 32;  
type
  TxRRGetScreenSizeRangeReq = record
      reqType : TCARD8;
      randrReqType : TCARD8;
      length : TCARD16;
      window : TWindow;
    end;

const
  sz_xRRGetScreenSizeRangeReq = 8;  

type
  TxRRGetScreenSizeRangeReply = record
      _type : TBYTE;
      pad : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      minWidth : TCARD16;
      minHeight : TCARD16;
      maxWidth : TCARD16;
      maxHeight : TCARD16;
      pad0 : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
    end;

const
  sz_xRRGetScreenSizeRangeReply = 32;  
type
  TxRRSetScreenSizeReq = record
      reqType : TCARD8;
      randrReqType : TCARD8;
      length : TCARD16;
      window : TWindow;
      width : TCARD16;
      height : TCARD16;
      widthInMillimeters : TCARD32;
      heightInMillimeters : TCARD32;
    end;

const
  sz_xRRSetScreenSizeReq = 20;  
type
  TxRRGetScreenResourcesReq = record
      reqType : TCARD8;
      randrReqType : TCARD8;
      length : TCARD16;
      window : TWindow;
    end;

const
  sz_xRRGetScreenResourcesReq = 8;  
type
  TxRRGetScreenResourcesReply = record
      _type : TBYTE;
      pad : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      timestamp : TTime;
      configTimestamp : TTime;
      nCrtcs : TCARD16;
      nOutputs : TCARD16;
      nModes : TCARD16;
      nbytesNames : TCARD16;
      pad1 : TCARD32;
      pad2 : TCARD32;
    end;

const
  sz_xRRGetScreenResourcesReply = 32;  
type
  TxRRGetOutputInfoReq = record
      reqType : TCARD8;
      randrReqType : TCARD8;
      length : TCARD16;
      output : TRROutput;
      configTimestamp : TTime;
    end;

const
  sz_xRRGetOutputInfoReq = 12;  
type
  TxRRGetOutputInfoReply = record
      _type : TBYTE;
      status : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      timestamp : TTime;
      crtc : TRRCrtc;
      mmWidth : TCARD32;
      mmHeight : TCARD32;
      connection : TCARD8;
      subpixelOrder : TCARD8;
      nCrtcs : TCARD16;
      nModes : TCARD16;
      nPreferred : TCARD16;
      nClones : TCARD16;
      nameLength : TCARD16;
    end;

const
  sz_xRRGetOutputInfoReply = 36;  
type
  TxRRListOutputPropertiesReq = record
      reqType : TCARD8;
      randrReqType : TCARD8;
      length : TCARD16;
      output : TRROutput;
    end;

const
  sz_xRRListOutputPropertiesReq = 8;  
type
  TxRRListOutputPropertiesReply = record
      _type : TBYTE;
      pad0 : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      nAtoms : TCARD16;
      pad1 : TCARD16;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;

const
  sz_xRRListOutputPropertiesReply = 32;  
type
  TxRRQueryOutputPropertyReq = record
      reqType : TCARD8;
      randrReqType : TCARD8;
      length : TCARD16;
      output : TRROutput;
      _property : TAtom;
    end;

const
  sz_xRRQueryOutputPropertyReq = 12;  
type
  TxRRQueryOutputPropertyReply = record
      _type : TBYTE;
      pad0 : TBYTE;
      sequenceNumber : TCARD16;
      length : TCARD32;
      pending : TBOOL;
      range : TBOOL;
      immutable : TBOOL;
      pad1 : TBYTE;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;

const
  sz_xRRQueryOutputPropertyReply = 32;  
type
  TxRRConfigureOutputPropertyReq = record
      reqType : TCARD8;
      randrReqType : TCARD8;
      length : TCARD16;
      output : TRROutput;
      _property : TAtom;
      pending : TBOOL;
      range : TBOOL;
      pad : TCARD16;
    end;

const
  sz_xRRConfigureOutputPropertyReq = 16;  
type
  TxRRChangeOutputPropertyReq = record
      reqType : TCARD8;
      randrReqType : TCARD8;
      length : TCARD16;
      output : TRROutput;
      _property : TAtom;
      _type : TAtom;
      format : TCARD8;
      mode : TCARD8;
      pad : TCARD16;
      nUnits : TCARD32;
    end;

const
  sz_xRRChangeOutputPropertyReq = 24;  
type
  TxRRDeleteOutputPropertyReq = record
      reqType : TCARD8;
      randrReqType : TCARD8;
      length : TCARD16;
      output : TRROutput;
      _property : TAtom;
    end;

const
  sz_xRRDeleteOutputPropertyReq = 12;  
type
  TxRRGetOutputPropertyReq = record
      reqType : TCARD8;
      randrReqType : TCARD8;
      length : TCARD16;
      output : TRROutput;
      _property : TAtom;
      _type : TAtom;
      longOffset : TCARD32;
      longLength : TCARD32;
      delete : TBOOL;
      pending : TBOOL;
      pad1 : TCARD16;
    end;

const
  sz_xRRGetOutputPropertyReq = 28;  
type
  TxRRGetOutputPropertyReply = record
      _type : TBYTE;
      format : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      propertyType : TAtom;
      bytesAfter : TCARD32;
      nItems : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
    end;

const
  sz_xRRGetOutputPropertyReply = 32;  
type
  TxRRCreateModeReq = record
      reqType : TCARD8;
      randrReqType : TCARD8;
      length : TCARD16;
      window : TWindow;
      modeInfo : TxRRModeInfo;
    end;

const
  sz_xRRCreateModeReq = 40;  
type
  TxRRCreateModeReply = record
      _type : TBYTE;
      pad0 : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      mode : TRRMode;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_xRRCreateModeReply = 32;  
type
  TxRRDestroyModeReq = record
      reqType : TCARD8;
      randrReqType : TCARD8;
      length : TCARD16;
      mode : TRRMode;
    end;

const
  sz_xRRDestroyModeReq = 8;  
type
  TxRRAddOutputModeReq = record
      reqType : TCARD8;
      randrReqType : TCARD8;
      length : TCARD16;
      output : TRROutput;
      mode : TRRMode;
    end;

const
  sz_xRRAddOutputModeReq = 12;  
type
  TxRRDeleteOutputModeReq = record
      reqType : TCARD8;
      randrReqType : TCARD8;
      length : TCARD16;
      output : TRROutput;
      mode : TRRMode;
    end;

const
  sz_xRRDeleteOutputModeReq = 12;  
type
  TxRRGetCrtcInfoReq = record
      reqType : TCARD8;
      randrReqType : TCARD8;
      length : TCARD16;
      crtc : TRRCrtc;
      configTimestamp : TTime;
    end;

const
  sz_xRRGetCrtcInfoReq = 12;  
type
  TxRRGetCrtcInfoReply = record
      _type : TBYTE;
      status : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      timestamp : TTime;
      x : TINT16;
      y : TINT16;
      width : TCARD16;
      height : TCARD16;
      mode : TRRMode;
      rotation : TRotation;
      rotations : TRotation;
      nOutput : TCARD16;
      nPossibleOutput : TCARD16;
    end;

const
  sz_xRRGetCrtcInfoReply = 32;  
type
  TxRRSetCrtcConfigReq = record
      reqType : TCARD8;
      randrReqType : TCARD8;
      length : TCARD16;
      crtc : TRRCrtc;
      timestamp : TTime;
      configTimestamp : TTime;
      x : TINT16;
      y : TINT16;
      mode : TRRMode;
      rotation : TRotation;
      pad : TCARD16;
    end;

const
  sz_xRRSetCrtcConfigReq = 28;  
type
  TxRRSetCrtcConfigReply = record
      _type : TBYTE;
      status : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      newTimestamp : TTime;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_xRRSetCrtcConfigReply = 32;  
type
  TxRRGetCrtcGammaSizeReq = record
      reqType : TCARD8;
      randrReqType : TCARD8;
      length : TCARD16;
      crtc : TRRCrtc;
    end;

const
  sz_xRRGetCrtcGammaSizeReq = 8;  
type
  TxRRGetCrtcGammaSizeReply = record
      _type : TBYTE;
      status : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      size : TCARD16;
      pad1 : TCARD16;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;

const
  sz_xRRGetCrtcGammaSizeReply = 32;  
type
  TxRRGetCrtcGammaReq = record
      reqType : TCARD8;
      randrReqType : TCARD8;
      length : TCARD16;
      crtc : TRRCrtc;
    end;

const
  sz_xRRGetCrtcGammaReq = 8;  
type
  TxRRGetCrtcGammaReply = record
      _type : TBYTE;
      status : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      size : TCARD16;
      pad1 : TCARD16;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;

const
  sz_xRRGetCrtcGammaReply = 32;  
type
  TxRRSetCrtcGammaReq = record
      reqType : TCARD8;
      randrReqType : TCARD8;
      length : TCARD16;
      crtc : TRRCrtc;
      size : TCARD16;
      pad1 : TCARD16;
    end;

const
  sz_xRRSetCrtcGammaReq = 12;  

type
  TxRRGetScreenResourcesCurrentReq = TxRRGetScreenResourcesReq;

const
  sz_xRRGetScreenResourcesCurrentReq = sz_xRRGetScreenResourcesReq;  
type
  TxRRGetScreenResourcesCurrentReply = TxRRGetScreenResourcesReply;

const
  sz_xRRGetScreenResourcesCurrentReply = sz_xRRGetScreenResourcesReply;  

type
  TxRRSetCrtcTransformReq = record
      reqType : TCARD8;
      randrReqType : TCARD8;
      length : TCARD16;
      crtc : TRRCrtc;
      transform : TxRenderTransform;
      nbytesFilter : TCARD16;
      pad : TCARD16;
    end;

const
  sz_xRRSetCrtcTransformReq = 48;  
type
  TxRRGetCrtcTransformReq = record
      reqType : TCARD8;
      randrReqType : TCARD8;
      length : TCARD16;
      crtc : TRRCrtc;
    end;

const
  sz_xRRGetCrtcTransformReq = 8;  




type
  TxRRGetCrtcTransformReply = record
      _type : TBYTE;
      status : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      pendingTransform : TxRenderTransform;
      hasTransforms : TBYTE;
      pad0 : TCARD8;
      pad1 : TCARD16;
      currentTransform : TxRenderTransform;
      pad2 : TCARD32;
      pendingNbytesFilter : TCARD16;
      pendingNparamsFilter : TCARD16;
      currentNbytesFilter : TCARD16;
      currentNparamsFilter : TCARD16;
    end;

const
  sz_xRRGetCrtcTransformReply = 96;  
type
  TxRRSetOutputPrimaryReq = record
      reqType : TCARD8;
      randrReqType : TCARD8;
      length : TCARD16;
      window : TWindow;
      output : TRROutput;
    end;

const
  sz_xRRSetOutputPrimaryReq = 12;  
type
  TxRRGetOutputPrimaryReq = record
      reqType : TCARD8;
      randrReqType : TCARD8;
      length : TCARD16;
      window : TWindow;
    end;

const
  sz_xRRGetOutputPrimaryReq = 8;  
type
  TxRRGetOutputPrimaryReply = record
      _type : TBYTE;
      pad : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      output : TRROutput;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_xRRGetOutputPrimaryReply = 32;  

type
  TxRRGetProvidersReq = record
      reqType : TCARD8;
      randrReqType : TCARD8;
      length : TCARD16;
      window : TWindow;
    end;

const
  sz_xRRGetProvidersReq = 8;  
type
  TxRRGetProvidersReply = record
      _type : TBYTE;
      pad : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      timestamp : TTime;
      nProviders : TCARD16;
      pad1 : TCARD16;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_xRRGetProvidersReply = 32;  
type
  TxRRGetProviderInfoReq = record
      reqType : TCARD8;
      randrReqType : TCARD8;
      length : TCARD16;
      provider : TRRProvider;
      configTimestamp : TTime;
    end;

const
  sz_xRRGetProviderInfoReq = 12;  
type
  TxRRGetProviderInfoReply = record
      _type : TBYTE;
      status : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      timestamp : TTime;
      capabilities : TCARD32;
      nCrtcs : TCARD16;
      nOutputs : TCARD16;
      nAssociatedProviders : TCARD16;
      nameLength : TCARD16;
      pad1 : TCARD32;
      pad2 : TCARD32;
    end;

const
  sz_xRRGetProviderInfoReply = 32;  
type
  TxRRSetProviderOutputSourceReq = record
      reqType : TCARD8;
      randrReqType : TCARD8;
      length : TCARD16;
      provider : TRRProvider;
      source_provider : TRRProvider;
      configTimestamp : TTime;
    end;

const
  sz_xRRSetProviderOutputSourceReq = 16;  
type
  TxRRSetProviderOffloadSinkReq = record
      reqType : TCARD8;
      randrReqType : TCARD8;
      length : TCARD16;
      provider : TRRProvider;
      sink_provider : TRRProvider;
      configTimestamp : TTime;
    end;

const
  sz_xRRSetProviderOffloadSinkReq = 16;  
type
  TxRRListProviderPropertiesReq = record
      reqType : TCARD8;
      randrReqType : TCARD8;
      length : TCARD16;
      provider : TRRProvider;
    end;

const
  sz_xRRListProviderPropertiesReq = 8;  
type
  TxRRListProviderPropertiesReply = record
      _type : TBYTE;
      pad0 : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      nAtoms : TCARD16;
      pad1 : TCARD16;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;

const
  sz_xRRListProviderPropertiesReply = 32;  
type
  TxRRQueryProviderPropertyReq = record
      reqType : TCARD8;
      randrReqType : TCARD8;
      length : TCARD16;
      provider : TRRProvider;
      _property : TAtom;
    end;

const
  sz_xRRQueryProviderPropertyReq = 12;  
type
  TxRRQueryProviderPropertyReply = record
      _type : TBYTE;
      pad0 : TBYTE;
      sequenceNumber : TCARD16;
      length : TCARD32;
      pending : TBOOL;
      range : TBOOL;
      immutable : TBOOL;
      pad1 : TBYTE;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;

const
  sz_xRRQueryProviderPropertyReply = 32;  
type
  TxRRConfigureProviderPropertyReq = record
      reqType : TCARD8;
      randrReqType : TCARD8;
      length : TCARD16;
      provider : TRRProvider;
      _property : TAtom;
      pending : TBOOL;
      range : TBOOL;
      pad : TCARD16;
    end;

const
  sz_xRRConfigureProviderPropertyReq = 16;  
type
  TxRRChangeProviderPropertyReq = record
      reqType : TCARD8;
      randrReqType : TCARD8;
      length : TCARD16;
      provider : TRRProvider;
      _property : TAtom;
      _type : TAtom;
      format : TCARD8;
      mode : TCARD8;
      pad : TCARD16;
      nUnits : TCARD32;
    end;

const
  sz_xRRChangeProviderPropertyReq = 24;  
type
  TxRRDeleteProviderPropertyReq = record
      reqType : TCARD8;
      randrReqType : TCARD8;
      length : TCARD16;
      provider : TRRProvider;
      _property : TAtom;
    end;

const
  sz_xRRDeleteProviderPropertyReq = 12;  
type
  TxRRGetProviderPropertyReq = record
      reqType : TCARD8;
      randrReqType : TCARD8;
      length : TCARD16;
      provider : TRRProvider;
      _property : TAtom;
      _type : TAtom;
      longOffset : TCARD32;
      longLength : TCARD32;
      delete : TBOOL;
      pending : TBOOL;
      pad1 : TCARD16;
    end;

const
  sz_xRRGetProviderPropertyReq = 28;  
type
  TxRRGetProviderPropertyReply = record
      _type : TBYTE;
      format : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      propertyType : TAtom;
      bytesAfter : TCARD32;
      nItems : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
    end;

const
  sz_xRRGetProviderPropertyReply = 32;  

type
  TxRRCreateLeaseReq = record
      reqType : TCARD8;
      randrReqType : TCARD8;
      length : TCARD16;
      window : TWindow;
      lid : TRRLease;
      nCrtcs : TCARD16;
      nOutputs : TCARD16;
    end;

const
  sz_xRRCreateLeaseReq = 16;  
type
  TxRRCreateLeaseReply = record
      _type : TBYTE;
      nfd : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
      pad7 : TCARD32;
    end;

const
  sz_xRRCreateLeaseReply = 32;  
type
  TxRRFreeLeaseReq = record
      reqType : TCARD8;
      randrReqType : TCARD8;
      length : TCARD16;
      lid : TRRLease;
      terminate : TBYTE;
      pad1 : TCARD8;
      pad2 : TCARD16;
    end;

const
  sz_xRRFreeLeaseReq = 12;  










type
  TxRRScreenChangeNotifyEvent = record
      _type : TCARD8;
      rotation : TCARD8;
      sequenceNumber : TCARD16;
      timestamp : TTime;
      configTimestamp : TTime;
      root : TWindow;
      window : TWindow;
      sizeID : TSizeID;
      subpixelOrder : TCARD16;
      widthInPixels : TCARD16;
      heightInPixels : TCARD16;
      widthInMillimeters : TCARD16;
      heightInMillimeters : TCARD16;
    end;

const
  sz_xRRScreenChangeNotifyEvent = 32;  










type
  TxRRCrtcChangeNotifyEvent = record
      _type : TCARD8;
      subCode : TCARD8;
      sequenceNumber : TCARD16;
      timestamp : TTime;
      window : TWindow;
      crtc : TRRCrtc;
      mode : TRRMode;
      rotation : TCARD16;
      pad1 : TCARD16;
      x : TINT16;
      y : TINT16;
      width : TCARD16;
      height : TCARD16;
    end;

const
  sz_xRRCrtcChangeNotifyEvent = 32;  











type
  TxRROutputChangeNotifyEvent = record
      _type : TCARD8;
      subCode : TCARD8;
      sequenceNumber : TCARD16;
      timestamp : TTime;
      configTimestamp : TTime;
      window : TWindow;
      output : TRROutput;
      crtc : TRRCrtc;
      mode : TRRMode;
      rotation : TCARD16;
      connection : TCARD8;
      subpixelOrder : TCARD8;
    end;

const
  sz_xRROutputChangeNotifyEvent = 32;  







type
  TxRROutputPropertyNotifyEvent = record
      _type : TCARD8;
      subCode : TCARD8;
      sequenceNumber : TCARD16;
      window : TWindow;
      output : TRROutput;
      atom : TAtom;
      timestamp : TTime;
      state : TCARD8;
      pad1 : TCARD8;
      pad2 : TCARD16;
      pad3 : TCARD32;
      pad4 : TCARD32;
    end;

const
  sz_xRROutputPropertyNotifyEvent = 32;  





type
  TxRRProviderChangeNotifyEvent = record
      _type : TCARD8;
      subCode : TCARD8;
      sequenceNumber : TCARD16;
      timestamp : TTime;
      window : TWindow;
      provider : TRRProvider;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
    end;

const
  sz_xRRProviderChangeNotifyEvent = 32;  







type
  TxRRProviderPropertyNotifyEvent = record
      _type : TCARD8;
      subCode : TCARD8;
      sequenceNumber : TCARD16;
      window : TWindow;
      provider : TRRProvider;
      atom : TAtom;
      timestamp : TTime;
      state : TCARD8;
      pad1 : TCARD8;
      pad2 : TCARD16;
      pad3 : TCARD32;
      pad4 : TCARD32;
    end;

const
  sz_xRRProviderPropertyNotifyEvent = 32;  




type
  TxRRResourceChangeNotifyEvent = record
      _type : TCARD8;
      subCode : TCARD8;
      sequenceNumber : TCARD16;
      timestamp : TTime;
      window : TWindow;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_xRRResourceChangeNotifyEvent = 32;  





type
  TxRRLeaseNotifyEvent = record
      _type : TCARD8;
      subCode : TCARD8;
      sequenceNumber : TCARD16;
      timestamp : TTime;
      window : TWindow;
      lease : TRRLease;
      created : TCARD8;
      pad0 : TCARD8;
      pad1 : TCARD16;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
    end;

const
  sz_xRRLeaseNotifyEvent = 32;  
type
  TxRRGetPanningReq = record
      reqType : TCARD8;
      randrReqType : TCARD8;
      length : TCARD16;
      crtc : TRRCrtc;
    end;

const
  sz_xRRGetPanningReq = 8;  
type
  TxRRGetPanningReply = record
      _type : TBYTE;
      status : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      timestamp : TTime;
      left : TCARD16;
      top : TCARD16;
      width : TCARD16;
      height : TCARD16;
      track_left : TCARD16;
      track_top : TCARD16;
      track_width : TCARD16;
      track_height : TCARD16;
      border_left : TINT16;
      border_top : TINT16;
      border_right : TINT16;
      border_bottom : TINT16;
    end;

const
  sz_xRRGetPanningReply = 36;  
type
  TxRRSetPanningReq = record
      reqType : TCARD8;
      randrReqType : TCARD8;
      length : TCARD16;
      crtc : TRRCrtc;
      timestamp : TTime;
      left : TCARD16;
      top : TCARD16;
      width : TCARD16;
      height : TCARD16;
      track_left : TCARD16;
      track_top : TCARD16;
      track_width : TCARD16;
      track_height : TCARD16;
      border_left : TINT16;
      border_top : TINT16;
      border_right : TINT16;
      border_bottom : TINT16;
    end;

const
  sz_xRRSetPanningReq = 36;  
type
  TxRRSetPanningReply = record
      _type : TBYTE;
      status : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      newTimestamp : TTime;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_xRRSetPanningReply = 32;  
type
  TxRRMonitorInfo = record
      name : TAtom;
      primary : TBOOL;
      automatic : TBOOL;
      noutput : TCARD16;
      x : TINT16;
      y : TINT16;
      width : TCARD16;
      height : TCARD16;
      widthInMillimeters : TCARD32;
      heightInMillimeters : TCARD32;
    end;

const
  sz_xRRMonitorInfo = 24;  
type
  TxRRGetMonitorsReq = record
      reqType : TCARD8;
      randrReqType : TCARD8;
      length : TCARD16;
      window : TWindow;
      get_active : TBOOL;
      pad : TCARD8;
      pad2 : TCARD16;
    end;

const
  sz_xRRGetMonitorsReq = 12;  
type
  TxRRGetMonitorsReply = record
      _type : TBYTE;
      status : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      timestamp : TTime;
      nmonitors : TCARD32;
      noutputs : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
    end;

const
  sz_xRRGetMonitorsReply = 32;  
type
  TxRRSetMonitorReq = record
      reqType : TCARD8;
      randrReqType : TCARD8;
      length : TCARD16;
      window : TWindow;
      monitor : TxRRMonitorInfo;
    end;

const
  sz_xRRSetMonitorReq = 32;  
type
  TxRRDeleteMonitorReq = record
      reqType : TCARD8;
      randrReqType : TCARD8;
      length : TCARD16;
      window : TWindow;
      name : TAtom;
    end;

const
  sz_xRRDeleteMonitorReq = 12;  
//// {$undef RRLease}
//// {$undef RRModeFlags}
//// {$undef RRCrtc}
//// {$undef RRMode}
//// {$undef RROutput}
//// {$undef RRMode}
//// {$undef RRCrtc}
//// {$undef RRProvider}
//// {$undef Drawable}
//// {$undef Window}
//// {$undef Font}
//// {$undef Pixmap}
//// {$undef Cursor}
//// {$undef Colormap}
//// {$undef GContext}
//// {$undef Atom}
//// {$undef Time}
//// {$undef KeyCode}
//// {$undef KeySym}
//// {$undef Rotation}
//// {$undef SizeID}
//// {$undef SubpixelOrder}
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/xtestconst.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/xtestconst.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/xtestconst.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XTEST_CONST_H_}
//// {$define _XTEST_CONST_H_}

const
  XTestNumberEvents = 0;  
  XTestNumberErrors = 0;  

function XTestCurrentCursor : TCursor;  

const
  XTestMajorVersion = 2;  
  XTestMinorVersion = 2;  
  XTestExtensionName = 'XTEST';  
//// {$endif}

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/xf86dgaconst.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/xf86dgaconst.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/xf86dgaconst.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XF86DGACONST_H_}
//// {$define _XF86DGACONST_H_}
//// {$include <X11/extensions/xf86dga1const.h>}

const
  X_XDGAQueryVersion = 0;  


  X_XDGAQueryModes = 12;  
  X_XDGASetMode = 13;  
  X_XDGASetViewport = 14;  
  X_XDGAInstallColormap = 15;  
  X_XDGASelectInput = 16;  
  X_XDGAFillRectangle = 17;  
  X_XDGACopyArea = 18;  
  X_XDGACopyTransparentArea = 19;  
  X_XDGAGetViewportStatus = 20;  
  X_XDGASync = 21;  
  X_XDGAOpenFramebuffer = 22;  
  X_XDGACloseFramebuffer = 23;  
  X_XDGASetClientVersion = 24;  
  X_XDGAChangePixmapMode = 25;  
  X_XDGACreateColormap = 26;  
  XDGAConcurrentAccess = $00000001;  
  XDGASolidFillRect = $00000002;  
  XDGABlitRect = $00000004;  
  XDGABlitTransRect = $00000008;  
  XDGAPixmap = $00000010;  
  XDGAInterlaced = $00010000;  
  XDGADoublescan = $00020000;  
  XDGAFlipImmediate = $00000001;  
  XDGAFlipRetrace = $00000002;  
  XDGANeedRoot = $00000001;  
  XF86DGANumberEvents = 7;  
  XDGAPixmapModeLarge = 0;  
  XDGAPixmapModeSmall = 1;  
  XF86DGAClientNotLocal = 0;  
  XF86DGANoDirectVideoMode = 1;  
  XF86DGAScreenNotActive = 2;  
  XF86DGADirectNotActivated = 3;  
  XF86DGAOperationNotSupported = 4;  
  XF86DGANumberErrors = XF86DGAOperationNotSupported+1;  










type
  TXDGAMode = record
      num : longint;
      name : ^char;
      verticalRefresh : single;
      flags : longint;
      imageWidth : longint;
      imageHeight : longint;
      pixmapWidth : longint;
      pixmapHeight : longint;
      bytesPerScanline : longint;
      byteOrder : longint;
      depth : longint;
      bitsPerPixel : longint;
      redMask : dword;
      greenMask : dword;
      blueMask : dword;
      visualClass : smallint;
      viewportWidth : longint;
      viewportHeight : longint;
      xViewportStep : longint;
      yViewportStep : longint;
      maxViewportX : longint;
      maxViewportY : longint;
      viewportFlags : longint;
      reserved1 : longint;
      reserved2 : longint;
    end;

  TXDGADevice = record
      mode : TXDGAMode;
      data : ^byte;
      pixmap : TPixmap;
    end;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/xf86bigfstr.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/xf86bigfstr.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/xf86bigfstr.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}


//// (* error 
//// #warning "xf86bigfstr.h is obsolete and may be removed in the future."
//// (* error 
//// #warning "xf86bigfstr.h is obsolete and may be removed in the future."
//// {$include <X11/extensions/xf86bigfproto.h>}

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/XKBstr.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/XKBstr.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/XKBstr.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XKBSTR_H_}
//// {$define _XKBSTR_H_}
//// {$include <X11/Xfuncproto.h>}
//// {$include <X11/extensions/XKB.h>}

function XkbCharToInt(v : longint) : longint;

//// (* error 
//// #define	XkbIntTo2Chars(i,h,l)	(((h)=((i>>8)&0xff)),((l)=((i)&0xff)))
in define line 34 *)
    function Xkb2CharsToInt(h,l : longint) : smallint;    


//// {$ifdef __clang__}
//// {$endif}

    type
      T_XkbStateRec = record
          group : byte;
          locked_group : byte;
          base_group : word;
          latched_group : word;
          mods : byte;
          base_mods : byte;
          latched_mods : byte;
          locked_mods : byte;
          compat_state : byte;
          grab_mods : byte;
          compat_grab_mods : byte;
          lookup_mods : byte;
          compat_lookup_mods : byte;
          ptr_buttons : word;
        end;
      TXkbStateRec = T_XkbStateRec;
      TXkbStatePtr = ^T_XkbStateRec;

    function XkbModLocks(s : longint) : longint;    

    function XkbStateMods(s : longint) : longint;    

    function XkbGroupLock(s : longint) : longint;    

    function XkbStateGroup(s : longint) : longint;    

    function XkbStateFieldFromRec(s : longint) : longint;    

    function XkbGrabStateFromRec(s : longint) : longint;    


    type
      T_XkbMods = record
          mask : byte;
          real_mods : byte;
          vmods : word;
        end;
      TXkbModsRec = T_XkbMods;
      TXkbModsPtr = ^T_XkbMods;

      T_XkbKTMapEntry = record
          active : TBool;
          level : byte;
          mods : TXkbModsRec;
        end;
      TXkbKTMapEntryRec = T_XkbKTMapEntry;
      TXkbKTMapEntryPtr = ^T_XkbKTMapEntry;




      T_XkbKeyType = record
          mods : TXkbModsRec;
          num_levels : byte;
          map_count : byte;
          map : TXkbKTMapEntryPtr;
          preserve : TXkbModsPtr;
          name : TAtom;
          level_names : ^TAtom;
        end;
      TXkbKeyTypeRec = T_XkbKeyType;
      TXkbKeyTypePtr = ^T_XkbKeyType;

    function XkbNumGroups(g : longint) : Tg;    

    function XkbOutOfRangeGroupInfo(g : longint) : Tg;    

    function XkbOutOfRangeGroupAction(g : longint) : Tg;    

    function XkbOutOfRangeGroupNumber(g : longint) : longint;    

    function XkbSetGroupInfo(g,w,n : longint) : longint;    

    function XkbSetNumGroups(g,n : longint) : longint;    


    type
      T_XkbBehavior = record
          _type : byte;
          data : byte;
        end;
      TXkbBehavior = T_XkbBehavior;

    const
      XkbAnyActionDataSize = 7;      
    type
      T_XkbAnyAction = record
          _type : byte;
          data : array[0..(XkbAnyActionDataSize)-1] of byte;
        end;
      TXkbAnyAction = T_XkbAnyAction;

      T_XkbModAction = record
          _type : byte;
          flags : byte;
          mask : byte;
          real_mods : byte;
          vmods1 : byte;
          vmods2 : byte;
        end;
      TXkbModAction = T_XkbModAction;

    function XkbModActionVMods(a : longint) : smallint;    

//// (* error 
//// 	(((a)->vmods1=(((v)>>8)&0xff)),(a)->vmods2=((v)&0xff))
in define line 132 *)
    type
      T_XkbGroupAction = record
          _type : byte;
          flags : byte;
          group_XXX : char;
        end;
      TXkbGroupAction = T_XkbGroupAction;

    function XkbSAGroup(a : longint) : longint;    

    function XkbSASetGroup(a,g : longint) : longint;    

    type
      T_XkbISOAction = record
          _type : byte;
          flags : byte;
          mask : byte;
          real_mods : byte;
          group_XXX : char;
          affect : byte;
          vmods1 : byte;
          vmods2 : byte;
        end;
      TXkbISOAction = T_XkbISOAction;

      T_XkbPtrAction = record
          _type : byte;
          flags : byte;
          high_XXX : byte;
          low_XXX : byte;
          high_YYY : byte;
          low_YYY : byte;
        end;
      TXkbPtrAction = T_XkbPtrAction;

    function XkbPtrActionX(a : longint) : longint;    

    function XkbPtrActionY(a : longint) : longint;    

    function XkbSetPtrActionX(a,x : longint) : longint;    

    function XkbSetPtrActionY(a,y : longint) : longint;    

    type
      T_XkbPtrBtnAction = record
          _type : byte;
          flags : byte;
          count : byte;
          button : byte;
        end;
      TXkbPtrBtnAction = T_XkbPtrBtnAction;

      T_XkbPtrDfltAction = record
          _type : byte;
          flags : byte;
          affect : byte;
          valueXXX : char;
        end;
      TXkbPtrDfltAction = T_XkbPtrDfltAction;

    function XkbSAPtrDfltValue(a : longint) : longint;    

    function XkbSASetPtrDfltValue(a,c : longint) : longint;    

    type
      T_XkbSwitchScreenAction = record
          _type : byte;
          flags : byte;
          screenXXX : char;
        end;
      TXkbSwitchScreenAction = T_XkbSwitchScreenAction;

    function XkbSAScreen(a : longint) : longint;    

    function XkbSASetScreen(a,s : longint) : longint;    

    type
      T_XkbCtrlsAction = record
          _type : byte;
          flags : byte;
          ctrls3 : byte;
          ctrls2 : byte;
          ctrls1 : byte;
          ctrls0 : byte;
        end;
      TXkbCtrlsAction = T_XkbCtrlsAction;
//// (* error 
//// #define	XkbActionSetCtrls(a,c)	(((a)->ctrls3=(((c)>>24)&0xff)),\
in define line 201 *)

    function XkbActionCtrls(a : longint) : longint;    

    type
      T_XkbMessageAction = record
          _type : byte;
          flags : byte;
          message : array[0..5] of byte;
        end;
      TXkbMessageAction = T_XkbMessageAction;

      T_XkbRedirectKeyAction = record
          _type : byte;
          new_key : byte;
          mods_mask : byte;
          mods : byte;
          vmods_mask0 : byte;
          vmods_mask1 : byte;
          vmods0 : byte;
          vmods1 : byte;
        end;
      TXkbRedirectKeyAction = T_XkbRedirectKeyAction;

    function XkbSARedirectVMods(a : longint) : longint;    

//// (* error 
//// #define	XkbSARedirectSetVMods(a,m)	(((a)->vmods1=(((m)>>8)&0xff)),\
in define line 227 *)
    function XkbSARedirectVModsMask(a : longint) : longint;    

//// (* error 
//// #define	XkbSARedirectSetVModsMask(a,m)	(((a)->vmods_mask1=(((m)>>8)&0xff)),\
in define line 231 *)
    type
      T_XkbDeviceBtnAction = record
          _type : byte;
          flags : byte;
          count : byte;
          button : byte;
          device : byte;
        end;
      TXkbDeviceBtnAction = T_XkbDeviceBtnAction;

      T_XkbDeviceValuatorAction = record
          _type : byte;
          device : byte;
          v1_what : byte;
          v1_ndx : byte;
          v1_value : byte;
          v2_what : byte;
          v2_ndx : byte;
          v2_value : byte;
        end;
      TXkbDeviceValuatorAction = T_XkbDeviceValuatorAction;

      T_XkbAction = record
          case longint of
            0 : ( any : TXkbAnyAction );
            1 : ( mods : TXkbModAction );
            2 : ( group : TXkbGroupAction );
            3 : ( iso : TXkbISOAction );
            4 : ( ptr : TXkbPtrAction );
            5 : ( btn : TXkbPtrBtnAction );
            6 : ( dflt : TXkbPtrDfltAction );
            7 : ( screen : TXkbSwitchScreenAction );
            8 : ( ctrls : TXkbCtrlsAction );
            9 : ( msg : TXkbMessageAction );
            10 : ( redirect : TXkbRedirectKeyAction );
            11 : ( devbtn : TXkbDeviceBtnAction );
            12 : ( devval : TXkbDeviceValuatorAction );
            13 : ( _type : byte );
          end;
      TXkbAction = T_XkbAction;

      T_XkbControls = record
          mk_dflt_btn : byte;
          num_groups : byte;
          groups_wrap : byte;
          internal : TXkbModsRec;
          ignore_lock : TXkbModsRec;
          enabled_ctrls : dword;
          repeat_delay : word;
          repeat_interval : word;
          slow_keys_delay : word;
          debounce_delay : word;
          mk_delay : word;
          mk_interval : word;
          mk_time_to_max : word;
          mk_max_speed : word;
          mk_curve : smallint;
          ax_options : word;
          ax_timeout : word;
          axt_opts_mask : word;
          axt_opts_values : word;
          axt_ctrls_mask : dword;
          axt_ctrls_values : dword;
          per_key_repeat : array[0..(XkbPerKeyBitArraySize)-1] of byte;
        end;
      TXkbControlsRec = T_XkbControls;
      TXkbControlsPtr = ^T_XkbControls;

    function XkbAX_AnyFeedback(c : longint) : longint;    

    function XkbAX_NeedOption(c,w : longint) : longint;    

    function XkbAX_NeedFeedback(c,w : longint) : longint;    



//// {$if defined(__cplusplus) || defined(c_plusplus)}

//// {$else}
//// {$endif}
    type
      T_XkbServerMapRec = record
          num_acts : word;
          size_acts : word;
          acts : ^TXkbAction;
          behaviors : ^TXkbBehavior;
          key_acts : ^word;
          c_explicit : ^byte;
          explicit : ^byte;
          vmods : array[0..(XkbNumVirtualMods)-1] of byte;
          vmodmap : ^word;
        end;
      TXkbServerMapRec = T_XkbServerMapRec;
      TXkbServerMapPtr = ^T_XkbServerMapRec;

    function XkbSMKeyActionsPtr(m,k : longint) : longint;    


    type
      T_XkbSymMapRec = record
          kt_index : array[0..(XkbNumKbdGroups)-1] of byte;
          group_info : byte;
          width : byte;
          offset : word;
        end;
      TXkbSymMapRec = T_XkbSymMapRec;
      TXkbSymMapPtr = ^T_XkbSymMapRec;





      T_XkbClientMapRec = record
          size_types : byte;
          num_types : byte;
          types : TXkbKeyTypePtr;
          size_syms : word;
          num_syms : word;
          syms : ^TKeySym;
          key_sym_map : TXkbSymMapPtr;
          modmap : ^byte;
        end;
      TXkbClientMapRec = T_XkbClientMapRec;
      TXkbClientMapPtr = ^T_XkbClientMapRec;

    function XkbCMKeyGroupInfo(m,k : longint) : longint;    

    function XkbCMKeyNumGroups(m,k : longint) : longint;    

    function XkbCMKeyGroupWidth(m,k,g : longint) : longint;    

    function XkbCMKeyGroupsWidth(m,k : longint) : longint;    

    function XkbCMKeyTypeIndex(m,k,g : longint) : longint;    

    function XkbCMKeyType(m,k,g : longint) : longint;    

    function XkbCMKeyNumSyms(m,k : longint) : longint;    

    function XkbCMKeySymsOffset(m,k : longint) : longint;    

    function XkbCMKeySymsPtr(m,k : longint) : longint;    


    type
      T_XkbSymInterpretRec = record
          sym : TKeySym;
          flags : byte;
          match : byte;
          mods : byte;
          virtual_mod : byte;
          act : TXkbAnyAction;
        end;
      TXkbSymInterpretRec = T_XkbSymInterpretRec;
      TXkbSymInterpretPtr = ^T_XkbSymInterpretRec;


      T_XkbCompatMapRec = record
          sym_interpret : TXkbSymInterpretPtr;
          groups : array[0..(XkbNumKbdGroups)-1] of TXkbModsRec;
          num_si : word;
          size_si : word;
        end;
      TXkbCompatMapRec = T_XkbCompatMapRec;
      TXkbCompatMapPtr = ^T_XkbCompatMapRec;

      T_XkbIndicatorMapRec = record
          flags : byte;
          which_groups : byte;
          groups : byte;
          which_mods : byte;
          mods : TXkbModsRec;
          ctrls : dword;
        end;
      TXkbIndicatorMapRec = T_XkbIndicatorMapRec;
      TXkbIndicatorMapPtr = ^T_XkbIndicatorMapRec;
//// (* error 
//// 			    (((i)->which_groups&&(i)->groups)||\
in define line 394 *)
//// (* error 
//// #define	XkbIM_InUse(i)	(((i)->flags)||((i)->which_groups)||\
in define line 396 *)

      T_XkbIndicatorRec = record
          phys_indicators : dword;
          maps : array[0..(XkbNumIndicators)-1] of TXkbIndicatorMapRec;
        end;
      TXkbIndicatorRec = T_XkbIndicatorRec;
      TXkbIndicatorPtr = ^T_XkbIndicatorRec;
//// (* error 
//// 	char	name[XkbKeyNameLength]	_X_NONSTRING;
 in declarator_list *)

      T_XkbKeyNameRec = record
          XkbKeyNameLength : char;
        end;
      TXkbKeyNameRec = T_XkbKeyNameRec;
      TXkbKeyNamePtr = ^T_XkbKeyNameRec;
//// (* error 
//// 	char	real[XkbKeyNameLength]	_X_NONSTRING;
 in declarator_list *)
//// (* error 
//// 	char	alias[XkbKeyNameLength]	_X_NONSTRING;
 in declarator_list *)

      T_XkbKeyAliasRec = record
          XkbKeyNameLength : char;
          XkbKeyNameLength : char;
        end;
      TXkbKeyAliasRec = T_XkbKeyAliasRec;
      TXkbKeyAliasPtr = ^T_XkbKeyAliasRec;






      T_XkbNamesRec = record
          keycodes : TAtom;
          geometry : TAtom;
          symbols : TAtom;
          types : TAtom;
          compat : TAtom;
          vmods : array[0..(XkbNumVirtualMods)-1] of TAtom;
          indicators : array[0..(XkbNumIndicators)-1] of TAtom;
          groups : array[0..(XkbNumKbdGroups)-1] of TAtom;
          keys : TXkbKeyNamePtr;
          key_aliases : TXkbKeyAliasPtr;
          radio_groups : ^TAtom;
          phys_symbols : TAtom;
          num_keys : byte;
          num_key_aliases : byte;
          num_rg : word;
        end;
      TXkbNamesRec = T_XkbNamesRec;
      TXkbNamesPtr = ^T_XkbNamesRec;

      TXkbGeometryPtr = ^T_XkbGeometry;


      T_XkbDesc = record
          dpy : ^T_XDisplay;
          flags : word;
          device_spec : word;
          min_key_code : TKeyCode;
          max_key_code : TKeyCode;
          ctrls : TXkbControlsPtr;
          server : TXkbServerMapPtr;
          map : TXkbClientMapPtr;
          indicators : TXkbIndicatorPtr;
          names : TXkbNamesPtr;
          compat : TXkbCompatMapPtr;
          geom : TXkbGeometryPtr;
        end;
      TXkbDescRec = T_XkbDesc;
      TXkbDescPtr = ^T_XkbDesc;

    function XkbKeyKeyTypeIndex(d,k,g : longint) : longint;    

    function XkbKeyKeyType(d,k,g : longint) : longint;    

    function XkbKeyGroupWidth(d,k,g : longint) : longint;    

    function XkbKeyGroupsWidth(d,k : longint) : longint;    

    function XkbKeyGroupInfo(d,k : longint) : longint;    

    function XkbKeyNumGroups(d,k : longint) : longint;    

    function XkbKeyNumSyms(d,k : longint) : longint;    

    function XkbKeySymsPtr(d,k : longint) : longint;    

//// (* error 
//// #define	XkbKeySym(d,k,n)		(XkbKeySymsPtr(d,k)[n])
in define line 466 *)
    function XkbKeySymEntry(d,k,sl,g : longint) : longint;    

//// (* error 
//// 	(XkbKeyHasActions(d,k)?&XkbKeyActionsPtr(d,k)[n]:NULL)
in define line 470 *)
    function XkbKeyActionEntry(d,k,sl,g : longint) : longint;    

    function XkbKeyHasActions(d,k : longint) : longint;    

    function XkbKeyNumActions(d,k : longint) : longint;    

    function XkbKeyActionsPtr(d,k : longint) : longint;    

    function XkbKeycodeInRange(d,k : longint) : longint;    

    function XkbNumKeys(d : longint) : longint;    


    type
      T_XkbMapChanges = record
          changed : word;
          min_key_code : TKeyCode;
          max_key_code : TKeyCode;
          first_type : byte;
          num_types : byte;
          first_key_sym : TKeyCode;
          num_key_syms : byte;
          first_key_act : TKeyCode;
          num_key_acts : byte;
          first_key_behavior : TKeyCode;
          num_key_behaviors : byte;
          first_key_explicit : TKeyCode;
          num_key_explicit : byte;
          first_modmap_key : TKeyCode;
          num_modmap_keys : byte;
          first_vmodmap_key : TKeyCode;
          num_vmodmap_keys : byte;
          pad : byte;
          vmods : word;
        end;
      TXkbMapChangesRec = T_XkbMapChanges;
      TXkbMapChangesPtr = ^T_XkbMapChanges;

      T_XkbControlsChanges = record
          changed_ctrls : dword;
          enabled_ctrls_changes : dword;
          num_groups_changed : TBool;
        end;
      TXkbControlsChangesRec = T_XkbControlsChanges;
      TXkbControlsChangesPtr = ^T_XkbControlsChanges;

      T_XkbIndicatorChanges = record
          state_changes : dword;
          map_changes : dword;
        end;
      TXkbIndicatorChangesRec = T_XkbIndicatorChanges;
      TXkbIndicatorChangesPtr = ^T_XkbIndicatorChanges;

      T_XkbNameChanges = record
          changed : dword;
          first_type : byte;
          num_types : byte;
          first_lvl : byte;
          num_lvls : byte;
          num_aliases : byte;
          num_rg : byte;
          first_key : byte;
          num_keys : byte;
          changed_vmods : word;
          changed_indicators : dword;
          changed_groups : byte;
        end;
      TXkbNameChangesRec = T_XkbNameChanges;
      TXkbNameChangesPtr = ^T_XkbNameChanges;

      T_XkbCompatChanges = record
          changed_groups : byte;
          first_si : word;
          num_si : word;
        end;
      TXkbCompatChangesRec = T_XkbCompatChanges;
      TXkbCompatChangesPtr = ^T_XkbCompatChanges;

      T_XkbChanges = record
          device_spec : word;
          state_changes : word;
          map : TXkbMapChangesRec;
          ctrls : TXkbControlsChangesRec;
          indicators : TXkbIndicatorChangesRec;
          names : TXkbNameChangesRec;
          compat : TXkbCompatChangesRec;
        end;
      TXkbChangesRec = T_XkbChanges;
      TXkbChangesPtr = ^T_XkbChanges;


      T_XkbComponentNames = record
          keymap : ^char;
          keycodes : ^char;
          types : ^char;
          compat : ^char;
          symbols : ^char;
          geometry : ^char;
        end;
      TXkbComponentNamesRec = T_XkbComponentNames;
      TXkbComponentNamesPtr = ^T_XkbComponentNames;

      T_XkbComponentName = record
          flags : word;
          name : ^char;
        end;
      TXkbComponentNameRec = T_XkbComponentName;
      TXkbComponentNamePtr = ^T_XkbComponentName;

      T_XkbComponentList = record
          num_keymaps : longint;
          num_keycodes : longint;
          num_types : longint;
          num_compat : longint;
          num_symbols : longint;
          num_geometry : longint;
          keymaps : TXkbComponentNamePtr;
          keycodes : TXkbComponentNamePtr;
          types : TXkbComponentNamePtr;
          compat : TXkbComponentNamePtr;
          symbols : TXkbComponentNamePtr;
          geometry : TXkbComponentNamePtr;
        end;
      TXkbComponentListRec = T_XkbComponentList;
      TXkbComponentListPtr = ^T_XkbComponentList;


      T_XkbDeviceLedInfo = record
          led_class : word;
          led_id : word;
          phys_indicators : dword;
          maps_present : dword;
          names_present : dword;
          state : dword;
          names : array[0..(XkbNumIndicators)-1] of TAtom;
          maps : array[0..(XkbNumIndicators)-1] of TXkbIndicatorMapRec;
        end;
      TXkbDeviceLedInfoRec = T_XkbDeviceLedInfo;
      TXkbDeviceLedInfoPtr = ^T_XkbDeviceLedInfo;



      T_XkbDeviceInfo = record
          name : ^char;
          _type : TAtom;
          device_spec : word;
          has_own_state : TBool;
          supported : word;
          unsupported : word;
          num_btns : word;
          btn_acts : ^TXkbAction;
          sz_leds : word;
          num_leds : word;
          dflt_kbd_fb : word;
          dflt_led_fb : word;
          leds : TXkbDeviceLedInfoPtr;
        end;
      TXkbDeviceInfoRec = T_XkbDeviceInfo;
      TXkbDeviceInfoPtr = ^T_XkbDeviceInfo;

    function XkbXI_DevHasBtnActs(d : longint) : longint;    

    function XkbXI_LegalDevBtn(d,b : longint) : longint;    

    function XkbXI_DevHasLeds(d : longint) : longint;    


    type
      T_XkbDeviceLedChanges = record
          led_class : word;
          led_id : word;
          defined : dword;
          next : ^T_XkbDeviceLedChanges;
        end;
      TXkbDeviceLedChangesRec = T_XkbDeviceLedChanges;
      TXkbDeviceLedChangesPtr = ^T_XkbDeviceLedChanges;

      T_XkbDeviceChanges = record
          changed : dword;
          first_btn : word;
          num_btns : word;
          leds : TXkbDeviceLedChangesRec;
        end;
      TXkbDeviceChangesRec = T_XkbDeviceChanges;
      TXkbDeviceChangesPtr = ^T_XkbDeviceChanges;
//// {$ifdef __clang__}
//// {$endif}
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/xtestext1proto.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/xtestext1proto.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/xtestext1proto.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XTESTEXT1PROTO_H}

const
  _XTESTEXT1PROTO_H = 1;  
//// {$include <X11/extensions/xtestext1const.h>}



const
  X_TestFakeInput = 1;  
  X_TestGetInput = 2;  
  X_TestStopInput = 3;  
  X_TestReset = 4;  
  X_TestQueryInputSize = 5;  




type
  TxTestFakeInputReq = record
      reqType : TCARD8;
      XTestReqType : TCARD8;
      length : TCARD16;
      ack : TCARD32;
      action_list : array[0..(XTestMAX_ACTION_LIST_SIZE)-1] of TCARD8;
    end;

const
  sz_xTestFakeInputReq = XTestMAX_ACTION_LIST_SIZE+8;  



type
  TxTestGetInputReq = record
      reqType : TCARD8;
      XTestReqType : TCARD8;
      length : TCARD16;
      mode : TCARD32;
    end;

const
  sz_xTestGetInputReq = 8;  



type
  TxTestStopInputReq = record
      reqType : TCARD8;
      XTestReqType : TCARD8;
      length : TCARD16;
    end;

const
  sz_xTestStopInputReq = 4;  



type
  TxTestResetReq = record
      reqType : TCARD8;
      XTestReqType : TCARD8;
      length : TCARD16;
    end;

const
  sz_xTestResetReq = 4;  



type
  TxTestQueryInputSizeReq = record
      reqType : TCARD8;
      XTestReqType : TCARD8;
      length : TCARD16;
    end;

const
  sz_xTestQueryInputSizeReq = 4;  



type
  TxTestQueryInputSizeReply = record
      _type : TCARD8;
      pad1 : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      size_return : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;



  TxTestInputActionEvent = record
      _type : TCARD8;
      pad00 : TCARD8;
      sequenceNumber : TCARD16;
      actions : array[0..(XTestACTIONS_SIZE)-1] of TCARD8;
    end;



  TxTestFakeAckEvent = record
      _type : TCARD8;
      pad00 : TCARD8;
      sequenceNumber : TCARD16;
      pad02 : TCARD32;
      pad03 : TCARD32;
      pad04 : TCARD32;
      pad05 : TCARD32;
      pad06 : TCARD32;
      pad07 : TCARD32;
      pad08 : TCARD32;
    end;





  TXTestKeyInfo = record
      header : TCARD8;
      keycode : TCARD8;
      delay_time : TCARD16;
    end;







  TXTestJumpInfo = record
      header : TCARD8;
      pad1 : TCARD8;
      jumpx : TCARD16;
      jumpy : TCARD16;
      delay_time : TCARD16;
    end;





  TXTestMotionInfo = record
      header : TCARD8;
      motion_data : TCARD8;
      delay_time : TCARD16;
    end;






  TXTestDelayInfo = record
      header : TCARD8;
      pad1 : TCARD8;
      pad2 : TCARD16;
      delay_time : TCARD32;
    end;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/ag.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/ag.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/ag.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _AG_H_}
//// {$define _AG_H_}

const
  XAGNAME = 'XC-APPGROUP';  

  XAG_MAJOR_VERSION = 1;  
  XAG_MINOR_VERSION = 0;  
  XagWindowTypeX11 = 0;  
  XagWindowTypeMacintosh = 1;  
  XagWindowTypeWin32 = 2;  
  XagWindowTypeWin16 = 3;  
  XagBadAppGroup = 0;  
  XagNumberErrors = XagBadAppGroup+1;  
  XagNsingleScreen = 7;  
  XagNdefaultRoot = 1;  
  XagNrootVisual = 2;  
  XagNdefaultColormap = 3;  
  XagNblackPixel = 4;  
  XagNwhitePixel = 5;  
  XagNappGroupLeader = 6;  
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/recordproto.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/recordproto.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/recordproto.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _RECORDPROTO_H_}
//// {$define _RECORDPROTO_H_}
//// {$include <X11/extensions/recordconst.h>}




const
  X_RecordQueryVersion = 0;  

  X_RecordCreateContext = 1;  

  X_RecordRegisterClients = 2;  

  X_RecordUnregisterClients = 3;  

  X_RecordGetContext = 4;  

  X_RecordEnableContext = 5;  

  X_RecordDisableContext = 6;  

  X_RecordFreeContext = 7;  
  sz_XRecordRange = 32;  
  sz_XRecordClientInfo = 12;  
  sz_XRecordState = 16;  
  sz_XRecordDatum = 32;  
//// {$define XRecordGlobaldef}
//// (* error 
//// #define XRecordGlobalref extern
in define line 50 *)
      RecordMaxEvent = 128-1;      
      RecordMinDeviceEvent = 2;      
      RecordMaxDeviceEvent = 6;      
      RecordMaxError = 256-1;      
      RecordMaxCoreRequest = 128-1;      
      RecordMaxExtRequest = 256-1;      
      RecordMinExtRequest = 129-1;      
      RECORD_RC = CARD32;      
      RECORD_XIDBASE = CARD32;      
      RECORD_CLIENTSPEC = CARD32;      
      RECORD_ELEMENT_HEADER = CARD8;      
    type
      TRecordClientSpec = TRECORD_CLIENTSPEC;
      TRecordClientSpecPtr = ^TRecordClientSpec;

      TRECORD_RANGE8 = record
          first : TCARD8;
          last : TCARD8;
        end;

      TRECORD_RANGE16 = record
          first : TCARD16;
          last : TCARD16;
        end;

      TRECORD_EXTRANGE = record
          majorCode : TRECORD_RANGE8;
          minorCode : TRECORD_RANGE16;
        end;

      TRECORDRANGE = record
          coreRequests : TRECORD_RANGE8;
          coreReplies : TRECORD_RANGE8;
          extRequests : TRECORD_EXTRANGE;
          extReplies : TRECORD_EXTRANGE;
          deliveredEvents : TRECORD_RANGE8;
          deviceEvents : TRECORD_RANGE8;
          errors : TRECORD_RANGE8;
          clientStarted : TBOOL;
          clientDied : TBOOL;
        end;

    const
      sz_RECORDRANGE = 24;      


    type
      TxRecordRange = record
          coreRequestsFirst : TCARD8;
          coreRequestsLast : TCARD8;
          coreRepliesFirst : TCARD8;
          coreRepliesLast : TCARD8;
          extRequestsMajorFirst : TCARD8;
          extRequestsMajorLast : TCARD8;
          extRequestsMinorFirst : TCARD16;
          extRequestsMinorLast : TCARD16;
          extRepliesMajorFirst : TCARD8;
          extRepliesMajorLast : TCARD8;
          extRepliesMinorFirst : TCARD16;
          extRepliesMinorLast : TCARD16;
          deliveredEventsFirst : TCARD8;
          deliveredEventsLast : TCARD8;
          deviceEventsFirst : TCARD8;
          deviceEventsLast : TCARD8;
          errorsFirst : TCARD8;
          errorsLast : TCARD8;
          clientStarted : TBOOL;
          clientDied : TBOOL;
        end;

    const
      sz_xRecordRange = 24;      

    type
      TRECORD_CLIENT_INFO = record
          clientResource : TRECORD_CLIENTSPEC;
          nRanges : TCARD32;
        end;

      TxRecordClientInfo = TRECORD_CLIENT_INFO;


      TxRecordQueryVersionReq = record
          reqType : TCARD8;
          recordReqType : TCARD8;
          length : TCARD16;
          majorVersion : TCARD16;
          minorVersion : TCARD16;
        end;

    const
      sz_xRecordQueryVersionReq = 8;      
    type
      TxRecordQueryVersionReply = record
          _type : TCARD8;
          pad0 : TCARD8;
          sequenceNumber : TCARD16;
          length : TCARD32;
          majorVersion : TCARD16;
          minorVersion : TCARD16;
          pad1 : TCARD32;
          pad2 : TCARD32;
          pad3 : TCARD32;
          pad4 : TCARD32;
          pad5 : TCARD32;
        end;

    const
      sz_xRecordQueryVersionReply = 32;      



    type
      TxRecordCreateContextReq = record
          reqType : TCARD8;
          recordReqType : TCARD8;
          length : TCARD16;
          context : TRECORD_RC;
          elementHeader : TRECORD_ELEMENT_HEADER;
          pad : TCARD8;
          pad0 : TCARD16;
          nClients : TCARD32;
          nRanges : TCARD32;
        end;

    const
      sz_xRecordCreateContextReq = 20;      



    type
      TxRecordRegisterClientsReq = record
          reqType : TCARD8;
          recordReqType : TCARD8;
          length : TCARD16;
          context : TRECORD_RC;
          elementHeader : TRECORD_ELEMENT_HEADER;
          pad : TCARD8;
          pad0 : TCARD16;
          nClients : TCARD32;
          nRanges : TCARD32;
        end;

    const
      sz_xRecordRegisterClientsReq = 20;      


    type
      TxRecordUnregisterClientsReq = record
          reqType : TCARD8;
          recordReqType : TCARD8;
          length : TCARD16;
          context : TRECORD_RC;
          nClients : TCARD32;
        end;

    const
      sz_xRecordUnregisterClientsReq = 12;      

    type
      TxRecordGetContextReq = record
          reqType : TCARD8;
          recordReqType : TCARD8;
          length : TCARD16;
          context : TRECORD_RC;
        end;

    const
      sz_xRecordGetContextReq = 8;      

    type
      TxRecordGetContextReply = record
          _type : TCARD8;
          enabled : TBOOL;
          sequenceNumber : TCARD16;
          length : TCARD32;
          elementHeader : TRECORD_ELEMENT_HEADER;
          pad : TCARD8;
          pad0 : TCARD16;
          nClients : TCARD32;
          pad1 : TCARD32;
          pad2 : TCARD32;
          pad3 : TCARD32;
          pad4 : TCARD32;
        end;

    const
      sz_xRecordGetContextReply = 32;      

    type
      TxRecordEnableContextReq = record
          reqType : TCARD8;
          recordReqType : TCARD8;
          length : TCARD16;
          context : TRECORD_RC;
        end;

    const
      sz_xRecordEnableContextReq = 8;      

    type
      TxRecordEnableContextReply = record
          _type : TCARD8;
          category : TCARD8;
          sequenceNumber : TCARD16;
          length : TCARD32;
          elementHeader : TRECORD_ELEMENT_HEADER;
          clientSwapped : TBOOL;
          pad1 : TCARD16;
          idBase : TRECORD_XIDBASE;
          serverTime : TCARD32;
          recordedSequenceNumber : TCARD32;
          pad3 : TCARD32;
          pad4 : TCARD32;
        end;

    const
      sz_xRecordEnableContextReply = 32;      

    type
      TxRecordDisableContextReq = record
          reqType : TCARD8;
          recordReqType : TCARD8;
          length : TCARD16;
          context : TRECORD_RC;
        end;

    const
      sz_xRecordDisableContextReq = 8;      

    type
      TxRecordFreeContextReq = record
          reqType : TCARD8;
          recordReqType : TCARD8;
          length : TCARD16;
          context : TRECORD_RC;
        end;

    const
      sz_xRecordFreeContextReq = 8;      
//// {$undef RECORD_RC}
//// {$undef RECORD_XIDBASE}
//// {$undef RECORD_ELEMENT_HEADER}
//// {$undef RECORD_CLIENTSPEC}
//// {$endif}

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/MITMisc.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/MITMisc.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/MITMisc.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

Type
PDisplay  = ^Display;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XMITMISC_H_}
//// {$define _XMITMISC_H_}
//// {$include <X11/Xfuncproto.h>}
//// {$include <X11/extensions/mitmiscconst.h>}
//// (* error 
//// Bool XMITMiscQueryExtension(
//// (* error 
////     int*		/* event_basep */,
//// (* error 
////     int*		/* error_basep */

 in declarator_list *)
 in declarator_list *)
 in declarator_list *)


function XMITMiscSetBugMode(_para1:PTDisplay; _para2:TBool):TStatus;cdecl;external;

function XMITMiscGetBugMode(_para1:PTDisplay):TBool;cdecl;external;
//// {$endif}
//// (* error 
//// #endif

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/Xxf86dga.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/Xxf86dga.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/Xxf86dga.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    PDisplay  = ^Display;
    Plongint  = ^longint;
    PXDGADevice  = ^XDGADevice;
    PXDGAKeyEvent  = ^XDGAKeyEvent;
    PXKeyEvent  = ^XKeyEvent;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XF86DGA_H_}
//// {$define _XF86DGA_H_}
//// {$include <X11/Xfuncproto.h>}
//// {$include <X11/extensions/xf86dgaconst.h>}
//// {$include <X11/extensions/xf86dga1.h>}
//// (* error 
//// typedef struct {
in declaration at line 15 *)
      var
        serial : dword;cvar;public;
        display : ^TDisplay;cvar;public;
        screen : longint;cvar;public;
        time : TTime;cvar;public;
        state : dword;cvar;public;
        button : dword;cvar;public;
//// (* error 
//// } XDGAButtonEvent;
in declaration at line 22 *)
    type
      TXDGAKeyEvent = record
          _type : longint;
          serial : dword;
          display : ^TDisplay;
          screen : longint;
          time : TTime;
          state : dword;
          keycode : dword;
        end;

      TXDGAMotionEvent = record
          _type : longint;
          serial : dword;
          display : ^TDisplay;
          screen : longint;
          time : TTime;
          state : dword;
          dx : longint;
          dy : longint;
        end;

      TXDGAEvent = record
          case longint of
            0 : ( _type : longint );
            1 : ( xbutton : TXDGAButtonEvent );
            2 : ( xkey : TXDGAKeyEvent );
            3 : ( xmotion : TXDGAMotionEvent );
            4 : ( pad : array[0..23] of longint );
          end;

function XDGAQueryExtension(dpy:PTDisplay; eventBase:Plongint; erroBase:Plongint):TBool;cdecl;external;
function XDGAQueryVersion(dpy:PTDisplay; majorVersion:Plongint; minorVersion:Plongint):TBool;cdecl;external;
function XDGAQueryModes(dpy:PTDisplay; screen:longint; num:Plongint):^TXDGAMode;cdecl;external;
function XDGASetMode(dpy:PTDisplay; screen:longint; mode:longint):^TXDGADevice;cdecl;external;
function XDGAOpenFramebuffer(dpy:PTDisplay; screen:longint):TBool;cdecl;external;
procedure XDGACloseFramebuffer(dpy:PTDisplay; screen:longint);cdecl;external;
procedure XDGASetViewport(dpy:PTDisplay; screen:longint; x:longint; y:longint; flags:longint);cdecl;external;
procedure XDGAInstallColormap(dpy:PTDisplay; screen:longint; cmap:TColormap);cdecl;external;
function XDGACreateColormap(dpy:PTDisplay; screen:longint; device:PTXDGADevice; alloc:longint):TColormap;cdecl;external;
procedure XDGASelectInput(dpy:PTDisplay; screen:longint; event_mask:longint);cdecl;external;
procedure XDGAFillRectangle(dpy:PTDisplay; screen:longint; x:longint; y:longint; width:dword; 
                height:dword; color:dword);cdecl;external;
procedure XDGACopyArea(dpy:PTDisplay; screen:longint; srcx:longint; srcy:longint; width:dword; 
                height:dword; dstx:longint; dsty:longint);cdecl;external;
procedure XDGACopyTransparentArea(dpy:PTDisplay; screen:longint; srcx:longint; srcy:longint; width:dword; 
                height:dword; dstx:longint; dsty:longint; key:dword);cdecl;external;
function XDGAGetViewportStatus(dpy:PTDisplay; screen:longint):longint;cdecl;external;
procedure XDGASync(dpy:PTDisplay; screen:longint);cdecl;external;
function XDGASetClientVersion(dpy:PTDisplay):TBool;cdecl;external;
procedure XDGAChangePixmapMode(dpy:PTDisplay; screen:longint; x:Plongint; y:Plongint; mode:longint);cdecl;external;
procedure XDGAKeyEventToXKeyEvent(dk:PTXDGAKeyEvent; xk:PTXKeyEvent);cdecl;external;
//// {$endif}

//// (* error 
//// #endif /* _XF86DGA_H_ */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/record.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/record.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/record.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

Type
PDisplay  = ^Display;
Plongint  = ^longint;
PXRecordClientSpec  = ^XRecordClientSpec;
PXRecordInterceptData  = ^XRecordInterceptData;
PXRecordRange  = ^XRecordRange;
PXRecordState  = ^XRecordState;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _RECORD_H_}
//// {$define _RECORD_H_}
//// {$include <X11/extensions/recordconst.h>}
type
  TXRecordClientSpec = dword;

  TXRecordContext = dword;

  TXRecordRange8 = record
      first : byte;
      last : byte;
    end;

  TXRecordRange16 = record
      first : word;
      last : word;
    end;

  TXRecordExtRange = record
      ext_major : TXRecordRange8;
      ext_minor : TXRecordRange16;
    end;










  TXRecordRange = record
      core_requests : TXRecordRange8;
      core_replies : TXRecordRange8;
      ext_requests : TXRecordExtRange;
      ext_replies : TXRecordExtRange;
      delivered_events : TXRecordRange8;
      device_events : TXRecordRange8;
      errors : TXRecordRange8;
      client_started : TBool;
      client_died : TBool;
    end;

  TXRecordClientInfo = record
      client : TXRecordClientSpec;
      nranges : dword;
      ranges : ^^TXRecordRange;
    end;

  TXRecordState = record
      enabled : TBool;
      datum_flags : longint;
      nclients : dword;
      client_info : ^^TXRecordClientInfo;
    end;


  TXRecordInterceptData = record
      id_base : TXID;
      server_time : TTime;
      client_seq : dword;
      category : longint;
      client_swapped : TBool;
      data : ^byte;
      data_len : dword;
    end;

//// (* error 
//// XID XRecordIdBaseMask(
 in declarator_list *)


function XRecordQueryVersion(_para1:PTDisplay; _para2:Plongint; _para3:Plongint):TStatus;cdecl;external;

function XRecordCreateContext(_para1:PTDisplay; _para2:longint; _para3:PTXRecordClientSpec; _para4:longint; _para5:PPTXRecordRange; 
           _para6:longint):TXRecordContext;cdecl;external;
function XRecordAllocRange:^TXRecordRange;cdecl;external;

function XRecordRegisterClients(_para1:PTDisplay; _para2:TXRecordContext; _para3:longint; _para4:PTXRecordClientSpec; _para5:longint; 
           _para6:PPTXRecordRange; _para7:longint):TStatus;cdecl;external;

function XRecordUnregisterClients(_para1:PTDisplay; _para2:TXRecordContext; _para3:PTXRecordClientSpec; _para4:longint):TStatus;cdecl;external;

function XRecordGetContext(_para1:PTDisplay; _para2:TXRecordContext; _para3:PPTXRecordState):TStatus;cdecl;external;

procedure XRecordFreeState(_para1:PTXRecordState);cdecl;external;

type

  TXRecordInterceptProc = procedure (_para1:TXPointer; _para2:PTXRecordInterceptData);cdecl;


function XRecordEnableContext(_para1:PTDisplay; _para2:TXRecordContext; _para3:TXRecordInterceptProc; _para4:TXPointer):TStatus;cdecl;external;

function XRecordEnableContextAsync(_para1:PTDisplay; _para2:TXRecordContext; _para3:TXRecordInterceptProc; _para4:TXPointer):TStatus;cdecl;external;

procedure XRecordProcessReplies(_para1:PTDisplay);cdecl;external;

procedure XRecordFreeData(_para1:PTXRecordInterceptData);cdecl;external;

function XRecordDisableContext(_para1:PTDisplay; _para2:TXRecordContext):TStatus;cdecl;external;

function XRecordFreeContext(_para1:PTDisplay; _para2:TXRecordContext):TStatus;cdecl;external;
//// {$endif}
//// (* error 
//// #endif

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/geproto.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/geproto.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/geproto.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _GEPROTO_H_}
//// {$define _GEPROTO_H_}
//// {$include<X11/Xproto.h>}
//// {$include<X11/X.h>}
//// {$include<X11/extensions/ge.h>}


const
  X_GEGetExtensionVersion = 1;  


type
  TxGEReq = record
      reqType : TCARD8;
      ReqType : TCARD8;
      length : TCARD16;
    end;




  TxGEQueryVersionReq = record
      reqType : TCARD8;
      ReqType : TCARD8;
      length : TCARD16;
      majorVersion : TCARD16;
      minorVersion : TCARD16;
    end;

const
  sz_xGEQueryVersionReq = 8;  


type
  TxGEQueryVersionReply = record
      repType : TCARD8;
      RepType : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      majorVersion : TCARD16;
      minorVersion : TCARD16;
      pad00 : TCARD32;
      pad01 : TCARD32;
      pad02 : TCARD32;
      pad03 : TCARD32;
      pad04 : TCARD32;
    end;

const
  sz_xGEQueryVersionReply = 32;  
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/shapeproto.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/shapeproto.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/shapeproto.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _SHAPEPROTO_H_}
//// {$define _SHAPEPROTO_H_}
//// {$include <X11/extensions/shapeconst.h>}


const
  Window = CARD32;  
  Time = CARD32;  
  X_ShapeQueryVersion = 0;  
  X_ShapeRectangles = 1;  
  X_ShapeMask = 2;  
  X_ShapeCombine = 3;  
  X_ShapeOffset = 4;  
  X_ShapeQueryExtents = 5;  
  X_ShapeSelectInput = 6;  
  X_ShapeInputSelected = 7;  
  X_ShapeGetRectangles = 8;  


type
  T_ShapeQueryVersion = record
      reqType : TCARD8;
      shapeReqType : TCARD8;
      length : TCARD16;
    end;
  TxShapeQueryVersionReq = T_ShapeQueryVersion;

const
  sz_xShapeQueryVersionReq = 4;  




type
  TxShapeQueryVersionReply = record
      _type : TBYTE;
      unused : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      majorVersion : TCARD16;
      minorVersion : TCARD16;
      pad0 : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
    end;

const
  sz_xShapeQueryVersionReply = 32;  






type
  T_ShapeRectangles = record
      reqType : TCARD8;
      shapeReqType : TCARD8;
      length : TCARD16;
      op : TCARD8;
      destKind : TCARD8;
      ordering : TCARD8;
      pad0 : TCARD8;
      dest : TWindow;
      xOff : TINT16;
      yOff : TINT16;
    end;
  TxShapeRectanglesReq = T_ShapeRectangles;


const
  sz_xShapeRectanglesReq = 16;  






type
  T_ShapeMask = record
      reqType : TCARD8;
      shapeReqType : TCARD8;
      length : TCARD16;
      op : TCARD8;
      destKind : TCARD8;
      junk : TCARD16;
      dest : TWindow;
      xOff : TINT16;
      yOff : TINT16;
      src : TCARD32;
    end;
  TxShapeMaskReq = T_ShapeMask;

const
  sz_xShapeMaskReq = 20;  






type
  T_ShapeCombine = record
      reqType : TCARD8;
      shapeReqType : TCARD8;
      length : TCARD16;
      op : TCARD8;
      destKind : TCARD8;
      srcKind : TCARD8;
      junk : TCARD8;
      dest : TWindow;
      xOff : TINT16;
      yOff : TINT16;
      src : TWindow;
    end;
  TxShapeCombineReq = T_ShapeCombine;

const
  sz_xShapeCombineReq = 20;  





type
  T_ShapeOffset = record
      reqType : TCARD8;
      shapeReqType : TCARD8;
      length : TCARD16;
      destKind : TCARD8;
      junk1 : TCARD8;
      junk2 : TCARD16;
      dest : TWindow;
      xOff : TINT16;
      yOff : TINT16;
    end;
  TxShapeOffsetReq = T_ShapeOffset;

const
  sz_xShapeOffsetReq = 16;  


type
  T_ShapeQueryExtents = record
      reqType : TCARD8;
      shapeReqType : TCARD8;
      length : TCARD16;
      window : TWindow;
    end;
  TxShapeQueryExtentsReq = T_ShapeQueryExtents;

const
  sz_xShapeQueryExtentsReq = 8;  







type
  TxShapeQueryExtentsReply = record
      _type : TBYTE;
      unused : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      boundingShaped : TCARD8;
      clipShaped : TCARD8;
      unused1 : TCARD16;
      xBoundingShape : TINT16;
      yBoundingShape : TINT16;
      widthBoundingShape : TCARD16;
      heightBoundingShape : TCARD16;
      xClipShape : TINT16;
      yClipShape : TINT16;
      widthClipShape : TCARD16;
      heightClipShape : TCARD16;
      pad1 : TCARD32;
    end;

const
  sz_xShapeQueryExtentsReply = 32;  



type
  T_ShapeSelectInput = record
      reqType : TCARD8;
      shapeReqType : TCARD8;
      length : TCARD16;
      window : TWindow;
      enable : TBYTE;
      pad1 : TBYTE;
      pad2 : TCARD16;
    end;
  TxShapeSelectInputReq = T_ShapeSelectInput;

const
  sz_xShapeSelectInputReq = 12;  





type
  T_ShapeNotify = record
      _type : TBYTE;
      kind : TBYTE;
      sequenceNumber : TCARD16;
      window : TWindow;
      x : TINT16;
      y : TINT16;
      width : TCARD16;
      height : TCARD16;
      time : TTime;
      shaped : TBYTE;
      pad0 : TBYTE;
      pad1 : TCARD16;
      pad2 : TCARD32;
      pad3 : TCARD32;
    end;
  TxShapeNotifyEvent = T_ShapeNotify;

const
  sz_xShapeNotifyEvent = 32;  


type
  T_ShapeInputSelected = record
      reqType : TCARD8;
      shapeReqType : TCARD8;
      length : TCARD16;
      window : TWindow;
    end;
  TxShapeInputSelectedReq = T_ShapeInputSelected;

const
  sz_xShapeInputSelectedReq = 8;  




type
  TxShapeInputSelectedReply = record
      _type : TBYTE;
      enabled : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;

const
  sz_xShapeInputSelectedReply = 32;  



type
  T_ShapeGetRectangles = record
      reqType : TCARD8;
      shapeReqType : TCARD8;
      length : TCARD16;
      window : TWindow;
      kind : TCARD8;
      junk1 : TCARD8;
      junk2 : TCARD16;
    end;
  TxShapeGetRectanglesReq = T_ShapeGetRectangles;

const
  sz_xShapeGetRectanglesReq = 12;  




type
  TxShapeGetRectanglesReply = record
      _type : TBYTE;
      ordering : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      nrects : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;


const
  sz_xShapeGetRectanglesReply = 32;  
//// {$undef Window}
//// {$undef Time}
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/renderproto.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/renderproto.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/renderproto.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XRENDERP_H_}
//// {$define _XRENDERP_H_}
//// {$include <X11/Xmd.h>}
//// {$include <X11/extensions/render.h>}

const
  Window = CARD32;  
  Drawable = CARD32;  
  Font = CARD32;  
  Pixmap = CARD32;  
  Cursor = CARD32;  
  Colormap = CARD32;  
  GContext = CARD32;  
  Atom = CARD32;  
  VisualID = CARD32;  
  Time = CARD32;  
  KeyCode = CARD8;  
  KeySym = CARD32;  
  Picture = CARD32;  
  PictFormat = CARD32;  
  Fixed = INT32;  
  Glyphset = CARD32;  

type
  TxDirectFormat = record
      red : TCARD16;
      redMask : TCARD16;
      green : TCARD16;
      greenMask : TCARD16;
      blue : TCARD16;
      blueMask : TCARD16;
      alpha : TCARD16;
      alphaMask : TCARD16;
    end;

const
  sz_xDirectFormat = 16;  
type
  TxPictFormInfo = record
      id : TPictFormat;
      _type : TCARD8;
      depth : TCARD8;
      pad1 : TCARD16;
      direct : TxDirectFormat;
      colormap : TColormap;
    end;

const
  sz_xPictFormInfo = 28;  
type
  TxPictVisual = record
      visual : TVisualID;
      format : TPictFormat;
    end;

const
  sz_xPictVisual = 8;  
type
  TxPictDepth = record
      depth : TCARD8;
      pad1 : TCARD8;
      nPictVisuals : TCARD16;
      pad2 : TCARD32;
    end;

const
  sz_xPictDepth = 8;  
type
  TxPictScreen = record
      nDepth : TCARD32;
      fallback : TPictFormat;
    end;

const
  sz_xPictScreen = 8;  
type
  TxIndexValue = record
      pixel : TCARD32;
      red : TCARD16;
      green : TCARD16;
      blue : TCARD16;
      alpha : TCARD16;
    end;

const
  sz_xIndexValue = 12;  
type
  TxRenderColor = record
      red : TCARD16;
      green : TCARD16;
      blue : TCARD16;
      alpha : TCARD16;
    end;

const
  sz_xRenderColor = 8;  
type
  TxPointFixed = record
      x : TFixed;
      y : TFixed;
    end;

const
  sz_xPointFixed = 8;  
type
  TxLineFixed = record
      p1 : TxPointFixed;
      p2 : TxPointFixed;
    end;

const
  sz_xLineFixed = 16;  
type
  TxTriangle = record
      p1 : TxPointFixed;
      p2 : TxPointFixed;
      p3 : TxPointFixed;
    end;

const
  sz_xTriangle = 24;  
type
  TxTrapezoid = record
      top : TFixed;
      bottom : TFixed;
      left : TxLineFixed;
      right : TxLineFixed;
    end;

const
  sz_xTrapezoid = 40;  
type
  TxGlyphInfo = record
      width : TCARD16;
      height : TCARD16;
      x : TINT16;
      y : TINT16;
      xOff : TINT16;
      yOff : TINT16;
    end;

const
  sz_xGlyphInfo = 12;  
type
  TxGlyphElt = record
      len : TCARD8;
      pad1 : TCARD8;
      pad2 : TCARD16;
      deltax : TINT16;
      deltay : TINT16;
    end;

const
  sz_xGlyphElt = 8;  
type
  TxSpanFix = record
      l : TFixed;
      r : TFixed;
      y : TFixed;
    end;

const
  sz_xSpanFix = 12;  
type
  TxTrap = record
      top : TxSpanFix;
      bot : TxSpanFix;
    end;

const
  sz_xTrap = 24;  

type
  TxRenderQueryVersionReq = record
      reqType : TCARD8;
      renderReqType : TCARD8;
      length : TCARD16;
      majorVersion : TCARD32;
      minorVersion : TCARD32;
    end;

const
  sz_xRenderQueryVersionReq = 12;  

type
  TxRenderQueryVersionReply = record
      _type : TBYTE;
      pad1 : TBYTE;
      sequenceNumber : TCARD16;
      length : TCARD32;
      majorVersion : TCARD32;
      minorVersion : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_xRenderQueryVersionReply = 32;  
type
  TxRenderQueryPictFormatsReq = record
      reqType : TCARD8;
      renderReqType : TCARD8;
      length : TCARD16;
    end;

const
  sz_xRenderQueryPictFormatsReq = 4;  


type
  TxRenderQueryPictFormatsReply = record
      _type : TBYTE;
      pad1 : TBYTE;
      sequenceNumber : TCARD16;
      length : TCARD32;
      numFormats : TCARD32;
      numScreens : TCARD32;
      numDepths : TCARD32;
      numVisuals : TCARD32;
      numSubpixel : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_xRenderQueryPictFormatsReply = 32;  
type
  TxRenderQueryPictIndexValuesReq = record
      reqType : TCARD8;
      renderReqType : TCARD8;
      length : TCARD16;
      format : TPictFormat;
    end;

const
  sz_xRenderQueryPictIndexValuesReq = 8;  

type
  TxRenderQueryPictIndexValuesReply = record
      _type : TBYTE;
      pad1 : TBYTE;
      sequenceNumber : TCARD16;
      length : TCARD32;
      numIndexValues : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;

const
  sz_xRenderQueryPictIndexValuesReply = 32;  
type
  TxRenderCreatePictureReq = record
      reqType : TCARD8;
      renderReqType : TCARD8;
      length : TCARD16;
      pid : TPicture;
      drawable : TDrawable;
      format : TPictFormat;
      mask : TCARD32;
    end;

const
  sz_xRenderCreatePictureReq = 20;  
type
  TxRenderChangePictureReq = record
      reqType : TCARD8;
      renderReqType : TCARD8;
      length : TCARD16;
      picture : TPicture;
      mask : TCARD32;
    end;

const
  sz_xRenderChangePictureReq = 12;  
type
  TxRenderSetPictureClipRectanglesReq = record
      reqType : TCARD8;
      renderReqType : TCARD8;
      length : TCARD16;
      picture : TPicture;
      xOrigin : TINT16;
      yOrigin : TINT16;
    end;

const
  sz_xRenderSetPictureClipRectanglesReq = 12;  
type
  TxRenderFreePictureReq = record
      reqType : TCARD8;
      renderReqType : TCARD8;
      length : TCARD16;
      picture : TPicture;
    end;

const
  sz_xRenderFreePictureReq = 8;  
type
  TxRenderCompositeReq = record
      reqType : TCARD8;
      renderReqType : TCARD8;
      length : TCARD16;
      op : TCARD8;
      pad1 : TCARD8;
      pad2 : TCARD16;
      src : TPicture;
      mask : TPicture;
      dst : TPicture;
      xSrc : TINT16;
      ySrc : TINT16;
      xMask : TINT16;
      yMask : TINT16;
      xDst : TINT16;
      yDst : TINT16;
      width : TCARD16;
      height : TCARD16;
    end;

const
  sz_xRenderCompositeReq = 36;  
type
  TxRenderScaleReq = record
      reqType : TCARD8;
      renderReqType : TCARD8;
      length : TCARD16;
      src : TPicture;
      dst : TPicture;
      colorScale : TCARD32;
      alphaScale : TCARD32;
      xSrc : TINT16;
      ySrc : TINT16;
      xDst : TINT16;
      yDst : TINT16;
      width : TCARD16;
      height : TCARD16;
    end;

const
  sz_xRenderScaleReq = 32;  
type
  TxRenderTrapezoidsReq = record
      reqType : TCARD8;
      renderReqType : TCARD8;
      length : TCARD16;
      op : TCARD8;
      pad1 : TCARD8;
      pad2 : TCARD16;
      src : TPicture;
      dst : TPicture;
      maskFormat : TPictFormat;
      xSrc : TINT16;
      ySrc : TINT16;
    end;

const
  sz_xRenderTrapezoidsReq = 24;  
type
  TxRenderTrianglesReq = record
      reqType : TCARD8;
      renderReqType : TCARD8;
      length : TCARD16;
      op : TCARD8;
      pad1 : TCARD8;
      pad2 : TCARD16;
      src : TPicture;
      dst : TPicture;
      maskFormat : TPictFormat;
      xSrc : TINT16;
      ySrc : TINT16;
    end;

const
  sz_xRenderTrianglesReq = 24;  
type
  TxRenderTriStripReq = record
      reqType : TCARD8;
      renderReqType : TCARD8;
      length : TCARD16;
      op : TCARD8;
      pad1 : TCARD8;
      pad2 : TCARD16;
      src : TPicture;
      dst : TPicture;
      maskFormat : TPictFormat;
      xSrc : TINT16;
      ySrc : TINT16;
    end;

const
  sz_xRenderTriStripReq = 24;  
type
  TxRenderTriFanReq = record
      reqType : TCARD8;
      renderReqType : TCARD8;
      length : TCARD16;
      op : TCARD8;
      pad1 : TCARD8;
      pad2 : TCARD16;
      src : TPicture;
      dst : TPicture;
      maskFormat : TPictFormat;
      xSrc : TINT16;
      ySrc : TINT16;
    end;

const
  sz_xRenderTriFanReq = 24;  
type
  TxRenderCreateGlyphSetReq = record
      reqType : TCARD8;
      renderReqType : TCARD8;
      length : TCARD16;
      gsid : TGlyphset;
      format : TPictFormat;
    end;

const
  sz_xRenderCreateGlyphSetReq = 12;  
type
  TxRenderReferenceGlyphSetReq = record
      reqType : TCARD8;
      renderReqType : TCARD8;
      length : TCARD16;
      gsid : TGlyphset;
      existing : TGlyphset;
    end;

const
  sz_xRenderReferenceGlyphSetReq = 24;  
type
  TxRenderFreeGlyphSetReq = record
      reqType : TCARD8;
      renderReqType : TCARD8;
      length : TCARD16;
      glyphset : TGlyphset;
    end;

const
  sz_xRenderFreeGlyphSetReq = 8;  
type
  TxRenderAddGlyphsReq = record
      reqType : TCARD8;
      renderReqType : TCARD8;
      length : TCARD16;
      glyphset : TGlyphset;
      nglyphs : TCARD32;
    end;

const
  sz_xRenderAddGlyphsReq = 12;  
type
  TxRenderFreeGlyphsReq = record
      reqType : TCARD8;
      renderReqType : TCARD8;
      length : TCARD16;
      glyphset : TGlyphset;
    end;

const
  sz_xRenderFreeGlyphsReq = 8;  
type
  TxRenderCompositeGlyphsReq = record
      reqType : TCARD8;
      renderReqType : TCARD8;
      length : TCARD16;
      op : TCARD8;
      pad1 : TCARD8;
      pad2 : TCARD16;
      src : TPicture;
      dst : TPicture;
      maskFormat : TPictFormat;
      glyphset : TGlyphset;
      xSrc : TINT16;
      ySrc : TINT16;
    end;
  TxRenderCompositeGlyphs8Req = TxRenderCompositeGlyphsReq;
  TxRenderCompositeGlyphs16Req = TxRenderCompositeGlyphsReq;
  TxRenderCompositeGlyphs32Req = TxRenderCompositeGlyphsReq;

const
  sz_xRenderCompositeGlyphs8Req = 28;  
  sz_xRenderCompositeGlyphs16Req = 28;  
  sz_xRenderCompositeGlyphs32Req = 28;  

type
  TxRenderFillRectanglesReq = record
      reqType : TCARD8;
      renderReqType : TCARD8;
      length : TCARD16;
      op : TCARD8;
      pad1 : TCARD8;
      pad2 : TCARD16;
      dst : TPicture;
      color : TxRenderColor;
    end;

const
  sz_xRenderFillRectanglesReq = 20;  

type
  TxRenderCreateCursorReq = record
      reqType : TCARD8;
      renderReqType : TCARD8;
      length : TCARD16;
      cid : TCursor;
      src : TPicture;
      x : TCARD16;
      y : TCARD16;
    end;

const
  sz_xRenderCreateCursorReq = 16;  


type
  TxRenderTransform = record
      matrix11 : TFixed;
      matrix12 : TFixed;
      matrix13 : TFixed;
      matrix21 : TFixed;
      matrix22 : TFixed;
      matrix23 : TFixed;
      matrix31 : TFixed;
      matrix32 : TFixed;
      matrix33 : TFixed;
    end;

const
  sz_xRenderTransform = 36;  
type
  TxRenderSetPictureTransformReq = record
      reqType : TCARD8;
      renderReqType : TCARD8;
      length : TCARD16;
      picture : TPicture;
      transform : TxRenderTransform;
    end;

const
  sz_xRenderSetPictureTransformReq = 44;  
type
  TxRenderQueryFiltersReq = record
      reqType : TCARD8;
      renderReqType : TCARD8;
      length : TCARD16;
      drawable : TDrawable;
    end;

const
  sz_xRenderQueryFiltersReq = 8;  



type
  TxRenderQueryFiltersReply = record
      _type : TBYTE;
      pad1 : TBYTE;
      sequenceNumber : TCARD16;
      length : TCARD32;
      numAliases : TCARD32;
      numFilters : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_xRenderQueryFiltersReply = 32;  

type
  TxRenderSetPictureFilterReq = record
      reqType : TCARD8;
      renderReqType : TCARD8;
      length : TCARD16;
      picture : TPicture;
      nbytes : TCARD16;
      pad : TCARD16;
    end;

const
  sz_xRenderSetPictureFilterReq = 12;  

type
  TxAnimCursorElt = record
      cursor : TCursor;
      delay : TCARD32;
    end;

const
  sz_xAnimCursorElt = 8;  
type
  TxRenderCreateAnimCursorReq = record
      reqType : TCARD8;
      renderReqType : TCARD8;
      length : TCARD16;
      cid : TCursor;
    end;

const
  sz_xRenderCreateAnimCursorReq = 8;  

type
  TxRenderAddTrapsReq = record
      reqType : TCARD8;
      renderReqType : TCARD8;
      length : TCARD16;
      picture : TPicture;
      xOff : TINT16;
      yOff : TINT16;
    end;

const
  sz_xRenderAddTrapsReq = 12;  

type
  TxRenderCreateSolidFillReq = record
      reqType : TCARD8;
      renderReqType : TCARD8;
      length : TCARD16;
      pid : TPicture;
      color : TxRenderColor;
    end;

const
  sz_xRenderCreateSolidFillReq = 16;  
type
  TxRenderCreateLinearGradientReq = record
      reqType : TCARD8;
      renderReqType : TCARD8;
      length : TCARD16;
      pid : TPicture;
      p1 : TxPointFixed;
      p2 : TxPointFixed;
      nStops : TCARD32;
    end;

const
  sz_xRenderCreateLinearGradientReq = 28;  
type
  TxRenderCreateRadialGradientReq = record
      reqType : TCARD8;
      renderReqType : TCARD8;
      length : TCARD16;
      pid : TPicture;
      inner : TxPointFixed;
      outer : TxPointFixed;
      inner_radius : TFixed;
      outer_radius : TFixed;
      nStops : TCARD32;
    end;

const
  sz_xRenderCreateRadialGradientReq = 36;  

type
  TxRenderCreateConicalGradientReq = record
      reqType : TCARD8;
      renderReqType : TCARD8;
      length : TCARD16;
      pid : TPicture;
      center : TxPointFixed;
      angle : TFixed;
      nStops : TCARD32;
    end;

const
  sz_xRenderCreateConicalGradientReq = 24;  
//// {$undef Window}
//// {$undef Drawable}
//// {$undef Font}
//// {$undef Pixmap}
//// {$undef Cursor}
//// {$undef Colormap}
//// {$undef GContext}
//// {$undef Atom}
//// {$undef VisualID}
//// {$undef Time}
//// {$undef KeyCode}
//// {$undef KeySym}
//// {$undef Picture}
//// {$undef PictFormat}
//// {$undef Fixed}
//// {$undef Glyphset}
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/xtestext1const.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/xtestext1const.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/xtestext1const.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XTESTEXT1CONST_H}

const
  _XTESTEXT1CONST_H = 1;  
  XTestMAX_ACTION_LIST_SIZE = 64;  
  XTestACTIONS_SIZE = 28;  

//// (* error 
//// #define XTestPRESS                      1 << 0
in define line 64 *)
//// (* error 
//// #define XTestRELEASE                    1 << 1
in define line 65 *)
//// (* error 
//// #define XTestSTROKE                     1 << 2
in define line 66 *)

      XTestSTROKE_DELAY_TIME = 10;      

//// (* error 
//// #define XTestEXCLUSIVE                  1 << 0
in define line 79 *)
//// (* error 
//// #define XTestPACKED_ACTIONS             1 << 1
in define line 80 *)
//// (* error 
//// #define XTestPACKED_MOTION              1 << 2
in define line 81 *)

      XTestFAKE_ACK_NOT_NEEDED = 0;      
      XTestFAKE_ACK_REQUEST = 1;      

      XTestEXTENSION_NAME = 'XTestExtension1';      
      XTestEVENT_COUNT = 2;      


      XTestACTION_TYPE_MASK = $03;      

      XTestKEY_STATE_MASK = $04;      

      XTestX_SIGN_BIT_MASK = $04;      

      XTestY_SIGN_BIT_MASK = $08;      

      XTestDEVICE_ID_MASK = $f0;      
      XTestMAX_DEVICE_ID = $0f;      

    function XTestPackDeviceID(x : longint) : longint;    

    function XTestUnpackDeviceID(x : longint) : longint;    


    const
      XTestDELAY_ACTION = 0;      
      XTestKEY_ACTION = 1;      
      XTestMOTION_ACTION = 2;      
      XTestJUMP_ACTION = 3;      

      XTestKEY_UP = $04;      
      XTestKEY_DOWN = $00;      

      XTestMOTION_MAX = 15;      
      XTestMOTION_MIN = -(15);      
      XTestX_NEGATIVE = $04;      
      XTestY_NEGATIVE = $08;      
      XTestX_MOTION_MASK = $0f;      
      XTestY_MOTION_MASK = $f0;      

    function XTestPackXMotionValue(x : longint) : Tx;    

    function XTestPackYMotionValue(x : longint) : longint;    

    function XTestUnpackXMotionValue(x : longint) : Tx;    

    function XTestUnpackYMotionValue(x : longint) : longint;    


    const
      XTestSHORT_DELAY_TIME = $ffff;      
      XTestDELAY_DEVICE_ID = $0f;      
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/syncproto.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/syncproto.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/syncproto.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _SYNCPROTO_H_}
//// {$define _SYNCPROTO_H_}
//// {$include <X11/extensions/syncconst.h>}

const
  X_SyncInitialize = 0;  
  X_SyncListSystemCounters = 1;  
  X_SyncCreateCounter = 2;  
  X_SyncSetCounter = 3;  
  X_SyncChangeCounter = 4;  
  X_SyncQueryCounter = 5;  
  X_SyncDestroyCounter = 6;  
  X_SyncAwait = 7;  
  X_SyncCreateAlarm = 8;  
  X_SyncChangeAlarm = 9;  
  X_SyncQueryAlarm = 10;  
  X_SyncDestroyAlarm = 11;  
  X_SyncSetPriority = 12;  
  X_SyncGetPriority = 13;  
  X_SyncCreateFence = 14;  
  X_SyncTriggerFence = 15;  
  X_SyncResetFence = 16;  
  X_SyncDestroyFence = 17;  
  X_SyncQueryFence = 18;  
  X_SyncAwaitFence = 19;  

  XSyncCounter = CARD32;  
  XSyncAlarm = CARD32;  
  XSyncFence = CARD32;  
  Drawable = CARD32;  

type
  T_xSyncInitialize = record
      reqType : TCARD8;
      syncReqType : TCARD8;
      length : TCARD16;
      majorVersion : TCARD8;
      minorVersion : TCARD8;
      pad : TCARD16;
    end;
  TxSyncInitializeReq = T_xSyncInitialize;

const
  sz_xSyncInitializeReq = 8;  
type
  TxSyncInitializeReply = record
      _type : TBYTE;
      unused : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      majorVersion : TCARD8;
      minorVersion : TCARD8;
      pad : TCARD16;
      pad0 : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
    end;

const
  sz_xSyncInitializeReply = 32;  

type
  T_xSyncListSystemCounters = record
      reqType : TCARD8;
      syncReqType : TCARD8;
      length : TCARD16;
    end;
  TxSyncListSystemCountersReq = T_xSyncListSystemCounters;

const
  sz_xSyncListSystemCountersReq = 4;  
type
  TxSyncListSystemCountersReply = record
      _type : TBYTE;
      unused : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      nCounters : TINT32;
      pad0 : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
    end;

const
  sz_xSyncListSystemCountersReply = 32;  
type
  TxSyncSystemCounter = record
      counter : TXSyncCounter;
      resolution_hi : TINT32;
      resolution_lo : TCARD32;
      name_length : TCARD16;
    end;

const
  sz_xSyncSystemCounter = 14;  

type
  T_xSyncCreateCounterReq = record
      reqType : TCARD8;
      syncReqType : TCARD8;
      length : TCARD16;
      cid : TXSyncCounter;
      initial_value_hi : TINT32;
      initial_value_lo : TCARD32;
    end;
  TxSyncCreateCounterReq = T_xSyncCreateCounterReq;

const
  sz_xSyncCreateCounterReq = 16;  

type
  T_xSyncChangeCounterReq = record
      reqType : TCARD8;
      syncReqType : TCARD8;
      length : TCARD16;
      cid : TXSyncCounter;
      value_hi : TINT32;
      value_lo : TCARD32;
    end;
  TxSyncChangeCounterReq = T_xSyncChangeCounterReq;

const
  sz_xSyncChangeCounterReq = 16;  

type
  T_xSyncSetCounterReq = record
      reqType : TCARD8;
      syncReqType : TCARD8;
      length : TCARD16;
      cid : TXSyncCounter;
      value_hi : TINT32;
      value_lo : TCARD32;
    end;
  TxSyncSetCounterReq = T_xSyncSetCounterReq;

const
  sz_xSyncSetCounterReq = 16;  

type
  T_xSyncDestroyCounterReq = record
      reqType : TCARD8;
      syncReqType : TCARD8;
      length : TCARD16;
      counter : TXSyncCounter;
    end;
  TxSyncDestroyCounterReq = T_xSyncDestroyCounterReq;

const
  sz_xSyncDestroyCounterReq = 8;  

type
  T_xSyncQueryCounterReq = record
      reqType : TCARD8;
      syncReqType : TCARD8;
      length : TCARD16;
      counter : TXSyncCounter;
    end;
  TxSyncQueryCounterReq = T_xSyncQueryCounterReq;

const
  sz_xSyncQueryCounterReq = 8;  
type
  TxSyncQueryCounterReply = record
      _type : TBYTE;
      unused : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      value_hi : TINT32;
      value_lo : TCARD32;
      pad0 : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
    end;

const
  sz_xSyncQueryCounterReply = 32;  

type
  T_xSyncAwaitReq = record
      reqType : TCARD8;
      syncReqType : TCARD8;
      length : TCARD16;
    end;
  TxSyncAwaitReq = T_xSyncAwaitReq;

const
  sz_xSyncAwaitReq = 4;  
type
  T_xSyncWaitCondition = record
      counter : TXSyncCounter;
      value_type : TCARD32;
      wait_value_hi : TINT32;
      wait_value_lo : TCARD32;
      test_type : TCARD32;
      event_threshold_hi : TINT32;
      event_threshold_lo : TCARD32;
    end;
  TxSyncWaitCondition = T_xSyncWaitCondition;

const
  sz_xSyncWaitCondition = 28;  

type
  T_xSyncCreateAlarmReq = record
      reqType : TCARD8;
      syncReqType : TCARD8;
      length : TCARD16;
      id : TXSyncAlarm;
      valueMask : TCARD32;
    end;
  TxSyncCreateAlarmReq = T_xSyncCreateAlarmReq;

const
  sz_xSyncCreateAlarmReq = 12;  

type
  T_xSyncDestroyAlarmReq = record
      reqType : TCARD8;
      syncReqType : TCARD8;
      length : TCARD16;
      alarm : TXSyncAlarm;
    end;
  TxSyncDestroyAlarmReq = T_xSyncDestroyAlarmReq;

const
  sz_xSyncDestroyAlarmReq = 8;  

type
  T_xSyncQueryAlarmReq = record
      reqType : TCARD8;
      syncReqType : TCARD8;
      length : TCARD16;
      alarm : TXSyncAlarm;
    end;
  TxSyncQueryAlarmReq = T_xSyncQueryAlarmReq;

const
  sz_xSyncQueryAlarmReq = 8;  
type
  TxSyncQueryAlarmReply = record
      _type : TBYTE;
      unused : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      counter : TXSyncCounter;
      value_type : TCARD32;
      wait_value_hi : TINT32;
      wait_value_lo : TCARD32;
      test_type : TCARD32;
      delta_hi : TINT32;
      delta_lo : TCARD32;
      events : TBOOL;
      state : TBYTE;
      pad0 : TBYTE;
      pad1 : TBYTE;
    end;

const
  sz_xSyncQueryAlarmReply = 40;  

type
  T_xSyncChangeAlarmReq = record
      reqType : TCARD8;
      syncReqType : TCARD8;
      length : TCARD16;
      alarm : TXSyncAlarm;
      valueMask : TCARD32;
    end;
  TxSyncChangeAlarmReq = T_xSyncChangeAlarmReq;

const
  sz_xSyncChangeAlarmReq = 12;  

type
  T_xSyncSetPriority = record
      reqType : TCARD8;
      syncReqType : TCARD8;
      length : TCARD16;
      id : TCARD32;
      priority : TINT32;
    end;
  TxSyncSetPriorityReq = T_xSyncSetPriority;

const
  sz_xSyncSetPriorityReq = 12;  


type
  T_xSyncGetPriority = record
      reqType : TCARD8;
      syncReqType : TCARD8;
      length : TCARD16;
      id : TCARD32;
    end;
  TxSyncGetPriorityReq = T_xSyncGetPriority;

const
  sz_xSyncGetPriorityReq = 8;  
type
  TxSyncGetPriorityReply = record
      _type : TBYTE;
      unused : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      priority : TINT32;
      pad0 : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
    end;

const
  sz_xSyncGetPriorityReply = 32;  

type
  T_xSyncCreateFenceReq = record
      reqType : TCARD8;
      syncReqType : TCARD8;
      length : TCARD16;
      d : TDrawable;
      fid : TXSyncFence;
      initially_triggered : TBOOL;
      pad0 : TCARD8;
      pad1 : TCARD16;
    end;
  TxSyncCreateFenceReq = T_xSyncCreateFenceReq;

const
  sz_xSyncCreateFenceReq = 16;  

type
  T_xSyncTriggerFenceReq = record
      reqType : TCARD8;
      syncReqType : TCARD8;
      length : TCARD16;
      fid : TXSyncFence;
    end;
  TxSyncTriggerFenceReq = T_xSyncTriggerFenceReq;

const
  sz_xSyncTriggerFenceReq = 8;  

type
  T_xSyncResetFenceReq = record
      reqType : TCARD8;
      syncReqType : TCARD8;
      length : TCARD16;
      fid : TXSyncFence;
    end;
  TxSyncResetFenceReq = T_xSyncResetFenceReq;

const
  sz_xSyncResetFenceReq = 8;  

type
  T_xSyncDestroyFenceReq = record
      reqType : TCARD8;
      syncReqType : TCARD8;
      length : TCARD16;
      fid : TXSyncFence;
    end;
  TxSyncDestroyFenceReq = T_xSyncDestroyFenceReq;

const
  sz_xSyncDestroyFenceReq = 8;  

type
  T_xSyncQueryFenceReq = record
      reqType : TCARD8;
      syncReqType : TCARD8;
      length : TCARD16;
      fid : TXSyncFence;
    end;
  TxSyncQueryFenceReq = T_xSyncQueryFenceReq;

const
  sz_xSyncQueryFenceReq = 8;  

type
  T_xSyncAwaitFenceReq = record
      reqType : TCARD8;
      syncReqType : TCARD8;
      length : TCARD16;
    end;
  TxSyncAwaitFenceReq = T_xSyncAwaitFenceReq;

const
  sz_xSyncAwaitFenceReq = 4;  
type
  TxSyncQueryFenceReply = record
      _type : TBYTE;
      unused : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      triggered : TBOOL;
      pad0 : TBYTE;
      pad1 : TCARD16;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;

const
  sz_xSyncQueryFenceReply = 32;  

type
  T_xSyncCounterNotifyEvent = record
      _type : TBYTE;
      kind : TBYTE;
      sequenceNumber : TCARD16;
      counter : TXSyncCounter;
      wait_value_hi : TINT32;
      wait_value_lo : TCARD32;
      counter_value_hi : TINT32;
      counter_value_lo : TCARD32;
      time : TCARD32;
      count : TCARD16;
      destroyed : TBOOL;
      pad0 : TBYTE;
    end;
  TxSyncCounterNotifyEvent = T_xSyncCounterNotifyEvent;

  T_xSyncAlarmNotifyEvent = record
      _type : TBYTE;
      kind : TBYTE;
      sequenceNumber : TCARD16;
      alarm : TXSyncAlarm;
      counter_value_hi : TINT32;
      counter_value_lo : TCARD32;
      alarm_value_hi : TINT32;
      alarm_value_lo : TCARD32;
      time : TCARD32;
      state : TCARD8;
      pad0 : TBYTE;
      pad1 : TBYTE;
      pad2 : TBYTE;
    end;
  TxSyncAlarmNotifyEvent = T_xSyncAlarmNotifyEvent;
//// {$undef XSyncCounter}
//// {$undef XSyncAlarm}
//// {$undef XSyncFence}
//// {$undef Drawable}
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/XI2.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/XI2.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/XI2.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XI2_H_}
//// {$define _XI2_H_}

const
  XInput_2_0 = 7;  

  XI_2_Major = 2;  
  XI_2_Minor = 4;  

  XIPropertyDeleted = 0;  
  XIPropertyCreated = 1;  
  XIPropertyModified = 2;  

  XIPropModeReplace = 0;  
  XIPropModePrepend = 1;  
  XIPropModeAppend = 2;  

  XIAnyPropertyType = 0;  

  XINotifyNormal = 0;  
  XINotifyGrab = 1;  
  XINotifyUngrab = 2;  
  XINotifyWhileGrabbed = 3;  
  XINotifyPassiveGrab = 4;  
  XINotifyPassiveUngrab = 5;  

  XINotifyAncestor = 0;  
  XINotifyVirtual = 1;  
  XINotifyInferior = 2;  
  XINotifyNonlinear = 3;  
  XINotifyNonlinearVirtual = 4;  
  XINotifyPointer = 5;  
  XINotifyPointerRoot = 6;  
  XINotifyDetailNone = 7;  

  XIGrabModeSync = 0;  
  XIGrabModeAsync = 1;  
  XIGrabModeTouch = 2;  

  XIGrabSuccess = 0;  
  XIAlreadyGrabbed = 1;  
  XIGrabInvalidTime = 2;  
  XIGrabNotViewable = 3;  
  XIGrabFrozen = 4;  

  XIOwnerEvents = _True;  
  XINoOwnerEvents = _False;  

  XIGrabtypeButton = 0;  
  XIGrabtypeKeycode = 1;  
  XIGrabtypeEnter = 2;  
  XIGrabtypeFocusIn = 3;  
  XIGrabtypeTouchBegin = 4;  
  XIGrabtypeGesturePinchBegin = 5;  
  XIGrabtypeGestureSwipeBegin = 6;  

  XIAnyModifier = 1 shl 31;  
  XIAnyButton = 0;  
  XIAnyKeycode = 0;  

  XIAsyncDevice = 0;  
  XISyncDevice = 1;  
  XIReplayDevice = 2;  
  XIAsyncPairedDevice = 3;  
  XIAsyncPair = 4;  
  XISyncPair = 5;  
  XIAcceptTouch = 6;  
  XIRejectTouch = 7;  

  XISlaveSwitch = 1;  
  XIDeviceChange = 2;  

  XIMasterAdded = 1 shl 0;  
  XIMasterRemoved = 1 shl 1;  
  XISlaveAdded = 1 shl 2;  
  XISlaveRemoved = 1 shl 3;  
  XISlaveAttached = 1 shl 4;  
  XISlaveDetached = 1 shl 5;  
  XIDeviceEnabled = 1 shl 6;  
  XIDeviceDisabled = 1 shl 7;  

  XIAddMaster = 1;  
  XIRemoveMaster = 2;  
  XIAttachSlave = 3;  
  XIDetachSlave = 4;  
  XIAttachToMaster = 1;  
  XIFloating = 2;  

  XIModeRelative = 0;  
  XIModeAbsolute = 1;  

  XIMasterPointer = 1;  
  XIMasterKeyboard = 2;  
  XISlavePointer = 3;  
  XISlaveKeyboard = 4;  
  XIFloatingSlave = 5;  

  XIKeyClass = 0;  
  XIButtonClass = 1;  
  XIValuatorClass = 2;  
  XIScrollClass = 3;  
  XITouchClass = 8;  
  XIGestureClass = 9;  

  XIScrollTypeVertical = 1;  
  XIScrollTypeHorizontal = 2;  

  XIScrollFlagNoEmulation = 1 shl 0;  
  XIScrollFlagPreferred = 1 shl 1;  


  XIKeyRepeat = 1 shl 16;  

  XIPointerEmulated = 1 shl 16;  

  XITouchPendingEnd = 1 shl 16;  
  XITouchEmulatingPointer = 1 shl 17;  

  XIBarrierPointerReleased = 1 shl 0;  
  XIBarrierDeviceIsGrabbed = 1 shl 1;  

  XIGesturePinchEventCancelled = 1 shl 0;  

  XIGestureSwipeEventCancelled = 1 shl 0;  

  XIDirectTouch = 1;  
  XIDependentTouch = 2;  

//// (* error 
//// #define XISetMask(ptr, event)   (((unsigned char*)(ptr))[(event)>>3] |=  (1 << ((event) & 7)))
in define line 181 *)
//// (* error 
//// #define XIClearMask(ptr, event) (((unsigned char*)(ptr))[(event)>>3] &= ~(1 << ((event) & 7)))
in define line 182 *)
//// (* error 
//// #define XIMaskIsSet(ptr, event) (((unsigned char*)(ptr))[(event)>>3] &   (1 << ((event) & 7)))
in define line 183 *)

    function XIMaskLen(event : longint) : longint;    


    const
      XIAllDevices = 0;      
      XIAllMasterDevices = 1;      

      XI_DeviceChanged = 1;      
      XI_KeyPress = 2;      
      XI_KeyRelease = 3;      
      XI_ButtonPress = 4;      
      XI_ButtonRelease = 5;      
      XI_Motion = 6;      
      XI_Enter = 7;      
      XI_Leave = 8;      
      XI_FocusIn = 9;      
      XI_FocusOut = 10;      
      XI_HierarchyChanged = 11;      
      XI_PropertyEvent = 12;      
      XI_RawKeyPress = 13;      
      XI_RawKeyRelease = 14;      
      XI_RawButtonPress = 15;      
      XI_RawButtonRelease = 16;      
      XI_RawMotion = 17;      

      XI_TouchBegin = 18;      
      XI_TouchUpdate = 19;      
      XI_TouchEnd = 20;      
      XI_TouchOwnership = 21;      
      XI_RawTouchBegin = 22;      
      XI_RawTouchUpdate = 23;      
      XI_RawTouchEnd = 24;      

      XI_BarrierHit = 25;      
      XI_BarrierLeave = 26;      

      XI_GesturePinchBegin = 27;      
      XI_GesturePinchUpdate = 28;      
      XI_GesturePinchEnd = 29;      
      XI_GestureSwipeBegin = 30;      
      XI_GestureSwipeUpdate = 31;      
      XI_GestureSwipeEnd = 32;      
      XI_LASTEVENT = XI_GestureSwipeEnd;      


      XI_DeviceChangedMask = 1 shl XI_DeviceChanged;      
      XI_KeyPressMask = 1 shl XI_KeyPress;      
      XI_KeyReleaseMask = 1 shl XI_KeyRelease;      
      XI_ButtonPressMask = 1 shl XI_ButtonPress;      
      XI_ButtonReleaseMask = 1 shl XI_ButtonRelease;      
      XI_MotionMask = 1 shl XI_Motion;      
      XI_EnterMask = 1 shl XI_Enter;      
      XI_LeaveMask = 1 shl XI_Leave;      
      XI_FocusInMask = 1 shl XI_FocusIn;      
      XI_FocusOutMask = 1 shl XI_FocusOut;      
      XI_HierarchyChangedMask = 1 shl XI_HierarchyChanged;      
      XI_PropertyEventMask = 1 shl XI_PropertyEvent;      
      XI_RawKeyPressMask = 1 shl XI_RawKeyPress;      
      XI_RawKeyReleaseMask = 1 shl XI_RawKeyRelease;      
      XI_RawButtonPressMask = 1 shl XI_RawButtonPress;      
      XI_RawButtonReleaseMask = 1 shl XI_RawButtonRelease;      
      XI_RawMotionMask = 1 shl XI_RawMotion;      
      XI_TouchBeginMask = 1 shl XI_TouchBegin;      
      XI_TouchEndMask = 1 shl XI_TouchEnd;      
      XI_TouchOwnershipChangedMask = 1 shl XI_TouchOwnership;      
      XI_TouchUpdateMask = 1 shl XI_TouchUpdate;      
      XI_RawTouchBeginMask = 1 shl XI_RawTouchBegin;      
      XI_RawTouchEndMask = 1 shl XI_RawTouchEnd;      
      XI_RawTouchUpdateMask = 1 shl XI_RawTouchUpdate;      
      XI_BarrierHitMask = 1 shl XI_BarrierHit;      
      XI_BarrierLeaveMask = 1 shl XI_BarrierLeave;      
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/xf86vmode.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/xf86vmode.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/xf86vmode.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

Type
PDisplay  = ^Display;
Plongint  = ^longint;
Pword  = ^word;
PXF86VidModeGamma  = ^XF86VidModeGamma;
PXF86VidModeModeInfo  = ^XF86VidModeModeInfo;
PXF86VidModeModeLine  = ^XF86VidModeModeLine;
PXF86VidModeMonitor  = ^XF86VidModeMonitor;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XF86VIDMODE_H_}
//// {$define _XF86VIDMODE_H_}
//// {$include <X11/Xfuncproto.h>}
//// {$include <X11/Xmd.h>}
//// {$include <X11/extensions/xf86vm.h>}

const
  CLKFLAG_PROGRAMABLE = 1;  
//// {$ifdef XF86VIDMODE_EVENTS}
  XF86VidModeNotify = 0;  
  XF86VidModeNumberEvents = XF86VidModeNotify+1;  
  XF86VidModeNotifyMask = $00000001;  
  XF86VidModeNonEvent = 0;  
  XF86VidModeModeChange = 1;  
//// {$else}

const
  XF86VidModeNumberEvents = 0;  
//// {$endif}

const
  XF86VidModeBadClock = 0;  
  XF86VidModeBadHTimings = 1;  
  XF86VidModeBadVTimings = 2;  
  XF86VidModeModeUnsuitable = 3;  
  XF86VidModeExtensionDisabled = 4;  
  XF86VidModeClientNotLocal = 5;  
  XF86VidModeZoomLocked = 6;  
  XF86VidModeNumberErrors = XF86VidModeZoomLocked+1;  
  XF86VM_READ_PERMISSION = 1;  
  XF86VM_WRITE_PERMISSION = 2;  
//// {$ifndef _XF86VIDMODE_SERVER_}
//// {$if defined(__cplusplus) || defined(c_plusplus)}

//// {$else}
//// {$endif}
type
  TXF86VidModeModeLine = record
      hdisplay : word;
      hsyncstart : word;
      hsyncend : word;
      htotal : word;
      hskew : word;
      vdisplay : word;
      vsyncstart : word;
      vsyncend : word;
      vtotal : word;
      flags : dword;
      privsize : longint;
      c_private : ^TINT32;
      private : ^TINT32;
    end;
//// {$if defined(__cplusplus) || defined(c_plusplus)}

//// {$else}
//// {$endif}
type
  TXF86VidModeModeInfo = record
      dotclock : dword;
      hdisplay : word;
      hsyncstart : word;
      hsyncend : word;
      htotal : word;
      hskew : word;
      vdisplay : word;
      vsyncstart : word;
      vsyncend : word;
      vtotal : word;
      flags : dword;
      privsize : longint;
      c_private : ^TINT32;
      private : ^TINT32;
    end;

  TXF86VidModeSyncRange = record
      hi : single;
      lo : single;
    end;

  TXF86VidModeMonitor = record
      vendor : ^char;
      model : ^char;
      EMPTY : single;
      nhsync : byte;
      hsync : ^TXF86VidModeSyncRange;
      nvsync : byte;
      vsync : ^TXF86VidModeSyncRange;
    end;










  TXF86VidModeNotifyEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      root : TWindow;
      state : longint;
      kind : longint;
      forced : TBool;
      time : TTime;
    end;




  TXF86VidModeGamma = record
      red : single;
      green : single;
      blue : single;
    end;

function XF86VidModeSelectNextMode(disp,scr : longint) : longint;

function XF86VidModeSelectPrevMode(disp,scr : longint) : longint;

//// (* error 
//// Bool XF86VidModeQueryVersion(
//// (* error 
////     int*		/* majorVersion */,
//// (* error 
////     int*		/* minorVersion */

 in declarator_list *)
 in declarator_list *)
 in declarator_list *)

function XF86VidModeQueryExtension(_para1:PTDisplay; _para2:Plongint; _para3:Plongint):TBool;cdecl;external;

function XF86VidModeSetClientVersion(_para1:PTDisplay):TBool;cdecl;external;

function XF86VidModeGetModeLine(_para1:PTDisplay; _para2:longint; _para3:Plongint; _para4:PTXF86VidModeModeLine):TBool;cdecl;external;

function XF86VidModeGetAllModeLines(_para1:PTDisplay; _para2:longint; _para3:Plongint; _para4:PPPTXF86VidModeModeInfo):TBool;cdecl;external;

function XF86VidModeAddModeLine(_para1:PTDisplay; _para2:longint; _para3:PTXF86VidModeModeInfo; _para4:PTXF86VidModeModeInfo):TBool;cdecl;external;

function XF86VidModeDeleteModeLine(_para1:PTDisplay; _para2:longint; _para3:PTXF86VidModeModeInfo):TBool;cdecl;external;

function XF86VidModeModModeLine(_para1:PTDisplay; _para2:longint; _para3:PTXF86VidModeModeLine):TBool;cdecl;external;

function XF86VidModeValidateModeLine(_para1:PTDisplay; _para2:longint; _para3:PTXF86VidModeModeInfo):TStatus;cdecl;external;

function XF86VidModeSwitchMode(_para1:PTDisplay; _para2:longint; _para3:longint):TBool;cdecl;external;

function XF86VidModeSwitchToMode(_para1:PTDisplay; _para2:longint; _para3:PTXF86VidModeModeInfo):TBool;cdecl;external;

function XF86VidModeLockModeSwitch(_para1:PTDisplay; _para2:longint; _para3:longint):TBool;cdecl;external;

function XF86VidModeGetMonitor(_para1:PTDisplay; _para2:longint; _para3:PTXF86VidModeMonitor):TBool;cdecl;external;

function XF86VidModeGetViewPort(_para1:PTDisplay; _para2:longint; _para3:Plongint; _para4:Plongint):TBool;cdecl;external;

function XF86VidModeSetViewPort(_para1:PTDisplay; _para2:longint; _para3:longint; _para4:longint):TBool;cdecl;external;

function XF86VidModeGetDotClocks(_para1:PTDisplay; _para2:longint; _para3:Plongint; _para4:Plongint; _para5:Plongint; 
           _para6:PPlongint):TBool;cdecl;external;

function XF86VidModeGetGamma(_para1:PTDisplay; _para2:longint; _para3:PTXF86VidModeGamma):TBool;cdecl;external;

function XF86VidModeSetGamma(_para1:PTDisplay; _para2:longint; _para3:PTXF86VidModeGamma):TBool;cdecl;external;

function XF86VidModeSetGammaRamp(_para1:PTDisplay; _para2:longint; _para3:longint; _para4:Pword; _para5:Pword; 
           _para6:Pword):TBool;cdecl;external;

function XF86VidModeGetGammaRamp(_para1:PTDisplay; _para2:longint; _para3:longint; _para4:Pword; _para5:Pword; 
           _para6:Pword):TBool;cdecl;external;

function XF86VidModeGetGammaRampSize(_para1:PTDisplay; _para2:longint; _para3:Plongint):TBool;cdecl;external;

function XF86VidModeGetPermissions(_para1:PTDisplay; _para2:longint; _para3:Plongint):TBool;cdecl;external;
//// {$endif}
//// {$endif}
//// (* error 
//// #endif

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/damageproto.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/damageproto.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/damageproto.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _DAMAGEPROTO_H_}
//// {$define _DAMAGEPROTO_H_}
//// {$include <X11/Xmd.h>}
//// {$include <X11/extensions/xfixesproto.h>}
//// {$include <X11/extensions/damagewire.h>}

const
  Window = CARD32;  
  Drawable = CARD32;  
  Font = CARD32;  
  Pixmap = CARD32;  
  Cursor = CARD32;  
  Colormap = CARD32;  
  GContext = CARD32;  
  Atom = CARD32;  
  VisualID = CARD32;  
  Time = CARD32;  
  KeyCode = CARD8;  
  KeySym = CARD32;  
  Picture = CARD32;  
  Region = CARD32;  
  Damage = CARD32;  

type
  TxDamageReq = record
      reqType : TCARD8;
      damageReqType : TCARD8;
      length : TCARD16;
    end;


  TxDamageQueryVersionReq = record
      reqType : TCARD8;
      damageReqType : TCARD8;
      length : TCARD16;
      majorVersion : TCARD32;
      minorVersion : TCARD32;
    end;

const
  sz_xDamageQueryVersionReq = 12;  

type
  TxDamageQueryVersionReply = record
      _type : TBYTE;
      pad1 : TBYTE;
      sequenceNumber : TCARD16;
      length : TCARD32;
      majorVersion : TCARD32;
      minorVersion : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_xDamageQueryVersionReply = 32;  
type
  TxDamageCreateReq = record
      reqType : TCARD8;
      damageReqType : TCARD8;
      length : TCARD16;
      damage : TDamage;
      drawable : TDrawable;
      level : TCARD8;
      pad1 : TCARD8;
      pad2 : TCARD16;
    end;

const
  sz_xDamageCreateReq = 16;  
type
  TxDamageDestroyReq = record
      reqType : TCARD8;
      damageReqType : TCARD8;
      length : TCARD16;
      damage : TDamage;
    end;

const
  sz_xDamageDestroyReq = 8;  
type
  TxDamageSubtractReq = record
      reqType : TCARD8;
      damageReqType : TCARD8;
      length : TCARD16;
      damage : TDamage;
      repair : TRegion;
      parts : TRegion;
    end;

const
  sz_xDamageSubtractReq = 16;  
type
  TxDamageAddReq = record
      reqType : TCARD8;
      damageReqType : TCARD8;
      length : TCARD16;
      drawable : TDrawable;
      region : TRegion;
    end;

const
  sz_xDamageAddReq = 12;  

  DamageNotifyMore = $80;  
type
  TxDamageNotifyEvent = record
      _type : TCARD8;
      level : TCARD8;
      sequenceNumber : TCARD16;
      drawable : TDrawable;
      damage : TDamage;
      timestamp : TTime;
      area : TxRectangle;
      geometry : TxRectangle;
    end;
//// {$undef Damage}
//// {$undef Region}
//// {$undef Picture}
//// {$undef Window}
//// {$undef Drawable}
//// {$undef Font}
//// {$undef Pixmap}
//// {$undef Cursor}
//// {$undef Colormap}
//// {$undef GContext}
//// {$undef Atom}
//// {$undef VisualID}
//// {$undef Time}
//// {$undef KeyCode}
//// {$undef KeySym}
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/syncstr.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/syncstr.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/syncstr.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

Type
P_SyncTrigger  = ^_SyncTrigger;
PCARD64  = ^CARD64;
Pchar  = ^char;
PSyncCounter  = ^SyncCounter;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _SYNCSTR_H_}
//// {$define _SYNCSTR_H_}
//// {$include <X11/extensions/syncproto.h>}
//// {$ifdef _SYNC_SERVER}


const
  CARD64 = XSyncValue;  






type
  T_SyncCounter = record
      client : TClientPtr;
      id : TXSyncCounter;
      value : TCARD64;
      pTriglist : ^T_SyncTriggerList;
      beingDestroyed : TBool;
      pSysCounterInfo : ^T_SysCounterInfo;
    end;
  TSyncCounter = T_SyncCounter;


  TSyncCounterType = (XSyncCounterNeverChanges,XSyncCounterNeverIncreases,
    XSyncCounterNeverDecreases,XSyncCounterUnrestricted
    );




  T_SysCounterInfo = record
      name : ^char;
      resolution : TCARD64;
      bracket_greater : TCARD64;
      bracket_less : TCARD64;
      counterType : TSyncCounterType;
      QueryValue : procedure (_para1:Tpointer; _para2:PTCARD64);cdecl;
      BracketValues : procedure (_para1:Tpointer; _para2:PTCARD64; _para3:PTCARD64);cdecl;
    end;
  TSysCounterInfo = T_SysCounterInfo;








  T_SyncTrigger = record
      pCounter : ^TSyncCounter;
      wait_value : TCARD64;
      value_type : dword;
      test_type : dword;
      test_value : TCARD64;
      CheckTrigger : function (_para1:PT_SyncTrigger; _para2:TCARD64):TBool;cdecl;
      TriggerFired : procedure (_para1:PT_SyncTrigger);cdecl;
      CounterDestroyed : procedure (_para1:PT_SyncTrigger);cdecl;
    end;
  TSyncTrigger = T_SyncTrigger;

  T_SyncTriggerList = record
      pTrigger : ^TSyncTrigger;
      next : ^T_SyncTriggerList;
    end;
  TSyncTriggerList = T_SyncTriggerList;

  T_SyncAlarmClientList = record
      client : TClientPtr;
      delete_id : TXID;
      next : ^T_SyncAlarmClientList;
    end;
  TSyncAlarmClientList = T_SyncAlarmClientList;

  T_SyncAlarm = record
      trigger : TSyncTrigger;
      client : TClientPtr;
      alarm_id : TXSyncAlarm;
      delta : TCARD64;
      events : longint;
      state : longint;
      pEventClients : ^TSyncAlarmClientList;
    end;
  TSyncAlarm = T_SyncAlarm;

  TSyncAwaitHeader = record
      client : TClientPtr;
      delete_id : TCARD32;
      num_waitconditions : longint;
    end;

  TSyncAwait = record
      trigger : TSyncTrigger;
      event_threshold : TCARD64;
      pHeader : ^TSyncAwaitHeader;
    end;

  TSyncAwaitUnion = record
      case longint of
        0 : ( header : TSyncAwaitHeader );
        1 : ( await : TSyncAwait );
      end;


function SyncCreateSystemCounter(_para1:Pchar; _para2:TCARD64; _para3:TCARD64; _para4:TSyncCounterType; _para5:procedure (_para1:Tpointer; _para2:PTCARD64); 
           _para6:procedure (_para1:Tpointer; _para2:PTCARD64; _para3:PTCARD64)):Tpointer;cdecl;external;

procedure SyncChangeCounter(_para1:PTSyncCounter; _para2:TCARD64);cdecl;external;
procedure SyncDestroySystemCounter(pCounter:Tpointer);cdecl;external;
procedure InitServertime;cdecl;external;
//// {$endif}

//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/XKB.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/XKB.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/XKB.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XKB_H_}
//// {$define _XKB_H_}


const
  X_kbUseExtension = 0;  
  X_kbSelectEvents = 1;  
  X_kbBell = 3;  
  X_kbGetState = 4;  
  X_kbLatchLockState = 5;  
  X_kbGetControls = 6;  
  X_kbSetControls = 7;  
  X_kbGetMap = 8;  
  X_kbSetMap = 9;  
  X_kbGetCompatMap = 10;  
  X_kbSetCompatMap = 11;  
  X_kbGetIndicatorState = 12;  
  X_kbGetIndicatorMap = 13;  
  X_kbSetIndicatorMap = 14;  
  X_kbGetNamedIndicator = 15;  
  X_kbSetNamedIndicator = 16;  
  X_kbGetNames = 17;  
  X_kbSetNames = 18;  
  X_kbGetGeometry = 19;  
  X_kbSetGeometry = 20;  
  X_kbPerClientFlags = 21;  
  X_kbListComponents = 22;  
  X_kbGetKbdByName = 23;  
  X_kbGetDeviceInfo = 24;  
  X_kbSetDeviceInfo = 25;  
  X_kbSetDebuggingFlags = 101;  

  XkbEventCode = 0;  
  XkbNumberEvents = XkbEventCode+1;  

  XkbNewKeyboardNotify = 0;  
  XkbMapNotify = 1;  
  XkbStateNotify = 2;  
  XkbControlsNotify = 3;  
  XkbIndicatorStateNotify = 4;  
  XkbIndicatorMapNotify = 5;  
  XkbNamesNotify = 6;  
  XkbCompatMapNotify = 7;  
  XkbBellNotify = 8;  
  XkbActionMessage = 9;  
  XkbAccessXNotify = 10;  
  XkbExtensionDeviceNotify = 11;  

  XkbNewKeyboardNotifyMask = 1 shl 0;  
  XkbMapNotifyMask = 1 shl 1;  
  XkbStateNotifyMask = 1 shl 2;  
  XkbControlsNotifyMask = 1 shl 3;  
  XkbIndicatorStateNotifyMask = 1 shl 4;  
  XkbIndicatorMapNotifyMask = 1 shl 5;  
  XkbNamesNotifyMask = 1 shl 6;  
  XkbCompatMapNotifyMask = 1 shl 7;  
  XkbBellNotifyMask = 1 shl 8;  
  XkbActionMessageMask = 1 shl 9;  
  XkbAccessXNotifyMask = 1 shl 10;  
  XkbExtensionDeviceNotifyMask = 1 shl 11;  
  XkbAllEventsMask = $FFF;  

  XkbNKN_KeycodesMask = 1 shl 0;  
  XkbNKN_GeometryMask = 1 shl 1;  
  XkbNKN_DeviceIDMask = 1 shl 2;  
  XkbAllNewKeyboardEventsMask = $7;  

  XkbAXN_SKPress = 0;  
  XkbAXN_SKAccept = 1;  
  XkbAXN_SKReject = 2;  
  XkbAXN_SKRelease = 3;  
  XkbAXN_BKAccept = 4;  
  XkbAXN_BKReject = 5;  
  XkbAXN_AXKWarning = 6;  

  XkbAXN_SKPressMask = 1 shl 0;  
  XkbAXN_SKAcceptMask = 1 shl 1;  
  XkbAXN_SKRejectMask = 1 shl 2;  
  XkbAXN_SKReleaseMask = 1 shl 3;  
  XkbAXN_BKAcceptMask = 1 shl 4;  
  XkbAXN_BKRejectMask = 1 shl 5;  
  XkbAXN_AXKWarningMask = 1 shl 6;  
  XkbAllAccessXEventsMask = $7f;  

  XkbAllStateEventsMask = XkbAllStateComponentsMask;  
  XkbAllMapEventsMask = XkbAllMapComponentsMask;  
  XkbAllControlEventsMask = XkbAllControlsMask;  
  XkbAllIndicatorEventsMask = XkbAllIndicatorsMask;  
  XkbAllNameEventsMask = XkbAllNamesMask;  
  XkbAllCompatMapEventsMask = XkbAllCompatMask;  
  XkbAllBellEventsMask = 1 shl 0;  
  XkbAllActionMessagesMask = 1 shl 0;  

  XkbKeyboard = 0;  
  XkbNumberErrors = 1;  
  XkbErr_BadDevice = $ff;  
  XkbErr_BadClass = $fe;  
  XkbErr_BadId = $fd;  

  XkbClientMapMask = 1 shl 0;  
  XkbServerMapMask = 1 shl 1;  
  XkbCompatMapMask = 1 shl 2;  
  XkbIndicatorMapMask = 1 shl 3;  
  XkbNamesMask = 1 shl 4;  
  XkbGeometryMask = 1 shl 5;  
  XkbControlsMask = 1 shl 6;  
  XkbAllComponentsMask = $7f;  

  XkbModifierStateMask = 1 shl 0;  
  XkbModifierBaseMask = 1 shl 1;  
  XkbModifierLatchMask = 1 shl 2;  
  XkbModifierLockMask = 1 shl 3;  
  XkbGroupStateMask = 1 shl 4;  
  XkbGroupBaseMask = 1 shl 5;  
  XkbGroupLatchMask = 1 shl 6;  
  XkbGroupLockMask = 1 shl 7;  
  XkbCompatStateMask = 1 shl 8;  
  XkbGrabModsMask = 1 shl 9;  
  XkbCompatGrabModsMask = 1 shl 10;  
  XkbLookupModsMask = 1 shl 11;  
  XkbCompatLookupModsMask = 1 shl 12;  
  XkbPointerButtonMask = 1 shl 13;  
  XkbAllStateComponentsMask = $3fff;  

  XkbRepeatKeysMask = 1 shl 0;  
  XkbSlowKeysMask = 1 shl 1;  
  XkbBounceKeysMask = 1 shl 2;  
  XkbStickyKeysMask = 1 shl 3;  
  XkbMouseKeysMask = 1 shl 4;  
  XkbMouseKeysAccelMask = 1 shl 5;  
  XkbAccessXKeysMask = 1 shl 6;  
  XkbAccessXTimeoutMask = 1 shl 7;  
  XkbAccessXFeedbackMask = 1 shl 8;  
  XkbAudibleBellMask = 1 shl 9;  
  XkbOverlay1Mask = 1 shl 10;  
  XkbOverlay2Mask = 1 shl 11;  
  XkbIgnoreGroupLockMask = 1 shl 12;  
  XkbGroupsWrapMask = 1 shl 27;  
  XkbInternalModsMask = 1 shl 28;  
  XkbIgnoreLockModsMask = 1 shl 29;  
  XkbPerKeyRepeatMask = 1 shl 30;  
  XkbControlsEnabledMask = 1 shl 31;  
  XkbAccessXOptionsMask = XkbStickyKeysMask or XkbAccessXFeedbackMask;  
  XkbAllBooleanCtrlsMask = $00001FFF;  
  XkbAllControlsMask = $F8001FFF;  
  XkbAllControlEventsMask = XkbAllControlsMask;  

  XkbAX_SKPressFBMask = 1 shl 0;  
  XkbAX_SKAcceptFBMask = 1 shl 1;  
  XkbAX_FeatureFBMask = 1 shl 2;  
  XkbAX_SlowWarnFBMask = 1 shl 3;  
  XkbAX_IndicatorFBMask = 1 shl 4;  
  XkbAX_StickyKeysFBMask = 1 shl 5;  
  XkbAX_TwoKeysMask = 1 shl 6;  
  XkbAX_LatchToLockMask = 1 shl 7;  
  XkbAX_SKReleaseFBMask = 1 shl 8;  
  XkbAX_SKRejectFBMask = 1 shl 9;  
  XkbAX_BKRejectFBMask = 1 shl 10;  
  XkbAX_DumbBellFBMask = 1 shl 11;  
  XkbAX_FBOptionsMask = $F3F;  
  XkbAX_SKOptionsMask = $0C0;  
  XkbAX_AllOptionsMask = $FFF;  

  XkbUseCoreKbd = $0100;  
  XkbUseCorePtr = $0200;  
  XkbDfltXIClass = $0300;  
  XkbDfltXIId = $0400;  
  XkbAllXIClasses = $0500;  
  XkbAllXIIds = $0600;  
  XkbXINone = $ff00;  
//// (* error 
//// #define	XkbLegalXILedClass(c)	(((c)==KbdFeedbackClass)||\
in define line 328 *)
//// (* error 
//// #define	XkbLegalXIBellClass(c)	(((c)==KbdFeedbackClass)||\
in define line 332 *)

    function XkbExplicitXIDevice(c : longint) : longint;    

    function XkbExplicitXIClass(c : longint) : longint;    

    function XkbExplicitXIId(c : longint) : longint;    

//// (* error 
//// #define	XkbSingleXIClass(c)	((((c)&(~0xff))==0)||((c)==XkbDfltXIClass))
in define line 336 *)
//// (* error 
//// #define	XkbSingleXIId(c)	((((c)&(~0xff))==0)||((c)==XkbDfltXIId))
in define line 337 *)
    const
      XkbNoModifier = $ff;      
      XkbNoShiftLevel = $ff;      
      XkbNoShape = $ff;      
      XkbNoIndicator = $ff;      
      XkbNoModifierMask = 0;      
      XkbAllModifiersMask = $ff;      
      XkbAllVirtualModsMask = $ffff;      
      XkbNumKbdGroups = 4;      
      XkbMaxKbdGroup = XkbNumKbdGroups-1;      
      XkbMaxMouseKeysBtn = 4;      

      XkbGroup1Index = 0;      
      XkbGroup2Index = 1;      
      XkbGroup3Index = 2;      
      XkbGroup4Index = 3;      
      XkbAnyGroup = 254;      
      XkbAllGroups = 255;      
      XkbGroup1Mask = 1 shl 0;      
      XkbGroup2Mask = 1 shl 1;      
      XkbGroup3Mask = 1 shl 2;      
      XkbGroup4Mask = 1 shl 3;      
      XkbAnyGroupMask = 1 shl 7;      
      XkbAllGroupsMask = $f;      


    function XkbBuildCoreState(m,g : longint) : longint;    

    function XkbGroupForCoreState(s : longint) : longint;    

    function XkbIsLegalGroup(g : longint) : longint;    


    const
      XkbWrapIntoRange = $00;      
      XkbClampIntoRange = $40;      
      XkbRedirectIntoRange = $80;      

      XkbSA_ClearLocks = 1 shl 0;      
      XkbSA_LatchToLock = 1 shl 1;      
      XkbSA_LockNoLock = 1 shl 0;      
      XkbSA_LockNoUnlock = 1 shl 1;      
      XkbSA_UseModMapMods = 1 shl 2;      
      XkbSA_GroupAbsolute = 1 shl 2;      
      XkbSA_UseDfltButton = 0;      
      XkbSA_NoAcceleration = 1 shl 0;      
      XkbSA_MoveAbsoluteX = 1 shl 1;      
      XkbSA_MoveAbsoluteY = 1 shl 2;      
      XkbSA_ISODfltIsGroup = 1 shl 7;      
      XkbSA_ISONoAffectMods = 1 shl 6;      
      XkbSA_ISONoAffectGroup = 1 shl 5;      
      XkbSA_ISONoAffectPtr = 1 shl 4;      
      XkbSA_ISONoAffectCtrls = 1 shl 3;      
      XkbSA_ISOAffectMask = $78;      
      XkbSA_MessageOnPress = 1 shl 0;      
      XkbSA_MessageOnRelease = 1 shl 1;      
      XkbSA_MessageGenKeyEvent = 1 shl 2;      
      XkbSA_AffectDfltBtn = 1;      
      XkbSA_DfltBtnAbsolute = 1 shl 2;      
      XkbSA_SwitchApplication = 1 shl 0;      
      XkbSA_SwitchAbsolute = 1 shl 2;      

      XkbSA_IgnoreVal = $00;      
      XkbSA_SetValMin = $10;      
      XkbSA_SetValCenter = $20;      
      XkbSA_SetValMax = $30;      
      XkbSA_SetValRelative = $40;      
      XkbSA_SetValAbsolute = $50;      
      XkbSA_ValOpMask = $70;      
      XkbSA_ValScaleMask = $07;      

    function XkbSA_ValOp(a : longint) : Ta;    

    function XkbSA_ValScale(a : longint) : Ta;    


    const
      XkbSA_NoAction = $00;      
      XkbSA_SetMods = $01;      
      XkbSA_LatchMods = $02;      
      XkbSA_LockMods = $03;      
      XkbSA_SetGroup = $04;      
      XkbSA_LatchGroup = $05;      
      XkbSA_LockGroup = $06;      
      XkbSA_MovePtr = $07;      
      XkbSA_PtrBtn = $08;      
      XkbSA_LockPtrBtn = $09;      
      XkbSA_SetPtrDflt = $0a;      
      XkbSA_ISOLock = $0b;      
      XkbSA_Terminate = $0c;      
      XkbSA_SwitchScreen = $0d;      
      XkbSA_SetControls = $0e;      
      XkbSA_LockControls = $0f;      
      XkbSA_ActionMessage = $10;      
      XkbSA_RedirectKey = $11;      
      XkbSA_DeviceBtn = $12;      
      XkbSA_LockDeviceBtn = $13;      
      XkbSA_DeviceValuator = $14;      
      XkbSA_LastAction = XkbSA_DeviceValuator;      
      XkbSA_NumActions = XkbSA_LastAction+1;      
      XkbSA_XFree86Private = $86;      

      XkbSA_BreakLatch = ((((((((((1 shl XkbSA_NoAction) or (1 shl XkbSA_PtrBtn)) or (1 shl XkbSA_LockPtrBtn)) or (1 shl XkbSA_Terminate)) or (1 shl XkbSA_SwitchScreen)) or (1 shl XkbSA_SetControls)) or (1 shl XkbSA_LockControls)) or (1 shl XkbSA_ActionMessage)) or (1 shl XkbSA_RedirectKey)) or (1 shl XkbSA_DeviceBtn)) or (1 shl XkbSA_LockDeviceBtn);      


    function XkbIsModAction(a : longint) : longint;    

    function XkbIsGroupAction(a : longint) : longint;    

    function XkbIsPtrAction(a : longint) : longint;    


    const
      XkbKB_Permanent = $80;      
      XkbKB_OpMask = $7f;      
      XkbKB_Default = $00;      
      XkbKB_Lock = $01;      
      XkbKB_RadioGroup = $02;      
      XkbKB_Overlay1 = $03;      
      XkbKB_Overlay2 = $04;      
      XkbKB_RGAllowNone = $80;      

      XkbMinLegalKeyCode = 8;      
      XkbMaxLegalKeyCode = 255;      
      XkbMaxKeyCount = (XkbMaxLegalKeyCode-XkbMinLegalKeyCode)+1;      
      XkbPerKeyBitArraySize = (XkbMaxLegalKeyCode+1)/8;      


    function XkbIsLegalKeycode(k : longint) : longint;    


    const
      XkbNumModifiers = 8;      
      XkbNumVirtualMods = 16;      
      XkbNumIndicators = 32;      
      XkbAllIndicatorsMask = $ffffffff;      
      XkbMaxRadioGroups = 32;      
      XkbAllRadioGroupsMask = $ffffffff;      
      XkbMaxShiftLevel = 63;      
//// (* error 
//// #define	XkbMaxSymsPerKey	(XkbMaxShiftLevel*XkbNumKbdGroups)
in define line 561 *)
      XkbRGMaxMembers = 12;      
      XkbActionMessageLength = 6;      
      XkbKeyNameLength = 4;      
      XkbMaxRedirectCount = 8;      
      XkbGeomPtsPerMM = 10;      
      XkbGeomMaxColors = 32;      
      XkbGeomMaxLabelColors = 3;      
      XkbGeomMaxPriority = 255;      

      XkbOneLevelIndex = 0;      
      XkbTwoLevelIndex = 1;      
      XkbAlphabeticIndex = 2;      
      XkbKeypadIndex = 3;      
      XkbLastRequiredType = XkbKeypadIndex;      
      XkbNumRequiredTypes = XkbLastRequiredType+1;      
      XkbMaxKeyTypes = 255;      
      XkbOneLevelMask = 1 shl 0;      
      XkbTwoLevelMask = 1 shl 1;      
      XkbAlphabeticMask = 1 shl 2;      
      XkbKeypadMask = 1 shl 3;      
      XkbAllRequiredTypes = $f;      

    function XkbShiftLevel(n : longint) : Tn;    

    function XkbShiftLevelMask(n : longint) : longint;    


    const
      XkbName = 'XKEYBOARD';      
      XkbMajorVersion = 1;      
      XkbMinorVersion = 0;      

      XkbExplicitKeyTypesMask = $0f;      
      XkbExplicitKeyType1Mask = 1 shl 0;      
      XkbExplicitKeyType2Mask = 1 shl 1;      
      XkbExplicitKeyType3Mask = 1 shl 2;      
      XkbExplicitKeyType4Mask = 1 shl 3;      
      XkbExplicitInterpretMask = 1 shl 4;      
      XkbExplicitAutoRepeatMask = 1 shl 5;      
      XkbExplicitBehaviorMask = 1 shl 6;      
      XkbExplicitVModMapMask = 1 shl 7;      
      XkbAllExplicitMask = $ff;      

      XkbKeyTypesMask = 1 shl 0;      
      XkbKeySymsMask = 1 shl 1;      
      XkbModifierMapMask = 1 shl 2;      
      XkbExplicitComponentsMask = 1 shl 3;      
      XkbKeyActionsMask = 1 shl 4;      
      XkbKeyBehaviorsMask = 1 shl 5;      
      XkbVirtualModsMask = 1 shl 6;      
      XkbVirtualModMapMask = 1 shl 7;      
      XkbAllClientInfoMask = (XkbKeyTypesMask or XkbKeySymsMask) or XkbModifierMapMask;      
      XkbAllServerInfoMask = (((XkbExplicitComponentsMask or XkbKeyActionsMask) or XkbKeyBehaviorsMask) or XkbVirtualModsMask) or XkbVirtualModMapMask;      
      XkbAllMapComponentsMask = XkbAllClientInfoMask or XkbAllServerInfoMask;      

      XkbSI_AutoRepeat = 1 shl 0;      
      XkbSI_LockingKey = 1 shl 1;      

      XkbSI_LevelOneOnly = $80;      
      XkbSI_OpMask = $7f;      
      XkbSI_NoneOf = 0;      
      XkbSI_AnyOfOrNone = 1;      
      XkbSI_AnyOf = 2;      
      XkbSI_AllOf = 3;      
      XkbSI_Exactly = 4;      

      XkbIM_NoExplicit = 1 shl 7;      
      XkbIM_NoAutomatic = 1 shl 6;      
      XkbIM_LEDDrivesKB = 1 shl 5;      

      XkbIM_UseBase = 1 shl 0;      
      XkbIM_UseLatched = 1 shl 1;      
      XkbIM_UseLocked = 1 shl 2;      
      XkbIM_UseEffective = 1 shl 3;      
      XkbIM_UseCompat = 1 shl 4;      
      XkbIM_UseNone = 0;      
      XkbIM_UseAnyGroup = ((XkbIM_UseBase or XkbIM_UseLatched) or XkbIM_UseLocked) or XkbIM_UseEffective;      
      XkbIM_UseAnyMods = XkbIM_UseAnyGroup or XkbIM_UseCompat;      

      XkbSymInterpMask = 1 shl 0;      
      XkbGroupCompatMask = 1 shl 1;      
      XkbAllCompatMask = $3;      

      XkbKeycodesNameMask = 1 shl 0;      
      XkbGeometryNameMask = 1 shl 1;      
      XkbSymbolsNameMask = 1 shl 2;      
      XkbPhysSymbolsNameMask = 1 shl 3;      
      XkbTypesNameMask = 1 shl 4;      
      XkbCompatNameMask = 1 shl 5;      
      XkbKeyTypeNamesMask = 1 shl 6;      
      XkbKTLevelNamesMask = 1 shl 7;      
      XkbIndicatorNamesMask = 1 shl 8;      
      XkbKeyNamesMask = 1 shl 9;      
      XkbKeyAliasesMask = 1 shl 10;      
      XkbVirtualModNamesMask = 1 shl 11;      
      XkbGroupNamesMask = 1 shl 12;      
      XkbRGNamesMask = 1 shl 13;      
      XkbComponentNamesMask = $3f;      
      XkbAllNamesMask = $3fff;      

      XkbGBN_TypesMask = 1 shl 0;      
      XkbGBN_CompatMapMask = 1 shl 1;      
      XkbGBN_ClientSymbolsMask = 1 shl 2;      
      XkbGBN_ServerSymbolsMask = 1 shl 3;      
      XkbGBN_SymbolsMask = XkbGBN_ClientSymbolsMask or XkbGBN_ServerSymbolsMask;      
      XkbGBN_IndicatorMapMask = 1 shl 4;      
      XkbGBN_KeyNamesMask = 1 shl 5;      
      XkbGBN_GeometryMask = 1 shl 6;      
      XkbGBN_OtherNamesMask = 1 shl 7;      
      XkbGBN_AllComponentsMask = $ff;      

      XkbLC_Hidden = 1 shl 0;      
      XkbLC_Default = 1 shl 1;      
      XkbLC_Partial = 1 shl 2;      
      XkbLC_AlphanumericKeys = 1 shl 8;      
      XkbLC_ModifierKeys = 1 shl 9;      
      XkbLC_KeypadKeys = 1 shl 10;      
      XkbLC_FunctionKeys = 1 shl 11;      
      XkbLC_AlternateGroup = 1 shl 12;      

      XkbXI_KeyboardsMask = 1 shl 0;      
      XkbXI_ButtonActionsMask = 1 shl 1;      
      XkbXI_IndicatorNamesMask = 1 shl 2;      
      XkbXI_IndicatorMapsMask = 1 shl 3;      
      XkbXI_IndicatorStateMask = 1 shl 4;      
      XkbXI_UnsupportedFeatureMask = 1 shl 15;      
      XkbXI_AllFeaturesMask = $001f;      
      XkbXI_AllDeviceFeaturesMask = $001e;      
      XkbXI_IndicatorsMask = $001c;      
      XkbAllExtensionDeviceEventsMask = $801f;      

      XkbPCF_DetectableAutoRepeatMask = 1 shl 0;      
      XkbPCF_GrabsUseXKBStateMask = 1 shl 1;      
      XkbPCF_AutoResetControlsMask = 1 shl 2;      
      XkbPCF_LookupStateWhenGrabbed = 1 shl 3;      
      XkbPCF_SendEventUsesXKBState = 1 shl 4;      
      XkbPCF_AllFlagsMask = $1F;      

      XkbDF_DisableLocks = 1 shl 0;      
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/xcmiscstr.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/xcmiscstr.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/xcmiscstr.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}


//// (* error 
//// #warning "xcmiscstr.h is obsolete and may be removed in the future."
//// (* error 
//// #warning "xcmiscstr.h is obsolete and may be removed in the future."
//// {$include <X11/extensions/xcmiscproto.h>}

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/compositeproto.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/compositeproto.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/compositeproto.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _COMPOSITEPROTO_H_}
//// {$define _COMPOSITEPROTO_H_}
//// {$include <X11/Xmd.h>}
//// {$include <X11/extensions/composite.h>}

const
  Window = CARD32;  
  Region = CARD32;  
  Pixmap = CARD32;  

type
  TxCompositeQueryVersionReq = record
      reqType : TCARD8;
      compositeReqType : TCARD8;
      length : TCARD16;
      majorVersion : TCARD32;
      minorVersion : TCARD32;
    end;

const
  sz_xCompositeQueryVersionReq = 12;  

type
  TxCompositeQueryVersionReply = record
      _type : TBYTE;
      pad1 : TBYTE;
      sequenceNumber : TCARD16;
      length : TCARD32;
      majorVersion : TCARD32;
      minorVersion : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_xCompositeQueryVersionReply = 32;  
type
  TxCompositeRedirectWindowReq = record
      reqType : TCARD8;
      compositeReqType : TCARD8;
      length : TCARD16;
      window : TWindow;
      update : TCARD8;
      pad1 : TCARD8;
      pad2 : TCARD16;
    end;

const
  sz_xCompositeRedirectWindowReq = 12;  
type
  TxCompositeRedirectSubwindowsReq = record
      reqType : TCARD8;
      compositeReqType : TCARD8;
      length : TCARD16;
      window : TWindow;
      update : TCARD8;
      pad1 : TCARD8;
      pad2 : TCARD16;
    end;

const
  sz_xCompositeRedirectSubwindowsReq = 12;  
type
  TxCompositeUnredirectWindowReq = record
      reqType : TCARD8;
      compositeReqType : TCARD8;
      length : TCARD16;
      window : TWindow;
      update : TCARD8;
      pad1 : TCARD8;
      pad2 : TCARD16;
    end;

const
  sz_xCompositeUnredirectWindowReq = 12;  
type
  TxCompositeUnredirectSubwindowsReq = record
      reqType : TCARD8;
      compositeReqType : TCARD8;
      length : TCARD16;
      window : TWindow;
      update : TCARD8;
      pad1 : TCARD8;
      pad2 : TCARD16;
    end;

const
  sz_xCompositeUnredirectSubwindowsReq = 12;  
type
  TxCompositeCreateRegionFromBorderClipReq = record
      reqType : TCARD8;
      compositeReqType : TCARD8;
      length : TCARD16;
      region : TRegion;
      window : TWindow;
    end;

const
  sz_xCompositeCreateRegionFromBorderClipReq = 12;  

type
  TxCompositeNameWindowPixmapReq = record
      reqType : TCARD8;
      compositeReqType : TCARD8;
      length : TCARD16;
      window : TWindow;
      pixmap : TPixmap;
    end;

const
  sz_xCompositeNameWindowPixmapReq = 12;  

type
  TxCompositeGetOverlayWindowReq = record
      reqType : TCARD8;
      compositeReqType : TCARD8;
      length : TCARD16;
      window : TWindow;
    end;

function sz_xCompositeGetOverlayWindowReq : longint; { return type might be wrong }


type
  TxCompositeGetOverlayWindowReply = record
      _type : TBYTE;
      pad1 : TBYTE;
      sequenceNumber : TCARD16;
      length : TCARD32;
      overlayWin : TWindow;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;

function sz_xCompositeGetOverlayWindowReply : longint; { return type might be wrong }

type
  TxCompositeReleaseOverlayWindowReq = record
      reqType : TCARD8;
      compositeReqType : TCARD8;
      length : TCARD16;
      window : TWindow;
    end;

function sz_xCompositeReleaseOverlayWindowReq : longint; { return type might be wrong }

//// {$undef Window}
//// {$undef Region}
//// {$undef Pixmap}
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/Xext.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/Xext.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/Xext.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XEXT_H_}
//// {$define _XEXT_H_}
//// {$include <X11/Xfuncproto.h>}
//// (* error 
//// typedef int (*XextErrorHandler) (

in declaration at line 37 *)


function XSetExtensionErrorHandler(_para1:TXextErrorHandler):TXextErrorHandler;cdecl;external;
//// (* error 
////     _Xconst char*	/* ext_name */

 in declarator_list *)
//// (* error 
//// #define X_EXTENSION_UNKNOWN "unknown"
in define line 50 *)
    const
      X_EXTENSION_MISSING = 'missing';      
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/xf86vmproto.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/xf86vmproto.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/xf86vmproto.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XF86VIDMODEPROTO_H_}
//// {$define _XF86VIDMODEPROTO_H_}
//// {$include <X11/extensions/xf86vm.h>}

const
  XF86VIDMODENAME = 'XFree86-VidModeExtension';  

  XF86VIDMODE_MAJOR_VERSION = 2;  
  XF86VIDMODE_MINOR_VERSION = 2;  
  X_XF86VidModeQueryVersion = 0;  
  X_XF86VidModeGetModeLine = 1;  
  X_XF86VidModeModModeLine = 2;  
  X_XF86VidModeSwitchMode = 3;  
  X_XF86VidModeGetMonitor = 4;  
  X_XF86VidModeLockModeSwitch = 5;  
  X_XF86VidModeGetAllModeLines = 6;  
  X_XF86VidModeAddModeLine = 7;  
  X_XF86VidModeDeleteModeLine = 8;  
  X_XF86VidModeValidateModeLine = 9;  
  X_XF86VidModeSwitchToMode = 10;  
  X_XF86VidModeGetViewPort = 11;  
  X_XF86VidModeSetViewPort = 12;  

  X_XF86VidModeGetDotClocks = 13;  
  X_XF86VidModeSetClientVersion = 14;  
  X_XF86VidModeSetGamma = 15;  
  X_XF86VidModeGetGamma = 16;  
  X_XF86VidModeGetGammaRamp = 17;  
  X_XF86VidModeSetGammaRamp = 18;  
  X_XF86VidModeGetGammaRampSize = 19;  
  X_XF86VidModeGetPermissions = 20;  



type
  T_XF86VidModeQueryVersion = record
      reqType : TCARD8;
      xf86vidmodeReqType : TCARD8;
      length : TCARD16;
    end;
  TxXF86VidModeQueryVersionReq = T_XF86VidModeQueryVersion;

const
  sz_xXF86VidModeQueryVersionReq = 4;  



type
  TxXF86VidModeQueryVersionReply = record
      _type : TBYTE;
      pad1 : TBOOL;
      sequenceNumber : TCARD16;
      length : TCARD32;
      majorVersion : TCARD16;
      minorVersion : TCARD16;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;

const
  sz_xXF86VidModeQueryVersionReply = 32;  

type
  T_XF86VidModeGetModeLine = record
      reqType : TCARD8;
      xf86vidmodeReqType : TCARD8;
      length : TCARD16;
      screen : TCARD16;
      pad : TCARD16;
    end;
  TxXF86VidModeGetModeLineReq = T_XF86VidModeGetModeLine;
  TxXF86VidModeGetAllModeLinesReq = T_XF86VidModeGetModeLine;
  TxXF86VidModeGetMonitorReq = T_XF86VidModeGetModeLine;
  TxXF86VidModeGetViewPortReq = T_XF86VidModeGetModeLine;
  TxXF86VidModeGetDotClocksReq = T_XF86VidModeGetModeLine;
  TxXF86VidModeGetPermissionsReq = T_XF86VidModeGetModeLine;

const
  sz_xXF86VidModeGetModeLineReq = 8;  
  sz_xXF86VidModeGetAllModeLinesReq = 8;  
  sz_xXF86VidModeGetMonitorReq = 8;  
  sz_xXF86VidModeGetViewPortReq = 8;  
  sz_xXF86VidModeGetDotClocksReq = 8;  
  sz_xXF86VidModeGetPermissionsReq = 8;  

type
  TxXF86VidModeGetModeLineReply = record
      _type : TBYTE;
      pad1 : TBOOL;
      sequenceNumber : TCARD16;
      length : TCARD32;
      dotclock : TCARD32;
      hdisplay : TCARD16;
      hsyncstart : TCARD16;
      hsyncend : TCARD16;
      htotal : TCARD16;
      hskew : TCARD16;
      vdisplay : TCARD16;
      vsyncstart : TCARD16;
      vsyncend : TCARD16;
      vtotal : TCARD16;
      pad2 : TCARD16;
      flags : TCARD32;
      reserved1 : TCARD32;
      reserved2 : TCARD32;
      reserved3 : TCARD32;
      privsize : TCARD32;
    end;

const
  sz_xXF86VidModeGetModeLineReply = 52;  


type
  TxXF86OldVidModeGetModeLineReply = record
      _type : TBYTE;
      pad1 : TBOOL;
      sequenceNumber : TCARD16;
      length : TCARD32;
      dotclock : TCARD32;
      hdisplay : TCARD16;
      hsyncstart : TCARD16;
      hsyncend : TCARD16;
      htotal : TCARD16;
      vdisplay : TCARD16;
      vsyncstart : TCARD16;
      vsyncend : TCARD16;
      vtotal : TCARD16;
      flags : TCARD32;
      privsize : TCARD32;
    end;

const
  sz_xXF86OldVidModeGetModeLineReply = 36;  
type
  TxXF86VidModeModeInfo = record
      dotclock : TCARD32;
      hdisplay : TCARD16;
      hsyncstart : TCARD16;
      hsyncend : TCARD16;
      htotal : TCARD16;
      hskew : TCARD32;
      vdisplay : TCARD16;
      vsyncstart : TCARD16;
      vsyncend : TCARD16;
      vtotal : TCARD16;
      pad1 : TCARD16;
      flags : TCARD32;
      reserved1 : TCARD32;
      reserved2 : TCARD32;
      reserved3 : TCARD32;
      privsize : TCARD32;
    end;


  TxXF86OldVidModeModeInfo = record
      dotclock : TCARD32;
      hdisplay : TCARD16;
      hsyncstart : TCARD16;
      hsyncend : TCARD16;
      htotal : TCARD16;
      vdisplay : TCARD16;
      vsyncstart : TCARD16;
      vsyncend : TCARD16;
      vtotal : TCARD16;
      flags : TCARD32;
      privsize : TCARD32;
    end;


  TxXF86VidModeGetAllModeLinesReply = record
      _type : TBYTE;
      pad1 : TBOOL;
      sequenceNumber : TCARD16;
      length : TCARD32;
      modecount : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;

const
  sz_xXF86VidModeGetAllModeLinesReply = 32;  



type
  T_XF86VidModeAddModeLine = record
      reqType : TCARD8;
      xf86vidmodeReqType : TCARD8;
      length : TCARD16;
      screen : TCARD32;
      dotclock : TCARD32;
      hdisplay : TCARD16;
      hsyncstart : TCARD16;
      hsyncend : TCARD16;
      htotal : TCARD16;
      hskew : TCARD16;
      vdisplay : TCARD16;
      vsyncstart : TCARD16;
      vsyncend : TCARD16;
      vtotal : TCARD16;
      pad1 : TCARD16;
      flags : TCARD32;
      reserved1 : TCARD32;
      reserved2 : TCARD32;
      reserved3 : TCARD32;
      privsize : TCARD32;
      after_dotclock : TCARD32;
      after_hdisplay : TCARD16;
      after_hsyncstart : TCARD16;
      after_hsyncend : TCARD16;
      after_htotal : TCARD16;
      after_hskew : TCARD16;
      after_vdisplay : TCARD16;
      after_vsyncstart : TCARD16;
      after_vsyncend : TCARD16;
      after_vtotal : TCARD16;
      pad2 : TCARD16;
      after_flags : TCARD32;
      reserved4 : TCARD32;
      reserved5 : TCARD32;
      reserved6 : TCARD32;
    end;
  TxXF86VidModeAddModeLineReq = T_XF86VidModeAddModeLine;

const
  sz_xXF86VidModeAddModeLineReq = 92;  




type
  T_XF86OldVidModeAddModeLine = record
      reqType : TCARD8;
      xf86vidmodeReqType : TCARD8;
      length : TCARD16;
      screen : TCARD32;
      dotclock : TCARD32;
      hdisplay : TCARD16;
      hsyncstart : TCARD16;
      hsyncend : TCARD16;
      htotal : TCARD16;
      vdisplay : TCARD16;
      vsyncstart : TCARD16;
      vsyncend : TCARD16;
      vtotal : TCARD16;
      flags : TCARD32;
      privsize : TCARD32;
      after_dotclock : TCARD32;
      after_hdisplay : TCARD16;
      after_hsyncstart : TCARD16;
      after_hsyncend : TCARD16;
      after_htotal : TCARD16;
      after_vdisplay : TCARD16;
      after_vsyncstart : TCARD16;
      after_vsyncend : TCARD16;
      after_vtotal : TCARD16;
      after_flags : TCARD32;
    end;
  TxXF86OldVidModeAddModeLineReq = T_XF86OldVidModeAddModeLine;

const
  sz_xXF86OldVidModeAddModeLineReq = 60;  



type
  T_XF86VidModeModModeLine = record
      reqType : TCARD8;
      xf86vidmodeReqType : TCARD8;
      length : TCARD16;
      screen : TCARD32;
      hdisplay : TCARD16;
      hsyncstart : TCARD16;
      hsyncend : TCARD16;
      htotal : TCARD16;
      hskew : TCARD16;
      vdisplay : TCARD16;
      vsyncstart : TCARD16;
      vsyncend : TCARD16;
      vtotal : TCARD16;
      pad1 : TCARD16;
      flags : TCARD32;
      reserved1 : TCARD32;
      reserved2 : TCARD32;
      reserved3 : TCARD32;
      privsize : TCARD32;
    end;
  TxXF86VidModeModModeLineReq = T_XF86VidModeModModeLine;

const
  sz_xXF86VidModeModModeLineReq = 48;  




type
  T_XF86OldVidModeModModeLine = record
      reqType : TCARD8;
      xf86vidmodeReqType : TCARD8;
      length : TCARD16;
      screen : TCARD32;
      hdisplay : TCARD16;
      hsyncstart : TCARD16;
      hsyncend : TCARD16;
      htotal : TCARD16;
      vdisplay : TCARD16;
      vsyncstart : TCARD16;
      vsyncend : TCARD16;
      vtotal : TCARD16;
      flags : TCARD32;
      privsize : TCARD32;
    end;
  TxXF86OldVidModeModModeLineReq = T_XF86OldVidModeModModeLine;

const
  sz_xXF86OldVidModeModModeLineReq = 32;  


type
  T_XF86VidModeValidateModeLine = record
      reqType : TCARD8;
      xf86vidmodeReqType : TCARD8;
      length : TCARD16;
      screen : TCARD32;
      dotclock : TCARD32;
      hdisplay : TCARD16;
      hsyncstart : TCARD16;
      hsyncend : TCARD16;
      htotal : TCARD16;
      hskew : TCARD16;
      vdisplay : TCARD16;
      vsyncstart : TCARD16;
      vsyncend : TCARD16;
      vtotal : TCARD16;
      pad1 : TCARD16;
      flags : TCARD32;
      reserved1 : TCARD32;
      reserved2 : TCARD32;
      reserved3 : TCARD32;
      privsize : TCARD32;
    end;
  TxXF86VidModeDeleteModeLineReq = T_XF86VidModeValidateModeLine;
  TxXF86VidModeValidateModeLineReq = T_XF86VidModeValidateModeLine;
  TxXF86VidModeSwitchToModeReq = T_XF86VidModeValidateModeLine;

const
  sz_xXF86VidModeDeleteModeLineReq = 52;  
  sz_xXF86VidModeValidateModeLineReq = 52;  
  sz_xXF86VidModeSwitchToModeReq = 52;  



type
  T_XF86OldVidModeValidateModeLine = record
      reqType : TCARD8;
      xf86vidmodeReqType : TCARD8;
      length : TCARD16;
      screen : TCARD32;
      dotclock : TCARD32;
      hdisplay : TCARD16;
      hsyncstart : TCARD16;
      hsyncend : TCARD16;
      htotal : TCARD16;
      vdisplay : TCARD16;
      vsyncstart : TCARD16;
      vsyncend : TCARD16;
      vtotal : TCARD16;
      flags : TCARD32;
      privsize : TCARD32;
    end;
  TxXF86OldVidModeDeleteModeLineReq = T_XF86OldVidModeValidateModeLine;
  TxXF86OldVidModeValidateModeLineReq = T_XF86OldVidModeValidateModeLine;
  TxXF86OldVidModeSwitchToModeReq = T_XF86OldVidModeValidateModeLine;

const
  sz_xXF86OldVidModeDeleteModeLineReq = 36;  
  sz_xXF86OldVidModeValidateModeLineReq = 36;  
  sz_xXF86OldVidModeSwitchToModeReq = 36;  


type
  T_XF86VidModeSwitchMode = record
      reqType : TCARD8;
      xf86vidmodeReqType : TCARD8;
      length : TCARD16;
      screen : TCARD16;
      zoom : TCARD16;
    end;
  TxXF86VidModeSwitchModeReq = T_XF86VidModeSwitchMode;

const
  sz_xXF86VidModeSwitchModeReq = 8;  


type
  T_XF86VidModeLockModeSwitch = record
      reqType : TCARD8;
      xf86vidmodeReqType : TCARD8;
      length : TCARD16;
      screen : TCARD16;
      lock : TCARD16;
    end;
  TxXF86VidModeLockModeSwitchReq = T_XF86VidModeLockModeSwitch;

const
  sz_xXF86VidModeLockModeSwitchReq = 8;  

type
  TxXF86VidModeValidateModeLineReply = record
      _type : TBYTE;
      pad1 : TBOOL;
      sequenceNumber : TCARD16;
      length : TCARD32;
      status : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;

const
  sz_xXF86VidModeValidateModeLineReply = 32;  

type
  TxXF86VidModeGetMonitorReply = record
      _type : TBYTE;
      pad1 : TBOOL;
      sequenceNumber : TCARD16;
      length : TCARD32;
      vendorLength : TCARD8;
      modelLength : TCARD8;
      nhsync : TCARD8;
      nvsync : TCARD8;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;

const
  sz_xXF86VidModeGetMonitorReply = 32;  
type
  TxXF86VidModeGetViewPortReply = record
      _type : TBYTE;
      pad1 : TBOOL;
      sequenceNumber : TCARD16;
      length : TCARD32;
      x : TCARD32;
      y : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_xXF86VidModeGetViewPortReply = 32;  


type
  T_XF86VidModeSetViewPort = record
      reqType : TCARD8;
      xf86vidmodeReqType : TCARD8;
      length : TCARD16;
      screen : TCARD16;
      pad : TCARD16;
      x : TCARD32;
      y : TCARD32;
    end;
  TxXF86VidModeSetViewPortReq = T_XF86VidModeSetViewPort;

const
  sz_xXF86VidModeSetViewPortReq = 16;  
type
  TxXF86VidModeGetDotClocksReply = record
      _type : TBYTE;
      pad1 : TBOOL;
      sequenceNumber : TCARD16;
      length : TCARD32;
      flags : TCARD32;
      clocks : TCARD32;
      maxclocks : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
    end;

const
  sz_xXF86VidModeGetDotClocksReply = 32;  

type
  T_XF86VidModeSetClientVersion = record
      reqType : TCARD8;
      xf86vidmodeReqType : TCARD8;
      length : TCARD16;
      major : TCARD16;
      minor : TCARD16;
    end;
  TxXF86VidModeSetClientVersionReq = T_XF86VidModeSetClientVersion;

const
  sz_xXF86VidModeSetClientVersionReq = 8;  

type
  T_XF86VidModeGetGamma = record
      reqType : TCARD8;
      xf86vidmodeReqType : TCARD8;
      length : TCARD16;
      screen : TCARD16;
      pad : TCARD16;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;
  TxXF86VidModeGetGammaReq = T_XF86VidModeGetGamma;

const
  sz_xXF86VidModeGetGammaReq = 32;  
type
  TxXF86VidModeGetGammaReply = record
      _type : TBYTE;
      pad : TBOOL;
      sequenceNumber : TCARD16;
      length : TCARD32;
      red : TCARD32;
      green : TCARD32;
      blue : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
    end;

const
  sz_xXF86VidModeGetGammaReply = 32;  

type
  T_XF86VidModeSetGamma = record
      reqType : TCARD8;
      xf86vidmodeReqType : TCARD8;
      length : TCARD16;
      screen : TCARD16;
      pad : TCARD16;
      red : TCARD32;
      green : TCARD32;
      blue : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
    end;
  TxXF86VidModeSetGammaReq = T_XF86VidModeSetGamma;

const
  sz_xXF86VidModeSetGammaReq = 32;  

type
  T_XF86VidModeSetGammaRamp = record
      reqType : TCARD8;
      xf86vidmodeReqType : TCARD8;
      length : TCARD16;
      screen : TCARD16;
      size : TCARD16;
    end;
  TxXF86VidModeSetGammaRampReq = T_XF86VidModeSetGammaRamp;

const
  sz_xXF86VidModeSetGammaRampReq = 8;  

type
  T_XF86VidModeGetGammaRamp = record
      reqType : TCARD8;
      xf86vidmodeReqType : TCARD8;
      length : TCARD16;
      screen : TCARD16;
      size : TCARD16;
    end;
  TxXF86VidModeGetGammaRampReq = T_XF86VidModeGetGammaRamp;

const
  sz_xXF86VidModeGetGammaRampReq = 8;  
type
  TxXF86VidModeGetGammaRampReply = record
      _type : TBYTE;
      pad : TBOOL;
      sequenceNumber : TCARD16;
      length : TCARD32;
      size : TCARD16;
      pad0 : TCARD16;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_xXF86VidModeGetGammaRampReply = 32;  

type
  T_XF86VidModeGetGammaRampSize = record
      reqType : TCARD8;
      xf86vidmodeReqType : TCARD8;
      length : TCARD16;
      screen : TCARD16;
      pad : TCARD16;
    end;
  TxXF86VidModeGetGammaRampSizeReq = T_XF86VidModeGetGammaRampSize;

const
  sz_xXF86VidModeGetGammaRampSizeReq = 8;  
type
  TxXF86VidModeGetGammaRampSizeReply = record
      _type : TBYTE;
      pad : TBOOL;
      sequenceNumber : TCARD16;
      length : TCARD32;
      size : TCARD16;
      pad0 : TCARD16;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_xXF86VidModeGetGammaRampSizeReply = 32;  
type
  TxXF86VidModeGetPermissionsReply = record
      _type : TBYTE;
      pad : TBOOL;
      sequenceNumber : TCARD16;
      length : TCARD32;
      permissions : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_xXF86VidModeGetPermissionsReply = 32;  
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/XIproto.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/XIproto.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/XIproto.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XIPROTO_H}
//// {$define _XIPROTO_H}
//// {$include <X11/Xproto.h>}
//// {$include <X11/X.h>}


const
  Window = CARD32;  
  Time = CARD32;  
  KeyCode = CARD8;  
  Mask = CARD32;  
  Atom = CARD32;  
  Cursor = CARD32;  

  MORE_EVENTS = $80;  
  DEVICE_BITS = $7F;  

  InputClassBits = $3F;  

  ModeBitsShift = 6;  
  numInputClasses = 7;  

  IEVENTS = 17;  
  IERRORS = 5;  
  IREQUESTS = 39;  
  CLIENT_REQ = 1;  
type
  T_XExtEventInfo = record
      mask : TMask;
      _type : TBYTE;
      word : TBYTE;
    end;
  TXExtEventInfo = T_XExtEventInfo;
//// {$ifndef _XITYPEDEF_POINTER}
type
  TPointer = pointer;
//// {$endif}
type
  Ttmask = record
      mask : TMask;
      dev : pointer;
    end;



const
  XI_DeviceValuator = 0;  
  XI_DeviceKeyPress = 1;  
  XI_DeviceKeyRelease = 2;  
  XI_DeviceButtonPress = 3;  
  XI_DeviceButtonRelease = 4;  
  XI_DeviceMotionNotify = 5;  
  XI_DeviceFocusIn = 6;  
  XI_DeviceFocusOut = 7;  
  XI_ProximityIn = 8;  
  XI_ProximityOut = 9;  
  XI_DeviceStateNotify = 10;  
  XI_DeviceMappingNotify = 11;  
  XI_ChangeDeviceNotify = 12;  
  XI_DeviceKeystateNotify = 13;  
  XI_DeviceButtonstateNotify = 14;  
  XI_DevicePresenceNotify = 15;  
  XI_DevicePropertyNotify = 16;  

  X_GetExtensionVersion = 1;  
  X_ListInputDevices = 2;  
  X_OpenDevice = 3;  
  X_CloseDevice = 4;  
  X_SetDeviceMode = 5;  
  X_SelectExtensionEvent = 6;  
  X_GetSelectedExtensionEvents = 7;  
  X_ChangeDeviceDontPropagateList = 8;  
  X_GetDeviceDontPropagateList = 9;  
  X_GetDeviceMotionEvents = 10;  
  X_ChangeKeyboardDevice = 11;  
  X_ChangePointerDevice = 12;  
  X_GrabDevice = 13;  
  X_UngrabDevice = 14;  
  X_GrabDeviceKey = 15;  
  X_UngrabDeviceKey = 16;  
  X_GrabDeviceButton = 17;  
  X_UngrabDeviceButton = 18;  
  X_AllowDeviceEvents = 19;  
  X_GetDeviceFocus = 20;  
  X_SetDeviceFocus = 21;  
  X_GetFeedbackControl = 22;  
  X_ChangeFeedbackControl = 23;  
  X_GetDeviceKeyMapping = 24;  
  X_ChangeDeviceKeyMapping = 25;  
  X_GetDeviceModifierMapping = 26;  
  X_SetDeviceModifierMapping = 27;  
  X_GetDeviceButtonMapping = 28;  
  X_SetDeviceButtonMapping = 29;  
  X_QueryDeviceState = 30;  
  X_SendExtensionEvent = 31;  
  X_DeviceBell = 32;  
  X_SetDeviceValuators = 33;  
  X_GetDeviceControl = 34;  
  X_ChangeDeviceControl = 35;  

  X_ListDeviceProperties = 36;  
  X_ChangeDeviceProperty = 37;  
  X_DeleteDeviceProperty = 38;  
  X_GetDeviceProperty = 39;  



type
  TxGetExtensionVersionReq = record
      reqType : TCARD8;
      ReqType : TCARD8;
      length : TCARD16;
      nbytes : TCARD16;
      pad1 : TCARD8;
      pad2 : TCARD8;
    end;



  TxGetExtensionVersionReply = record
      repType : TCARD8;
      RepType : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      major_version : TCARD16;
      minor_version : TCARD16;
      present : TBOOL;
      pad1 : TCARD8;
      pad2 : TCARD8;
      pad3 : TCARD8;
      pad01 : TCARD32;
      pad02 : TCARD32;
      pad03 : TCARD32;
      pad04 : TCARD32;
    end;




  TxListInputDevicesReq = record
      reqType : TCARD8;
      ReqType : TCARD8;
      length : TCARD16;
    end;



  TxListInputDevicesReply = record
      repType : TCARD8;
      RepType : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      ndevices : TCARD8;
      pad1 : TCARD8;
      pad2 : TCARD8;
      pad3 : TCARD8;
      pad01 : TCARD32;
      pad02 : TCARD32;
      pad03 : TCARD32;
      pad04 : TCARD32;
      pad05 : TCARD32;
    end;

  TxDeviceInfoPtr = ^T_xDeviceInfo;

  TxAnyClassPtr = ^T_xAnyClassinfo;
//// {$if defined(__cplusplus) || defined(c_plusplus)}
//// {$else}
//// {$endif}
type
  T_xAnyClassinfo = record
      c_class : TCARD8;
      _class : TCARD8;
      length : TCARD8;
    end;
  TxAnyClassInfo = T_xAnyClassinfo;



  T_xDeviceInfo = record
      _type : TCARD32;
      id : TCARD8;
      num_classes : TCARD8;
      use : TCARD8;
      attached : TCARD8;
    end;
  TxDeviceInfo = T_xDeviceInfo;

  TxKeyInfoPtr = ^T_xKeyInfo;
//// {$if defined(__cplusplus) || defined(c_plusplus)}
//// {$else}
//// {$endif}
type
  T_xKeyInfo = record
      c_class : TCARD8;
      _class : TCARD8;
      length : TCARD8;
      min_keycode : TKeyCode;
      max_keycode : TKeyCode;
      num_keys : TCARD16;
      pad1 : TCARD8;
      pad2 : TCARD8;
    end;
  TxKeyInfo = T_xKeyInfo;

  TxButtonInfoPtr = ^T_xButtonInfo;
//// {$if defined(__cplusplus) || defined(c_plusplus)}
//// {$else}
//// {$endif}
type
  T_xButtonInfo = record
      c_class : TCARD8;
      _class : TCARD8;
      length : TCARD8;
      num_buttons : TCARD16;
    end;
  TxButtonInfo = T_xButtonInfo;

  TxValuatorInfoPtr = ^T_xValuatorInfo;
//// {$if defined(__cplusplus) || defined(c_plusplus)}
//// {$else}
//// {$endif}
type
  T_xValuatorInfo = record
      c_class : TCARD8;
      _class : TCARD8;
      length : TCARD8;
      num_axes : TCARD8;
      mode : TCARD8;
      motion_buffer_size : TCARD32;
    end;
  TxValuatorInfo = T_xValuatorInfo;

  TxAxisInfoPtr = ^T_xAxisInfo;

  T_xAxisInfo = record
      resolution : TCARD32;
      min_value : TCARD32;
      max_value : TCARD32;
    end;
  TxAxisInfo = T_xAxisInfo;




  TxOpenDeviceReq = record
      reqType : TCARD8;
      ReqType : TCARD8;
      length : TCARD16;
      deviceid : TCARD8;
      pad1 : TBYTE;
      pad2 : TBYTE;
      pad3 : TBYTE;
    end;



  TxOpenDeviceReply = record
      repType : TCARD8;
      RepType : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      num_classes : TCARD8;
      pad1 : TBYTE;
      pad2 : TBYTE;
      pad3 : TBYTE;
      pad00 : TCARD32;
      pad01 : TCARD32;
      pad02 : TCARD32;
      pad03 : TCARD32;
      pad04 : TCARD32;
    end;
//// {$if defined(__cplusplus) || defined(c_plusplus)}
//// {$else}
//// {$endif}
type
  TxInputClassInfo = record
      c_class : TCARD8;
      _class : TCARD8;
      event_type_base : TCARD8;
    end;




  TxCloseDeviceReq = record
      reqType : TCARD8;
      ReqType : TCARD8;
      length : TCARD16;
      deviceid : TCARD8;
      pad1 : TBYTE;
      pad2 : TBYTE;
      pad3 : TBYTE;
    end;




  TxSetDeviceModeReq = record
      reqType : TCARD8;
      ReqType : TCARD8;
      length : TCARD16;
      deviceid : TCARD8;
      mode : TCARD8;
      pad1 : TBYTE;
      pad2 : TBYTE;
    end;



  TxSetDeviceModeReply = record
      repType : TCARD8;
      RepType : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      status : TCARD8;
      pad1 : TBYTE;
      pad2 : TBYTE;
      pad3 : TBYTE;
      pad01 : TCARD32;
      pad02 : TCARD32;
      pad03 : TCARD32;
      pad04 : TCARD32;
      pad05 : TCARD32;
    end;




  TxSelectExtensionEventReq = record
      reqType : TCARD8;
      ReqType : TCARD8;
      length : TCARD16;
      window : TWindow;
      count : TCARD16;
      pad00 : TCARD16;
    end;




  TxGetSelectedExtensionEventsReq = record
      reqType : TCARD8;
      ReqType : TCARD8;
      length : TCARD16;
      window : TWindow;
    end;



  TxGetSelectedExtensionEventsReply = record
      repType : TCARD8;
      RepType : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      this_client_count : TCARD16;
      all_clients_count : TCARD16;
      pad01 : TCARD32;
      pad02 : TCARD32;
      pad03 : TCARD32;
      pad04 : TCARD32;
      pad05 : TCARD32;
    end;




  TxChangeDeviceDontPropagateListReq = record
      reqType : TCARD8;
      ReqType : TCARD8;
      length : TCARD16;
      window : TWindow;
      count : TCARD16;
      mode : TCARD8;
      pad : TBYTE;
    end;




  TxGetDeviceDontPropagateListReq = record
      reqType : TCARD8;
      ReqType : TCARD8;
      length : TCARD16;
      window : TWindow;
    end;



  TxGetDeviceDontPropagateListReply = record
      repType : TCARD8;
      RepType : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      count : TCARD16;
      pad00 : TCARD16;
      pad01 : TCARD32;
      pad02 : TCARD32;
      pad03 : TCARD32;
      pad04 : TCARD32;
      pad05 : TCARD32;
    end;




  TxGetDeviceMotionEventsReq = record
      reqType : TCARD8;
      ReqType : TCARD8;
      length : TCARD16;
      start : TTime;
      stop : TTime;
      deviceid : TCARD8;
      pad1 : TBYTE;
      pad2 : TBYTE;
      pad3 : TBYTE;
    end;



  TxGetDeviceMotionEventsReply = record
      repType : TCARD8;
      RepType : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      nEvents : TCARD32;
      axes : TCARD8;
      mode : TCARD8;
      pad1 : TBYTE;
      pad2 : TBYTE;
      pad01 : TCARD32;
      pad02 : TCARD32;
      pad03 : TCARD32;
      pad04 : TCARD32;
    end;




  TxChangeKeyboardDeviceReq = record
      reqType : TCARD8;
      ReqType : TCARD8;
      length : TCARD16;
      deviceid : TCARD8;
      pad1 : TBYTE;
      pad2 : TBYTE;
      pad3 : TBYTE;
    end;




  TxChangeKeyboardDeviceReply = record
      repType : TCARD8;
      RepType : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      status : TCARD8;
      pad1 : TBYTE;
      pad2 : TBYTE;
      pad3 : TBYTE;
      pad01 : TCARD32;
      pad02 : TCARD32;
      pad03 : TCARD32;
      pad04 : TCARD32;
      pad05 : TCARD32;
    end;




  TxChangePointerDeviceReq = record
      reqType : TCARD8;
      ReqType : TCARD8;
      length : TCARD16;
      xaxis : TCARD8;
      yaxis : TCARD8;
      deviceid : TCARD8;
      pad1 : TBYTE;
    end;




  TxChangePointerDeviceReply = record
      repType : TCARD8;
      RepType : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      status : TCARD8;
      pad1 : TBYTE;
      pad2 : TBYTE;
      pad3 : TBYTE;
      pad01 : TCARD32;
      pad02 : TCARD32;
      pad03 : TCARD32;
      pad04 : TCARD32;
      pad05 : TCARD32;
    end;




  TxGrabDeviceReq = record
      reqType : TCARD8;
      ReqType : TCARD8;
      length : TCARD16;
      grabWindow : TWindow;
      time : TTime;
      event_count : TCARD16;
      this_device_mode : TCARD8;
      other_devices_mode : TCARD8;
      ownerEvents : TBOOL;
      deviceid : TCARD8;
      pad01 : TCARD16;
    end;




  TxGrabDeviceReply = record
      repType : TCARD8;
      RepType : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      status : TCARD8;
      pad1 : TBYTE;
      pad2 : TBYTE;
      pad3 : TBYTE;
      pad01 : TCARD32;
      pad02 : TCARD32;
      pad03 : TCARD32;
      pad04 : TCARD32;
      pad05 : TCARD32;
    end;




  TxUngrabDeviceReq = record
      reqType : TCARD8;
      ReqType : TCARD8;
      length : TCARD16;
      time : TTime;
      deviceid : TCARD8;
      pad1 : TBYTE;
      pad2 : TBYTE;
      pad3 : TBYTE;
    end;




  TxGrabDeviceKeyReq = record
      reqType : TCARD8;
      ReqType : TCARD8;
      length : TCARD16;
      grabWindow : TWindow;
      event_count : TCARD16;
      modifiers : TCARD16;
      modifier_device : TCARD8;
      grabbed_device : TCARD8;
      key : TCARD8;
      this_device_mode : TBYTE;
      other_devices_mode : TBYTE;
      ownerEvents : TBOOL;
      pad1 : TBYTE;
      pad2 : TBYTE;
    end;




  TxUngrabDeviceKeyReq = record
      reqType : TCARD8;
      ReqType : TCARD8;
      length : TCARD16;
      grabWindow : TWindow;
      modifiers : TCARD16;
      modifier_device : TCARD8;
      key : TCARD8;
      grabbed_device : TCARD8;
      pad1 : TBYTE;
      pad2 : TBYTE;
      pad3 : TBYTE;
    end;




  TxGrabDeviceButtonReq = record
      reqType : TCARD8;
      ReqType : TCARD8;
      length : TCARD16;
      grabWindow : TWindow;
      grabbed_device : TCARD8;
      modifier_device : TCARD8;
      event_count : TCARD16;
      modifiers : TCARD16;
      this_device_mode : TBYTE;
      other_devices_mode : TBYTE;
      button : TCARD8;
      ownerEvents : TBOOL;
      pad1 : TBYTE;
      pad2 : TBYTE;
    end;




  TxUngrabDeviceButtonReq = record
      reqType : TCARD8;
      ReqType : TCARD8;
      length : TCARD16;
      grabWindow : TWindow;
      modifiers : TCARD16;
      modifier_device : TCARD8;
      button : TCARD8;
      grabbed_device : TCARD8;
      pad1 : TBYTE;
      pad2 : TBYTE;
      pad3 : TBYTE;
    end;




  TxAllowDeviceEventsReq = record
      reqType : TCARD8;
      ReqType : TCARD8;
      length : TCARD16;
      time : TTime;
      mode : TCARD8;
      deviceid : TCARD8;
      pad1 : TBYTE;
      pad2 : TBYTE;
    end;




  TxGetDeviceFocusReq = record
      reqType : TCARD8;
      ReqType : TCARD8;
      length : TCARD16;
      deviceid : TCARD8;
      pad1 : TBYTE;
      pad2 : TBYTE;
      pad3 : TBYTE;
    end;



  TxGetDeviceFocusReply = record
      repType : TCARD8;
      RepType : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      focus : TCARD32;
      time : TTime;
      revertTo : TCARD8;
      pad1 : TBYTE;
      pad2 : TBYTE;
      pad3 : TBYTE;
      pad01 : TCARD32;
      pad02 : TCARD32;
      pad03 : TCARD32;
    end;




  TxSetDeviceFocusReq = record
      reqType : TCARD8;
      ReqType : TCARD8;
      length : TCARD16;
      focus : TWindow;
      time : TTime;
      revertTo : TCARD8;
      device : TCARD8;
      pad01 : TCARD16;
    end;




  TxGetFeedbackControlReq = record
      reqType : TCARD8;
      ReqType : TCARD8;
      length : TCARD16;
      deviceid : TCARD8;
      pad1 : TBYTE;
      pad2 : TBYTE;
      pad3 : TBYTE;
    end;



  TxGetFeedbackControlReply = record
      repType : TCARD8;
      RepType : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      num_feedbacks : TCARD16;
      pad01 : TCARD16;
      pad02 : TCARD32;
      pad03 : TCARD32;
      pad04 : TCARD32;
      pad05 : TCARD32;
      pad06 : TCARD32;
    end;
//// {$if defined(__cplusplus) || defined(c_plusplus)}

//// {$else}

//// {$endif}


type
  TxFeedbackState = record
      c_class : TCARD8;
      _class : TCARD8;
      id : TCARD8;
      length : TCARD16;
    end;
//// {$if defined(__cplusplus) || defined(c_plusplus)}
//// {$else}
//// {$endif}
type
  TxKbdFeedbackState = record
      c_class : TCARD8;
      _class : TCARD8;
      id : TCARD8;
      length : TCARD16;
      pitch : TCARD16;
      duration : TCARD16;
      led_mask : TCARD32;
      led_values : TCARD32;
      global_auto_repeat : TBOOL;
      click : TCARD8;
      percent : TCARD8;
      pad : TBYTE;
      auto_repeats : array[0..31] of TBYTE;
    end;
//// {$if defined(__cplusplus) || defined(c_plusplus)}
//// {$else}
//// {$endif}
type
  TxPtrFeedbackState = record
      c_class : TCARD8;
      _class : TCARD8;
      id : TCARD8;
      length : TCARD16;
      pad1 : TCARD8;
      pad2 : TCARD8;
      accelNum : TCARD16;
      accelDenom : TCARD16;
      threshold : TCARD16;
    end;
//// {$if defined(__cplusplus) || defined(c_plusplus)}

//// {$else}

//// {$endif}

type
  TxIntegerFeedbackState = record
      c_class : TCARD8;
      _class : TCARD8;
      id : TCARD8;
      length : TCARD16;
      resolution : TCARD32;
      min_value : TINT32;
      max_value : TINT32;
    end;
//// {$if defined(__cplusplus) || defined(c_plusplus)}

//// {$else}

//// {$endif}

type
  TxStringFeedbackState = record
      c_class : TCARD8;
      _class : TCARD8;
      id : TCARD8;
      length : TCARD16;
      max_symbols : TCARD16;
      num_syms_supported : TCARD16;
    end;
//// {$if defined(__cplusplus) || defined(c_plusplus)}

//// {$else}

//// {$endif}

type
  TxBellFeedbackState = record
      c_class : TCARD8;
      _class : TCARD8;
      id : TCARD8;
      length : TCARD16;
      percent : TCARD8;
      pad1 : TBYTE;
      pad2 : TBYTE;
      pad3 : TBYTE;
      pitch : TCARD16;
      duration : TCARD16;
    end;
//// {$if defined(__cplusplus) || defined(c_plusplus)}

//// {$else}

//// {$endif}

type
  TxLedFeedbackState = record
      c_class : TCARD8;
      _class : TCARD8;
      id : TCARD8;
      length : TCARD16;
      led_mask : TCARD32;
      led_values : TCARD32;
    end;




  TxChangeFeedbackControlReq = record
      reqType : TCARD8;
      ReqType : TCARD8;
      length : TCARD16;
      mask : TCARD32;
      deviceid : TCARD8;
      feedbackid : TCARD8;
      pad1 : TBYTE;
      pad2 : TBYTE;
    end;
//// {$if defined(__cplusplus) || defined(c_plusplus)}

//// {$else}

//// {$endif}


type
  TxFeedbackCtl = record
      c_class : TCARD8;
      _class : TCARD8;
      id : TCARD8;
      length : TCARD16;
    end;
//// {$if defined(__cplusplus) || defined(c_plusplus)}

//// {$else}

//// {$endif}


type
  TxKbdFeedbackCtl = record
      c_class : TCARD8;
      _class : TCARD8;
      id : TCARD8;
      length : TCARD16;
      key : TKeyCode;
      auto_repeat_mode : TCARD8;
      click : TINT8;
      percent : TINT8;
      pitch : TINT16;
      duration : TINT16;
      led_mask : TCARD32;
      led_values : TCARD32;
    end;
//// {$if defined(__cplusplus) || defined(c_plusplus)}

//// {$else}

//// {$endif}


type
  TxPtrFeedbackCtl = record
      c_class : TCARD8;
      _class : TCARD8;
      id : TCARD8;
      length : TCARD16;
      pad1 : TCARD8;
      pad2 : TCARD8;
      num : TINT16;
      denom : TINT16;
      thresh : TINT16;
    end;
//// {$if defined(__cplusplus) || defined(c_plusplus)}

//// {$else}

//// {$endif}


type
  TxIntegerFeedbackCtl = record
      c_class : TCARD8;
      _class : TCARD8;
      id : TCARD8;
      length : TCARD16;
      int_to_display : TINT32;
    end;
//// {$if defined(__cplusplus) || defined(c_plusplus)}

//// {$else}

//// {$endif}


type
  TxStringFeedbackCtl = record
      c_class : TCARD8;
      _class : TCARD8;
      id : TCARD8;
      length : TCARD16;
      pad1 : TCARD8;
      pad2 : TCARD8;
      num_keysyms : TCARD16;
    end;
//// {$if defined(__cplusplus) || defined(c_plusplus)}

//// {$else}

//// {$endif}


type
  TxBellFeedbackCtl = record
      c_class : TCARD8;
      _class : TCARD8;
      id : TCARD8;
      length : TCARD16;
      percent : TINT8;
      pad1 : TBYTE;
      pad2 : TBYTE;
      pad3 : TBYTE;
      pitch : TINT16;
      duration : TINT16;
    end;
//// {$if defined(__cplusplus) || defined(c_plusplus)}

//// {$else}

//// {$endif}


type
  TxLedFeedbackCtl = record
      c_class : TCARD8;
      _class : TCARD8;
      id : TCARD8;
      length : TCARD16;
      led_mask : TCARD32;
      led_values : TCARD32;
    end;




  TxGetDeviceKeyMappingReq = record
      reqType : TCARD8;
      ReqType : TCARD8;
      length : TCARD16;
      deviceid : TCARD8;
      firstKeyCode : TKeyCode;
      count : TCARD8;
      pad1 : TBYTE;
    end;



  TxGetDeviceKeyMappingReply = record
      repType : TCARD8;
      RepType : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      keySymsPerKeyCode : TCARD8;
      pad0 : TCARD8;
      pad1 : TCARD16;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;




  TxChangeDeviceKeyMappingReq = record
      reqType : TCARD8;
      ReqType : TCARD8;
      length : TCARD16;
      deviceid : TCARD8;
      firstKeyCode : TKeyCode;
      keySymsPerKeyCode : TCARD8;
      keyCodes : TCARD8;
    end;




  TxGetDeviceModifierMappingReq = record
      reqType : TCARD8;
      ReqType : TCARD8;
      length : TCARD16;
      deviceid : TCARD8;
      pad1 : TBYTE;
      pad2 : TBYTE;
      pad3 : TBYTE;
    end;



  TxGetDeviceModifierMappingReply = record
      repType : TCARD8;
      RepType : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      numKeyPerModifier : TCARD8;
      pad0 : TCARD8;
      pad1 : TCARD16;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;




  TxSetDeviceModifierMappingReq = record
      reqType : TCARD8;
      ReqType : TCARD8;
      length : TCARD16;
      deviceid : TCARD8;
      numKeyPerModifier : TCARD8;
      pad1 : TCARD16;
    end;



  TxSetDeviceModifierMappingReply = record
      repType : TCARD8;
      RepType : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      success : TCARD8;
      pad0 : TCARD8;
      pad1 : TCARD16;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;




  TxGetDeviceButtonMappingReq = record
      reqType : TCARD8;
      ReqType : TCARD8;
      length : TCARD16;
      deviceid : TCARD8;
      pad1 : TBYTE;
      pad2 : TBYTE;
      pad3 : TBYTE;
    end;



  TxGetDeviceButtonMappingReply = record
      repType : TCARD8;
      RepType : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      nElts : TCARD8;
      pad1 : TBYTE;
      pad2 : TBYTE;
      pad3 : TBYTE;
      pad01 : TCARD32;
      pad02 : TCARD32;
      pad03 : TCARD32;
      pad04 : TCARD32;
      pad05 : TCARD32;
    end;




  TxSetDeviceButtonMappingReq = record
      reqType : TCARD8;
      ReqType : TCARD8;
      length : TCARD16;
      deviceid : TCARD8;
      map_length : TCARD8;
      pad1 : TBYTE;
      pad2 : TBYTE;
    end;



  TxSetDeviceButtonMappingReply = record
      repType : TCARD8;
      RepType : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      status : TCARD8;
      pad0 : TBYTE;
      pad1 : TCARD16;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;



  TxQueryDeviceStateReq = record
      reqType : TCARD8;
      ReqType : TCARD8;
      length : TCARD16;
      deviceid : TCARD8;
      pad1 : TBYTE;
      pad2 : TBYTE;
      pad3 : TBYTE;
    end;



  TxQueryDeviceStateReply = record
      repType : TCARD8;
      RepType : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      num_classes : TCARD8;
      pad0 : TBYTE;
      pad1 : TCARD16;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;
//// {$if defined(__cplusplus) || defined(c_plusplus)}
//// {$else}
//// {$endif}
type
  TxKeyState = record
      c_class : TCARD8;
      _class : TCARD8;
      length : TCARD8;
      num_keys : TCARD8;
      pad1 : TBYTE;
      keys : array[0..31] of TCARD8;
    end;
//// {$if defined(__cplusplus) || defined(c_plusplus)}
//// {$else}
//// {$endif}
type
  TxButtonState = record
      c_class : TCARD8;
      _class : TCARD8;
      length : TCARD8;
      num_buttons : TCARD8;
      pad1 : TBYTE;
      buttons : array[0..31] of TCARD8;
    end;
//// {$if defined(__cplusplus) || defined(c_plusplus)}
//// {$else}
//// {$endif}
type
  TxValuatorState = record
      c_class : TCARD8;
      _class : TCARD8;
      length : TCARD8;
      num_valuators : TCARD8;
      mode : TCARD8;
    end;



  TxSendExtensionEventReq = record
      reqType : TCARD8;
      ReqType : TCARD8;
      length : TCARD16;
      destination : TWindow;
      deviceid : TCARD8;
      propagate : TBOOL;
      count : TCARD16;
      num_events : TCARD8;
      pad1 : TBYTE;
      pad2 : TBYTE;
      pad3 : TBYTE;
    end;



  TxDeviceBellReq = record
      reqType : TCARD8;
      ReqType : TCARD8;
      length : TCARD16;
      deviceid : TCARD8;
      feedbackid : TCARD8;
      feedbackclass : TCARD8;
      percent : TINT8;
    end;




  TxSetDeviceValuatorsReq = record
      reqType : TCARD8;
      ReqType : TCARD8;
      length : TCARD16;
      deviceid : TCARD8;
      first_valuator : TCARD8;
      num_valuators : TCARD8;
      pad1 : TBYTE;
    end;



  TxSetDeviceValuatorsReply = record
      repType : TCARD8;
      RepType : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      status : TCARD8;
      pad1 : TBYTE;
      pad2 : TBYTE;
      pad3 : TBYTE;
      pad01 : TCARD32;
      pad02 : TCARD32;
      pad03 : TCARD32;
      pad04 : TCARD32;
      pad05 : TCARD32;
    end;




  TxGetDeviceControlReq = record
      reqType : TCARD8;
      ReqType : TCARD8;
      length : TCARD16;
      control : TCARD16;
      deviceid : TCARD8;
      pad2 : TBYTE;
    end;



  TxGetDeviceControlReply = record
      repType : TCARD8;
      RepType : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      status : TCARD8;
      pad1 : TBYTE;
      pad2 : TBYTE;
      pad3 : TBYTE;
      pad01 : TCARD32;
      pad02 : TCARD32;
      pad03 : TCARD32;
      pad04 : TCARD32;
      pad05 : TCARD32;
    end;



  TxDeviceState = record
      control : TCARD16;
      length : TCARD16;
    end;




  TxDeviceResolutionState = record
      control : TCARD16;
      length : TCARD16;
      num_valuators : TCARD32;
    end;

  TxDeviceAbsCalibState = record
      control : TCARD16;
      length : TCARD16;
      min_x : TINT32;
      max_x : TINT32;
      min_y : TINT32;
      max_y : TINT32;
      flip_x : TCARD32;
      flip_y : TCARD32;
      rotation : TCARD32;
      button_threshold : TCARD32;
    end;

  TxDeviceAbsAreaState = record
      control : TCARD16;
      length : TCARD16;
      offset_x : TCARD32;
      offset_y : TCARD32;
      width : TCARD32;
      height : TCARD32;
      screen : TCARD32;
      following : TCARD32;
    end;



  TxDeviceCoreState = record
      control : TCARD16;
      length : TCARD16;
      status : TCARD8;
      iscore : TCARD8;
      pad1 : TCARD16;
    end;



  TxDeviceEnableState = record
      control : TCARD16;
      length : TCARD16;
      enable : TCARD8;
      pad0 : TCARD8;
      pad1 : TCARD16;
    end;




  TxChangeDeviceControlReq = record
      reqType : TCARD8;
      ReqType : TCARD8;
      length : TCARD16;
      control : TCARD16;
      deviceid : TCARD8;
      pad0 : TBYTE;
    end;



  TxChangeDeviceControlReply = record
      repType : TCARD8;
      RepType : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      status : TCARD8;
      pad1 : TBYTE;
      pad2 : TBYTE;
      pad3 : TBYTE;
      pad01 : TCARD32;
      pad02 : TCARD32;
      pad03 : TCARD32;
      pad04 : TCARD32;
      pad05 : TCARD32;
    end;



  TxDeviceCtl = record
      control : TCARD16;
      length : TCARD16;
    end;





  TxDeviceResolutionCtl = record
      control : TCARD16;
      length : TCARD16;
      first_valuator : TCARD8;
      num_valuators : TCARD8;
      pad1 : TCARD8;
      pad2 : TCARD8;
    end;

  TxDeviceAbsCalibCtl = record
      control : TCARD16;
      length : TCARD16;
      min_x : TINT32;
      max_x : TINT32;
      min_y : TINT32;
      max_y : TINT32;
      flip_x : TCARD32;
      flip_y : TCARD32;
      rotation : TCARD32;
      button_threshold : TCARD32;
    end;

  TxDeviceAbsAreaCtl = record
      control : TCARD16;
      length : TCARD16;
      offset_x : TCARD32;
      offset_y : TCARD32;
      width : TINT32;
      height : TINT32;
      screen : TINT32;
      following : TCARD32;
    end;

  TxDeviceCoreCtl = record
      control : TCARD16;
      length : TCARD16;
      status : TCARD8;
      pad0 : TCARD8;
      pad1 : TCARD16;
    end;

  TxDeviceEnableCtl = record
      control : TCARD16;
      length : TCARD16;
      enable : TCARD8;
      pad0 : TCARD8;
      pad1 : TCARD16;
    end;





  TxListDevicePropertiesReq = record
      reqType : TCARD8;
      ReqType : TCARD8;
      length : TCARD16;
      deviceid : TCARD8;
      pad0 : TCARD8;
      pad1 : TCARD16;
    end;



  TxListDevicePropertiesReply = record
      repType : TCARD8;
      RepType : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      nAtoms : TCARD16;
      pad1 : TCARD16;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;




  TxChangeDevicePropertyReq = record
      reqType : TCARD8;
      ReqType : TCARD8;
      length : TCARD16;
      _property : TAtom;
      _type : TAtom;
      deviceid : TCARD8;
      format : TCARD8;
      mode : TCARD8;
      pad : TCARD8;
      nUnits : TCARD32;
    end;




  TxDeleteDevicePropertyReq = record
      reqType : TCARD8;
      ReqType : TCARD8;
      length : TCARD16;
      _property : TAtom;
      deviceid : TCARD8;
      pad0 : TCARD8;
      pad1 : TCARD16;
    end;



//// {$if defined(__cplusplus) || defined(c_plusplus)}
//// {$else}
//// {$endif}
type
  TxGetDevicePropertyReq = record
      reqType : TCARD8;
      ReqType : TCARD8;
      length : TCARD16;
      _property : TAtom;
      _type : TAtom;
      longOffset : TCARD32;
      longLength : TCARD32;
      deviceid : TCARD8;
      c_delete : TBOOL;
      delete : TBOOL;
      pad : TCARD16;
    end;



  TxGetDevicePropertyReply = record
      repType : TCARD8;
      RepType : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      propertyType : TAtom;
      bytesAfter : TCARD32;
      nItems : TCARD32;
      format : TCARD8;
      deviceid : TCARD8;
      pad1 : TCARD16;
      pad2 : TCARD32;
      pad3 : TCARD32;
    end;


  TdeviceValuator = record
      _type : TBYTE;
      deviceid : TCARD8;
      sequenceNumber : TCARD16;
      device_state : TKeyButMask;
      num_valuators : TCARD8;
      first_valuator : TCARD8;
      valuator0 : TINT32;
      valuator1 : TINT32;
      valuator2 : TINT32;
      valuator3 : TINT32;
      valuator4 : TINT32;
      valuator5 : TINT32;
    end;


  TdeviceKeyButtonPointer = record
      _type : TBYTE;
      detail : TBYTE;
      sequenceNumber : TCARD16;
      time : TTime;
      root : TWindow;
      event : TWindow;
      child : TWindow;
      root_x : TINT16;
      root_y : TINT16;
      event_x : TINT16;
      event_y : TINT16;
      state : TKeyButMask;
      same_screen : TBOOL;
      deviceid : TCARD8;
    end;


  TdeviceFocus = record
      _type : TBYTE;
      detail : TBYTE;
      sequenceNumber : TCARD16;
      time : TTime;
      window : TWindow;
      mode : TBYTE;
      deviceid : TCARD8;
      pad1 : TBYTE;
      pad2 : TBYTE;
      pad00 : TCARD32;
      pad01 : TCARD32;
      pad02 : TCARD32;
      pad03 : TCARD32;
    end;


  TdeviceStateNotify = record
      _type : TBYTE;
      deviceid : TBYTE;
      sequenceNumber : TCARD16;
      time : TTime;
      num_keys : TCARD8;
      num_buttons : TCARD8;
      num_valuators : TCARD8;
      classes_reported : TCARD8;
      buttons : array[0..3] of TCARD8;
      keys : array[0..3] of TCARD8;
      valuator0 : TINT32;
      valuator1 : TINT32;
      valuator2 : TINT32;
    end;


  TdeviceKeyStateNotify = record
      _type : TBYTE;
      deviceid : TBYTE;
      sequenceNumber : TCARD16;
      keys : array[0..27] of TCARD8;
    end;


  TdeviceButtonStateNotify = record
      _type : TBYTE;
      deviceid : TBYTE;
      sequenceNumber : TCARD16;
      buttons : array[0..27] of TCARD8;
    end;


  TdeviceMappingNotify = record
      _type : TBYTE;
      deviceid : TBYTE;
      sequenceNumber : TCARD16;
      request : TCARD8;
      firstKeyCode : TKeyCode;
      count : TCARD8;
      pad1 : TBYTE;
      time : TTime;
      pad00 : TCARD32;
      pad01 : TCARD32;
      pad02 : TCARD32;
      pad03 : TCARD32;
      pad04 : TCARD32;
    end;


  TchangeDeviceNotify = record
      _type : TBYTE;
      deviceid : TBYTE;
      sequenceNumber : TCARD16;
      time : TTime;
      request : TCARD8;
      pad1 : TBYTE;
      pad2 : TBYTE;
      pad3 : TBYTE;
      pad00 : TCARD32;
      pad01 : TCARD32;
      pad02 : TCARD32;
      pad03 : TCARD32;
      pad04 : TCARD32;
    end;



  TdevicePresenceNotify = record
      _type : TBYTE;
      pad00 : TBYTE;
      sequenceNumber : TCARD16;
      time : TTime;
      devchange : TBYTE;
      deviceid : TBYTE;
      control : TCARD16;
      pad02 : TCARD32;
      pad03 : TCARD32;
      pad04 : TCARD32;
      pad05 : TCARD32;
      pad06 : TCARD32;
    end;





  TdevicePropertyNotify = record
      _type : TBYTE;
      state : TBYTE;
      sequenceNumber : TCARD16;
      time : TCARD32;
      atom : TAtom;
      pad0 : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad5 : TCARD16;
      pad4 : TCARD8;
      deviceid : TCARD8;
    end;
//// {$undef Window}
//// {$undef Time}
//// {$undef KeyCode}
//// {$undef Mask}
//// {$undef Atom}
//// {$undef Cursor}
//// {$endif}

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/dri2tokens.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/dri2tokens.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/dri2tokens.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _DRI2_TOKENS_H_}
//// {$define _DRI2_TOKENS_H_}

const
  DRI2BufferFrontLeft = 0;  
  DRI2BufferBackLeft = 1;  
  DRI2BufferFrontRight = 2;  
  DRI2BufferBackRight = 3;  
  DRI2BufferDepth = 4;  
  DRI2BufferStencil = 5;  
  DRI2BufferAccum = 6;  
  DRI2BufferFakeFrontLeft = 7;  
  DRI2BufferFakeFrontRight = 8;  
  DRI2BufferDepthStencil = 9;  
  DRI2BufferHiz = 10;  


  DRI2DriverPrimeMask = 7;  
  DRI2DriverPrimeShift = 16;  

function DRI2DriverPrimeId(x : longint) : longint;

const
  DRI2DriverDRI = 0;  
  DRI2DriverVDPAU = 1;  

  DRI2_EXCHANGE_COMPLETE = $1;  
  DRI2_BLIT_COMPLETE = $2;  
  DRI2_FLIP_COMPLETE = $3;  
//// {$endif}

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/lbx.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/lbx.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/lbx.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _LBX_H_}
//// {$define _LBX_H_}

const
  LBXNAME = 'LBX';  
  LBX_MAJOR_VERSION = 1;  
  LBX_MINOR_VERSION = 0;  
  LbxNumberReqs = 44;  
  LbxEvent = 0;  
  LbxQuickMotionDeltaEvent = 1;  
  LbxNumberEvents = 2;  

  LbxMasterClientIndex = 0;  

  LbxSwitchEvent = 0;  
  LbxCloseEvent = 1;  
  LbxDeltaEvent = 2;  
  LbxInvalidateTagEvent = 3;  
  LbxSendTagDataEvent = 4;  
  LbxListenToOne = 5;  
  LbxListenToAll = 6;  
  LbxMotionDeltaEvent = 7;  
  LbxReleaseCmapEvent = 8;  
  LbxFreeCellsEvent = 9;  

  LbxImageCompressNone = 0;  
  BadLbxClient = 0;  
  LbxNumberErrors = BadLbxClient+1;  

  LbxTagTypeModmap = 1;  
  LbxTagTypeKeymap = 2;  
  LbxTagTypeProperty = 3;  
  LbxTagTypeFont = 4;  
  LbxTagTypeConnInfo = 5;  
//// {$endif}

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/applewmproto.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/applewmproto.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/applewmproto.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _APPLEWMPROTO_H_}
//// {$define _APPLEWMPROTO_H_}
//// {$include <X11/extensions/applewmconst.h>}
//// {$include <X11/X.h>}
//// {$include <X11/Xmd.h>}

const
  APPLEWMNAME = 'Apple-WM';  

  APPLE_WM_MAJOR_VERSION = 1;  
  APPLE_WM_MINOR_VERSION = 3;  
  APPLE_WM_PATCH_VERSION = 0;  
  X_AppleWMQueryVersion = 0;  
  X_AppleWMFrameGetRect = 1;  
  X_AppleWMFrameHitTest = 2;  
  X_AppleWMFrameDraw = 3;  
  X_AppleWMDisableUpdate = 4;  
  X_AppleWMReenableUpdate = 5;  
  X_AppleWMSelectInput = 6;  
  X_AppleWMSetWindowMenuCheck = 7;  
  X_AppleWMSetFrontProcess = 8;  
  X_AppleWMSetWindowLevel = 9;  
  X_AppleWMSetCanQuit = 10;  
  X_AppleWMSetWindowMenu = 11;  
  X_AppleWMSendPSN = 12;  
  X_AppleWMAttachTransient = 13;  

  Window = CARD32;  
  Drawable = CARD32;  
  Font = CARD32;  
  Pixmap = CARD32;  
  Cursor = CARD32;  
  Colormap = CARD32;  
  GContext = CARD32;  
  Atom = CARD32;  
  VisualID = CARD32;  
  Time = CARD32;  
  KeyCode = CARD8;  
  KeySym = CARD32;  


type
  T_AppleWMQueryVersion = record
      reqType : TCARD8;
      wmReqType : TCARD8;
      length : TCARD16;
    end;
  TxAppleWMQueryVersionReq = T_AppleWMQueryVersion;

const
  sz_xAppleWMQueryVersionReq = 4;  




type
  TxAppleWMQueryVersionReply = record
      _type : TBYTE;
      pad1 : TBOOL;
      sequenceNumber : TCARD16;
      length : TCARD32;
      majorVersion : TCARD16;
      minorVersion : TCARD16;
      patchVersion : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;

const
  sz_xAppleWMQueryVersionReply = 32;  


type
  T_AppleWMDisableUpdate = record
      reqType : TCARD8;
      wmReqType : TCARD8;
      length : TCARD16;
      screen : TCARD32;
    end;
  TxAppleWMDisableUpdateReq = T_AppleWMDisableUpdate;

const
  sz_xAppleWMDisableUpdateReq = 8;  


type
  T_AppleWMReenableUpdate = record
      reqType : TCARD8;
      wmReqType : TCARD8;
      length : TCARD16;
      screen : TCARD32;
    end;
  TxAppleWMReenableUpdateReq = T_AppleWMReenableUpdate;

const
  sz_xAppleWMReenableUpdateReq = 8;  


type
  T_AppleWMSelectInput = record
      reqType : TCARD8;
      wmReqType : TCARD8;
      length : TCARD16;
      mask : TCARD32;
    end;
  TxAppleWMSelectInputReq = T_AppleWMSelectInput;

const
  sz_xAppleWMSelectInputReq = 8;  


type
  T_AppleWMNotify = record
      _type : TBYTE;
      kind : TBYTE;
      sequenceNumber : TCARD16;
      time : TTime;
      pad1 : TCARD16;
      arg : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;
  TxAppleWMNotifyEvent = T_AppleWMNotify;

const
  sz_xAppleWMNotifyEvent = 32;  


type
  T_AppleWMSetWindowMenu = record
      reqType : TCARD8;
      wmReqType : TCARD8;
      length : TCARD16;
      nitems : TCARD16;
      pad1 : TCARD16;
    end;
  TxAppleWMSetWindowMenuReq = T_AppleWMSetWindowMenu;

const
  sz_xAppleWMSetWindowMenuReq = 8;  


type
  T_AppleWMSetWindowMenuCheck = record
      reqType : TCARD8;
      wmReqType : TCARD8;
      length : TCARD16;
      index : TCARD32;
    end;
  TxAppleWMSetWindowMenuCheckReq = T_AppleWMSetWindowMenuCheck;

const
  sz_xAppleWMSetWindowMenuCheckReq = 8;  


type
  T_AppleWMSetFrontProcess = record
      reqType : TCARD8;
      wmReqType : TCARD8;
      length : TCARD16;
    end;
  TxAppleWMSetFrontProcessReq = T_AppleWMSetFrontProcess;

const
  sz_xAppleWMSetFrontProcessReq = 4;  


type
  T_AppleWMSetWindowLevel = record
      reqType : TCARD8;
      wmReqType : TCARD8;
      length : TCARD16;
      window : TCARD32;
      level : TCARD32;
    end;
  TxAppleWMSetWindowLevelReq = T_AppleWMSetWindowLevel;

const
  sz_xAppleWMSetWindowLevelReq = 12;  


type
  T_AppleWMSendPSN = record
      reqType : TCARD8;
      wmReqType : TCARD8;
      length : TCARD16;
      psn_hi : TCARD32;
      psn_lo : TCARD32;
    end;
  TxAppleWMSendPSNReq = T_AppleWMSendPSN;

const
  sz_xAppleWMSendPSNReq = 12;  


type
  T_AppleWMAttachTransient = record
      reqType : TCARD8;
      wmReqType : TCARD8;
      length : TCARD16;
      child : TCARD32;
      parent : TCARD32;
    end;
  TxAppleWMAttachTransientReq = T_AppleWMAttachTransient;

const
  sz_xAppleWMAttachTransientReq = 12;  


type
  T_AppleWMSetCanQuit = record
      reqType : TCARD8;
      wmReqType : TCARD8;
      length : TCARD16;
      state : TCARD32;
    end;
  TxAppleWMSetCanQuitReq = T_AppleWMSetCanQuit;

const
  sz_xAppleWMSetCanQuitReq = 8;  


type
  T_AppleWMFrameGetRect = record
      reqType : TCARD8;
      wmReqType : TCARD8;
      length : TCARD16;
      frame_class : TCARD16;
      frame_rect : TCARD16;
      ix : TCARD16;
      iy : TCARD16;
      iw : TCARD16;
      ih : TCARD16;
      ox : TCARD16;
      oy : TCARD16;
      ow : TCARD16;
      oh : TCARD16;
    end;
  TxAppleWMFrameGetRectReq = T_AppleWMFrameGetRect;

const
  sz_xAppleWMFrameGetRectReq = 24;  

type
  TxAppleWMFrameGetRectReply = record
      _type : TBYTE;
      pad1 : TBOOL;
      sequenceNumber : TCARD16;
      length : TCARD32;
      x : TCARD16;
      y : TCARD16;
      w : TCARD16;
      h : TCARD16;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;

const
  sz_xAppleWMFrameGetRectReply = 32;  


type
  T_AppleWMFrameHitTest = record
      reqType : TCARD8;
      wmReqType : TCARD8;
      length : TCARD16;
      frame_class : TCARD16;
      pad1 : TCARD16;
      px : TCARD16;
      py : TCARD16;
      ix : TCARD16;
      iy : TCARD16;
      iw : TCARD16;
      ih : TCARD16;
      ox : TCARD16;
      oy : TCARD16;
      ow : TCARD16;
      oh : TCARD16;
    end;
  TxAppleWMFrameHitTestReq = T_AppleWMFrameHitTest;

const
  sz_xAppleWMFrameHitTestReq = 28;  

type
  TxAppleWMFrameHitTestReply = record
      _type : TBYTE;
      pad1 : TBOOL;
      sequenceNumber : TCARD16;
      length : TCARD32;
      ret : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;

const
  sz_xAppleWMFrameHitTestReply = 32;  


type
  T_AppleWMFrameDraw = record
      reqType : TCARD8;
      wmReqType : TCARD8;
      length : TCARD16;
      screen : TCARD32;
      window : TCARD32;
      frame_class : TCARD16;
      frame_attr : TCARD16;
      ix : TCARD16;
      iy : TCARD16;
      iw : TCARD16;
      ih : TCARD16;
      ox : TCARD16;
      oy : TCARD16;
      ow : TCARD16;
      oh : TCARD16;
      title_length : TCARD32;
    end;
  TxAppleWMFrameDrawReq = T_AppleWMFrameDraw;

const
  sz_xAppleWMFrameDrawReq = 36;  

//// {$undef Window}
//// {$undef Drawable}
//// {$undef Font}
//// {$undef Pixmap}
//// {$undef Cursor}
//// {$undef Colormap}
//// {$undef GContext}
//// {$undef Atom}
//// {$undef VisualID}
//// {$undef Time}
//// {$undef KeyCode}
//// {$undef KeySym}
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/XKBproto.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/XKBproto.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/XKBproto.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XKBPROTO_H_}
//// {$define _XKBPROTO_H_}
//// {$include <X11/Xmd.h>}
//// {$include <X11/Xfuncproto.h>}
//// {$include <X11/extensions/XKB.h>}

const
  Window = CARD32;  
  Atom = CARD32;  
  Time = CARD32;  
  KeyCode = CARD8;  
  KeySym = CARD32;  

function XkbPaddedSize(n : longint) : longint;


type
  T_xkbUseExtension = record
      reqType : TCARD8;
      xkbReqType : TCARD8;
      length : TCARD16;
      wantedMajor : TCARD16;
      wantedMinor : TCARD16;
    end;
  TxkbUseExtensionReq = T_xkbUseExtension;

const
  sz_xkbUseExtensionReq = 8;  

type
  T_xkbUseExtensionReply = record
      _type : TBYTE;
      supported : TBOOL;
      sequenceNumber : TCARD16;
      length : TCARD32;
      serverMajor : TCARD16;
      serverMinor : TCARD16;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;
  TxkbUseExtensionReply = T_xkbUseExtensionReply;

const
  sz_xkbUseExtensionReply = 32;  

type
  T_xkbSelectEvents = record
      reqType : TCARD8;
      xkbReqType : TCARD8;
      length : TCARD16;
      deviceSpec : TCARD16;
      affectWhich : TCARD16;
      clear : TCARD16;
      selectAll : TCARD16;
      affectMap : TCARD16;
      map : TCARD16;
    end;
  TxkbSelectEventsReq = T_xkbSelectEvents;

const
  sz_xkbSelectEventsReq = 16;  

type
  T_xkbBell = record
      reqType : TCARD8;
      xkbReqType : TCARD8;
      length : TCARD16;
      deviceSpec : TCARD16;
      bellClass : TCARD16;
      bellID : TCARD16;
      percent : TINT8;
      forceSound : TBOOL;
      eventOnly : TBOOL;
      pad1 : TCARD8;
      pitch : TINT16;
      duration : TINT16;
      pad2 : TCARD16;
      name : TAtom;
      window : TWindow;
    end;
  TxkbBellReq = T_xkbBell;

const
  sz_xkbBellReq = 28;  

type
  T_xkbGetState = record
      reqType : TCARD8;
      xkbReqType : TCARD8;
      length : TCARD16;
      deviceSpec : TCARD16;
      pad : TCARD16;
    end;
  TxkbGetStateReq = T_xkbGetState;

const
  sz_xkbGetStateReq = 8;  
type
  T_xkbGetStateReply = record
      _type : TBYTE;
      deviceID : TBYTE;
      sequenceNumber : TCARD16;
      length : TCARD32;
      mods : TCARD8;
      baseMods : TCARD8;
      latchedMods : TCARD8;
      lockedMods : TCARD8;
      group : TCARD8;
      lockedGroup : TCARD8;
      baseGroup : TINT16;
      latchedGroup : TINT16;
      compatState : TCARD8;
      grabMods : TCARD8;
      compatGrabMods : TCARD8;
      lookupMods : TCARD8;
      compatLookupMods : TCARD8;
      pad1 : TCARD8;
      ptrBtnState : TCARD16;
      pad2 : TCARD16;
      pad3 : TCARD32;
    end;
  TxkbGetStateReply = T_xkbGetStateReply;

const
  sz_xkbGetStateReply = 32;  

type
  T_xkbLatchLockState = record
      reqType : TCARD8;
      xkbReqType : TCARD8;
      length : TCARD16;
      deviceSpec : TCARD16;
      affectModLocks : TCARD8;
      modLocks : TCARD8;
      lockGroup : TBOOL;
      groupLock : TCARD8;
      affectModLatches : TCARD8;
      modLatches : TCARD8;
      pad : TCARD8;
      latchGroup : TBOOL;
      groupLatch : TINT16;
    end;
  TxkbLatchLockStateReq = T_xkbLatchLockState;

const
  sz_xkbLatchLockStateReq = 16;  

type
  T_xkbGetControls = record
      reqType : TCARD8;
      xkbReqType : TCARD8;
      length : TCARD16;
      deviceSpec : TCARD16;
      pad : TCARD16;
    end;
  TxkbGetControlsReq = T_xkbGetControls;

const
  sz_xkbGetControlsReq = 8;  

type
  T_xkbGetControlsReply = record
      _type : TBYTE;
      deviceID : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      mkDfltBtn : TCARD8;
      numGroups : TCARD8;
      groupsWrap : TCARD8;
      internalMods : TCARD8;
      ignoreLockMods : TCARD8;
      internalRealMods : TCARD8;
      ignoreLockRealMods : TCARD8;
      pad1 : TCARD8;
      internalVMods : TCARD16;
      ignoreLockVMods : TCARD16;
      repeatDelay : TCARD16;
      repeatInterval : TCARD16;
      slowKeysDelay : TCARD16;
      debounceDelay : TCARD16;
      mkDelay : TCARD16;
      mkInterval : TCARD16;
      mkTimeToMax : TCARD16;
      mkMaxSpeed : TCARD16;
      mkCurve : TINT16;
      axOptions : TCARD16;
      axTimeout : TCARD16;
      axtOptsMask : TCARD16;
      axtOptsValues : TCARD16;
      pad2 : TCARD16;
      axtCtrlsMask : TCARD32;
      axtCtrlsValues : TCARD32;
      enabledCtrls : TCARD32;
      perKeyRepeat : array[0..(XkbPerKeyBitArraySize)-1] of TBYTE;
    end;
  TxkbGetControlsReply = T_xkbGetControlsReply;

const
  sz_xkbGetControlsReply = 92;  

type
  T_xkbSetControls = record
      reqType : TCARD8;
      xkbReqType : TCARD8;
      length : TCARD16;
      deviceSpec : TCARD16;
      affectInternalMods : TCARD8;
      internalMods : TCARD8;
      affectIgnoreLockMods : TCARD8;
      ignoreLockMods : TCARD8;
      affectInternalVMods : TCARD16;
      internalVMods : TCARD16;
      affectIgnoreLockVMods : TCARD16;
      ignoreLockVMods : TCARD16;
      mkDfltBtn : TCARD8;
      groupsWrap : TCARD8;
      axOptions : TCARD16;
      pad1 : TCARD16;
      affectEnabledCtrls : TCARD32;
      enabledCtrls : TCARD32;
      changeCtrls : TCARD32;
      repeatDelay : TCARD16;
      repeatInterval : TCARD16;
      slowKeysDelay : TCARD16;
      debounceDelay : TCARD16;
      mkDelay : TCARD16;
      mkInterval : TCARD16;
      mkTimeToMax : TCARD16;
      mkMaxSpeed : TCARD16;
      mkCurve : TINT16;
      axTimeout : TCARD16;
      axtCtrlsMask : TCARD32;
      axtCtrlsValues : TCARD32;
      axtOptsMask : TCARD16;
      axtOptsValues : TCARD16;
      perKeyRepeat : array[0..(XkbPerKeyBitArraySize)-1] of TBYTE;
    end;
  TxkbSetControlsReq = T_xkbSetControls;

const
  sz_xkbSetControlsReq = 100;  
type
  T_xkbKTMapEntryWireDesc = record
      active : TBOOL;
      mask : TCARD8;
      level : TCARD8;
      realMods : TCARD8;
      virtualMods : TCARD16;
      pad : TCARD16;
    end;
  TxkbKTMapEntryWireDesc = T_xkbKTMapEntryWireDesc;

const
  sz_xkbKTMapEntryWireDesc = 8;  
type
  T_xkbKTSetMapEntryWireDesc = record
      level : TCARD8;
      realMods : TCARD8;
      virtualMods : TCARD16;
    end;
  TxkbKTSetMapEntryWireDesc = T_xkbKTSetMapEntryWireDesc;

const
  sz_xkbKTSetMapEntryWireDesc = 4;  

type
  T_xkbModsWireDesc = record
      mask : TCARD8;
      realMods : TCARD8;
      virtualMods : TCARD16;
    end;
  TxkbModsWireDesc = T_xkbModsWireDesc;

const
  sz_xkbModsWireDesc = 4;  
type
  T_xkbKeyTypeWireDesc = record
      mask : TCARD8;
      realMods : TCARD8;
      virtualMods : TCARD16;
      numLevels : TCARD8;
      nMapEntries : TCARD8;
      preserve : TBOOL;
      pad : TCARD8;
    end;
  TxkbKeyTypeWireDesc = T_xkbKeyTypeWireDesc;

const
  sz_xkbKeyTypeWireDesc = 8;  
type
  T_xkbSymMapWireDesc = record
      ktIndex : array[0..(XkbNumKbdGroups)-1] of TCARD8;
      groupInfo : TCARD8;
      width : TCARD8;
      nSyms : TCARD16;
    end;
  TxkbSymMapWireDesc = T_xkbSymMapWireDesc;

const
  sz_xkbSymMapWireDesc = 8;  
type
  T_xkbVModMapWireDesc = record
      key : TKeyCode;
      pad : TCARD8;
      vmods : TCARD16;
    end;
  TxkbVModMapWireDesc = T_xkbVModMapWireDesc;

const
  sz_xkbVModMapWireDesc = 4;  
type
  T_xkbBehaviorWireDesc = record
      key : TCARD8;
      _type : TCARD8;
      data : TCARD8;
      pad : TCARD8;
    end;
  TxkbBehaviorWireDesc = T_xkbBehaviorWireDesc;

const
  sz_xkbBehaviorWireDesc = 4;  
type
  T_xkbActionWireDesc = record
      _type : TCARD8;
      data : array[0..6] of TCARD8;
    end;
  TxkbActionWireDesc = T_xkbActionWireDesc;

const
  sz_xkbActionWireDesc = 8;  

type
  T_xkbGetMap = record
      reqType : TCARD8;
      xkbReqType : TCARD8;
      length : TCARD16;
      deviceSpec : TCARD16;
      full : TCARD16;
      partial : TCARD16;
      firstType : TCARD8;
      nTypes : TCARD8;
      firstKeySym : TKeyCode;
      nKeySyms : TCARD8;
      firstKeyAct : TKeyCode;
      nKeyActs : TCARD8;
      firstKeyBehavior : TKeyCode;
      nKeyBehaviors : TCARD8;
      virtualMods : TCARD16;
      firstKeyExplicit : TKeyCode;
      nKeyExplicit : TCARD8;
      firstModMapKey : TKeyCode;
      nModMapKeys : TCARD8;
      firstVModMapKey : TKeyCode;
      nVModMapKeys : TCARD8;
      pad1 : TCARD16;
    end;
  TxkbGetMapReq = T_xkbGetMap;

const
  sz_xkbGetMapReq = 28;  

type
  T_xkbGetMapReply = record
      _type : TCARD8;
      deviceID : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      pad1 : TCARD16;
      minKeyCode : TKeyCode;
      maxKeyCode : TKeyCode;
      present : TCARD16;
      firstType : TCARD8;
      nTypes : TCARD8;
      totalTypes : TCARD8;
      firstKeySym : TKeyCode;
      totalSyms : TCARD16;
      nKeySyms : TCARD8;
      firstKeyAct : TKeyCode;
      totalActs : TCARD16;
      nKeyActs : TCARD8;
      firstKeyBehavior : TKeyCode;
      nKeyBehaviors : TCARD8;
      totalKeyBehaviors : TCARD8;
      firstKeyExplicit : TKeyCode;
      nKeyExplicit : TCARD8;
      totalKeyExplicit : TCARD8;
      firstModMapKey : TKeyCode;
      nModMapKeys : TCARD8;
      totalModMapKeys : TCARD8;
      firstVModMapKey : TKeyCode;
      nVModMapKeys : TCARD8;
      totalVModMapKeys : TCARD8;
      pad2 : TCARD8;
      virtualMods : TCARD16;
    end;
  TxkbGetMapReply = T_xkbGetMapReply;

const
  sz_xkbGetMapReply = 40;  
  XkbSetMapResizeTypes = 1 shl 0;  
  XkbSetMapRecomputeActions = 1 shl 1;  
  XkbSetMapAllFlags = $3;  

type
  T_xkbSetMap = record
      reqType : TCARD8;
      xkbReqType : TCARD8;
      length : TCARD16;
      deviceSpec : TCARD16;
      present : TCARD16;
      flags : TCARD16;
      minKeyCode : TKeyCode;
      maxKeyCode : TKeyCode;
      firstType : TCARD8;
      nTypes : TCARD8;
      firstKeySym : TKeyCode;
      nKeySyms : TCARD8;
      totalSyms : TCARD16;
      firstKeyAct : TKeyCode;
      nKeyActs : TCARD8;
      totalActs : TCARD16;
      firstKeyBehavior : TKeyCode;
      nKeyBehaviors : TCARD8;
      totalKeyBehaviors : TCARD8;
      firstKeyExplicit : TKeyCode;
      nKeyExplicit : TCARD8;
      totalKeyExplicit : TCARD8;
      firstModMapKey : TKeyCode;
      nModMapKeys : TCARD8;
      totalModMapKeys : TCARD8;
      firstVModMapKey : TKeyCode;
      nVModMapKeys : TCARD8;
      totalVModMapKeys : TCARD8;
      virtualMods : TCARD16;
    end;
  TxkbSetMapReq = T_xkbSetMap;

const
  sz_xkbSetMapReq = 36;  
type
  T_xkbSymInterpretWireDesc = record
      sym : TCARD32;
      mods : TCARD8;
      match : TCARD8;
      virtualMod : TCARD8;
      flags : TCARD8;
      act : TxkbActionWireDesc;
    end;
  TxkbSymInterpretWireDesc = T_xkbSymInterpretWireDesc;

const
  sz_xkbSymInterpretWireDesc = 16;  

type
  T_xkbGetCompatMap = record
      reqType : TCARD8;
      xkbReqType : TCARD8;
      length : TCARD16;
      deviceSpec : TCARD16;
      groups : TCARD8;
      getAllSI : TBOOL;
      firstSI : TCARD16;
      nSI : TCARD16;
    end;
  TxkbGetCompatMapReq = T_xkbGetCompatMap;

const
  sz_xkbGetCompatMapReq = 12;  

type
  T_xkbGetCompatMapReply = record
      _type : TCARD8;
      deviceID : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      groups : TCARD8;
      pad1 : TCARD8;
      firstSI : TCARD16;
      nSI : TCARD16;
      nTotalSI : TCARD16;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;
  TxkbGetCompatMapReply = T_xkbGetCompatMapReply;

const
  sz_xkbGetCompatMapReply = 32;  

type
  T_xkbSetCompatMap = record
      reqType : TCARD8;
      xkbReqType : TCARD8;
      length : TCARD16;
      deviceSpec : TCARD16;
      pad1 : TCARD8;
      recomputeActions : TBOOL;
      truncateSI : TBOOL;
      groups : TCARD8;
      firstSI : TCARD16;
      nSI : TCARD16;
      pad2 : TCARD16;
    end;
  TxkbSetCompatMapReq = T_xkbSetCompatMap;

const
  sz_xkbSetCompatMapReq = 16;  

type
  T_xkbGetIndicatorState = record
      reqType : TCARD8;
      xkbReqType : TCARD8;
      length : TCARD16;
      deviceSpec : TCARD16;
      pad1 : TCARD16;
    end;
  TxkbGetIndicatorStateReq = T_xkbGetIndicatorState;

const
  sz_xkbGetIndicatorStateReq = 8;  

type
  T_xkbGetIndicatorStateReply = record
      _type : TCARD8;
      deviceID : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      state : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;
  TxkbGetIndicatorStateReply = T_xkbGetIndicatorStateReply;

const
  sz_xkbGetIndicatorStateReply = 32;  

type
  T_xkbGetIndicatorMap = record
      reqType : TCARD8;
      xkbReqType : TCARD8;
      length : TCARD16;
      deviceSpec : TCARD16;
      pad : TCARD16;
      which : TCARD32;
    end;
  TxkbGetIndicatorMapReq = T_xkbGetIndicatorMap;

const
  sz_xkbGetIndicatorMapReq = 12;  

type
  T_xkbGetIndicatorMapReply = record
      _type : TCARD8;
      deviceID : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      which : TCARD32;
      realIndicators : TCARD32;
      nIndicators : TCARD8;
      pad1 : TCARD8;
      pad2 : TCARD16;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;
  TxkbGetIndicatorMapReply = T_xkbGetIndicatorMapReply;

const
  sz_xkbGetIndicatorMapReply = 32;  
type
  T_xkbIndicatorMapWireDesc = record
      flags : TCARD8;
      whichGroups : TCARD8;
      groups : TCARD8;
      whichMods : TCARD8;
      mods : TCARD8;
      realMods : TCARD8;
      virtualMods : TCARD16;
      ctrls : TCARD32;
    end;
  TxkbIndicatorMapWireDesc = T_xkbIndicatorMapWireDesc;

const
  sz_xkbIndicatorMapWireDesc = 12;  

type
  T_xkbSetIndicatorMap = record
      reqType : TCARD8;
      xkbReqType : TCARD8;
      length : TCARD16;
      deviceSpec : TCARD16;
      pad1 : TCARD16;
      which : TCARD32;
    end;
  TxkbSetIndicatorMapReq = T_xkbSetIndicatorMap;

const
  sz_xkbSetIndicatorMapReq = 12;  

type
  T_xkbGetNamedIndicator = record
      reqType : TCARD8;
      xkbReqType : TCARD8;
      length : TCARD16;
      deviceSpec : TCARD16;
      ledClass : TCARD16;
      ledID : TCARD16;
      pad1 : TCARD16;
      indicator : TAtom;
    end;
  TxkbGetNamedIndicatorReq = T_xkbGetNamedIndicator;

const
  sz_xkbGetNamedIndicatorReq = 16;  
type
  T_xkbGetNamedIndicatorReply = record
      _type : TBYTE;
      deviceID : TBYTE;
      sequenceNumber : TCARD16;
      length : TCARD32;
      indicator : TAtom;
      found : TBOOL;
      on : TBOOL;
      realIndicator : TBOOL;
      ndx : TCARD8;
      flags : TCARD8;
      whichGroups : TCARD8;
      groups : TCARD8;
      whichMods : TCARD8;
      mods : TCARD8;
      realMods : TCARD8;
      virtualMods : TCARD16;
      ctrls : TCARD32;
      supported : TBOOL;
      pad1 : TCARD8;
      pad2 : TCARD16;
    end;
  TxkbGetNamedIndicatorReply = T_xkbGetNamedIndicatorReply;

const
  sz_xkbGetNamedIndicatorReply = 32;  

type
  T_xkbSetNamedIndicator = record
      reqType : TCARD8;
      xkbReqType : TCARD8;
      length : TCARD16;
      deviceSpec : TCARD16;
      ledClass : TCARD16;
      ledID : TCARD16;
      pad1 : TCARD16;
      indicator : TAtom;
      setState : TBOOL;
      on : TBOOL;
      setMap : TBOOL;
      createMap : TBOOL;
      pad2 : TCARD8;
      flags : TCARD8;
      whichGroups : TCARD8;
      groups : TCARD8;
      whichMods : TCARD8;
      realMods : TCARD8;
      virtualMods : TCARD16;
      ctrls : TCARD32;
    end;
  TxkbSetNamedIndicatorReq = T_xkbSetNamedIndicator;

const
  sz_xkbSetNamedIndicatorReq = 32;  

type
  T_xkbGetNames = record
      reqType : TCARD8;
      xkbReqType : TCARD8;
      length : TCARD16;
      deviceSpec : TCARD16;
      pad : TCARD16;
      which : TCARD32;
    end;
  TxkbGetNamesReq = T_xkbGetNames;

const
  sz_xkbGetNamesReq = 12;  
type
  T_xkbGetNamesReply = record
      _type : TBYTE;
      deviceID : TBYTE;
      sequenceNumber : TCARD16;
      length : TCARD32;
      which : TCARD32;
      minKeyCode : TKeyCode;
      maxKeyCode : TKeyCode;
      nTypes : TCARD8;
      groupNames : TCARD8;
      virtualMods : TCARD16;
      firstKey : TKeyCode;
      nKeys : TCARD8;
      indicators : TCARD32;
      nRadioGroups : TCARD8;
      nKeyAliases : TCARD8;
      nKTLevels : TCARD16;
      pad3 : TCARD32;
    end;
  TxkbGetNamesReply = T_xkbGetNamesReply;

const
  sz_xkbGetNamesReply = 32;  

type
  T_xkbSetNames = record
      reqType : TCARD8;
      xkbReqType : TCARD8;
      length : TCARD16;
      deviceSpec : TCARD16;
      virtualMods : TCARD16;
      which : TCARD32;
      firstType : TCARD8;
      nTypes : TCARD8;
      firstKTLevel : TCARD8;
      nKTLevels : TCARD8;
      indicators : TCARD32;
      groupNames : TCARD8;
      nRadioGroups : TCARD8;
      firstKey : TKeyCode;
      nKeys : TCARD8;
      nKeyAliases : TCARD8;
      pad1 : TCARD8;
      totalKTLevelNames : TCARD16;
    end;
  TxkbSetNamesReq = T_xkbSetNames;

const
  sz_xkbSetNamesReq = 28;  
type
  T_xkbPointWireDesc = record
      x : TINT16;
      y : TINT16;
    end;
  TxkbPointWireDesc = T_xkbPointWireDesc;

const
  sz_xkbPointWireDesc = 4;  
type
  T_xkbOutlineWireDesc = record
      nPoints : TCARD8;
      cornerRadius : TCARD8;
      pad : TCARD16;
    end;
  TxkbOutlineWireDesc = T_xkbOutlineWireDesc;

const
  sz_xkbOutlineWireDesc = 4;  
type
  T_xkbShapeWireDesc = record
      name : TAtom;
      nOutlines : TCARD8;
      primaryNdx : TCARD8;
      approxNdx : TCARD8;
      pad : TCARD8;
    end;
  TxkbShapeWireDesc = T_xkbShapeWireDesc;

const
  sz_xkbShapeWireDesc = 8;  
type
  T_xkbSectionWireDesc = record
      name : TAtom;
      top : TINT16;
      left : TINT16;
      width : TCARD16;
      height : TCARD16;
      angle : TINT16;
      priority : TCARD8;
      nRows : TCARD8;
      nDoodads : TCARD8;
      nOverlays : TCARD8;
      pad : TCARD16;
    end;
  TxkbSectionWireDesc = T_xkbSectionWireDesc;

const
  sz_xkbSectionWireDesc = 20;  
type
  T_xkbRowWireDesc = record
      top : TINT16;
      left : TINT16;
      nKeys : TCARD8;
      vertical : TBOOL;
      pad : TCARD16;
    end;
  TxkbRowWireDesc = T_xkbRowWireDesc;

const
  sz_xkbRowWireDesc = 8;  
//// (* error 
////     CARD8	name[XkbKeyNameLength]	_X_NONSTRING;
 in declarator_list *)
type
  T_xkbKeyWireDesc = record
      XkbKeyNameLength : TCARD8;
      gap : TINT16;
      shapeNdx : TCARD8;
      colorNdx : TCARD8;
    end;
  TxkbKeyWireDesc = T_xkbKeyWireDesc;

const
  sz_xkbKeyWireDesc = 8;  
type
  T_xkbOverlayWireDesc = record
      name : TAtom;
      nRows : TCARD8;
      pad1 : TCARD8;
      pad2 : TCARD16;
    end;
  TxkbOverlayWireDesc = T_xkbOverlayWireDesc;

const
  sz_xkbOverlayWireDesc = 8;  
type
  T_xkbOverlayRowWireDesc = record
      rowUnder : TCARD8;
      nKeys : TCARD8;
      pad1 : TCARD16;
    end;
  TxkbOverlayRowWireDesc = T_xkbOverlayRowWireDesc;

const
  sz_xkbOverlayRowWireDesc = 4;  
//// (* error 
////    CARD8	over[XkbKeyNameLength]	_X_NONSTRING;
 in declarator_list *)
//// (* error 
////    CARD8	under[XkbKeyNameLength]	_X_NONSTRING;
 in declarator_list *)
type
  T_xkbOverlayKeyWireDesc = record
      XkbKeyNameLength : TCARD8;
      XkbKeyNameLength : TCARD8;
    end;
  TxkbOverlayKeyWireDesc = T_xkbOverlayKeyWireDesc;

const
  sz_xkbOverlayKeyWireDesc = 8;  
type
  T_xkbShapeDoodadWireDesc = record
      name : TAtom;
      _type : TCARD8;
      priority : TCARD8;
      top : TINT16;
      left : TINT16;
      angle : TINT16;
      colorNdx : TCARD8;
      shapeNdx : TCARD8;
      pad1 : TCARD16;
      pad2 : TCARD32;
    end;
  TxkbShapeDoodadWireDesc = T_xkbShapeDoodadWireDesc;

const
  sz_xkbShapeDoodadWireDesc = 20;  
type
  T_xkbTextDoodadWireDesc = record
      name : TAtom;
      _type : TCARD8;
      priority : TCARD8;
      top : TINT16;
      left : TINT16;
      angle : TINT16;
      width : TCARD16;
      height : TCARD16;
      colorNdx : TCARD8;
      pad1 : TCARD8;
      pad2 : TCARD16;
    end;
  TxkbTextDoodadWireDesc = T_xkbTextDoodadWireDesc;

const
  sz_xkbTextDoodadWireDesc = 20;  
type
  T_xkbIndicatorDoodadWireDesc = record
      name : TAtom;
      _type : TCARD8;
      priority : TCARD8;
      top : TINT16;
      left : TINT16;
      angle : TINT16;
      shapeNdx : TCARD8;
      onColorNdx : TCARD8;
      offColorNdx : TCARD8;
      pad1 : TCARD8;
      pad2 : TCARD32;
    end;
  TxkbIndicatorDoodadWireDesc = T_xkbIndicatorDoodadWireDesc;

const
  sz_xkbIndicatorDoodadWireDesc = 20;  
type
  T_xkbLogoDoodadWireDesc = record
      name : TAtom;
      _type : TCARD8;
      priority : TCARD8;
      top : TINT16;
      left : TINT16;
      angle : TINT16;
      colorNdx : TCARD8;
      shapeNdx : TCARD8;
      pad1 : TCARD16;
      pad2 : TCARD32;
    end;
  TxkbLogoDoodadWireDesc = T_xkbLogoDoodadWireDesc;

const
  sz_xkbLogoDoodadWireDesc = 20;  
type
  T_xkbAnyDoodadWireDesc = record
      name : TAtom;
      _type : TCARD8;
      priority : TCARD8;
      top : TINT16;
      left : TINT16;
      angle : TINT16;
      pad2 : TCARD32;
      pad3 : TCARD32;
    end;
  TxkbAnyDoodadWireDesc = T_xkbAnyDoodadWireDesc;

const
  sz_xkbAnyDoodadWireDesc = 20;  
type
  T_xkbDoodadWireDesc = record
      case longint of
        0 : ( any : TxkbAnyDoodadWireDesc );
        1 : ( shape : TxkbShapeDoodadWireDesc );
        2 : ( text : TxkbTextDoodadWireDesc );
        3 : ( indicator : TxkbIndicatorDoodadWireDesc );
        4 : ( logo : TxkbLogoDoodadWireDesc );
      end;
  TxkbDoodadWireDesc = T_xkbDoodadWireDesc;

const
  sz_xkbDoodadWireDesc = 20;  

type
  T_xkbGetGeometry = record
      reqType : TCARD8;
      xkbReqType : TCARD8;
      length : TCARD16;
      deviceSpec : TCARD16;
      pad : TCARD16;
      name : TAtom;
    end;
  TxkbGetGeometryReq = T_xkbGetGeometry;

const
  sz_xkbGetGeometryReq = 12;  

type
  T_xkbGetGeometryReply = record
      _type : TCARD8;
      deviceID : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      name : TAtom;
      found : TBOOL;
      pad : TCARD8;
      widthMM : TCARD16;
      heightMM : TCARD16;
      nProperties : TCARD16;
      nColors : TCARD16;
      nShapes : TCARD16;
      nSections : TCARD16;
      nDoodads : TCARD16;
      nKeyAliases : TCARD16;
      baseColorNdx : TCARD8;
      labelColorNdx : TCARD8;
    end;
  TxkbGetGeometryReply = T_xkbGetGeometryReply;

const
  sz_xkbGetGeometryReply = 32;  

type
  T_xkbSetGeometry = record
      reqType : TCARD8;
      xkbReqType : TCARD8;
      length : TCARD16;
      deviceSpec : TCARD16;
      nShapes : TCARD8;
      nSections : TCARD8;
      name : TAtom;
      widthMM : TCARD16;
      heightMM : TCARD16;
      nProperties : TCARD16;
      nColors : TCARD16;
      nDoodads : TCARD16;
      nKeyAliases : TCARD16;
      baseColorNdx : TCARD8;
      labelColorNdx : TCARD8;
      pad : TCARD16;
    end;
  TxkbSetGeometryReq = T_xkbSetGeometry;

const
  sz_xkbSetGeometryReq = 28;  

type
  T_xkbPerClientFlags = record
      reqType : TCARD8;
      xkbReqType : TCARD8;
      length : TCARD16;
      deviceSpec : TCARD16;
      pad1 : TCARD16;
      change : TCARD32;
      value : TCARD32;
      ctrlsToChange : TCARD32;
      autoCtrls : TCARD32;
      autoCtrlValues : TCARD32;
    end;
  TxkbPerClientFlagsReq = T_xkbPerClientFlags;

const
  sz_xkbPerClientFlagsReq = 28;  

type
  T_xkbPerClientFlagsReply = record
      _type : TCARD8;
      deviceID : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      supported : TCARD32;
      value : TCARD32;
      autoCtrls : TCARD32;
      autoCtrlValues : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
    end;
  TxkbPerClientFlagsReply = T_xkbPerClientFlagsReply;

const
  sz_xkbPerClientFlagsReply = 32;  

type
  T_xkbListComponents = record
      reqType : TCARD8;
      xkbReqType : TCARD8;
      length : TCARD16;
      deviceSpec : TCARD16;
      maxNames : TCARD16;
    end;
  TxkbListComponentsReq = T_xkbListComponents;

const
  sz_xkbListComponentsReq = 8;  

type
  T_xkbListComponentsReply = record
      _type : TCARD8;
      deviceID : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      nKeymaps : TCARD16;
      nKeycodes : TCARD16;
      nTypes : TCARD16;
      nCompatMaps : TCARD16;
      nSymbols : TCARD16;
      nGeometries : TCARD16;
      extra : TCARD16;
      pad1 : TCARD16;
      pad2 : TCARD32;
      pad3 : TCARD32;
    end;
  TxkbListComponentsReply = T_xkbListComponentsReply;

const
  sz_xkbListComponentsReply = 32;  



type
  T_xkbGetKbdByName = record
      reqType : TCARD8;
      xkbReqType : TCARD8;
      length : TCARD16;
      deviceSpec : TCARD16;
      need : TCARD16;
      want : TCARD16;
      load : TBOOL;
      pad : TCARD8;
    end;
  TxkbGetKbdByNameReq = T_xkbGetKbdByName;

const
  sz_xkbGetKbdByNameReq = 12;  



type
  T_xkbGetKbdByNameReply = record
      _type : TCARD8;
      deviceID : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      minKeyCode : TKeyCode;
      maxKeyCode : TKeyCode;
      loaded : TBOOL;
      newKeyboard : TBOOL;
      found : TCARD16;
      reported : TCARD16;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
    end;
  TxkbGetKbdByNameReply = T_xkbGetKbdByNameReply;

const
  sz_xkbGetKbdByNameReply = 32;  
type
  T_xkbDeviceLedsWireDesc = record
      ledClass : TCARD16;
      ledID : TCARD16;
      namesPresent : TCARD32;
      mapsPresent : TCARD32;
      physIndicators : TCARD32;
      state : TCARD32;
    end;
  TxkbDeviceLedsWireDesc = T_xkbDeviceLedsWireDesc;

const
  sz_xkbDeviceLedsWireDesc = 20;  

type
  T_xkbGetDeviceInfo = record
      reqType : TCARD8;
      xkbReqType : TCARD8;
      length : TCARD16;
      deviceSpec : TCARD16;
      wanted : TCARD16;
      allBtns : TBOOL;
      firstBtn : TCARD8;
      nBtns : TCARD8;
      pad : TCARD8;
      ledClass : TCARD16;
      ledID : TCARD16;
    end;
  TxkbGetDeviceInfoReq = T_xkbGetDeviceInfo;

const
  sz_xkbGetDeviceInfoReq = 16;  

type
  T_xkbGetDeviceInfoReply = record
      _type : TCARD8;
      deviceID : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      present : TCARD16;
      supported : TCARD16;
      unsupported : TCARD16;
      nDeviceLedFBs : TCARD16;
      firstBtnWanted : TCARD8;
      nBtnsWanted : TCARD8;
      firstBtnRtrn : TCARD8;
      nBtnsRtrn : TCARD8;
      totalBtns : TCARD8;
      hasOwnState : TBOOL;
      dfltKbdFB : TCARD16;
      dfltLedFB : TCARD16;
      pad : TCARD16;
      devType : TAtom;
    end;
  TxkbGetDeviceInfoReply = T_xkbGetDeviceInfoReply;

const
  sz_xkbGetDeviceInfoReply = 32;  

type
  T_xkbSetDeviceInfo = record
      reqType : TCARD8;
      xkbReqType : TCARD8;
      length : TCARD16;
      deviceSpec : TCARD16;
      firstBtn : TCARD8;
      nBtns : TCARD8;
      change : TCARD16;
      nDeviceLedFBs : TCARD16;
    end;
  TxkbSetDeviceInfoReq = T_xkbSetDeviceInfo;

const
  sz_xkbSetDeviceInfoReq = 12;  

type
  T_xkbSetDebuggingFlags = record
      reqType : TCARD8;
      xkbReqType : TCARD8;
      length : TCARD16;
      msgLength : TCARD16;
      pad : TCARD16;
      affectFlags : TCARD32;
      flags : TCARD32;
      affectCtrls : TCARD32;
      ctrls : TCARD32;
    end;
  TxkbSetDebuggingFlagsReq = T_xkbSetDebuggingFlags;

const
  sz_xkbSetDebuggingFlagsReq = 24;  

type
  T_xkbSetDebuggingFlagsReply = record
      _type : TBYTE;
      pad0 : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      currentFlags : TCARD32;
      currentCtrls : TCARD32;
      supportedFlags : TCARD32;
      supportedCtrls : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
    end;
  TxkbSetDebuggingFlagsReply = T_xkbSetDebuggingFlagsReply;

const
  sz_xkbSetDebuggingFlagsReply = 32;  

type
  T_xkbAnyEvent = record
      _type : TBYTE;
      xkbType : TBYTE;
      sequenceNumber : TCARD16;
      time : TTime;
      deviceID : TCARD8;
      pad1 : TCARD8;
      pad2 : TCARD16;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
      pad7 : TCARD32;
    end;
  TxkbAnyEvent = T_xkbAnyEvent;

const
  sz_xkbAnyEvent = 32;  
type
  T_xkbNewKeyboardNotify = record
      _type : TBYTE;
      xkbType : TBYTE;
      sequenceNumber : TCARD16;
      time : TTime;
      deviceID : TCARD8;
      oldDeviceID : TCARD8;
      minKeyCode : TKeyCode;
      maxKeyCode : TKeyCode;
      oldMinKeyCode : TKeyCode;
      oldMaxKeyCode : TKeyCode;
      requestMajor : TCARD8;
      requestMinor : TCARD8;
      changed : TCARD16;
      detail : TCARD8;
      pad1 : TCARD8;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
    end;
  TxkbNewKeyboardNotify = T_xkbNewKeyboardNotify;

const
  sz_xkbNewKeyboardNotify = 32;  
type
  T_xkbMapNotify = record
      _type : TBYTE;
      xkbType : TBYTE;
      sequenceNumber : TCARD16;
      time : TTime;
      deviceID : TCARD8;
      ptrBtnActions : TCARD8;
      changed : TCARD16;
      minKeyCode : TKeyCode;
      maxKeyCode : TKeyCode;
      firstType : TCARD8;
      nTypes : TCARD8;
      firstKeySym : TKeyCode;
      nKeySyms : TCARD8;
      firstKeyAct : TKeyCode;
      nKeyActs : TCARD8;
      firstKeyBehavior : TKeyCode;
      nKeyBehaviors : TCARD8;
      firstKeyExplicit : TKeyCode;
      nKeyExplicit : TCARD8;
      firstModMapKey : TKeyCode;
      nModMapKeys : TCARD8;
      firstVModMapKey : TKeyCode;
      nVModMapKeys : TCARD8;
      virtualMods : TCARD16;
      pad1 : TCARD16;
    end;
  TxkbMapNotify = T_xkbMapNotify;

const
  sz_xkbMapNotify = 32;  
type
  T_xkbStateNotify = record
      _type : TBYTE;
      xkbType : TBYTE;
      sequenceNumber : TCARD16;
      time : TTime;
      deviceID : TCARD8;
      mods : TCARD8;
      baseMods : TCARD8;
      latchedMods : TCARD8;
      lockedMods : TCARD8;
      group : TCARD8;
      baseGroup : TINT16;
      latchedGroup : TINT16;
      lockedGroup : TCARD8;
      compatState : TCARD8;
      grabMods : TCARD8;
      compatGrabMods : TCARD8;
      lookupMods : TCARD8;
      compatLookupMods : TCARD8;
      ptrBtnState : TCARD16;
      changed : TCARD16;
      keycode : TKeyCode;
      eventType : TCARD8;
      requestMajor : TCARD8;
      requestMinor : TCARD8;
    end;
  TxkbStateNotify = T_xkbStateNotify;

const
  sz_xkbStateNotify = 32;  
type
  T_xkbControlsNotify = record
      _type : TBYTE;
      xkbType : TBYTE;
      sequenceNumber : TCARD16;
      time : TTime;
      deviceID : TCARD8;
      numGroups : TCARD8;
      pad1 : TCARD16;
      changedControls : TCARD32;
      enabledControls : TCARD32;
      enabledControlChanges : TCARD32;
      keycode : TKeyCode;
      eventType : TCARD8;
      requestMajor : TCARD8;
      requestMinor : TCARD8;
      pad2 : TCARD32;
    end;
  TxkbControlsNotify = T_xkbControlsNotify;

const
  sz_xkbControlsNotify = 32;  
type
  T_xkbIndicatorNotify = record
      _type : TBYTE;
      xkbType : TBYTE;
      sequenceNumber : TCARD16;
      time : TTime;
      deviceID : TCARD8;
      pad1 : TCARD8;
      pad2 : TCARD16;
      state : TCARD32;
      changed : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;
  TxkbIndicatorNotify = T_xkbIndicatorNotify;

const
  sz_xkbIndicatorNotify = 32;  
type
  T_xkbNamesNotify = record
      _type : TBYTE;
      xkbType : TBYTE;
      sequenceNumber : TCARD16;
      time : TTime;
      deviceID : TCARD8;
      pad1 : TCARD8;
      changed : TCARD16;
      firstType : TCARD8;
      nTypes : TCARD8;
      firstLevelName : TCARD8;
      nLevelNames : TCARD8;
      pad2 : TCARD8;
      nRadioGroups : TCARD8;
      nAliases : TCARD8;
      changedGroupNames : TCARD8;
      changedVirtualMods : TCARD16;
      firstKey : TCARD8;
      nKeys : TCARD8;
      changedIndicators : TCARD32;
      pad3 : TCARD32;
    end;
  TxkbNamesNotify = T_xkbNamesNotify;

const
  sz_xkbNamesNotify = 32;  
type
  T_xkbCompatMapNotify = record
      _type : TBYTE;
      xkbType : TBYTE;
      sequenceNumber : TCARD16;
      time : TTime;
      deviceID : TCARD8;
      changedGroups : TCARD8;
      firstSI : TCARD16;
      nSI : TCARD16;
      nTotalSI : TCARD16;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
    end;
  TxkbCompatMapNotify = T_xkbCompatMapNotify;

const
  sz_xkbCompatMapNotify = 32;  
type
  T_xkbBellNotify = record
      _type : TBYTE;
      xkbType : TBYTE;
      sequenceNumber : TCARD16;
      time : TTime;
      deviceID : TCARD8;
      bellClass : TCARD8;
      bellID : TCARD8;
      percent : TCARD8;
      pitch : TCARD16;
      duration : TCARD16;
      name : TAtom;
      window : TWindow;
      eventOnly : TBOOL;
      pad1 : TCARD8;
      pad2 : TCARD16;
      pad3 : TCARD32;
    end;
  TxkbBellNotify = T_xkbBellNotify;

const
  sz_xkbBellNotify = 32;  
type
  T_xkbActionMessage = record
      _type : TBYTE;
      xkbType : TBYTE;
      sequenceNumber : TCARD16;
      time : TTime;
      deviceID : TCARD8;
      keycode : TKeyCode;
      press : TBOOL;
      keyEventFollows : TBOOL;
      mods : TCARD8;
      group : TCARD8;
      message : array[0..7] of TCARD8;
      pad1 : TCARD16;
      pad2 : TCARD32;
      pad3 : TCARD32;
    end;
  TxkbActionMessage = T_xkbActionMessage;

const
  sz_xkbActionMessage = 32;  
type
  T_xkbAccessXNotify = record
      _type : TBYTE;
      xkbType : TBYTE;
      sequenceNumber : TCARD16;
      time : TTime;
      deviceID : TCARD8;
      keycode : TKeyCode;
      detail : TCARD16;
      slowKeysDelay : TCARD16;
      debounceDelay : TCARD16;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
    end;
  TxkbAccessXNotify = T_xkbAccessXNotify;

const
  sz_xkbAccessXNotify = 32;  
type
  T_xkbExtensionDeviceNotify = record
      _type : TBYTE;
      xkbType : TBYTE;
      sequenceNumber : TCARD16;
      time : TTime;
      deviceID : TCARD8;
      pad1 : TCARD8;
      reason : TCARD16;
      ledClass : TCARD16;
      ledID : TCARD16;
      ledsDefined : TCARD32;
      ledState : TCARD32;
      firstBtn : TCARD8;
      nBtns : TCARD8;
      supported : TCARD16;
      unsupported : TCARD16;
      pad3 : TCARD16;
    end;
  TxkbExtensionDeviceNotify = T_xkbExtensionDeviceNotify;

const
  sz_xkbExtensionDeviceNotify = 32;  
type
  T_xkbEvent = record
      u : record
          case longint of
            0 : ( any : TxkbAnyEvent );
            1 : ( new_kbd : TxkbNewKeyboardNotify );
            2 : ( map : TxkbMapNotify );
            3 : ( state : TxkbStateNotify );
            4 : ( ctrls : TxkbControlsNotify );
            5 : ( indicators : TxkbIndicatorNotify );
            6 : ( names : TxkbNamesNotify );
            7 : ( compat : TxkbCompatMapNotify );
            8 : ( bell : TxkbBellNotify );
            9 : ( message : TxkbActionMessage );
            10 : ( accessx : TxkbAccessXNotify );
            11 : ( device : TxkbExtensionDeviceNotify );
          end;
    end;
  TxkbEvent = T_xkbEvent;

const
  sz_xkbEvent = 32;  
//// {$undef Window}
//// {$undef Atom}
//// {$undef Time}
//// {$undef KeyCode}
//// {$undef KeySym}
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/mitmiscproto.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/mitmiscproto.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/mitmiscproto.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _MITMISCPROTO_H_}
//// {$define _MITMISCPROTO_H_}
//// {$include <X11/extensions/mitmiscconst.h>}

const
  X_MITSetBugMode = 0;  
  X_MITGetBugMode = 1;  


type
  T_SetBugMode = record
      reqType : TCARD8;
      mitReqType : TCARD8;
      length : TCARD16;
      onOff : TBOOL;
      pad0 : TBYTE;
      pad1 : TCARD16;
    end;
  TxMITSetBugModeReq = T_SetBugMode;

const
  sz_xMITSetBugModeReq = 8;  


type
  T_GetBugMode = record
      reqType : TCARD8;
      mitReqType : TCARD8;
      length : TCARD16;
    end;
  TxMITGetBugModeReq = T_GetBugMode;

const
  sz_xMITGetBugModeReq = 4;  

type
  TxMITGetBugModeReply = record
      _type : TBYTE;
      onOff : TBOOL;
      sequenceNumber : TCARD16;
      length : TCARD32;
      pad0 : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_xMITGetBugModeReply = 32;  
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/XEVI.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/XEVI.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/XEVI.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

Type
PDisplay  = ^Display;
PExtendedVisualInfo  = ^ExtendedVisualInfo;
Plongint  = ^longint;
PVisualID  = ^VisualID;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XEVI_H_}
//// {$define _XEVI_H_}
//// {$include <X11/Xfuncproto.h>}
//// {$include <X11/extensions/EVI.h>}
type
  TExtendedVisualInfo = record
      core_visual_id : TVisualID;
      screen : longint;
      level : longint;
      transparency_type : dword;
      transparency_value : dword;
      min_hw_colormaps : dword;
      max_hw_colormaps : dword;
      num_colormap_conflicts : dword;
      colormap_conflicts : ^TVisualID;
    end;
//// (* error 
//// Bool XeviQueryExtension(

 in declarator_list *)


function XeviQueryVersion(_para1:PTDisplay; _para2:Plongint; _para3:Plongint):TStatus;cdecl;external;

function XeviGetVisualInfo(_para1:PTDisplay; _para2:PTVisualID; _para3:longint; _para4:PPTExtendedVisualInfo; _para5:Plongint):TStatus;cdecl;external;
//// {$endif}
//// (* error 
//// #endif

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/XvMCproto.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/XvMCproto.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/XvMCproto.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}


//// {$ifndef _XVMCPROTO_H_}
//// {$define _XVMCPROTO_H_}

const
  xvmc_QueryVersion = 0;  
  xvmc_ListSurfaceTypes = 1;  
  xvmc_CreateContext = 2;  
  xvmc_DestroyContext = 3;  
  xvmc_CreateSurface = 4;  
  xvmc_DestroySurface = 5;  
  xvmc_CreateSubpicture = 6;  
  xvmc_DestroySubpicture = 7;  
  xvmc_ListSubpictureTypes = 8;  
  xvmc_GetDRInfo = 9;  
  xvmc_LastRequest = xvmc_GetDRInfo;  
  xvmcNumRequest = xvmc_LastRequest+1;  
type
  TxvmcSurfaceInfo = record
      surface_type_id : TCARD32;
      chroma_format : TCARD16;
      pad0 : TCARD16;
      max_width : TCARD16;
      max_height : TCARD16;
      subpicture_max_width : TCARD16;
      subpicture_max_height : TCARD16;
      mc_type : TCARD32;
      flags : TCARD32;
    end;
//// (* error 
//// #define sz_xvmcSurfaceInfo 24;
in declaration at line 30 *)

      TxvmcQueryVersionReq = record
          reqType : TCARD8;
          xvmcReqType : TCARD8;
          length : TCARD16;
        end;
//// (* error 
//// #define sz_xvmcQueryVersionReq 4;
in declaration at line 37 *)


      TxvmcQueryVersionReply = record
          _type : TBYTE;
          padb1 : TBYTE;
          sequenceNumber : TCARD16;
          length : TCARD32;
          major : TCARD32;
          minor : TCARD32;
          padl4 : TCARD32;
          padl5 : TCARD32;
          padl6 : TCARD32;
          padl7 : TCARD32;
        end;

    const
      sz_xvmcQueryVersionReply = 32;      
    type
      TxvmcListSurfaceTypesReq = record
          reqType : TCARD8;
          xvmcReqType : TCARD8;
          length : TCARD16;
          port : TCARD32;
        end;
//// (* error 
//// #define sz_xvmcListSurfaceTypesReq 8;
in declaration at line 59 *)


      TxvmcListSurfaceTypesReply = record
          _type : TBYTE;
          padb1 : TBYTE;
          sequenceNumber : TCARD16;
          length : TCARD32;
          num : TCARD32;
          padl3 : TCARD32;
          padl4 : TCARD32;
          padl5 : TCARD32;
          padl6 : TCARD32;
          padl7 : TCARD32;
        end;

    const
      sz_xvmcListSurfaceTypesReply = 32;      
    type
      TxvmcCreateContextReq = record
          reqType : TCARD8;
          xvmcReqType : TCARD8;
          length : TCARD16;
          context_id : TCARD32;
          port : TCARD32;
          surface_type_id : TCARD32;
          width : TCARD16;
          height : TCARD16;
          flags : TCARD32;
        end;
//// (* error 
//// #define sz_xvmcCreateContextReq 24;
in declaration at line 86 *)


      TxvmcCreateContextReply = record
          _type : TBYTE;
          padb1 : TBYTE;
          sequenceNumber : TCARD16;
          length : TCARD32;
          width_actual : TCARD16;
          height_actual : TCARD16;
          flags_return : TCARD32;
          padl4 : TCARD32;
          padl5 : TCARD32;
          padl6 : TCARD32;
          padl7 : TCARD32;
        end;

    const
      sz_xvmcCreateContextReply = 32;      
    type
      TxvmcDestroyContextReq = record
          reqType : TCARD8;
          xvmcReqType : TCARD8;
          length : TCARD16;
          context_id : TCARD32;
        end;
//// (* error 
//// #define sz_xvmcDestroyContextReq 8;
in declaration at line 109 *)

      TxvmcCreateSurfaceReq = record
          reqType : TCARD8;
          xvmcReqType : TCARD8;
          length : TCARD16;
          surface_id : TCARD32;
          context_id : TCARD32;
        end;
//// (* error 
//// #define sz_xvmcCreateSurfaceReq 12;
in declaration at line 118 *)


      TxvmcCreateSurfaceReply = record
          _type : TBYTE;
          padb1 : TBYTE;
          sequenceNumber : TCARD16;
          length : TCARD32;
          padl2 : TCARD32;
          padl3 : TCARD32;
          padl4 : TCARD32;
          padl5 : TCARD32;
          padl6 : TCARD32;
          padl7 : TCARD32;
        end;

    const
      sz_xvmcCreateSurfaceReply = 32;      
    type
      TxvmcDestroySurfaceReq = record
          reqType : TCARD8;
          xvmcReqType : TCARD8;
          length : TCARD16;
          surface_id : TCARD32;
        end;
//// (* error 
//// #define sz_xvmcDestroySurfaceReq 8;
in declaration at line 140 *)

      TxvmcCreateSubpictureReq = record
          reqType : TCARD8;
          xvmcReqType : TCARD8;
          length : TCARD16;
          subpicture_id : TCARD32;
          context_id : TCARD32;
          xvimage_id : TCARD32;
          width : TCARD16;
          height : TCARD16;
        end;
//// (* error 
//// #define sz_xvmcCreateSubpictureReq 20;
in declaration at line 153 *)


      TxvmcCreateSubpictureReply = record
          _type : TBYTE;
          padb1 : TBYTE;
          sequenceNumber : TCARD16;
          length : TCARD32;
          width_actual : TCARD16;
          height_actual : TCARD16;
          num_palette_entries : TCARD16;
          entry_bytes : TCARD16;
          component_order : array[0..3] of TCARD8;
          padl5 : TCARD32;
          padl6 : TCARD32;
          padl7 : TCARD32;
        end;

    const
      sz_xvmcCreateSubpictureReply = 32;      
    type
      TxvmcDestroySubpictureReq = record
          reqType : TCARD8;
          xvmcReqType : TCARD8;
          length : TCARD16;
          subpicture_id : TCARD32;
        end;
//// (* error 
//// #define sz_xvmcDestroySubpictureReq 8;
in declaration at line 177 *)

      TxvmcListSubpictureTypesReq = record
          reqType : TCARD8;
          xvmcReqType : TCARD8;
          length : TCARD16;
          port : TCARD32;
          surface_type_id : TCARD32;
        end;
//// (* error 
//// #define sz_xvmcListSubpictureTypesReq 12;
in declaration at line 186 *)


      TxvmcListSubpictureTypesReply = record
          _type : TBYTE;
          padb1 : TBYTE;
          sequenceNumber : TCARD16;
          length : TCARD32;
          num : TCARD32;
          padl2 : TCARD32;
          padl3 : TCARD32;
          padl4 : TCARD32;
          padl5 : TCARD32;
          padl6 : TCARD32;
        end;

    const
      sz_xvmcListSubpictureTypesReply = 32;      
    type
      TxvmcGetDRInfoReq = record
          reqType : TCARD8;
          xvmcReqType : TCARD8;
          length : TCARD16;
          port : TCARD32;
          shmKey : TCARD32;
          magic : TCARD32;
        end;
//// (* error 
//// #define sz_xvmcGetDRInfoReq 16;
in declaration at line 210 *)


      TxvmcGetDRInfoReply = record
          _type : TBYTE;
          padb1 : TBYTE;
          sequenceNumber : TCARD16;
          length : TCARD32;
          major : TCARD32;
          minor : TCARD32;
          patchLevel : TCARD32;
          nameLen : TCARD32;
          busIDLen : TCARD32;
          isLocal : TCARD32;
        end;

    const
      sz_xvmcGetDRInfoReply = 32;      
//// {$endif}

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/randr.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/randr.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/randr.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _RANDR_H_}
//// {$define _RANDR_H_}
type
  TRotation = word;

  TSizeID = word;

  TSubpixelOrder = word;

  TConnection = word;

  TXRandrRotation = word;

  TXRandrSizeID = word;

  TXRandrSubpixelOrder = word;

  TXRandrModeFlags = dword;

const
  RANDR_NAME = 'RANDR';  
  RANDR_MAJOR = 1;  
  RANDR_MINOR = 6;  
  RRNumberErrors = 5;  
  RRNumberEvents = 2;  
  RRNumberRequests = 47;  
  X_RRQueryVersion = 0;  

  X_RROldGetScreenInfo = 1;  
  X_RR1_0SetScreenConfig = 2;  

  X_RRSetScreenConfig = 2;  
  X_RROldScreenChangeSelectInput = 3;  

  X_RRSelectInput = 4;  
  X_RRGetScreenInfo = 5;  

  X_RRGetScreenSizeRange = 6;  
  X_RRSetScreenSize = 7;  
  X_RRGetScreenResources = 8;  
  X_RRGetOutputInfo = 9;  
  X_RRListOutputProperties = 10;  
  X_RRQueryOutputProperty = 11;  
  X_RRConfigureOutputProperty = 12;  
  X_RRChangeOutputProperty = 13;  
  X_RRDeleteOutputProperty = 14;  
  X_RRGetOutputProperty = 15;  
  X_RRCreateMode = 16;  
  X_RRDestroyMode = 17;  
  X_RRAddOutputMode = 18;  
  X_RRDeleteOutputMode = 19;  
  X_RRGetCrtcInfo = 20;  
  X_RRSetCrtcConfig = 21;  
  X_RRGetCrtcGammaSize = 22;  
  X_RRGetCrtcGamma = 23;  
  X_RRSetCrtcGamma = 24;  

  X_RRGetScreenResourcesCurrent = 25;  
  X_RRSetCrtcTransform = 26;  
  X_RRGetCrtcTransform = 27;  
  X_RRGetPanning = 28;  
  X_RRSetPanning = 29;  
  X_RRSetOutputPrimary = 30;  
  X_RRGetOutputPrimary = 31;  
  RRTransformUnit = 1 shl 0;  
  RRTransformScaleUp = 1 shl 1;  
  RRTransformScaleDown = 1 shl 2;  
  RRTransformProjective = 1 shl 3;  

  X_RRGetProviders = 32;  
  X_RRGetProviderInfo = 33;  
  X_RRSetProviderOffloadSink = 34;  
  X_RRSetProviderOutputSource = 35;  
  X_RRListProviderProperties = 36;  
  X_RRQueryProviderProperty = 37;  
  X_RRConfigureProviderProperty = 38;  
  X_RRChangeProviderProperty = 39;  
  X_RRDeleteProviderProperty = 40;  
  X_RRGetProviderProperty = 41;  

  X_RRGetMonitors = 42;  
  X_RRSetMonitor = 43;  
  X_RRDeleteMonitor = 44;  

  X_RRCreateLease = 45;  
  X_RRFreeLease = 46;  

  RRScreenChangeNotifyMask = 1 shl 0;  

  RRCrtcChangeNotifyMask = 1 shl 1;  
  RROutputChangeNotifyMask = 1 shl 2;  
  RROutputPropertyNotifyMask = 1 shl 3;  

  RRProviderChangeNotifyMask = 1 shl 4;  
  RRProviderPropertyNotifyMask = 1 shl 5;  
  RRResourceChangeNotifyMask = 1 shl 6;  

  RRLeaseNotifyMask = 1 shl 7;  

  RRScreenChangeNotify = 0;  

  RRNotify = 1;  

  RRNotify_CrtcChange = 0;  
  RRNotify_OutputChange = 1;  
  RRNotify_OutputProperty = 2;  
  RRNotify_ProviderChange = 3;  
  RRNotify_ProviderProperty = 4;  
  RRNotify_ResourceChange = 5;  

  RRNotify_Lease = 6;  

  RR_Rotate_0 = 1;  
  RR_Rotate_90 = 2;  
  RR_Rotate_180 = 4;  
  RR_Rotate_270 = 8;  

  RR_Reflect_X = 16;  
  RR_Reflect_Y = 32;  
  RRSetConfigSuccess = 0;  
  RRSetConfigInvalidConfigTime = 1;  
  RRSetConfigInvalidTime = 2;  
  RRSetConfigFailed = 3;  

  RR_HSyncPositive = $00000001;  
  RR_HSyncNegative = $00000002;  
  RR_VSyncPositive = $00000004;  
  RR_VSyncNegative = $00000008;  
  RR_Interlace = $00000010;  
  RR_DoubleScan = $00000020;  
  RR_CSync = $00000040;  
  RR_CSyncPositive = $00000080;  
  RR_CSyncNegative = $00000100;  
  RR_HSkewPresent = $00000200;  
  RR_BCast = $00000400;  
  RR_PixelMultiplex = $00000800;  
  RR_DoubleClock = $00001000;  
  RR_ClockDivideBy2 = $00002000;  
  RR_Connected = 0;  
  RR_Disconnected = 1;  
  RR_UnknownConnection = 2;  
  BadRROutput = 0;  
  BadRRCrtc = 1;  
  BadRRMode = 2;  
  BadRRProvider = 3;  
  BadRRLease = 4;  

  RR_PROPERTY_BACKLIGHT = 'Backlight';  
  RR_PROPERTY_RANDR_EDID = 'EDID';  
  RR_PROPERTY_SIGNAL_FORMAT = 'SignalFormat';  
  RR_PROPERTY_SIGNAL_PROPERTIES = 'SignalProperties';  
  RR_PROPERTY_CONNECTOR_TYPE = 'ConnectorType';  
  RR_PROPERTY_CONNECTOR_NUMBER = 'ConnectorNumber';  
  RR_PROPERTY_COMPATIBILITY_LIST = 'CompatibilityList';  
  RR_PROPERTY_CLONE_LIST = 'CloneList';  
  RR_PROPERTY_BORDER = 'Border';  
  RR_PROPERTY_BORDER_DIMENSIONS = 'BorderDimensions';  
  RR_PROPERTY_GUID = 'GUID';  
  RR_PROPERTY_RANDR_TILE = 'TILE';  
  RR_PROPERTY_NON_DESKTOP = 'non-desktop';  

  RR_Capability_None = 0;  
  RR_Capability_SourceOutput = 1;  
  RR_Capability_SinkOutput = 2;  
  RR_Capability_SourceOffload = 4;  
  RR_Capability_SinkOffload = 8;  
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/XResproto.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/XResproto.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/XResproto.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XRESPROTO_H}
//// {$define _XRESPROTO_H}

const
  XRES_MAJOR_VERSION = 1;  
  XRES_MINOR_VERSION = 2;  
  XRES_NAME = 'X-Resource';  

  X_XResQueryVersion = 0;  
  X_XResQueryClients = 1;  
  X_XResQueryClientResources = 2;  
  X_XResQueryClientPixmapBytes = 3;  




  X_XResQueryClientIds = 4;  
  X_XResQueryResourceBytes = 5;  
type
  TxXResClient = record
      resource_base : TCARD32;
      resource_mask : TCARD32;
    end;

const
  sz_xXResClient = 8;  
type
  TxXResType = record
      resource_type : TCARD32;
      count : TCARD32;
    end;

const
  sz_xXResType = 8;  

type
  T_XResQueryVersion = record
      reqType : TCARD8;
      XResReqType : TCARD8;
      length : TCARD16;
      client_major : TCARD8;
      client_minor : TCARD8;
      unused : TCARD16;
    end;
  TxXResQueryVersionReq = T_XResQueryVersion;

const
  sz_xXResQueryVersionReq = 8;  
type
  TxXResQueryVersionReply = record
      _type : TCARD8;
      pad1 : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      server_major : TCARD16;
      server_minor : TCARD16;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;

const
  sz_xXResQueryVersionReply = 32;  

type
  T_XResQueryClients = record
      reqType : TCARD8;
      XResReqType : TCARD8;
      length : TCARD16;
    end;
  TxXResQueryClientsReq = T_XResQueryClients;

const
  sz_xXResQueryClientsReq = 4;  
type
  TxXResQueryClientsReply = record
      _type : TCARD8;
      pad1 : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      num_clients : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;

const
  sz_xXResQueryClientsReply = 32;  

type
  T_XResQueryClientResources = record
      reqType : TCARD8;
      XResReqType : TCARD8;
      length : TCARD16;
      xid : TCARD32;
    end;
  TxXResQueryClientResourcesReq = T_XResQueryClientResources;

const
  sz_xXResQueryClientResourcesReq = 8;  
type
  TxXResQueryClientResourcesReply = record
      _type : TCARD8;
      pad1 : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      num_types : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;

const
  sz_xXResQueryClientResourcesReply = 32;  

type
  T_XResQueryClientPixmapBytes = record
      reqType : TCARD8;
      XResReqType : TCARD8;
      length : TCARD16;
      xid : TCARD32;
    end;
  TxXResQueryClientPixmapBytesReq = T_XResQueryClientPixmapBytes;

const
  sz_xXResQueryClientPixmapBytesReq = 8;  
type
  TxXResQueryClientPixmapBytesReply = record
      _type : TCARD8;
      pad1 : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      bytes : TCARD32;
      bytes_overflow : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_xXResQueryClientPixmapBytesReply = 32;  

  X_XResClientXIDMask = $01;  
  X_XResLocalClientPIDMask = $02;  
type
  T_XResClientIdSpec = record
      client : TCARD32;
      mask : TCARD32;
    end;
  TxXResClientIdSpec = T_XResClientIdSpec;

const
  sz_xXResClientIdSpec = 8;  
type
  T_XResClientIdValue = record
      spec : TxXResClientIdSpec;
      length : TCARD32;
    end;
  TxXResClientIdValue = T_XResClientIdValue;

const
  sz_xResClientIdValue = sz_xXResClientIdSpec+4;  
type
  T_XResQueryClientIds = record
      reqType : TCARD8;
      XResReqType : TCARD8;
      length : TCARD16;
      numSpecs : TCARD32;
    end;
  TxXResQueryClientIdsReq = T_XResQueryClientIds;

const
  sz_xXResQueryClientIdsReq = 8;  
type
  TxXResQueryClientIdsReply = record
      _type : TCARD8;
      pad1 : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      numIds : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;

const
  sz_xXResQueryClientIdsReply = 32;  

type
  T_XResResourceIdSpec = record
      resource : TCARD32;
      _type : TCARD32;
    end;
  TxXResResourceIdSpec = T_XResResourceIdSpec;

const
  sz_xXResResourceIdSpec = 8;  
type
  T_XResQueryResourceBytes = record
      reqType : TCARD8;
      XResReqType : TCARD8;
      length : TCARD16;
      client : TCARD32;
      numSpecs : TCARD32;
    end;
  TxXResQueryResourceBytesReq = T_XResQueryResourceBytes;

const
  sz_xXResQueryResourceBytesReq = 12;  
type
  T_XResResourceSizeSpec = record
      spec : TxXResResourceIdSpec;
      bytes : TCARD32;
      refCount : TCARD32;
      useCount : TCARD32;
    end;
  TxXResResourceSizeSpec = T_XResResourceSizeSpec;

const
  sz_xXResResourceSizeSpec = sz_xXResResourceIdSpec+12;  
type
  T_XResResourceSizeValue = record
      size : TxXResResourceSizeSpec;
      numCrossReferences : TCARD32;
    end;
  TxXResResourceSizeValue = T_XResResourceSizeValue;

const
  sz_xXResResourceSizeValue = sz_xXResResourceSizeSpec+4;  
type
  TxXResQueryResourceBytesReply = record
      _type : TCARD8;
      pad1 : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      numSizes : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;

const
  sz_xXResQueryResourceBytesReply = 32;  
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/multibufproto.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/multibufproto.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/multibufproto.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _MULTIBUFPROTO_H_}
//// {$define _MULTIBUFPROTO_H_}
//// {$include <X11/extensions/multibufconst.h>}


const
  Window = CARD32;  
  Drawable = CARD32;  
  VisualID = CARD32;  
  Multibuffer = CARD32;  
  X_MbufGetBufferVersion = 0;  
  X_MbufCreateImageBuffers = 1;  
  X_MbufDestroyImageBuffers = 2;  
  X_MbufDisplayImageBuffers = 3;  
  X_MbufSetMBufferAttributes = 4;  
  X_MbufGetMBufferAttributes = 5;  
  X_MbufSetBufferAttributes = 6;  
  X_MbufGetBufferAttributes = 7;  
  X_MbufGetBufferInfo = 8;  
  X_MbufCreateStereoWindow = 9;  
  X_MbufClearImageBufferArea = 10;  



type
  TxMbufBufferInfo = record
      visualID : TCARD32;
      maxBuffers : TCARD16;
      depth : TCARD8;
      unused : TCARD8;
    end;

const
  sz_xMbufBufferInfo = 8;  


type
  TxMbufClobberNotifyEvent = record
      _type : TBYTE;
      unused : TBYTE;
      sequenceNumber : TCARD16;
      buffer : TCARD32;
      state : TBYTE;
      unused1 : TCARD8;
      unused2 : TCARD16;
      unused3 : TCARD32;
      unused4 : TCARD32;
      unused5 : TCARD32;
      unused6 : TCARD32;
      unused7 : TCARD32;
    end;



  TxMbufUpdateNotifyEvent = record
      _type : TBYTE;
      unused : TBYTE;
      sequenceNumber : TCARD16;
      buffer : TCARD32;
      timeStamp : TCARD32;
      unused1 : TCARD32;
      unused2 : TCARD32;
      unused3 : TCARD32;
      unused4 : TCARD32;
      unused5 : TCARD32;
      unused6 : TCARD32;
    end;



  TxMbufGetBufferVersionReq = record
      reqType : TCARD8;
      mbufReqType : TCARD8;
      length : TCARD16;
    end;

const
  sz_xMbufGetBufferVersionReq = 4;  




type
  TxMbufGetBufferVersionReply = record
      _type : TBYTE;
      unused : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      majorVersion : TCARD8;
      minorVersion : TCARD8;
      pad1 : TCARD16;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;

const
  sz_xMbufGetBufferVersionReply = 32;  





type
  TxMbufCreateImageBuffersReq = record
      reqType : TCARD8;
      mbufReqType : TCARD8;
      length : TCARD16;
      window : TCARD32;
      updateAction : TCARD8;
      updateHint : TCARD8;
      unused : TCARD16;
    end;


const
  sz_xMbufCreateImageBuffersReq = 12;  



type
  TxMbufCreateImageBuffersReply = record
      _type : TBYTE;
      unused : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      numberBuffer : TCARD16;
      unused1 : TCARD16;
      unused2 : TCARD32;
      unused3 : TCARD32;
      unused4 : TCARD32;
      unused5 : TCARD32;
      unused6 : TCARD32;
    end;

const
  sz_xMbufCreateImageBuffersReply = 32;  



type
  TxMbufDestroyImageBuffersReq = record
      reqType : TCARD8;
      mbufReqType : TCARD8;
      length : TCARD16;
      window : TCARD32;
    end;

const
  sz_xMbufDestroyImageBuffersReq = 8;  




type
  TxMbufDisplayImageBuffersReq = record
      reqType : TCARD8;
      mbufReqType : TCARD8;
      length : TCARD16;
      minDelay : TCARD16;
      maxDelay : TCARD16;
    end;


const
  sz_xMbufDisplayImageBuffersReq = 8;  




type
  TxMbufSetMBufferAttributesReq = record
      reqType : TCARD8;
      mbufReqType : TCARD8;
      length : TCARD16;
      window : TCARD32;
      valueMask : TCARD32;
    end;


const
  sz_xMbufSetMBufferAttributesReq = 12;  



type
  TxMbufGetMBufferAttributesReq = record
      reqType : TCARD8;
      mbufReqType : TCARD8;
      length : TCARD16;
      window : TCARD32;
    end;

const
  sz_xMbufGetMBufferAttributesReq = 8;  



type
  TxMbufGetMBufferAttributesReply = record
      _type : TBYTE;
      unused : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      displayedBuffer : TCARD16;
      updateAction : TCARD8;
      updateHint : TCARD8;
      windowMode : TCARD8;
      unused0 : TCARD8;
      unused1 : TCARD16;
      unused2 : TCARD32;
      unused3 : TCARD32;
      unused4 : TCARD32;
      unused5 : TCARD32;
    end;

const
  sz_xMbufGetMBufferAttributesReply = 32;  


type
  TxMbufSetBufferAttributesReq = record
      reqType : TCARD8;
      mbufReqType : TCARD8;
      length : TCARD16;
      buffer : TCARD32;
      valueMask : TCARD32;
    end;


const
  sz_xMbufSetBufferAttributesReq = 12;  


type
  TxMbufGetBufferAttributesReq = record
      reqType : TCARD8;
      mbufReqType : TCARD8;
      length : TCARD16;
      buffer : TCARD32;
    end;

const
  sz_xMbufGetBufferAttributesReq = 8;  


type
  TxMbufGetBufferAttributesReply = record
      _type : TBYTE;
      unused : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      window : TCARD32;
      eventMask : TCARD32;
      bufferIndex : TCARD16;
      side : TCARD8;
      unused0 : TCARD8;
      unused1 : TCARD32;
      unused2 : TCARD32;
      unused3 : TCARD32;
    end;

const
  sz_xMbufGetBufferAttributesReply = 32;  


type
  TxMbufGetBufferInfoReq = record
      reqType : TCARD8;
      mbufReqType : TCARD8;
      length : TCARD16;
      drawable : TDrawable;
    end;

const
  sz_xMbufGetBufferInfoReq = 8;  


type
  TxMbufGetBufferInfoReply = record
      _type : TBYTE;
      unused : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      normalInfo : TCARD16;
      stereoInfo : TCARD16;
      unused1 : TCARD32;
      unused2 : TCARD32;
      unused3 : TCARD32;
      unused4 : TCARD32;
      unused5 : TCARD32;
    end;


const
  sz_xMbufGetBufferInfoReply = 32;  



//// {$if defined(__cplusplus) || defined(c_plusplus)}
//// {$else}
//// {$endif}
type
  TxMbufCreateStereoWindowReq = record
      reqType : TCARD8;
      mbufReqType : TCARD8;
      length : TCARD16;
      unused0 : TCARD8;
      unused1 : TCARD8;
      unused2 : TCARD8;
      depth : TCARD8;
      wid : TWindow;
      parent : TWindow;
      left : TMultibuffer;
      right : TMultibuffer;
      x : TINT16;
      y : TINT16;
      width : TCARD16;
      height : TCARD16;
      borderWidth : TCARD16;
      c_class : TCARD16;
      _class : TCARD16;
      visual : TVisualID;
      mask : TCARD32;
    end;


const
  sz_xMbufCreateStereoWindowReq = 44;  


type
  TxMbufClearImageBufferAreaReq = record
      reqType : TCARD8;
      mbufReqType : TCARD8;
      length : TCARD16;
      buffer : TMultibuffer;
      x : TINT16;
      y : TINT16;
      width : TCARD16;
      height : TCARD16;
      unused0 : TCARD8;
      unused1 : TCARD8;
      unused2 : TCARD8;
      exposures : TBOOL;
    end;

const
  sz_xMbufClearImageBufferAreaReq = 20;  
//// {$undef Window}
//// {$undef Drawable}
//// {$undef VisualID}
//// {$undef Multibuffer}
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/bigreqsproto.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/bigreqsproto.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/bigreqsproto.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _BIGREQSPROTO_H_}
//// {$define _BIGREQSPROTO_H_}

const
  X_BigReqEnable = 0;  
  XBigReqNumberEvents = 0;  
  XBigReqNumberErrors = 0;  
  XBigReqExtensionName = 'BIG-REQUESTS';  


type
  TxBigReqEnableReq = record
      reqType : TCARD8;
      brReqType : TCARD8;
      length : TCARD16;
    end;

const
  sz_xBigReqEnableReq = 4;  

type
  TxBigReqEnableReply = record
      _type : TBYTE;
      pad0 : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      max_request_size : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_xBigReqEnableReply = 32;  
type
  TxBigReq = record
      reqType : TCARD8;
      data : TCARD8;
      zero : TCARD16;
      length : TCARD32;
    end;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/Xfixes.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/Xfixes.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/Xfixes.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    PAtom  = ^Atom;
    Pchar  = ^char;
    PDisplay  = ^Display;
    Plongint  = ^longint;
    PXRectangle  = ^XRectangle;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XFIXES_H_}
//// {$define _XFIXES_H_}
//// {$include <X11/extensions/xfixeswire.h>}
//// {$include <X11/Xfuncproto.h>}
//// {$include <X11/Xlib.h>}


const
  XFIXES_REVISION = 1;  
//// (* error 
//// #define XFIXES_VERSION	((XFIXES_MAJOR * 10000) + (XFIXES_MINOR * 100) + (XFIXES_REVISION))
in define line 59 *)

    type
      TXFixesSelectionNotifyEvent = record
          _type : longint;
          serial : dword;
          send_event : TBool;
          display : ^TDisplay;
          window : TWindow;
          subtype : longint;
          owner : TWindow;
          selection : TAtom;
          timestamp : TTime;
          selection_timestamp : TTime;
        end;


      TXFixesCursorNotifyEvent = record
          _type : longint;
          serial : dword;
          send_event : TBool;
          display : ^TDisplay;
          window : TWindow;
          subtype : longint;
          cursor_serial : dword;
          timestamp : TTime;
          cursor_name : TAtom;
        end;
//// {$if XFIXES_MAJOR >= 2}


//// {$endif}
    type
      TXFixesCursorImage = record
          x : smallint;
          y : smallint;
          width : word;
          height : word;
          xhot : word;
          yhot : word;
          cursor_serial : dword;
          pixels : ^dword;
          atom : TAtom;
          name : ^char;
        end;
//// {$if XFIXES_MAJOR >= 2}

    type
      TXserverRegion = TXID;

      TXFixesCursorImageAndName = record
          x : smallint;
          y : smallint;
          width : word;
          height : word;
          xhot : word;
          yhot : word;
          cursor_serial : dword;
          pixels : ^dword;
          atom : TAtom;
          name : ^char;
        end;
//// {$endif}
//// (* error 
//// Bool XFixesQueryExtension (Display *dpy,
//// (* error 
//// 			    int *event_base_return,
//// (* error 
//// 			    int *error_base_return);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)

function XFixesQueryVersion(dpy:PTDisplay; major_version_return:Plongint; minor_version_return:Plongint):TStatus;cdecl;external;
function XFixesVersion:longint;cdecl;external;
procedure XFixesChangeSaveSet(dpy:PTDisplay; win:TWindow; mode:longint; target:longint; map:longint);cdecl;external;
procedure XFixesSelectSelectionInput(dpy:PTDisplay; win:TWindow; selection:TAtom; eventMask:dword);cdecl;external;
procedure XFixesSelectCursorInput(dpy:PTDisplay; win:TWindow; eventMask:dword);cdecl;external;
function XFixesGetCursorImage(dpy:PTDisplay):^TXFixesCursorImage;cdecl;external;
//// {$if XFIXES_MAJOR >= 2}


function XFixesCreateRegion(dpy:PTDisplay; rectangles:PTXRectangle; nrectangles:longint):TXserverRegion;cdecl;external;
function XFixesCreateRegionFromBitmap(dpy:PTDisplay; bitmap:TPixmap):TXserverRegion;cdecl;external;
function XFixesCreateRegionFromWindow(dpy:PTDisplay; window:TWindow; kind:longint):TXserverRegion;cdecl;external;
function XFixesCreateRegionFromGC(dpy:PTDisplay; gc:TGC):TXserverRegion;cdecl;external;
function XFixesCreateRegionFromPicture(dpy:PTDisplay; picture:TXID):TXserverRegion;cdecl;external;
procedure XFixesDestroyRegion(dpy:PTDisplay; region:TXserverRegion);cdecl;external;
procedure XFixesSetRegion(dpy:PTDisplay; region:TXserverRegion; rectangles:PTXRectangle; nrectangles:longint);cdecl;external;
procedure XFixesCopyRegion(dpy:PTDisplay; dst:TXserverRegion; src:TXserverRegion);cdecl;external;
procedure XFixesUnionRegion(dpy:PTDisplay; dst:TXserverRegion; src1:TXserverRegion; src2:TXserverRegion);cdecl;external;
procedure XFixesIntersectRegion(dpy:PTDisplay; dst:TXserverRegion; src1:TXserverRegion; src2:TXserverRegion);cdecl;external;
procedure XFixesSubtractRegion(dpy:PTDisplay; dst:TXserverRegion; src1:TXserverRegion; src2:TXserverRegion);cdecl;external;
procedure XFixesInvertRegion(dpy:PTDisplay; dst:TXserverRegion; rect:PTXRectangle; src:TXserverRegion);cdecl;external;
procedure XFixesTranslateRegion(dpy:PTDisplay; region:TXserverRegion; dx:longint; dy:longint);cdecl;external;
procedure XFixesRegionExtents(dpy:PTDisplay; dst:TXserverRegion; src:TXserverRegion);cdecl;external;
function XFixesFetchRegion(dpy:PTDisplay; region:TXserverRegion; nrectanglesRet:Plongint):^TXRectangle;cdecl;external;
function XFixesFetchRegionAndBounds(dpy:PTDisplay; region:TXserverRegion; nrectanglesRet:Plongint; bounds:PTXRectangle):^TXRectangle;cdecl;external;
procedure XFixesSetGCClipRegion(dpy:PTDisplay; gc:TGC; clip_x_origin:longint; clip_y_origin:longint; region:TXserverRegion);cdecl;external;
procedure XFixesSetWindowShapeRegion(dpy:PTDisplay; win:TWindow; shape_kind:longint; x_off:longint; y_off:longint; 
                region:TXserverRegion);cdecl;external;
procedure XFixesSetPictureClipRegion(dpy:PTDisplay; picture:TXID; clip_x_origin:longint; clip_y_origin:longint; region:TXserverRegion);cdecl;external;
procedure XFixesSetCursorName(dpy:PTDisplay; cursor:TCursor; name:Pchar);cdecl;external;
function XFixesGetCursorName(dpy:PTDisplay; cursor:TCursor; atom:PTAtom):^char;cdecl;external;
procedure XFixesChangeCursor(dpy:PTDisplay; source:TCursor; destination:TCursor);cdecl;external;
procedure XFixesChangeCursorByName(dpy:PTDisplay; source:TCursor; name:Pchar);cdecl;external;
//// {$endif}

//// {$if XFIXES_MAJOR >= 3}

procedure XFixesExpandRegion(dpy:PTDisplay; dst:TXserverRegion; src:TXserverRegion; left:dword; right:dword; 
                top:dword; bottom:dword);cdecl;external;
//// {$endif}

//// {$if XFIXES_MAJOR >= 4}


procedure XFixesHideCursor(dpy:PTDisplay; win:TWindow);cdecl;external;
procedure XFixesShowCursor(dpy:PTDisplay; win:TWindow);cdecl;external;
//// {$endif}

//// {$if XFIXES_MAJOR >= 5}
    type
      TPointerBarrier = TXID;

function XFixesCreatePointerBarrier(dpy:PTDisplay; w:TWindow; x1:longint; y1:longint; x2:longint; 
               y2:longint; directions:longint; num_devices:longint; devices:Plongint):TPointerBarrier;cdecl;external;
procedure XFixesDestroyPointerBarrier(dpy:PTDisplay; b:TPointerBarrier);cdecl;external;
//// {$endif}

//// {$if XFIXES_MAJOR >= 6}

procedure XFixesSetClientDisconnectMode(dpy:PTDisplay; disconnect_mode:longint);cdecl;external;
function XFixesGetClientDisconnectMode(dpy:PTDisplay):longint;cdecl;external;
//// {$endif}

//// {$endif}

//// (* error 
//// #endif /* _XFIXES_H_ */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/ge.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/ge.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/ge.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _GE_H_}
//// {$define _GE_H_}

const
  GE_NAME = 'Generic Event Extension';  
  GE_MAJOR = 1;  
  GE_MINOR = 0;  

  X_GEQueryVersion = 0;  
  GENumberRequests = X_GEQueryVersion+1;  

  GENumberEvents = 0;  

  GENumberErrors = 0;  
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/Xdamage.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/Xdamage.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/Xdamage.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

Type
PDisplay  = ^Display;
Plongint  = ^longint;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XDAMAGE_H_}
//// {$define _XDAMAGE_H_}
//// {$include <X11/extensions/damagewire.h>}
//// {$include <X11/extensions/Xfixes.h>}
//// {$include <X11/Xfuncproto.h>}
//// {$define XDAMAGE_1_1_INTERFACE}
type
  TDamage = TXID;



  TXDamageNotifyEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      drawable : TDrawable;
      damage : TDamage;
      level : longint;
      more : TBool;
      timestamp : TTime;
      area : TXRectangle;
      geometry : TXRectangle;
    end;
//// (* error 
//// Bool XDamageQueryExtension (Display *dpy,
//// (* error 
////                             int *event_base_return,
//// (* error 
////                             int *error_base_return);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)

function XDamageQueryVersion(dpy:PTDisplay; major_version_return:Plongint; minor_version_return:Plongint):TStatus;cdecl;external;
function XDamageCreate(dpy:PTDisplay; drawable:TDrawable; level:longint):TDamage;cdecl;external;
procedure XDamageDestroy(dpy:PTDisplay; damage:TDamage);cdecl;external;
procedure XDamageSubtract(dpy:PTDisplay; damage:TDamage; repair:TXserverRegion; parts:TXserverRegion);cdecl;external;
procedure XDamageAdd(dpy:PTDisplay; drawable:TDrawable; region:TXserverRegion);cdecl;external;
//// {$endif}

//// (* error 
//// #endif /* _XDAMAGE_H_ */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/XvMC.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/XvMC.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/XvMC.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}


//// {$ifndef _XVMC_H_}
//// {$define _XVMC_H_}
//// {$include <X11/X.h>}
//// {$include <X11/extensions/Xv.h>}

const
  XvMCName = 'XVideo-MotionCompensation';  
  XvMCNumEvents = 0;  
  XvMCNumErrors = 3;  
  XvMCVersion = 1;  
  XvMCRevision = 1;  
  XvMCBadContext = 0;  
  XvMCBadSurface = 1;  
  XvMCBadSubpicture = 2;  

  XVMC_CHROMA_FORMAT_420 = $00000001;  
  XVMC_CHROMA_FORMAT_422 = $00000002;  
  XVMC_CHROMA_FORMAT_444 = $00000003;  

  XVMC_OVERLAID_SURFACE = $00000001;  
  XVMC_BACKEND_SUBPICTURE = $00000002;  
  XVMC_SUBPICTURE_INDEPENDENT_SCALING = $00000004;  
  XVMC_INTRA_UNSIGNED = $00000008;  

  XVMC_MOCOMP = $00000000;  
  XVMC_IDCT = $00010000;  
  XVMC_MPEG_1 = $00000001;  
  XVMC_MPEG_2 = $00000002;  
  XVMC_H263 = $00000003;  
  XVMC_MPEG_4 = $00000004;  
  XVMC_MB_TYPE_MOTION_FORWARD = $02;  
  XVMC_MB_TYPE_MOTION_BACKWARD = $04;  
  XVMC_MB_TYPE_PATTERN = $08;  
  XVMC_MB_TYPE_INTRA = $10;  
  XVMC_PREDICTION_FIELD = $01;  
  XVMC_PREDICTION_FRAME = $02;  
  XVMC_PREDICTION_DUAL_PRIME = $03;  
  XVMC_PREDICTION_16x8 = $02;  
  XVMC_PREDICTION_4MV = $04;  
  XVMC_SELECT_FIRST_FORWARD = $01;  
  XVMC_SELECT_FIRST_BACKWARD = $02;  
  XVMC_SELECT_SECOND_FORWARD = $04;  
  XVMC_SELECT_SECOND_BACKWARD = $08;  
  XVMC_DCT_TYPE_FRAME = $00;  
  XVMC_DCT_TYPE_FIELD = $01;  
  XVMC_TOP_FIELD = $00000001;  
  XVMC_BOTTOM_FIELD = $00000002;  
  XVMC_FRAME_PICTURE = XVMC_TOP_FIELD or XVMC_BOTTOM_FIELD;  
  XVMC_SECOND_FIELD = $00000004;  
  XVMC_DIRECT = $00000001;  
  XVMC_RENDERING = $00000001;  
  XVMC_DISPLAYING = $00000002;  
type
  TXvMCSurfaceInfo = record
      surface_type_id : longint;
      chroma_format : longint;
      max_width : word;
      max_height : word;
      subpicture_max_width : word;
      subpicture_max_height : word;
      mc_type : longint;
      flags : longint;
    end;


  TXvMCContext = record
      context_id : TXID;
      surface_type_id : longint;
      width : word;
      height : word;
      port : TXvPortID;
      flags : longint;
      privData : pointer;
    end;


  TXvMCSurface = record
      surface_id : TXID;
      context_id : TXID;
      surface_type_id : longint;
      width : word;
      height : word;
      privData : pointer;
    end;


  TXvMCSubpicture = record
      subpicture_id : TXID;
      context_id : TXID;
      xvimage_id : longint;
      width : word;
      height : word;
      num_palette_entries : longint;
      entry_bytes : longint;
      component_order : array[0..3] of char;
      privData : pointer;
    end;

  TXvMCBlockArray = record
      num_blocks : dword;
      context_id : TXID;
      privData : pointer;
      blocks : ^smallint;
    end;

  TXvMCMacroBlock = record
      x : word;
      y : word;
      macroblock_type : byte;
      motion_type : byte;
      motion_vertical_field_select : byte;
      dct_type : byte;
      PMV : array[0..1] of array[0..1] of array[0..1] of smallint;
      index : dword;
      coded_block_pattern : word;
      pad0 : word;
    end;

  TXvMCMacroBlockArray = record
      num_blocks : dword;
      context_id : TXID;
      privData : pointer;
      macro_blocks : ^TXvMCMacroBlock;
    end;
//// {$endif}

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/XInput.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/XInput.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/XInput.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    PAtom  = ^Atom;
    Pbyte  = ^byte;
    PDisplay  = ^Display;
    Pdword  = ^dword;
    PKeySym  = ^KeySym;
    Plongint  = ^longint;
    PTime  = ^Time;
    PWindow  = ^Window;
    PXDevice  = ^XDevice;
    PXDeviceControl  = ^XDeviceControl;
    PXDeviceInfo  = ^XDeviceInfo;
    PXDeviceState  = ^XDeviceState;
    PXDeviceTimeCoord  = ^XDeviceTimeCoord;
    PXEvent  = ^XEvent;
    PXEventClass  = ^XEventClass;
    PXFeedbackControl  = ^XFeedbackControl;
    PXFeedbackState  = ^XFeedbackState;
    PXModifierKeymap  = ^XModifierKeymap;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XINPUT_H_}
//// {$define _XINPUT_H_}
//// {$include <X11/Xlib.h>}
//// {$include <X11/extensions/XI.h>}

const
  _deviceKeyPress = 0;  
  _deviceKeyRelease = 1;  
  _deviceButtonPress = 0;  
  _deviceButtonRelease = 1;  
  _deviceMotionNotify = 0;  
  _deviceFocusIn = 0;  
  _deviceFocusOut = 1;  
  _proximityIn = 0;  
  _proximityOut = 1;  
  _deviceStateNotify = 0;  
  _deviceMappingNotify = 1;  
  _changeDeviceNotify = 2;  

  _propertyNotify = 6;  
//// (* error 
////     { int _i; XInputClassInfo *_ip; \
in declaration at line 78 *)
      var
        _ip : ^TXInputClassInfo;cvar;public;
//// (* error 
////     { int _i; XInputClassInfo *_ip; \
//// (* error 
////     type = 0; _class = 0; \
in declaration at line 79 *)
//// (* error 
////     type = 0; _class = 0; \
in declaration at line 79 *)
//// (* error 
////     type = 0; _class = 0; \
//// (* error 
////     for (_i=0, _ip= ((XDevice *) d)->classes; \
in declaration at line 80 *)
//// (* error 
////     for (_i=0, _ip= ((XDevice *) d)->classes; \
//// (* error 
//// 	 _i< ((XDevice *) d)->num_classes; \
in declaration at line 81 *)
//// (* error 
//// 	 _i< ((XDevice *) d)->num_classes; \
//// (* error 
//// 	 _i++, _ip++) \
in declaration at line 84 *)
//// (* error 
//// 	    {type =  _ip->event_type_base + offset; \
//// (* error 
//// 	     _class =  ((XDevice *) d)->device_id << 8 | type;}}
in declaration at line 85 *)
//// (* error 
//// 	     _class =  ((XDevice *) d)->device_id << 8 | type;}}
in define line 88 *)

    function DeviceKeyRelease(d,_type,_class : longint) : longint;    

    function DeviceButtonPress(d,_type,_class : longint) : longint;    

    function DeviceButtonRelease(d,_type,_class : longint) : longint;    

    function DeviceMotionNotify(d,_type,_class : longint) : longint;    

    function DeviceFocusIn(d,_type,_class : longint) : longint;    

    function DeviceFocusOut(d,_type,_class : longint) : longint;    

    function ProximityIn(d,_type,_class : longint) : longint;    

    function ProximityOut(d,_type,_class : longint) : longint;    

    function DeviceStateNotify(d,_type,_class : longint) : longint;    

    function DeviceMappingNotify(d,_type,_class : longint) : longint;    

    function ChangeDeviceNotify(d,_type,_class : longint) : longint;    

    function DevicePropertyNotify(d,_type,_class : longint) : longint;    

//// (* error 
////     { _class =  ((XDevice *) d)->device_id << 8 | _devicePointerMotionHint;}
in declaration at line 127 *)
//// (* error 
////     { _class =  ((XDevice *) d)->device_id << 8 | _devicePointerMotionHint;}
in declaration at line 130 *)
//// (* error 
////     { _class =  ((XDevice *) d)->device_id << 8 | _deviceButton1Motion;}
in declaration at line 133 *)
//// (* error 
////     { _class =  ((XDevice *) d)->device_id << 8 | _deviceButton2Motion;}
in declaration at line 136 *)
//// (* error 
////     { _class =  ((XDevice *) d)->device_id << 8 | _deviceButton3Motion;}
in declaration at line 139 *)
//// (* error 
////     { _class =  ((XDevice *) d)->device_id << 8 | _deviceButton4Motion;}
in declaration at line 142 *)
//// (* error 
////     { _class =  ((XDevice *) d)->device_id << 8 | _deviceButton5Motion;}
in declaration at line 145 *)
//// (* error 
////     { _class =  ((XDevice *) d)->device_id << 8 | _deviceButtonMotion;}
in declaration at line 148 *)
//// (* error 
////     { _class =  ((XDevice *) d)->device_id << 8 | _deviceOwnerGrabButton;}
in declaration at line 151 *)
//// (* error 
////     { _class =  ((XDevice *) d)->device_id << 8 | _deviceButtonGrab;}
in declaration at line 154 *)
//// (* error 
////     { _class =  ((XDevice *) d)->device_id << 8 | _noExtensionEvent;}

//// {$if defined(__cplusplus) || defined(c_plusplus)}
//// {$endif}
in declaration at line 161 *)

procedure _xibaddevice(dpy:PTDisplay; error:Plongint);cdecl;external;
procedure _xibadclass(dpy:PTDisplay; error:Plongint);cdecl;external;
procedure _xibadevent(dpy:PTDisplay; error:Plongint);cdecl;external;
procedure _xibadmode(dpy:PTDisplay; error:Plongint);cdecl;external;
procedure _xidevicebusy(dpy:PTDisplay; error:Plongint);cdecl;external;
//// {$if defined(__cplusplus) || defined(c_plusplus)}
//// (* error 
//// }
//// {$endif}
in declaration at line 173 *)
//// (* error 
////         type = _XiGetDevicePresenceNotifyEvent(dpy);            \
//// (* error 
////         _class =  (0x10000 | _devicePresence);                  \
in declaration at line 174 *)
//// (* error 
////         _class =  (0x10000 | _devicePresence);                  \
//// (* error 
////     }

in define line 178 *)

    function BadClass(dpy,error : longint) : longint;    

    function BadEvent(dpy,error : longint) : longint;    

    function BadMode(dpy,error : longint) : longint;    

    function DeviceBusy(dpy,error : longint) : longint;    

    type
      TXAnyClassPtr = ^T_XAnyClassinfo;

















      TXDeviceKeyEvent = record
          _type : longint;
          serial : dword;
          send_event : TBool;
          display : ^TDisplay;
          window : TWindow;
          deviceid : TXID;
          root : TWindow;
          subwindow : TWindow;
          time : TTime;
          x : longint;
          y : longint;
          x_root : longint;
          y_root : longint;
          state : dword;
          keycode : dword;
          same_screen : TBool;
          device_state : dword;
          axes_count : byte;
          first_axis : byte;
          axis_data : array[0..5] of longint;
        end;

      TXDeviceKeyPressedEvent = TXDeviceKeyEvent;

      TXDeviceKeyReleasedEvent = TXDeviceKeyEvent;

















      TXDeviceButtonEvent = record
          _type : longint;
          serial : dword;
          send_event : TBool;
          display : ^TDisplay;
          window : TWindow;
          deviceid : TXID;
          root : TWindow;
          subwindow : TWindow;
          time : TTime;
          x : longint;
          y : longint;
          x_root : longint;
          y_root : longint;
          state : dword;
          button : dword;
          same_screen : TBool;
          device_state : dword;
          axes_count : byte;
          first_axis : byte;
          axis_data : array[0..5] of longint;
        end;

      TXDeviceButtonPressedEvent = TXDeviceButtonEvent;

      TXDeviceButtonReleasedEvent = TXDeviceButtonEvent;

















      TXDeviceMotionEvent = record
          _type : longint;
          serial : dword;
          send_event : TBool;
          display : ^TDisplay;
          window : TWindow;
          deviceid : TXID;
          root : TWindow;
          subwindow : TWindow;
          time : TTime;
          x : longint;
          y : longint;
          x_root : longint;
          y_root : longint;
          state : dword;
          is_hint : char;
          same_screen : TBool;
          device_state : dword;
          axes_count : byte;
          first_axis : byte;
          axis_data : array[0..5] of longint;
        end;









      TXDeviceFocusChangeEvent = record
          _type : longint;
          serial : dword;
          send_event : TBool;
          display : ^TDisplay;
          window : TWindow;
          deviceid : TXID;
          mode : longint;
          detail : longint;
          time : TTime;
        end;

      TXDeviceFocusInEvent = TXDeviceFocusChangeEvent;

      TXDeviceFocusOutEvent = TXDeviceFocusChangeEvent;






      TXProximityNotifyEvent = record
          _type : longint;
          serial : dword;
          send_event : TBool;
          display : ^TDisplay;
          window : TWindow;
          deviceid : TXID;
          root : TWindow;
          subwindow : TWindow;
          time : TTime;
          x : longint;
          y : longint;
          x_root : longint;
          y_root : longint;
          state : dword;
          same_screen : TBool;
          device_state : dword;
          axes_count : byte;
          first_axis : byte;
          axis_data : array[0..5] of longint;
        end;

      TXProximityInEvent = TXProximityNotifyEvent;

      TXProximityOutEvent = TXProximityNotifyEvent;

//// {$if defined(__cplusplus) || defined(c_plusplus)}
//// {$else}
//// {$endif}
    type
      TXInputClass = record
          c_class : byte;
          _class : byte;
          length : byte;
        end;




      TXDeviceStateNotifyEvent = record
          _type : longint;
          serial : dword;
          send_event : TBool;
          display : ^TDisplay;
          window : TWindow;
          deviceid : TXID;
          time : TTime;
          num_classes : longint;
          data : array[0..63] of char;
        end;
//// {$if defined(__cplusplus) || defined(c_plusplus)}
//// {$else}
//// {$endif}
    type
      TXValuatorStatus = record
          c_class : byte;
          _class : byte;
          length : byte;
          num_valuators : byte;
          mode : byte;
          valuators : array[0..5] of longint;
        end;
//// {$if defined(__cplusplus) || defined(c_plusplus)}
//// {$else}
//// {$endif}
    type
      TXKeyStatus = record
          c_class : byte;
          _class : byte;
          length : byte;
          num_keys : smallint;
          keys : array[0..31] of char;
        end;
//// {$if defined(__cplusplus) || defined(c_plusplus)}
//// {$else}
//// {$endif}
    type
      TXButtonStatus = record
          c_class : byte;
          _class : byte;
          length : byte;
          num_buttons : smallint;
          buttons : array[0..31] of char;
        end;









      TXDeviceMappingEvent = record
          _type : longint;
          serial : dword;
          send_event : TBool;
          display : ^TDisplay;
          window : TWindow;
          deviceid : TXID;
          time : TTime;
          request : longint;
          first_keycode : longint;
          count : longint;
        end;







      TXChangeDeviceNotifyEvent = record
          _type : longint;
          serial : dword;
          send_event : TBool;
          display : ^TDisplay;
          window : TWindow;
          deviceid : TXID;
          time : TTime;
          request : longint;
        end;






      TXDevicePresenceNotifyEvent = record
          _type : longint;
          serial : dword;
          send_event : TBool;
          display : ^TDisplay;
          window : TWindow;
          time : TTime;
          devchange : TBool;
          deviceid : TXID;
          control : TXID;
        end;









      TXDevicePropertyNotifyEvent = record
          _type : longint;
          serial : dword;
          send_event : TBool;
          display : ^TDisplay;
          window : TWindow;
          time : TTime;
          deviceid : TXID;
          atom : TAtom;
          state : longint;
        end;

//// {$if defined(__cplusplus) || defined(c_plusplus)}
//// {$else}
//// {$endif}
    type
      TXFeedbackState = record
          c_class : TXID;
          _class : TXID;
          length : longint;
          id : TXID;
        end;
//// {$if defined(__cplusplus) || defined(c_plusplus)}
//// {$else}
//// {$endif}
    type
      TXKbdFeedbackState = record
          c_class : TXID;
          _class : TXID;
          length : longint;
          id : TXID;
          click : longint;
          percent : longint;
          pitch : longint;
          duration : longint;
          led_mask : longint;
          global_auto_repeat : longint;
          auto_repeats : array[0..31] of char;
        end;
//// {$if defined(__cplusplus) || defined(c_plusplus)}
//// {$else}
//// {$endif}
    type
      TXPtrFeedbackState = record
          c_class : TXID;
          _class : TXID;
          length : longint;
          id : TXID;
          accelNum : longint;
          accelDenom : longint;
          threshold : longint;
        end;
//// {$if defined(__cplusplus) || defined(c_plusplus)}
//// {$else}
//// {$endif}
    type
      TXIntegerFeedbackState = record
          c_class : TXID;
          _class : TXID;
          length : longint;
          id : TXID;
          resolution : longint;
          minVal : longint;
          maxVal : longint;
        end;
//// {$if defined(__cplusplus) || defined(c_plusplus)}
//// {$else}
//// {$endif}
    type
      TXStringFeedbackState = record
          c_class : TXID;
          _class : TXID;
          length : longint;
          id : TXID;
          max_symbols : longint;
          num_syms_supported : longint;
          syms_supported : ^TKeySym;
        end;
//// {$if defined(__cplusplus) || defined(c_plusplus)}
//// {$else}
//// {$endif}
    type
      TXBellFeedbackState = record
          c_class : TXID;
          _class : TXID;
          length : longint;
          id : TXID;
          percent : longint;
          pitch : longint;
          duration : longint;
        end;
//// {$if defined(__cplusplus) || defined(c_plusplus)}
//// {$else}
//// {$endif}
    type
      TXLedFeedbackState = record
          c_class : TXID;
          _class : TXID;
          length : longint;
          id : TXID;
          led_values : longint;
          led_mask : longint;
        end;
//// {$if defined(__cplusplus) || defined(c_plusplus)}
//// {$else}
//// {$endif}
    type
      TXFeedbackControl = record
          c_class : TXID;
          _class : TXID;
          length : longint;
          id : TXID;
        end;
//// {$if defined(__cplusplus) || defined(c_plusplus)}
//// {$else}
//// {$endif}
    type
      TXPtrFeedbackControl = record
          c_class : TXID;
          _class : TXID;
          length : longint;
          id : TXID;
          accelNum : longint;
          accelDenom : longint;
          threshold : longint;
        end;
//// {$if defined(__cplusplus) || defined(c_plusplus)}
//// {$else}
//// {$endif}
    type
      TXKbdFeedbackControl = record
          c_class : TXID;
          _class : TXID;
          length : longint;
          id : TXID;
          click : longint;
          percent : longint;
          pitch : longint;
          duration : longint;
          led_mask : longint;
          led_value : longint;
          key : longint;
          auto_repeat_mode : longint;
        end;
//// {$if defined(__cplusplus) || defined(c_plusplus)}
//// {$else}
//// {$endif}
    type
      TXStringFeedbackControl = record
          c_class : TXID;
          _class : TXID;
          length : longint;
          id : TXID;
          num_keysyms : longint;
          syms_to_display : ^TKeySym;
        end;
//// {$if defined(__cplusplus) || defined(c_plusplus)}
//// {$else}
//// {$endif}
    type
      TXIntegerFeedbackControl = record
          c_class : TXID;
          _class : TXID;
          length : longint;
          id : TXID;
          int_to_display : longint;
        end;
//// {$if defined(__cplusplus) || defined(c_plusplus)}
//// {$else}
//// {$endif}
    type
      TXBellFeedbackControl = record
          c_class : TXID;
          _class : TXID;
          length : longint;
          id : TXID;
          percent : longint;
          pitch : longint;
          duration : longint;
        end;
//// {$if defined(__cplusplus) || defined(c_plusplus)}
//// {$else}
//// {$endif}
    type
      TXLedFeedbackControl = record
          c_class : TXID;
          _class : TXID;
          length : longint;
          id : TXID;
          led_mask : longint;
          led_values : longint;
        end;


      TXDeviceControl = record
          control : TXID;
          length : longint;
        end;

      TXDeviceResolutionControl = record
          control : TXID;
          length : longint;
          first_valuator : longint;
          num_valuators : longint;
          resolutions : ^longint;
        end;

      TXDeviceResolutionState = record
          control : TXID;
          length : longint;
          num_valuators : longint;
          resolutions : ^longint;
          min_resolutions : ^longint;
          max_resolutions : ^longint;
        end;

      TXDeviceAbsCalibControl = record
          control : TXID;
          length : longint;
          min_x : longint;
          max_x : longint;
          min_y : longint;
          max_y : longint;
          flip_x : longint;
          flip_y : longint;
          rotation : longint;
          button_threshold : longint;
        end;
      TXDeviceAbsCalibState = TXDeviceAbsCalibControl;

      TXDeviceAbsAreaControl = record
          control : TXID;
          length : longint;
          offset_x : longint;
          offset_y : longint;
          width : longint;
          height : longint;
          screen : longint;
          following : TXID;
        end;
      TXDeviceAbsAreaState = TXDeviceAbsAreaControl;

      TXDeviceCoreControl = record
          control : TXID;
          length : longint;
          status : longint;
        end;

      TXDeviceCoreState = record
          control : TXID;
          length : longint;
          status : longint;
          iscore : longint;
        end;

      TXDeviceEnableControl = record
          control : TXID;
          length : longint;
          enable : longint;
        end;
      TXDeviceEnableState = TXDeviceEnableControl;

//// {$if defined(__cplusplus) || defined(c_plusplus)}
//// {$else}
//// {$endif}
    type
      T_XAnyClassinfo = record
          c_class : TXID;
          _class : TXID;
          length : longint;
        end;
      TXAnyClassInfo = T_XAnyClassinfo;

      TXDeviceInfoPtr = ^T_XDeviceInfo;

      T_XDeviceInfo = record
          id : TXID;
          _type : TAtom;
          name : ^char;
          num_classes : longint;
          use : longint;
          inputclassinfo : TXAnyClassPtr;
        end;
      TXDeviceInfo = T_XDeviceInfo;

      TXKeyInfoPtr = ^T_XKeyInfo;
//// {$if defined(__cplusplus) || defined(c_plusplus)}
//// {$else}
//// {$endif}
    type
      T_XKeyInfo = record
          c_class : TXID;
          _class : TXID;
          length : longint;
          min_keycode : word;
          max_keycode : word;
          num_keys : word;
        end;
      TXKeyInfo = T_XKeyInfo;

      TXButtonInfoPtr = ^T_XButtonInfo;
//// {$if defined(__cplusplus) || defined(c_plusplus)}
//// {$else}
//// {$endif}
    type
      T_XButtonInfo = record
          c_class : TXID;
          _class : TXID;
          length : longint;
          num_buttons : smallint;
        end;
      TXButtonInfo = T_XButtonInfo;

      TXAxisInfoPtr = ^T_XAxisInfo;

      T_XAxisInfo = record
          resolution : longint;
          min_value : longint;
          max_value : longint;
        end;
      TXAxisInfo = T_XAxisInfo;

      TXValuatorInfoPtr = ^T_XValuatorInfo;
//// {$if defined(__cplusplus) || defined(c_plusplus)}
//// {$else}
//// {$endif}
    type
      T_XValuatorInfo = record
          c_class : TXID;
          _class : TXID;
          length : longint;
          num_axes : byte;
          mode : byte;
          motion_buffer : dword;
          axes : TXAxisInfoPtr;
        end;
      TXValuatorInfo = T_XValuatorInfo;


      TXInputClassInfo = record
          input_class : byte;
          event_type_base : byte;
        end;

      TXDevice = record
          device_id : TXID;
          num_classes : longint;
          classes : ^TXInputClassInfo;
        end;


      TXEventList = record
          event_type : TXEventClass;
          device : TXID;
        end;


      TXDeviceTimeCoord = record
          time : TTime;
          data : ^longint;
        end;


      TXDeviceState = record
          device_id : TXID;
          num_classes : longint;
          data : ^TXInputClass;
        end;

//// {$if defined(__cplusplus) || defined(c_plusplus)}
//// {$else}
//// {$endif}
    type
      TXValuatorState = record
          c_class : byte;
          _class : byte;
          length : byte;
          num_valuators : byte;
          mode : byte;
          valuators : ^longint;
        end;
//// {$if defined(__cplusplus) || defined(c_plusplus)}
//// {$else}
//// {$endif}
    type
      TXKeyState = record
          c_class : byte;
          _class : byte;
          length : byte;
          num_keys : smallint;
          keys : array[0..31] of char;
        end;
//// {$if defined(__cplusplus) || defined(c_plusplus)}
//// {$else}
//// {$endif}
    type
      TXButtonState = record
          c_class : byte;
          _class : byte;
          length : byte;
          num_buttons : smallint;
          buttons : array[0..31] of char;
        end;

//// (* error 
//// extern int	XChangeKeyboardDevice(

in declaration at line 950 *)


function XChangePointerDevice(_para1:PTDisplay; _para2:PTXDevice; _para3:longint; _para4:longint):longint;cdecl;external;

function XGrabDevice(_para1:PTDisplay; _para2:PTXDevice; _para3:TWindow; _para4:TBool; _para5:longint; 
               _para6:PTXEventClass; _para7:longint; _para8:longint; _para9:TTime):longint;cdecl;external;

function XUngrabDevice(_para1:PTDisplay; _para2:PTXDevice; _para3:TTime):longint;cdecl;external;

function XGrabDeviceKey(_para1:PTDisplay; _para2:PTXDevice; _para3:dword; _para4:dword; _para5:PTXDevice; 
               _para6:TWindow; _para7:TBool; _para8:dword; _para9:PTXEventClass; _para10:longint; 
               _para11:longint):longint;cdecl;external;

function XUngrabDeviceKey(_para1:PTDisplay; _para2:PTXDevice; _para3:dword; _para4:dword; _para5:PTXDevice; 
               _para6:TWindow):longint;cdecl;external;

function XGrabDeviceButton(_para1:PTDisplay; _para2:PTXDevice; _para3:dword; _para4:dword; _para5:PTXDevice; 
               _para6:TWindow; _para7:TBool; _para8:dword; _para9:PTXEventClass; _para10:longint; 
               _para11:longint):longint;cdecl;external;

function XUngrabDeviceButton(_para1:PTDisplay; _para2:PTXDevice; _para3:dword; _para4:dword; _para5:PTXDevice; 
               _para6:TWindow):longint;cdecl;external;

function XAllowDeviceEvents(_para1:PTDisplay; _para2:PTXDevice; _para3:longint; _para4:TTime):longint;cdecl;external;

function XGetDeviceFocus(_para1:PTDisplay; _para2:PTXDevice; _para3:PTWindow; _para4:Plongint; _para5:PTTime):longint;cdecl;external;

function XSetDeviceFocus(_para1:PTDisplay; _para2:PTXDevice; _para3:TWindow; _para4:longint; _para5:TTime):longint;cdecl;external;

function XGetFeedbackControl(_para1:PTDisplay; _para2:PTXDevice; _para3:Plongint):^TXFeedbackState;cdecl;external;

procedure XFreeFeedbackList(_para1:PTXFeedbackState);cdecl;external;

function XChangeFeedbackControl(_para1:PTDisplay; _para2:PTXDevice; _para3:dword; _para4:PTXFeedbackControl):longint;cdecl;external;

function XDeviceBell(_para1:PTDisplay; _para2:PTXDevice; _para3:TXID; _para4:TXID; _para5:longint):longint;cdecl;external;
//// {$if NeedWidePrototypes}
//// {$else}
//// {$endif}


function XGetDeviceKeyMapping(_para1:PTDisplay; _para2:PTXDevice; _para3:dword; _para4:TKeyCode; _para5:longint; 
               _para6:Plongint):^TKeySym;cdecl;external;

function XChangeDeviceKeyMapping(_para1:PTDisplay; _para2:PTXDevice; _para3:longint; _para4:longint; _para5:PTKeySym; 
               _para6:longint):longint;cdecl;external;

function XGetDeviceModifierMapping(_para1:PTDisplay; _para2:PTXDevice):^TXModifierKeymap;cdecl;external;

function XSetDeviceModifierMapping(_para1:PTDisplay; _para2:PTXDevice; _para3:PTXModifierKeymap):longint;cdecl;external;

function XSetDeviceButtonMapping(_para1:PTDisplay; _para2:PTXDevice; _para3:Pbyte; _para4:longint):longint;cdecl;external;

function XGetDeviceButtonMapping(_para1:PTDisplay; _para2:PTXDevice; _para3:Pbyte; _para4:dword):longint;cdecl;external;

function XQueryDeviceState(_para1:PTDisplay; _para2:PTXDevice):^TXDeviceState;cdecl;external;

procedure XFreeDeviceState(_para1:PTXDeviceState);cdecl;external;
//// (* error 
////     _Xconst char*	/* name */

 in declarator_list *)

function XListInputDevices(_para1:PTDisplay; _para2:Plongint):^TXDeviceInfo;cdecl;external;

procedure XFreeDeviceList(_para1:PTXDeviceInfo);cdecl;external;

function XOpenDevice(_para1:PTDisplay; _para2:TXID):^TXDevice;cdecl;external;

function XCloseDevice(_para1:PTDisplay; _para2:PTXDevice):longint;cdecl;external;

function XSetDeviceMode(_para1:PTDisplay; _para2:PTXDevice; _para3:longint):longint;cdecl;external;

function XSetDeviceValuators(_para1:PTDisplay; _para2:PTXDevice; _para3:Plongint; _para4:longint; _para5:longint):longint;cdecl;external;

function XGetDeviceControl(_para1:PTDisplay; _para2:PTXDevice; _para3:longint):^TXDeviceControl;cdecl;external;

function XChangeDeviceControl(_para1:PTDisplay; _para2:PTXDevice; _para3:longint; _para4:PTXDeviceControl):longint;cdecl;external;

function XSelectExtensionEvent(_para1:PTDisplay; _para2:TWindow; _para3:PTXEventClass; _para4:longint):longint;cdecl;external;

function XGetSelectedExtensionEvents(_para1:PTDisplay; _para2:TWindow; _para3:Plongint; _para4:PPTXEventClass; _para5:Plongint; 
               _para6:PPTXEventClass):longint;cdecl;external;

function XChangeDeviceDontPropagateList(_para1:PTDisplay; _para2:TWindow; _para3:longint; _para4:PTXEventClass; _para5:longint):longint;cdecl;external;

function XGetDeviceDontPropagateList(_para1:PTDisplay; _para2:TWindow; _para3:Plongint):^TXEventClass;cdecl;external;

function XSendExtensionEvent(_para1:PTDisplay; _para2:PTXDevice; _para3:TWindow; _para4:TBool; _para5:longint; 
               _para6:PTXEventClass; _para7:PTXEvent):TStatus;cdecl;external;

function XGetDeviceMotionEvents(_para1:PTDisplay; _para2:PTXDevice; _para3:TTime; _para4:TTime; _para5:Plongint; 
               _para6:Plongint; _para7:Plongint):^TXDeviceTimeCoord;cdecl;external;

procedure XFreeDeviceMotionEvents(_para1:PTXDeviceTimeCoord);cdecl;external;

procedure XFreeDeviceControl(_para1:PTXDeviceControl);cdecl;external;

function XListDeviceProperties(_para1:PTDisplay; _para2:PTXDevice; _para3:Plongint):^TAtom;cdecl;external;
//// (* error 
////     _Xconst unsigned char * /*data */,
//// (* error 
////     int                 /* nelements */

 in declarator_list *)
 in declarator_list *)

procedure XDeleteDeviceProperty(_para1:PTDisplay; _para2:PTXDevice; _para3:TAtom);cdecl;external;

function XGetDeviceProperty(_para1:PTDisplay; _para2:PTXDevice; _para3:TAtom; _para4:longint; _para5:longint; 
               _para6:TBool; _para7:TAtom; _para8:PTAtom; _para9:Plongint; _para10:Pdword; 
               _para11:Pdword; _para12:PPbyte):TStatus;cdecl;external;
//// {$endif}

//// (* error 
//// #endif /* _XINPUT_H_ */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/xf86dga1str.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/xf86dga1str.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/xf86dga1str.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}


//// (* error 
//// #warning "xf86dga1str.h is obsolete and may be removed in the future."
//// (* error 
//// #warning "xf86dga1str.h is obsolete and may be removed in the future."
//// {$include <X11/extensions/xf86dga1proto.h>}

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/XI2proto.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/XI2proto.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/XI2proto.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}





//// {$ifndef _XI2PROTO_H_}
//// {$define _XI2PROTO_H_}
//// {$include <X11/Xproto.h>}
//// {$include <X11/X.h>}
//// {$include <X11/extensions/XI2.h>}
//// {$include <stdint.h>}


const
  Window = uint32_t;  
  Time = uint32_t;  
  Atom = uint32_t;  
  Cursor = uint32_t;  
  Barrier = uint32_t;  

  X_XIQueryPointer = 40;  
  X_XIWarpPointer = 41;  
  X_XIChangeCursor = 42;  
  X_XIChangeHierarchy = 43;  
  X_XISetClientPointer = 44;  
  X_XIGetClientPointer = 45;  
  X_XISelectEvents = 46;  
  X_XIQueryVersion = 47;  
  X_XIQueryDevice = 48;  
  X_XISetFocus = 49;  
  X_XIGetFocus = 50;  
  X_XIGrabDevice = 51;  
  X_XIUngrabDevice = 52;  
  X_XIAllowEvents = 53;  
  X_XIPassiveGrabDevice = 54;  
  X_XIPassiveUngrabDevice = 55;  
  X_XIListProperties = 56;  
  X_XIChangeProperty = 57;  
  X_XIDeleteProperty = 58;  
  X_XIGetProperty = 59;  
  X_XIGetSelectedEvents = 60;  
  X_XIBarrierReleasePointer = 61;  

  XI2REQUESTS = (X_XIBarrierReleasePointer-X_XIQueryPointer)+1;  

  XI2EVENTS = XI_LASTEVENT+1;  


type
  TFP1616 = Tint32_t;


  TFP3232 = record
      integral : Tint32_t;
      frac : Tuint32_t;
    end;







  TxXIDeviceInfo = record
      deviceid : Tuint16_t;
      use : Tuint16_t;
      attachment : Tuint16_t;
      num_classes : Tuint16_t;
      name_len : Tuint16_t;
      enabled : Tuint8_t;
      pad : Tuint8_t;
    end;





  TxXIAnyInfo = record
      _type : Tuint16_t;
      length : Tuint16_t;
      sourceid : Tuint16_t;
      pad : Tuint16_t;
    end;






  TxXIButtonInfo = record
      _type : Tuint16_t;
      length : Tuint16_t;
      sourceid : Tuint16_t;
      num_buttons : Tuint16_t;
    end;






  TxXIKeyInfo = record
      _type : Tuint16_t;
      length : Tuint16_t;
      sourceid : Tuint16_t;
      num_keycodes : Tuint16_t;
    end;












  TxXIValuatorInfo = record
      _type : Tuint16_t;
      length : Tuint16_t;
      sourceid : Tuint16_t;
      number : Tuint16_t;
      _label : TAtom;
      min : TFP3232;
      max : TFP3232;
      value : TFP3232;
      resolution : Tuint32_t;
      mode : Tuint8_t;
      pad1 : Tuint8_t;
      pad2 : Tuint16_t;
    end;









  TxXIScrollInfo = record
      _type : Tuint16_t;
      length : Tuint16_t;
      sourceid : Tuint16_t;
      number : Tuint16_t;
      scroll_type : Tuint16_t;
      pad0 : Tuint16_t;
      flags : Tuint32_t;
      increment : TFP3232;
    end;







  TxXITouchInfo = record
      _type : Tuint16_t;
      length : Tuint16_t;
      sourceid : Tuint16_t;
      mode : Tuint8_t;
      num_touches : Tuint8_t;
    end;






  TxXIGestureInfo = record
      _type : Tuint16_t;
      length : Tuint16_t;
      sourceid : Tuint16_t;
      num_touches : Tuint8_t;
      pad0 : Tuint8_t;
    end;




  TxXIEventMask = record
      deviceid : Tuint16_t;
      mask_len : Tuint16_t;
    end;






  TxXIModifierInfo = record
      base_mods : Tuint32_t;
      latched_mods : Tuint32_t;
      locked_mods : Tuint32_t;
      effective_mods : Tuint32_t;
    end;






  TxXIGroupInfo = record
      base_group : Tuint8_t;
      latched_group : Tuint8_t;
      locked_group : Tuint8_t;
      effective_group : Tuint8_t;
    end;






  TxXIQueryVersionReq = record
      reqType : Tuint8_t;
      ReqType : Tuint8_t;
      length : Tuint16_t;
      major_version : Tuint16_t;
      minor_version : Tuint16_t;
    end;

const
  sz_xXIQueryVersionReq = 8;  


type
  TxXIQueryVersionReply = record
      repType : Tuint8_t;
      RepType : Tuint8_t;
      sequenceNumber : Tuint16_t;
      length : Tuint32_t;
      major_version : Tuint16_t;
      minor_version : Tuint16_t;
      pad1 : Tuint32_t;
      pad2 : Tuint32_t;
      pad3 : Tuint32_t;
      pad4 : Tuint32_t;
      pad5 : Tuint32_t;
    end;

const
  sz_xXIQueryVersionReply = 32;  




type
  TxXIQueryDeviceReq = record
      reqType : Tuint8_t;
      ReqType : Tuint8_t;
      length : Tuint16_t;
      deviceid : Tuint16_t;
      pad : Tuint16_t;
    end;

const
  sz_xXIQueryDeviceReq = 8;  


type
  TxXIQueryDeviceReply = record
      repType : Tuint8_t;
      RepType : Tuint8_t;
      sequenceNumber : Tuint16_t;
      length : Tuint32_t;
      num_devices : Tuint16_t;
      pad0 : Tuint16_t;
      pad1 : Tuint32_t;
      pad2 : Tuint32_t;
      pad3 : Tuint32_t;
      pad4 : Tuint32_t;
      pad5 : Tuint32_t;
    end;

const
  sz_xXIQueryDeviceReply = 32;  




type
  TxXISelectEventsReq = record
      reqType : Tuint8_t;
      ReqType : Tuint8_t;
      length : Tuint16_t;
      win : TWindow;
      num_masks : Tuint16_t;
      pad : Tuint16_t;
    end;

const
  sz_xXISelectEventsReq = 12;  




type
  TxXIGetSelectedEventsReq = record
      reqType : Tuint8_t;
      ReqType : Tuint8_t;
      length : Tuint16_t;
      win : TWindow;
    end;

const
  sz_xXIGetSelectedEventsReq = 8;  



type
  TxXIGetSelectedEventsReply = record
      repType : Tuint8_t;
      RepType : Tuint8_t;
      sequenceNumber : Tuint16_t;
      length : Tuint32_t;
      num_masks : Tuint16_t;
      pad0 : Tuint16_t;
      pad1 : Tuint32_t;
      pad2 : Tuint32_t;
      pad3 : Tuint32_t;
      pad4 : Tuint32_t;
      pad5 : Tuint32_t;
    end;

const
  sz_xXIGetSelectedEventsReply = 32;  




type
  TxXIQueryPointerReq = record
      reqType : Tuint8_t;
      ReqType : Tuint8_t;
      length : Tuint16_t;
      win : TWindow;
      deviceid : Tuint16_t;
      pad1 : Tuint16_t;
    end;

const
  sz_xXIQueryPointerReq = 12;  


type
  TxXIQueryPointerReply = record
      repType : Tuint8_t;
      RepType : Tuint8_t;
      sequenceNumber : Tuint16_t;
      length : Tuint32_t;
      root : TWindow;
      child : TWindow;
      root_x : TFP1616;
      root_y : TFP1616;
      win_x : TFP1616;
      win_y : TFP1616;
      same_screen : Tuint8_t;
      pad0 : Tuint8_t;
      buttons_len : Tuint16_t;
      mods : TxXIModifierInfo;
      group : TxXIGroupInfo;
    end;

const
  sz_xXIQueryPointerReply = 56;  




type
  TxXIWarpPointerReq = record
      reqType : Tuint8_t;
      ReqType : Tuint8_t;
      length : Tuint16_t;
      src_win : TWindow;
      dst_win : TWindow;
      src_x : TFP1616;
      src_y : TFP1616;
      src_width : Tuint16_t;
      src_height : Tuint16_t;
      dst_x : TFP1616;
      dst_y : TFP1616;
      deviceid : Tuint16_t;
      pad1 : Tuint16_t;
    end;

const
  sz_xXIWarpPointerReq = 36;  




type
  TxXIChangeCursorReq = record
      reqType : Tuint8_t;
      ReqType : Tuint8_t;
      length : Tuint16_t;
      win : TWindow;
      cursor : TCursor;
      deviceid : Tuint16_t;
      pad1 : Tuint16_t;
    end;

const
  sz_xXIChangeCursorReq = 16;  




type
  TxXIChangeHierarchyReq = record
      reqType : Tuint8_t;
      ReqType : Tuint8_t;
      length : Tuint16_t;
      num_changes : Tuint8_t;
      pad0 : Tuint8_t;
      pad1 : Tuint16_t;
    end;

const
  sz_xXIChangeHierarchyReq = 8;  


type
  TxXIAnyHierarchyChangeInfo = record
      _type : Tuint16_t;
      length : Tuint16_t;
    end;




  TxXIAddMasterInfo = record
      _type : Tuint16_t;
      length : Tuint16_t;
      name_len : Tuint16_t;
      send_core : Tuint8_t;
      enable : Tuint8_t;
    end;







  TxXIRemoveMasterInfo = record
      _type : Tuint16_t;
      length : Tuint16_t;
      deviceid : Tuint16_t;
      return_mode : Tuint8_t;
      pad : Tuint8_t;
      return_pointer : Tuint16_t;
      return_keyboard : Tuint16_t;
    end;





  TxXIAttachSlaveInfo = record
      _type : Tuint16_t;
      length : Tuint16_t;
      deviceid : Tuint16_t;
      new_master : Tuint16_t;
    end;




  TxXIDetachSlaveInfo = record
      _type : Tuint16_t;
      length : Tuint16_t;
      deviceid : Tuint16_t;
      pad : Tuint16_t;
    end;




  TxXISetClientPointerReq = record
      reqType : Tuint8_t;
      ReqType : Tuint8_t;
      length : Tuint16_t;
      win : TWindow;
      deviceid : Tuint16_t;
      pad1 : Tuint16_t;
    end;

const
  sz_xXISetClientPointerReq = 12;  



type
  TxXIGetClientPointerReq = record
      reqType : Tuint8_t;
      ReqType : Tuint8_t;
      length : Tuint16_t;
      win : TWindow;
    end;

const
  sz_xXIGetClientPointerReq = 8;  



type
  TxXIGetClientPointerReply = record
      repType : Tuint8_t;
      RepType : Tuint8_t;
      sequenceNumber : Tuint16_t;
      length : Tuint32_t;
      set : TBOOL;
      pad0 : Tuint8_t;
      deviceid : Tuint16_t;
      pad1 : Tuint32_t;
      pad2 : Tuint32_t;
      pad3 : Tuint32_t;
      pad4 : Tuint32_t;
      pad5 : Tuint32_t;
    end;

const
  sz_xXIGetClientPointerReply = 32;  



type
  TxXISetFocusReq = record
      reqType : Tuint8_t;
      ReqType : Tuint8_t;
      length : Tuint16_t;
      focus : TWindow;
      time : TTime;
      deviceid : Tuint16_t;
      pad0 : Tuint16_t;
    end;

const
  sz_xXISetFocusReq = 16;  



type
  TxXIGetFocusReq = record
      reqType : Tuint8_t;
      ReqType : Tuint8_t;
      length : Tuint16_t;
      deviceid : Tuint16_t;
      pad0 : Tuint16_t;
    end;

const
  sz_xXIGetFocusReq = 8;  


type
  TxXIGetFocusReply = record
      repType : Tuint8_t;
      RepType : Tuint8_t;
      sequenceNumber : Tuint16_t;
      length : Tuint32_t;
      focus : TWindow;
      pad1 : Tuint32_t;
      pad2 : Tuint32_t;
      pad3 : Tuint32_t;
      pad4 : Tuint32_t;
      pad5 : Tuint32_t;
    end;

const
  sz_xXIGetFocusReply = 32;  



type
  TxXIGrabDeviceReq = record
      reqType : Tuint8_t;
      ReqType : Tuint8_t;
      length : Tuint16_t;
      grab_window : TWindow;
      time : TTime;
      cursor : TCursor;
      deviceid : Tuint16_t;
      grab_mode : Tuint8_t;
      paired_device_mode : Tuint8_t;
      owner_events : Tuint8_t;
      pad : Tuint8_t;
      mask_len : Tuint16_t;
    end;

const
  sz_xXIGrabDeviceReq = 24;  



type
  TxXIGrabModifierInfo = record
      modifiers : Tuint32_t;
      status : Tuint8_t;
      pad0 : Tuint8_t;
      pad1 : Tuint16_t;
    end;



  TxXIGrabDeviceReply = record
      repType : Tuint8_t;
      RepType : Tuint8_t;
      sequenceNumber : Tuint16_t;
      length : Tuint32_t;
      status : Tuint8_t;
      pad0 : Tuint8_t;
      pad1 : Tuint16_t;
      pad2 : Tuint32_t;
      pad3 : Tuint32_t;
      pad4 : Tuint32_t;
      pad5 : Tuint32_t;
      pad6 : Tuint32_t;
    end;

const
  sz_xXIGrabDeviceReply = 32;  



type
  TxXIUngrabDeviceReq = record
      reqType : Tuint8_t;
      ReqType : Tuint8_t;
      length : Tuint16_t;
      time : TTime;
      deviceid : Tuint16_t;
      pad : Tuint16_t;
    end;

const
  sz_xXIUngrabDeviceReq = 12;  



type
  TxXIAllowEventsReq = record
      reqType : Tuint8_t;
      ReqType : Tuint8_t;
      length : Tuint16_t;
      time : TTime;
      deviceid : Tuint16_t;
      mode : Tuint8_t;
      pad : Tuint8_t;
    end;

const
  sz_xXIAllowEventsReq = 12;  





type
  TxXI2_2AllowEventsReq = record
      reqType : Tuint8_t;
      ReqType : Tuint8_t;
      length : Tuint16_t;
      time : TTime;
      deviceid : Tuint16_t;
      mode : Tuint8_t;
      pad : Tuint8_t;
      touchid : Tuint32_t;
      grab_window : TWindow;
    end;

const
  sz_xXI2_2AllowEventsReq = 20;  



type
  TxXIPassiveGrabDeviceReq = record
      reqType : Tuint8_t;
      ReqType : Tuint8_t;
      length : Tuint16_t;
      time : TTime;
      grab_window : TWindow;
      cursor : TCursor;
      detail : Tuint32_t;
      deviceid : Tuint16_t;
      num_modifiers : Tuint16_t;
      mask_len : Tuint16_t;
      grab_type : Tuint8_t;
      grab_mode : Tuint8_t;
      paired_device_mode : Tuint8_t;
      owner_events : Tuint8_t;
      pad1 : Tuint16_t;
    end;

const
  sz_xXIPassiveGrabDeviceReq = 32;  


type
  TxXIPassiveGrabDeviceReply = record
      repType : Tuint8_t;
      RepType : Tuint8_t;
      sequenceNumber : Tuint16_t;
      length : Tuint32_t;
      num_modifiers : Tuint16_t;
      pad1 : Tuint16_t;
      pad2 : Tuint32_t;
      pad3 : Tuint32_t;
      pad4 : Tuint32_t;
      pad5 : Tuint32_t;
      pad6 : Tuint32_t;
    end;

const
  sz_xXIPassiveGrabDeviceReply = 32;  



type
  TxXIPassiveUngrabDeviceReq = record
      reqType : Tuint8_t;
      ReqType : Tuint8_t;
      length : Tuint16_t;
      grab_window : TWindow;
      detail : Tuint32_t;
      deviceid : Tuint16_t;
      num_modifiers : Tuint16_t;
      grab_type : Tuint8_t;
      pad0 : Tuint8_t;
      pad1 : Tuint16_t;
    end;

const
  sz_xXIPassiveUngrabDeviceReq = 20;  



type
  TxXIListPropertiesReq = record
      reqType : Tuint8_t;
      ReqType : Tuint8_t;
      length : Tuint16_t;
      deviceid : Tuint16_t;
      pad : Tuint16_t;
    end;

const
  sz_xXIListPropertiesReq = 8;  


type
  TxXIListPropertiesReply = record
      repType : Tuint8_t;
      RepType : Tuint8_t;
      sequenceNumber : Tuint16_t;
      length : Tuint32_t;
      num_properties : Tuint16_t;
      pad0 : Tuint16_t;
      pad1 : Tuint32_t;
      pad2 : Tuint32_t;
      pad3 : Tuint32_t;
      pad4 : Tuint32_t;
      pad5 : Tuint32_t;
    end;

const
  sz_xXIListPropertiesReply = 32;  



type
  TxXIChangePropertyReq = record
      reqType : Tuint8_t;
      ReqType : Tuint8_t;
      length : Tuint16_t;
      deviceid : Tuint16_t;
      mode : Tuint8_t;
      format : Tuint8_t;
      _property : TAtom;
      _type : TAtom;
      num_items : Tuint32_t;
    end;

const
  sz_xXIChangePropertyReq = 20;  



type
  TxXIDeletePropertyReq = record
      reqType : Tuint8_t;
      ReqType : Tuint8_t;
      length : Tuint16_t;
      deviceid : Tuint16_t;
      pad0 : Tuint16_t;
      _property : TAtom;
    end;

const
  sz_xXIDeletePropertyReq = 12;  



//// {$if defined(__cplusplus) || defined(c_plusplus)}
//// {$else}
//// {$endif}
type
  TxXIGetPropertyReq = record
      reqType : Tuint8_t;
      ReqType : Tuint8_t;
      length : Tuint16_t;
      deviceid : Tuint16_t;
      c_delete : Tuint8_t;
      delete : Tuint8_t;
      pad0 : Tuint8_t;
      _property : TAtom;
      _type : TAtom;
      offset : Tuint32_t;
      len : Tuint32_t;
    end;

const
  sz_xXIGetPropertyReq = 24;  


type
  TxXIGetPropertyReply = record
      repType : Tuint8_t;
      RepType : Tuint8_t;
      sequenceNumber : Tuint16_t;
      length : Tuint32_t;
      _type : TAtom;
      bytes_after : Tuint32_t;
      num_items : Tuint32_t;
      format : Tuint8_t;
      pad0 : Tuint8_t;
      pad1 : Tuint16_t;
      pad2 : Tuint32_t;
      pad3 : Tuint32_t;
    end;

const
  sz_xXIGetPropertyReply = 32;  
type
  TxXIBarrierReleasePointerInfo = record
      deviceid : Tuint16_t;
      pad : Tuint16_t;
      barrier : TBarrier;
      eventid : Tuint32_t;
    end;




  TxXIBarrierReleasePointerReq = record
      reqType : Tuint8_t;
      ReqType : Tuint8_t;
      length : Tuint16_t;
      num_barriers : Tuint32_t;
    end;

const
  sz_xXIBarrierReleasePointerReq = 8;  



type
  TxXIGenericDeviceEvent = record
      _type : Tuint8_t;
      extension : Tuint8_t;
      sequenceNumber : Tuint16_t;
      length : Tuint32_t;
      evtype : Tuint16_t;
      deviceid : Tuint16_t;
      time : TTime;
    end;






  TxXIHierarchyInfo = record
      deviceid : Tuint16_t;
      attachment : Tuint16_t;
      use : Tuint8_t;
      enabled : TBOOL;
      pad : Tuint16_t;
      flags : Tuint32_t;
    end;







  TxXIHierarchyEvent = record
      _type : Tuint8_t;
      extension : Tuint8_t;
      sequenceNumber : Tuint16_t;
      length : Tuint32_t;
      evtype : Tuint16_t;
      deviceid : Tuint16_t;
      time : TTime;
      flags : Tuint32_t;
      num_info : Tuint16_t;
      pad0 : Tuint16_t;
      pad1 : Tuint32_t;
      pad2 : Tuint32_t;
    end;










  TxXIDeviceChangedEvent = record
      _type : Tuint8_t;
      extension : Tuint8_t;
      sequenceNumber : Tuint16_t;
      length : Tuint32_t;
      evtype : Tuint16_t;
      deviceid : Tuint16_t;
      time : TTime;
      num_classes : Tuint16_t;
      sourceid : Tuint16_t;
      reason : Tuint8_t;
      pad0 : Tuint8_t;
      pad1 : Tuint16_t;
      pad2 : Tuint32_t;
      pad3 : Tuint32_t;
    end;








  TxXITouchOwnershipEvent = record
      _type : Tuint8_t;
      extension : Tuint8_t;
      sequenceNumber : Tuint16_t;
      length : Tuint32_t;
      evtype : Tuint16_t;
      deviceid : Tuint16_t;
      time : TTime;
      touchid : Tuint32_t;
      root : TWindow;
      event : TWindow;
      child : TWindow;
      sourceid : Tuint16_t;
      pad0 : Tuint16_t;
      flags : Tuint32_t;
      pad1 : Tuint32_t;
      pad2 : Tuint32_t;
    end;













  TxXIDeviceEvent = record
      _type : Tuint8_t;
      extension : Tuint8_t;
      sequenceNumber : Tuint16_t;
      length : Tuint32_t;
      evtype : Tuint16_t;
      deviceid : Tuint16_t;
      time : TTime;
      detail : Tuint32_t;
      root : TWindow;
      event : TWindow;
      child : TWindow;
      root_x : TFP1616;
      root_y : TFP1616;
      event_x : TFP1616;
      event_y : TFP1616;
      buttons_len : Tuint16_t;
      valuators_len : Tuint16_t;
      sourceid : Tuint16_t;
      pad0 : Tuint16_t;
      flags : Tuint32_t;
      mods : TxXIModifierInfo;
      group : TxXIGroupInfo;
    end;









  TxXIRawEvent = record
      _type : Tuint8_t;
      extension : Tuint8_t;
      sequenceNumber : Tuint16_t;
      length : Tuint32_t;
      evtype : Tuint16_t;
      deviceid : Tuint16_t;
      time : TTime;
      detail : Tuint32_t;
      sourceid : Tuint16_t;
      valuators_len : Tuint16_t;
      flags : Tuint32_t;
      pad2 : Tuint32_t;
    end;








  TxXIEnterEvent = record
      _type : Tuint8_t;
      extension : Tuint8_t;
      sequenceNumber : Tuint16_t;
      length : Tuint32_t;
      evtype : Tuint16_t;
      deviceid : Tuint16_t;
      time : TTime;
      sourceid : Tuint16_t;
      mode : Tuint8_t;
      detail : Tuint8_t;
      root : TWindow;
      event : TWindow;
      child : TWindow;
      root_x : TFP1616;
      root_y : TFP1616;
      event_x : TFP1616;
      event_y : TFP1616;
      same_screen : TBOOL;
      focus : TBOOL;
      buttons_len : Tuint16_t;
      mods : TxXIModifierInfo;
      group : TxXIGroupInfo;
    end;

  TxXILeaveEvent = TxXIEnterEvent;

  TxXIFocusInEvent = TxXIEnterEvent;

  TxXIFocusOutEvent = TxXIEnterEvent;







  TxXIPropertyEvent = record
      _type : Tuint8_t;
      extension : Tuint8_t;
      sequenceNumber : Tuint16_t;
      length : Tuint32_t;
      evtype : Tuint16_t;
      deviceid : Tuint16_t;
      time : TTime;
      _property : TAtom;
      what : Tuint8_t;
      pad0 : Tuint8_t;
      pad1 : Tuint16_t;
      pad2 : Tuint32_t;
      pad3 : Tuint32_t;
    end;







  TxXIBarrierEvent = record
      _type : Tuint8_t;
      extension : Tuint8_t;
      sequenceNumber : Tuint16_t;
      length : Tuint32_t;
      evtype : Tuint16_t;
      deviceid : Tuint16_t;
      time : TTime;
      eventid : Tuint32_t;
      root : TWindow;
      event : TWindow;
      barrier : TBarrier;
      dtime : Tuint32_t;
      flags : Tuint32_t;
      sourceid : Tuint16_t;
      pad : Tint16_t;
      root_x : TFP1616;
      root_y : TFP1616;
      dx : TFP3232;
      dy : TFP3232;
    end;

  TxXIBarrierHitEvent = TxXIBarrierEvent;

  TxXIBarrierPointerReleasedEvent = TxXIBarrierEvent;

  TxXIBarrierLeaveEvent = TxXIBarrierEvent;











  TxXIGesturePinchEvent = record
      _type : Tuint8_t;
      extension : Tuint8_t;
      sequenceNumber : Tuint16_t;
      length : Tuint32_t;
      evtype : Tuint16_t;
      deviceid : Tuint16_t;
      time : TTime;
      detail : Tuint32_t;
      root : TWindow;
      event : TWindow;
      child : TWindow;
      root_x : TFP1616;
      root_y : TFP1616;
      event_x : TFP1616;
      event_y : TFP1616;
      delta_x : TFP1616;
      delta_y : TFP1616;
      delta_unaccel_x : TFP1616;
      delta_unaccel_y : TFP1616;
      scale : TFP1616;
      delta_angle : TFP1616;
      sourceid : Tuint16_t;
      pad0 : Tuint16_t;
      mods : TxXIModifierInfo;
      group : TxXIGroupInfo;
      flags : Tuint32_t;
    end;











  TxXIGestureSwipeEvent = record
      _type : Tuint8_t;
      extension : Tuint8_t;
      sequenceNumber : Tuint16_t;
      length : Tuint32_t;
      evtype : Tuint16_t;
      deviceid : Tuint16_t;
      time : TTime;
      detail : Tuint32_t;
      root : TWindow;
      event : TWindow;
      child : TWindow;
      root_x : TFP1616;
      root_y : TFP1616;
      event_x : TFP1616;
      event_y : TFP1616;
      delta_x : TFP1616;
      delta_y : TFP1616;
      delta_unaccel_x : TFP1616;
      delta_unaccel_y : TFP1616;
      sourceid : Tuint16_t;
      pad0 : Tuint16_t;
      mods : TxXIModifierInfo;
      group : TxXIGroupInfo;
      flags : Tuint32_t;
    end;
//// {$undef Window}
//// {$undef Time}
//// {$undef Atom}
//// {$undef Cursor}
//// {$undef Barrier}
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/saverproto.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/saverproto.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/saverproto.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _SAVERPROTO_H_}
//// {$define _SAVERPROTO_H_}
//// {$include <X11/extensions/saver.h>}

const
  Window = CARD32;  
  Drawable = CARD32;  
  Font = CARD32;  
  Pixmap = CARD32;  
  Cursor = CARD32;  
  Colormap = CARD32;  
  GContext = CARD32;  
  Atom = CARD32;  
  VisualID = CARD32;  
  Time = CARD32;  
  KeyCode = CARD8;  
  KeySym = CARD32;  
  X_ScreenSaverQueryVersion = 0;  


type
  T_ScreenSaverQueryVersion = record
      reqType : TCARD8;
      saverReqType : TCARD8;
      length : TCARD16;
      clientMajor : TCARD8;
      clientMinor : TCARD8;
      unused : TCARD16;
    end;
  TxScreenSaverQueryVersionReq = T_ScreenSaverQueryVersion;

const
  sz_xScreenSaverQueryVersionReq = 8;  




type
  TxScreenSaverQueryVersionReply = record
      _type : TCARD8;
      unused : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      majorVersion : TCARD16;
      minorVersion : TCARD16;
      pad0 : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
    end;

const
  sz_xScreenSaverQueryVersionReply = 32;  
  X_ScreenSaverQueryInfo = 1;  


type
  T_ScreenSaverQueryInfo = record
      reqType : TCARD8;
      saverReqType : TCARD8;
      length : TCARD16;
      drawable : TDrawable;
    end;
  TxScreenSaverQueryInfoReq = T_ScreenSaverQueryInfo;

const
  sz_xScreenSaverQueryInfoReq = 8;  



type
  TxScreenSaverQueryInfoReply = record
      _type : TCARD8;
      state : TBYTE;
      sequenceNumber : TCARD16;
      length : TCARD32;
      window : TWindow;
      tilOrSince : TCARD32;
      idle : TCARD32;
      eventMask : TCARD32;
      kind : TBYTE;
      pad0 : TCARD8;
      pad1 : TCARD16;
      pad2 : TCARD32;
    end;

const
  sz_xScreenSaverQueryInfoReply = 32;  
  X_ScreenSaverSelectInput = 2;  


type
  T_ScreenSaverSelectInput = record
      reqType : TCARD8;
      saverReqType : TCARD8;
      length : TCARD16;
      drawable : TDrawable;
      eventMask : TCARD32;
    end;
  TxScreenSaverSelectInputReq = T_ScreenSaverSelectInput;

const
  sz_xScreenSaverSelectInputReq = 12;  
  X_ScreenSaverSetAttributes = 3;  


type
  T_ScreenSaverSetAttributes = record
      reqType : TCARD8;
      saverReqType : TCARD8;
      length : TCARD16;
      drawable : TDrawable;
      x : TINT16;
      y : TINT16;
      width : TCARD16;
      height : TCARD16;
      borderWidth : TCARD16;
      c_class : TBYTE;
      depth : TCARD8;
      visualID : TVisualID;
      mask : TCARD32;
    end;
  TxScreenSaverSetAttributesReq = T_ScreenSaverSetAttributes;

const
  sz_xScreenSaverSetAttributesReq = 28;  
  X_ScreenSaverUnsetAttributes = 4;  


type
  T_ScreenSaverUnsetAttributes = record
      reqType : TCARD8;
      saverReqType : TCARD8;
      length : TCARD16;
      drawable : TDrawable;
    end;
  TxScreenSaverUnsetAttributesReq = T_ScreenSaverUnsetAttributes;

const
  sz_xScreenSaverUnsetAttributesReq = 8;  
  X_ScreenSaverSuspend = 5;  

type
  T_ScreenSaverSuspend = record
      reqType : TCARD8;
      saverReqType : TCARD8;
      length : TCARD16;
      suspend : TCARD32;
    end;
  TxScreenSaverSuspendReq = T_ScreenSaverSuspend;

const
  sz_xScreenSaverSuspendReq = 8;  




type
  T_ScreenSaverNotify = record
      _type : TCARD8;
      state : TBYTE;
      sequenceNumber : TCARD16;
      timestamp : TTime;
      root : TWindow;
      window : TWindow;
      kind : TBYTE;
      forced : TBYTE;
      pad0 : TCARD16;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
    end;
  TxScreenSaverNotifyEvent = T_ScreenSaverNotify;

const
  sz_xScreenSaverNotifyEvent = 32;  
//// {$undef Window}
//// {$undef Drawable}
//// {$undef Font}
//// {$undef Pixmap}
//// {$undef Cursor}
//// {$undef Colormap}
//// {$undef GContext}
//// {$undef Atom}
//// {$undef VisualID}
//// {$undef Time}
//// {$undef KeyCode}
//// {$undef KeySym}
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/dmx.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/dmx.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/dmx.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}





//// {$ifndef _DMX_H_}
//// {$define _DMX_H_}


const
  DmxBadXinerama = 1001;  
  DmxBadValue = 1002;  
  DmxBadReply = 1003;  
  DMXScreenWindowWidth = 1 shl 0;  
  DMXScreenWindowHeight = 1 shl 1;  
  DMXScreenWindowXoffset = 1 shl 2;  
  DMXScreenWindowYoffset = 1 shl 3;  
  DMXRootWindowWidth = 1 shl 4;  
  DMXRootWindowHeight = 1 shl 5;  
  DMXRootWindowXoffset = 1 shl 6;  
  DMXRootWindowYoffset = 1 shl 7;  
  DMXRootWindowXorigin = 1 shl 8;  
  DMXRootWindowYorigin = 1 shl 9;  
  DMXDesktopWidth = 1 shl 0;  
  DMXDesktopHeight = 1 shl 1;  
  DMXDesktopShiftX = 1 shl 2;  
  DMXDesktopShiftY = 1 shl 3;  
  DMXInputType = 1 shl 0;  
  DMXInputPhysicalScreen = 1 shl 1;  
  DMXInputSendsCore = 1 shl 2;  
//// {$endif}

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/Xdbe.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/Xdbe.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/Xdbe.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    PDisplay  = ^Display;
    PDrawable  = ^Drawable;
    Plongint  = ^longint;
    PXdbeScreenVisualInfo  = ^XdbeScreenVisualInfo;
    PXdbeSwapInfo  = ^XdbeSwapInfo;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef XDBE_H}
//// {$define XDBE_H}
//// {$include <X11/Xfuncproto.h>}
//// {$include <X11/extensions/dbe.h>}



type
  TXdbeVisualInfo = record
      visual : TVisualID;
      depth : longint;
      perflevel : longint;
    end;



  TXdbeScreenVisualInfo = record
      count : longint;
      visinfo : ^TXdbeVisualInfo;
    end;

  TXdbeBackBuffer = TDrawable;

  TXdbeSwapAction = byte;



  TXdbeSwapInfo = record
      swap_window : TWindow;
      swap_action : TXdbeSwapAction;
    end;


  TXdbeBackBufferAttributes = record
      window : TWindow;
    end;







  TXdbeBufferError = record
      _type : longint;
      display : ^TDisplay;
      buffer : TXdbeBackBuffer;
      serial : dword;
      error_code : byte;
      request_code : byte;
      minor_code : byte;
    end;

//// (* error 
//// extern Status XdbeQueryExtension(

in declaration at line 93 *)


function XdbeAllocateBackBufferName(_para1:PTDisplay; _para2:TWindow; _para3:TXdbeSwapAction):TXdbeBackBuffer;cdecl;external;

function XdbeDeallocateBackBufferName(_para1:PTDisplay; _para2:TXdbeBackBuffer):TStatus;cdecl;external;

function XdbeSwapBuffers(_para1:PTDisplay; _para2:PTXdbeSwapInfo; _para3:longint):TStatus;cdecl;external;

function XdbeBeginIdiom(_para1:PTDisplay):TStatus;cdecl;external;

function XdbeEndIdiom(_para1:PTDisplay):TStatus;cdecl;external;

function XdbeGetVisualInfo(_para1:PTDisplay; _para2:PTDrawable; _para3:Plongint):^TXdbeScreenVisualInfo;cdecl;external;

procedure XdbeFreeVisualInfo(_para1:PTXdbeScreenVisualInfo);cdecl;external;

function XdbeGetBackBufferAttributes(_para1:PTDisplay; _para2:TXdbeBackBuffer):^TXdbeBackBufferAttributes;cdecl;external;
//// {$endif}

//// (* error 
//// 

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/Xv.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/Xv.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/Xv.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef XV_H}
//// {$define XV_H}

//// {$include <X11/X.h>}

const
  XvName = 'XVideo';  
  XvVersion = 2;  
  XvRevision = 2;  

type
  TXvPortID = TXID;

  TXvEncodingID = TXID;

const
  XvNone = 0;  
  XvInput = 0;  
  XvOutput = 1;  
  XvInputMask = 1 shl XvInput;  
  XvOutputMask = 1 shl XvOutput;  
  XvVideoMask = $00000004;  
  XvStillMask = $00000008;  
  XvImageMask = $00000010;  

  XvPixmapMask = $00010000;  
  XvWindowMask = $00020000;  
  XvGettable = $01;  
  XvSettable = $02;  
  XvRGB = 0;  
  XvYUV = 1;  
  XvPacked = 0;  
  XvPlanar = 1;  
  XvTopToBottom = 0;  
  XvBottomToTop = 1;  

  XvVideoNotify = 0;  
  XvPortNotify = 1;  
  XvNumEvents = 2;  

  XvStarted = 0;  
  XvStopped = 1;  
  XvBusy = 2;  
  XvPreempted = 3;  
  XvHardError = 4;  
  XvLastReason = 4;  
  XvNumReasons = XvLastReason+1;  
  XvStartedMask = 1 shl XvStarted;  
  XvStoppedMask = 1 shl XvStopped;  
  XvBusyMask = 1 shl XvBusy;  
  XvPreemptedMask = 1 shl XvPreempted;  
  XvHardErrorMask = 1 shl XvHardError;  
  XvAnyReasonMask = (1 shl XvNumReasons)-1;  
  XvNoReasonMask = 0;  

  XvBadPort = 0;  
  XvBadEncoding = 1;  
  XvBadControl = 2;  
  XvNumErrors = 3;  

  XvBadExtension = 1;  
  XvAlreadyGrabbed = 2;  
  XvInvalidTime = 3;  
  XvBadReply = 4;  
  XvBadAlloc = 5;  
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/lbxproto.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/lbxproto.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/lbxproto.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _LBXPROTO_H_}
//// {$define _LBXPROTO_H_}
//// {$include <X11/extensions/lbx.h>}


const
  X_LbxQueryVersion = 0;  
  X_LbxStartProxy = 1;  
  X_LbxStopProxy = 2;  
  X_LbxSwitch = 3;  
  X_LbxNewClient = 4;  
  X_LbxCloseClient = 5;  
  X_LbxModifySequence = 6;  
  X_LbxAllowMotion = 7;  
  X_LbxIncrementPixel = 8;  
  X_LbxDelta = 9;  
  X_LbxGetModifierMapping = 10;  
  X_LbxInvalidateTag = 12;  
  X_LbxPolyPoint = 13;  
  X_LbxPolyLine = 14;  
  X_LbxPolySegment = 15;  
  X_LbxPolyRectangle = 16;  
  X_LbxPolyArc = 17;  
  X_LbxFillPoly = 18;  
  X_LbxPolyFillRectangle = 19;  
  X_LbxPolyFillArc = 20;  
  X_LbxGetKeyboardMapping = 21;  
  X_LbxQueryFont = 22;  
  X_LbxChangeProperty = 23;  
  X_LbxGetProperty = 24;  
  X_LbxTagData = 25;  
  X_LbxCopyArea = 26;  
  X_LbxCopyPlane = 27;  
  X_LbxPolyText8 = 28;  
  X_LbxPolyText16 = 29;  
  X_LbxImageText8 = 30;  
  X_LbxImageText16 = 31;  
  X_LbxQueryExtension = 32;  
  X_LbxPutImage = 33;  
  X_LbxGetImage = 34;  
  X_LbxBeginLargeRequest = 35;  
  X_LbxLargeRequestData = 36;  
  X_LbxEndLargeRequest = 37;  
  X_LbxInternAtoms = 38;  
  X_LbxGetWinAttrAndGeom = 39;  
  X_LbxGrabCmap = 40;  
  X_LbxReleaseCmap = 41;  
  X_LbxAllocColor = 42;  
  X_LbxSync = 43;  

  XID = CARD32;  
  Atom = CARD32;  
  Colormap = CARD32;  
  Drawable = CARD32;  
  VisualID = CARD32;  
  Window = CARD32;  


type
  TxLbxConnSetupPrefix = record
      success : TBOOL;
      changeType : TBOOL;
      majorVersion : TCARD16;
      minorVersion : TCARD16;
      length : TCARD16;
      tag : TCARD32;
    end;



  T_LbxQueryVersion = record
      reqType : TCARD8;
      lbxReqType : TCARD8;
      length : TCARD16;
    end;
  TxLbxQueryVersionReq = T_LbxQueryVersion;

const
  sz_xLbxQueryVersionReq = 4;  



type
  TxLbxQueryVersionReply = record
      _type : TBYTE;
      unused : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      majorVersion : TCARD16;
      minorVersion : TCARD16;
      pad0 : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
    end;

const
  sz_xLbxQueryVersionReply = 32;  


type
  T_LbxStartProxy = record
      reqType : TCARD8;
      lbxReqType : TCARD8;
      length : TCARD16;
    end;
  TxLbxStartProxyReq = T_LbxStartProxy;

const
  sz_xLbxStartProxyReq = 4;  


type
  T_LbxStopProxy = record
      reqType : TCARD8;
      lbxReqType : TCARD8;
      length : TCARD16;
    end;
  TxLbxStopProxyReq = T_LbxStopProxy;

const
  sz_xLbxStopProxyReq = 4;  



type
  T_LbxSwitch = record
      reqType : TCARD8;
      lbxReqType : TCARD8;
      length : TCARD16;
      client : TCARD32;
    end;
  TxLbxSwitchReq = T_LbxSwitch;

const
  sz_xLbxSwitchReq = 8;  



type
  T_LbxNewClient = record
      reqType : TCARD8;
      lbxReqType : TCARD8;
      length : TCARD16;
      client : TCARD32;
    end;
  TxLbxNewClientReq = T_LbxNewClient;

const
  sz_xLbxNewClientReq = 8;  



type
  T_LbxCloseClient = record
      reqType : TCARD8;
      lbxReqType : TCARD8;
      length : TCARD16;
      client : TCARD32;
    end;
  TxLbxCloseClientReq = T_LbxCloseClient;

const
  sz_xLbxCloseClientReq = 8;  


type
  T_LbxModifySequence = record
      reqType : TCARD8;
      lbxReqType : TCARD8;
      length : TCARD16;
      adjust : TCARD32;
    end;
  TxLbxModifySequenceReq = T_LbxModifySequence;

const
  sz_xLbxModifySequenceReq = 8;  


type
  T_LbxAllowMotion = record
      reqType : TCARD8;
      lbxReqType : TCARD8;
      length : TCARD16;
      num : TCARD32;
    end;
  TxLbxAllowMotionReq = T_LbxAllowMotion;

const
  sz_xLbxAllowMotionReq = 8;  


type
  TxLbxGrabCmapReq = record
      reqType : TCARD8;
      lbxReqType : TCARD8;
      length : TCARD16;
      cmap : TColormap;
    end;

const
  sz_xLbxGrabCmapReq = 8;  
  LBX_SMART_GRAB = $80;  
  LBX_AUTO_RELEASE = $40;  
  LBX_3CHANNELS = $20;  
  LBX_2BYTE_PIXELS = $10;  
  LBX_RGB_BITS_MASK = $0f;  
  LBX_LIST_END = 0;  
  LBX_PIXEL_PRIVATE = 1;  
  LBX_PIXEL_SHARED = 2;  
  LBX_PIXEL_RANGE_PRIVATE = 3;  
  LBX_PIXEL_RANGE_SHARED = 4;  
  LBX_NEXT_CHANNEL = 5;  

type
  TxLbxGrabCmapReply = record
      _type : TBYTE;
      flags : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      pad0 : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_xLbxGrabCmapReply = 32;  
  sz_xLbxGrabCmapReplyHdr = 8;  


type
  TxLbxReleaseCmapReq = record
      reqType : TCARD8;
      lbxReqType : TCARD8;
      length : TCARD16;
      cmap : TColormap;
    end;

const
  sz_xLbxReleaseCmapReq = 8;  


type
  TxLbxAllocColorReq = record
      reqType : TCARD8;
      lbxReqType : TCARD8;
      length : TCARD16;
      cmap : TColormap;
      pixel : TCARD32;
      red : TCARD16;
      green : TCARD16;
      blue : TCARD16;
      pad : TCARD16;
    end;

const
  sz_xLbxAllocColorReq = 20;  


type
  T_LbxIncrementPixel = record
      reqType : TCARD8;
      lbxReqType : TCARD8;
      length : TCARD16;
      cmap : TCARD32;
      pixel : TCARD32;
    end;
  TxLbxIncrementPixelReq = T_LbxIncrementPixel;

const
  sz_xLbxIncrementPixelReq = 12;  





type
  T_LbxDelta = record
      reqType : TCARD8;
      lbxReqType : TCARD8;
      length : TCARD16;
      diffs : TCARD8;
      cindex : TCARD8;
    end;
  TxLbxDeltaReq = T_LbxDelta;

const
  sz_xLbxDeltaReq = 6;  


type
  T_LbxGetModifierMapping = record
      reqType : TCARD8;
      lbxReqType : TCARD8;
      length : TCARD16;
    end;
  TxLbxGetModifierMappingReq = T_LbxGetModifierMapping;

const
  sz_xLbxGetModifierMappingReq = 4;  

type
  TxLbxGetModifierMappingReply = record
      _type : TBYTE;
      keyspermod : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      tag : TCARD32;
      pad0 : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
    end;

const
  sz_xLbxGetModifierMappingReply = 32;  


type
  T_LbxGetKeyboardMapping = record
      reqType : TCARD8;
      lbxReqType : TCARD8;
      length : TCARD16;
      firstKeyCode : TKeyCode;
      count : TCARD8;
      pad1 : TCARD16;
    end;
  TxLbxGetKeyboardMappingReq = T_LbxGetKeyboardMapping;

const
  sz_xLbxGetKeyboardMappingReq = 8;  

type
  TxLbxGetKeyboardMappingReply = record
      _type : TBYTE;
      keysperkeycode : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      tag : TCARD32;
      pad0 : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
    end;

const
  sz_xLbxGetKeyboardMappingReply = 32;  


type
  T_LbxQueryFont = record
      reqType : TCARD8;
      lbxReqType : TCARD8;
      length : TCARD16;
      fid : TCARD32;
    end;
  TxLbxQueryFontReq = T_LbxQueryFont;

const
  sz_xLbxQueryFontReq = 8;  


type
  T_LbxInternAtoms = record
      reqType : TCARD8;
      lbxReqType : TCARD8;
      length : TCARD16;
      num : TCARD16;
    end;
  TxLbxInternAtomsReq = T_LbxInternAtoms;

const
  sz_xLbxInternAtomsReq = 6;  

type
  TxLbxInternAtomsReply = record
      _type : TBYTE;
      unused : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      atomsStart : TCARD32;
      pad0 : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
    end;

const
  sz_xLbxInternAtomsReply = 32;  
  sz_xLbxInternAtomsReplyHdr = 8;  



type
  T_LbxGetWinAttrAndGeom = record
      reqType : TCARD8;
      lbxReqType : TCARD8;
      length : TCARD16;
      id : TCARD32;
    end;
  TxLbxGetWinAttrAndGeomReq = T_LbxGetWinAttrAndGeom;

const
  sz_xLbxGetWinAttrAndGeomReq = 8;  


//// {$if defined(__cplusplus) || defined(c_plusplus)}
//// {$else}
//// {$endif}
type
  TxLbxGetWinAttrAndGeomReply = record
      _type : TBYTE;
      backingStore : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      visualID : TVisualID;
      c_class : TCARD16;
      _class : TCARD16;
      bitGravity : TCARD8;
      winGravity : TCARD8;
      backingBitPlanes : TCARD32;
      backingPixel : TCARD32;
      saveUnder : TBOOL;
      mapInstalled : TBOOL;
      mapState : TCARD8;
      override : TBOOL;
      colormap : TColormap;
      allEventMasks : TCARD32;
      yourEventMask : TCARD32;
      doNotPropagateMask : TCARD16;
      pad1 : TCARD16;
      root : TWindow;
      x : TINT16;
      y : TINT16;
      width : TCARD16;
      height : TCARD16;
      borderWidth : TCARD16;
      depth : TCARD8;
      pad2 : TCARD8;
    end;

const
  sz_xLbxGetWinAttrAndGeomReply = 60;  


type
  TxLbxSyncReq = record
      reqType : TCARD8;
      lbxReqType : TCARD8;
      length : TCARD16;
    end;

const
  sz_xLbxSyncReq = 4;  

type
  TxLbxSyncReply = record
      _type : TBYTE;
      pad0 : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;

const
  sz_xLbxSyncReply = 32;  

  LBX_WIDTH_SHIFT = 26;  
  LBX_LEFT_SHIFT = 20;  
  LBX_RIGHT_SHIFT = 13;  
  LBX_ASCENT_SHIFT = 7;  
  LBX_DESCENT_SHIFT = 0;  
  LBX_WIDTH_BITS = 6;  
  LBX_LEFT_BITS = 6;  
  LBX_RIGHT_BITS = 7;  
  LBX_ASCENT_BITS = 6;  
  LBX_DESCENT_BITS = 7;  
  LBX_WIDTH_MASK = $fc000000;  
  LBX_LEFT_MASK = $03f00000;  
  LBX_RIGHT_MASK = $000fe000;  
  LBX_ASCENT_MASK = $00001f80;  
  LBX_DESCENT_MASK = $0000007f;  

function LBX_MASK_BITS(val,n : longint) : dword;

type
  TxLbxCharInfo = record
      metrics : TCARD32;
    end;


//// {$ifndef WORD64}
//// {$endif}
//// {$ifndef WORD64}
//// {$endif}


type
  TxLbxFontInfo = record
      minBounds : TxCharInfo;
      walign1 : TCARD32;
      maxBounds : TxCharInfo;
      walign2 : TCARD32;
      minCharOrByte2 : TCARD16;
      maxCharOrByte2 : TCARD16;
      defaultChar : TCARD16;
      nFontProps : TCARD16;
      drawDirection : TCARD8;
      minByte1 : TCARD8;
      maxByte1 : TCARD8;
      allCharsExist : TBOOL;
      fontAscent : TINT16;
      fontDescent : TINT16;
      nCharInfos : TCARD32;
    end;



  TxLbxQueryFontReply = record
      _type : TBYTE;
      compression : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      tag : TCARD32;
      pad0 : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
    end;

const
  sz_xLbxQueryFontReply = 32;  


type
  T_LbxChangeProperty = record
      reqType : TCARD8;
      lbxReqType : TCARD8;
      length : TCARD16;
      window : TWindow;
      _property : TAtom;
      _type : TAtom;
      format : TCARD8;
      mode : TCARD8;
      pad : array[0..1] of TBYTE;
      nUnits : TCARD32;
    end;
  TxLbxChangePropertyReq = T_LbxChangeProperty;

const
  sz_xLbxChangePropertyReq = 24;  

type
  TxLbxChangePropertyReply = record
      _type : TBYTE;
      pad : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      tag : TCARD32;
      pad0 : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
    end;

const
  sz_xLbxChangePropertyReply = 32;  


type
  T_LbxGetProperty = record
      reqType : TCARD8;
      lbxReqType : TCARD8;
      length : TCARD16;
      window : TWindow;
      _property : TAtom;
      _type : TAtom;
      delete : TCARD8;
      pad : array[0..2] of TBYTE;
      longOffset : TCARD32;
      longLength : TCARD32;
    end;
  TxLbxGetPropertyReq = T_LbxGetProperty;

const
  sz_xLbxGetPropertyReq = 28;  

type
  TxLbxGetPropertyReply = record
      _type : TBYTE;
      format : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      propertyType : TAtom;
      bytesAfter : TCARD32;
      nItems : TCARD32;
      tag : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
    end;

const
  sz_xLbxGetPropertyReply = 32;  



type
  T_LbxTagData = record
      reqType : TCARD8;
      lbxReqType : TCARD8;
      length : TCARD16;
      tag : TXID;
      real_length : TCARD32;
    end;
  TxLbxTagDataReq = T_LbxTagData;

const
  sz_xLbxTagDataReq = 12;  


type
  T_LbxInvalidateTag = record
      reqType : TCARD8;
      lbxReqType : TCARD8;
      length : TCARD16;
      tag : TCARD32;
    end;
  TxLbxInvalidateTagReq = T_LbxInvalidateTag;

const
  sz_xLbxInvalidateTagReq = 8;  



type
  T_LbxPutImage = record
      reqType : TCARD8;
      lbxReqType : TCARD8;
      length : TCARD16;
      compressionMethod : TCARD8;
      cacheEnts : TCARD8;
      bitPacked : TCARD8;
    end;
  TxLbxPutImageReq = T_LbxPutImage;

const
  sz_xLbxPutImageReq = 7;  


type
  TxLbxGetImageReq = record
      reqType : TCARD8;
      lbxReqType : TCARD8;
      length : TCARD16;
      drawable : TDrawable;
      x : TINT16;
      y : TINT16;
      width : TCARD16;
      height : TCARD16;
      planeMask : TCARD32;
      format : TCARD8;
      pad1 : TCARD8;
      pad2 : TCARD16;
    end;

const
  sz_xLbxGetImageReq = 24;  

type
  TxLbxGetImageReply = record
      _type : TBYTE;
      depth : TCARD8;
      sequenceNumber : TCARD16;
      lbxLength : TCARD32;
      xLength : TCARD32;
      visual : TVisualID;
      compressionMethod : TCARD8;
      pad1 : TCARD8;
      pad2 : TCARD16;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_xLbxGetImageReply = 32;  

  GFX_CACHE_SIZE = 15;  

function GFXdCacheEnt(e : longint) : Te;

function GFXgCacheEnt(e : longint) : longint;

function GFXCacheEnts(d,g : longint) : longint;

const
  GFXCacheNone = $f;  

type
  T_LbxPolyPoint = record
      reqType : TCARD8;
      lbxReqType : TCARD8;
      length : TCARD16;
      cacheEnts : TCARD8;
      padBytes : TCARD8;
    end;
  TxLbxPolyPointReq = T_LbxPolyPoint;

const
  sz_xLbxPolyPointReq = 6;  
type
  TxLbxPolyLineReq = TxLbxPolyPointReq;

  TxLbxPolySegmentReq = TxLbxPolyPointReq;

  TxLbxPolyRectangleReq = TxLbxPolyPointReq;

  TxLbxPolyArcReq = TxLbxPolyPointReq;

  TxLbxPolyFillRectangleReq = TxLbxPolyPointReq;

  TxLbxPolyFillArcReq = TxLbxPolyPointReq;

const
  sz_xLbxPolyLineReq = sz_xLbxPolyPointReq;  
  sz_xLbxPolySegmentReq = sz_xLbxPolyPointReq;  
  sz_xLbxPolyRectangleReq = sz_xLbxPolyPointReq;  
  sz_xLbxPolyArcReq = sz_xLbxPolyPointReq;  
  sz_xLbxPolyFillRectangleReq = sz_xLbxPolyPointReq;  
  sz_xLbxPolyFillArc = sz_xLbxPolyPointReq;  

type
  T_LbxFillPoly = record
      reqType : TCARD8;
      lbxReqType : TCARD8;
      length : TCARD16;
      cacheEnts : TCARD8;
      shape : TBYTE;
      padBytes : TCARD8;
    end;
  TxLbxFillPolyReq = T_LbxFillPoly;

const
  sz_xLbxFillPolyReq = 7;  




type
  T_LbxCopyArea = record
      reqType : TCARD8;
      lbxReqType : TCARD8;
      length : TCARD16;
      srcCache : TCARD8;
      cacheEnts : TCARD8;
    end;
  TxLbxCopyAreaReq = T_LbxCopyArea;

const
  sz_xLbxCopyAreaReq = 6;  




type
  T_LbxCopyPlane = record
      reqType : TCARD8;
      lbxReqType : TCARD8;
      length : TCARD16;
      bitPlane : TCARD32;
      srcCache : TCARD8;
      cacheEnts : TCARD8;
    end;
  TxLbxCopyPlaneReq = T_LbxCopyPlane;

const
  sz_xLbxCopyPlaneReq = 10;  


type
  T_LbxPolyText = record
      reqType : TCARD8;
      lbxReqType : TCARD8;
      length : TCARD16;
      cacheEnts : TCARD8;
    end;
  TxLbxPolyTextReq = T_LbxPolyText;

const
  sz_xLbxPolyTextReq = 5;  
type
  TxLbxPolyText8Req = TxLbxPolyTextReq;

  TxLbxPolyText16Req = TxLbxPolyTextReq;

const
  sz_xLbxPolyTextReq = 5;  
  sz_xLbxPolyText8Req = 5;  
  sz_xLbxPolyText16Req = 5;  


type
  T_LbxImageText = record
      reqType : TCARD8;
      lbxReqType : TCARD8;
      length : TCARD16;
      cacheEnts : TCARD8;
      nChars : TCARD8;
    end;
  TxLbxImageTextReq = T_LbxImageText;

  TxLbxImageText8Req = TxLbxImageTextReq;

  TxLbxImageText16Req = TxLbxImageTextReq;

const
  sz_xLbxImageTextReq = 6;  
  sz_xLbxImageText8Req = 6;  
  sz_xLbxImageText16Req = 6;  
type
  TxLbxDiffItem = record
      offset : TCARD8;
      diff : TCARD8;
    end;

const
  sz_xLbxDiffItem = 2;  

type
  TxLbxStartReply = record
      _type : TBYTE;
      nOpts : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      optDataStart : TCARD32;
      pad0 : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
    end;

const
  sz_xLbxStartReply = 32;  
  sz_xLbxStartReplyHdr = 8;  


type
  T_LbxQueryExtension = record
      reqType : TCARD8;
      lbxReqType : TCARD8;
      length : TCARD16;
      nbytes : TCARD32;
    end;
  TxLbxQueryExtensionReq = T_LbxQueryExtension;

const
  sz_xLbxQueryExtensionReq = 8;  


type
  T_LbxQueryExtensionReply = record
      _type : TBYTE;
      numReqs : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      present : TBOOL;
      major_opcode : TCARD8;
      first_event : TCARD8;
      first_error : TCARD8;
      pad0 : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
    end;
  TxLbxQueryExtensionReply = T_LbxQueryExtensionReply;

const
  sz_xLbxQueryExtensionReply = 32;  


type
  T_LbxBeginLargeRequest = record
      reqType : TCARD8;
      lbxReqType : TCARD8;
      length : TCARD16;
      largeReqLength : TCARD32;
    end;
  TxLbxBeginLargeRequestReq = T_LbxBeginLargeRequest;

const
  sz_BeginLargeRequestReq = 8;  



type
  T_LbxLargeRequestData = record
      reqType : TCARD8;
      lbxReqType : TCARD8;
      length : TCARD16;
    end;
  TxLbxLargeRequestDataReq = T_LbxLargeRequestData;

const
  sz_LargeRequestDataReq = 4;  


type
  T_LbxEndLargeRequest = record
      reqType : TCARD8;
      lbxReqType : TCARD8;
      length : TCARD16;
    end;
  TxLbxEndLargeRequestReq = T_LbxEndLargeRequest;

const
  sz_EndLargeRequestReq = 4;  


type
  T_LbxSwitchEvent = record
      _type : TBYTE;
      lbxType : TBYTE;
      pad : TCARD16;
      client : TCARD32;
    end;
  TxLbxSwitchEvent = T_LbxSwitchEvent;

const
  sz_xLbxSwitchEvent = 8;  


type
  T_LbxCloseEvent = record
      _type : TBYTE;
      lbxType : TBYTE;
      sequenceNumber : TCARD16;
      client : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;
  TxLbxCloseEvent = T_LbxCloseEvent;

const
  sz_xLbxCloseEvent = 32;  


type
  T_LbxInvalidateTagEvent = record
      _type : TBYTE;
      lbxType : TBYTE;
      sequenceNumber : TCARD16;
      tag : TCARD32;
      tagType : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;
  TxLbxInvalidateTagEvent = T_LbxInvalidateTagEvent;

const
  sz_xLbxInvalidateTagEvent = 32;  


type
  T_LbxSendTagDataEvent = record
      _type : TBYTE;
      lbxType : TBYTE;
      sequenceNumber : TCARD16;
      tag : TCARD32;
      tagType : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;
  TxLbxSendTagDataEvent = T_LbxSendTagDataEvent;

const
  sz_xLbxSendTagDataEvent = 32;  


type
  T_LbxListenToOneEvent = record
      _type : TBYTE;
      lbxType : TBYTE;
      sequenceNumber : TCARD16;
      client : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;
  TxLbxListenToOneEvent = T_LbxListenToOneEvent;

const
  sz_xLbxListenToOneEvent = 32;  


type
  T_LbxListenToAllEvent = record
      _type : TBYTE;
      lbxType : TBYTE;
      sequenceNumber : TCARD16;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
      pad7 : TCARD32;
    end;
  TxLbxListenToAllEvent = T_LbxListenToAllEvent;

const
  sz_xLbxListenToOneEvent = 32;  


type
  T_LbxReleaseCmapEvent = record
      _type : TBYTE;
      lbxType : TBYTE;
      sequenceNumber : TCARD16;
      colormap : TColormap;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;
  TxLbxReleaseCmapEvent = T_LbxReleaseCmapEvent;

const
  sz_xLbxReleaseCmapEvent = 32;  


type
  T_LbxFreeCellsEvent = record
      _type : TBYTE;
      lbxType : TBYTE;
      sequenceNumber : TCARD16;
      colormap : TColormap;
      pixelStart : TCARD32;
      pixelEnd : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
    end;
  TxLbxFreeCellsEvent = T_LbxFreeCellsEvent;

const
  sz_xLbxFreeCellsEvent = 32;  

  lbxsz_KeyButtonEvent = 32;  
  lbxupsz_KeyButtonEvent = 31;  
  lbxsz_EnterLeaveEvent = 32;  
  lbxupsz_EnterLeaveEvent = 32;  
  lbxsz_FocusEvent = 12;  
  lbxupsz_FocusEvent = 9;  
  lbxsz_KeymapEvent = 32;  
  lbxupsz_KeymapEvent = 32;  
  lbxsz_ExposeEvent = 20;  
  lbxupsz_ExposeEvent = 18;  
  lbxsz_GfxExposeEvent = 24;  
  lbxupsz_GfxExposeEvent = 21;  
  lbxsz_NoExposeEvent = 12;  
  lbxupsz_NoExposeEvent = 11;  
  lbxsz_VisibilityEvent = 12;  
  lbxupsz_VisibilityEvent = 9;  
  lbxsz_CreateNotifyEvent = 24;  
  lbxupsz_CreateNotifyEvent = 23;  
  lbxsz_DestroyNotifyEvent = 12;  
  lbxupsz_DestroyNotifyEvent = 12;  
  lbxsz_UnmapNotifyEvent = 16;  
  lbxupsz_UnmapNotifyEvent = 13;  
  lbxsz_MapNotifyEvent = 16;  
  lbxupsz_MapNotifyEvent = 13;  
  lbxsz_MapRequestEvent = 12;  
  lbxupsz_MapRequestEvent = 12;  
  lbxsz_ReparentEvent = 24;  
  lbxupsz_ReparentEvent = 21;  
  lbxsz_ConfigureNotifyEvent = 28;  
  lbxupsz_ConfigureNotifyEvent = 27;  
  lbxsz_ConfigureRequestEvent = 28;  
  lbxupsz_ConfigureRequestEvent = 28;  
  lbxsz_GravityEvent = 16;  
  lbxupsz_GravityEvent = 16;  
  lbxsz_ResizeRequestEvent = 12;  
  lbxupsz_ResizeRequestEvent = 12;  
  lbxsz_CirculateEvent = 20;  
  lbxupsz_CirculateEvent = 17;  
  lbxsz_PropertyEvent = 20;  
  lbxupsz_PropertyEvent = 17;  
  lbxsz_SelectionClearEvent = 16;  
  lbxupsz_SelectionClearEvent = 16;  
  lbxsz_SelectionRequestEvent = 28;  
  lbxupsz_SelectionRequestEvent = 28;  
  lbxsz_SelectionNotifyEvent = 24;  
  lbxupsz_SelectionNotifyEvent = 24;  
  lbxsz_ColormapEvent = 16;  
  lbxupsz_ColormapEvent = 14;  
  lbxsz_MappingNotifyEvent = 8;  
  lbxupsz_MappingNotifyEvent = 7;  
  lbxsz_ClientMessageEvent = 32;  
  lbxupsz_ClientMessageEvent = 32;  
  lbxsz_UnknownEvent = 32;  
//// {$ifdef DEBUG}
  DBG_SWITCH = $00000001;  
  DBG_CLOSE = $00000002;  
  DBG_IO = $00000004;  
  DBG_READ_REQ = $00000008;  
  DBG_LEN = $00000010;  
  DBG_BLOCK = $00000020;  
  DBG_CLIENT = $00000040;  
  DBG_DELTA = $00000080;  
//// {$endif}

//// {$undef XID}
//// {$undef Atom}
//// {$undef Colormap}
//// {$undef Drawable}
//// {$undef VisualID}
//// {$undef Window}
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/Xcup.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/Xcup.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/Xcup.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

Type
PDisplay  = ^Display;
Plongint  = ^longint;
PXColor  = ^XColor;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XCUP_H_}
//// {$define _XCUP_H_}
//// {$include <X11/Xfuncproto.h>}
//// {$include <X11/extensions/cup.h>}
//// (* error 
//// Bool XcupQueryVersion(
//// (* error 
////     int*			/* major_version */,
//// (* error 
////     int*			/* minor_version */

 in declarator_list *)
 in declarator_list *)
 in declarator_list *)


function XcupGetReservedColormapEntries(_para1:PTDisplay; _para2:longint; _para3:PPTXColor; _para4:Plongint):TStatus;cdecl;external;

function XcupStoreColors(_para1:PTDisplay; _para2:TColormap; _para3:PTXColor; _para4:longint):TStatus;cdecl;external;
//// {$endif}

//// (* error 
//// 

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/multibuf.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/multibuf.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/multibuf.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    PDisplay  = ^Display;
    Plongint  = ^longint;
    PMultibuffer  = ^Multibuffer;
    PVisual  = ^Visual;
    PXmbufBufferAttributes  = ^XmbufBufferAttributes;
    PXmbufBufferInfo  = ^XmbufBufferInfo;
    PXmbufSetBufferAttributes  = ^XmbufSetBufferAttributes;
    PXmbufSetWindowAttributes  = ^XmbufSetWindowAttributes;
    PXmbufWindowAttributes  = ^XmbufWindowAttributes;
    PXSetWindowAttributes  = ^XSetWindowAttributes;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _MULTIBUF_H_}
//// {$define _MULTIBUF_H_}
//// {$include <X11/Xfuncproto.h>}
//// {$include <X11/extensions/multibufconst.h>}
//// (* error 
//// #define MbufGetReq(name,req,info) GetReq (name, req); \
in declaration at line 33 *)
//// (* error 
//// #define MbufGetReq(name,req,info) GetReq (name, req); \
//// (* error 
//// 	req->reqType = info->codes->major_opcode; \
in declaration at line 34 *)
//// (* error 
//// 	req->reqType = info->codes->major_opcode; \
//// (* error 
//// 	req->mbufReqType = X_##name;
in declaration at line 35 *)

    type
      TMultibuffer = TXID;







      TXmbufClobberNotifyEvent = record
          _type : longint;
          serial : dword;
          send_event : longint;
          display : ^TDisplay;
          buffer : TMultibuffer;
          state : longint;
        end;






      TXmbufUpdateNotifyEvent = record
          _type : longint;
          serial : dword;
          send_event : longint;
          display : ^TDisplay;
          buffer : TMultibuffer;
        end;








      TXmbufWindowAttributes = record
          displayed_index : longint;
          update_action : longint;
          update_hint : longint;
          window_mode : longint;
          nbuffers : longint;
          buffers : ^TMultibuffer;
        end;



      TXmbufSetWindowAttributes = record
          update_hint : longint;
        end;






      TXmbufBufferAttributes = record
          window : TWindow;
          event_mask : dword;
          buffer_index : longint;
          side : longint;
        end;



      TXmbufSetBufferAttributes = record
          event_mask : dword;
        end;





      TXmbufBufferInfo = record
          visualid : TVisualID;
          max_buffers : longint;
          depth : longint;
        end;
//// (* error 
//// extern Bool XmbufQueryExtension(

in declaration at line 113 *)


function XmbufGetVersion(_para1:PTDisplay; _para2:Plongint; _para3:Plongint):TStatus;cdecl;external;

function XmbufCreateBuffers(_para1:PTDisplay; _para2:TWindow; _para3:longint; _para4:longint; _para5:longint; 
               _para6:PTMultibuffer):longint;cdecl;external;

procedure XmbufDestroyBuffers(_para1:PTDisplay; _para2:TWindow);cdecl;external;

procedure XmbufDisplayBuffers(_para1:PTDisplay; _para2:longint; _para3:PTMultibuffer; _para4:longint; _para5:longint);cdecl;external;

function XmbufGetWindowAttributes(_para1:PTDisplay; _para2:TWindow; _para3:PTXmbufWindowAttributes):TStatus;cdecl;external;

procedure XmbufChangeWindowAttributes(_para1:PTDisplay; _para2:TWindow; _para3:dword; _para4:PTXmbufSetWindowAttributes);cdecl;external;

function XmbufGetBufferAttributes(_para1:PTDisplay; _para2:TMultibuffer; _para3:PTXmbufBufferAttributes):TStatus;cdecl;external;

procedure XmbufChangeBufferAttributes(_para1:PTDisplay; _para2:TMultibuffer; _para3:dword; _para4:PTXmbufSetBufferAttributes);cdecl;external;

function XmbufGetScreenInfo(_para1:PTDisplay; _para2:TDrawable; _para3:Plongint; _para4:PPTXmbufBufferInfo; _para5:Plongint; 
               _para6:PPTXmbufBufferInfo):TStatus;cdecl;external;

function XmbufCreateStereoWindow(_para1:PTDisplay; _para2:TWindow; _para3:longint; _para4:longint; _para5:dword; 
               _para6:dword; _para7:dword; _para8:longint; _para9:dword; _para10:PTVisual; 
               _para11:dword; _para12:PTXSetWindowAttributes; _para13:PTMultibuffer; _para14:PTMultibuffer):TWindow;cdecl;external;

procedure XmbufClearBufferArea(_para1:PTDisplay; _para2:TMultibuffer; _para3:longint; _para4:longint; _para5:dword; 
                _para6:dword; _para7:TBool);cdecl;external;
//// {$endif}

//// (* error 
//// #endif /* _MULTIBUF_H_ */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/shm.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/shm.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/shm.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _SHM_H_}
//// {$define _SHM_H_}

const
  SHMNAME = 'MIT-SHM';  

  SHM_MAJOR_VERSION = 1;  
  SHM_MINOR_VERSION = 2;  
  ShmCompletion = 0;  
  ShmNumberEvents = ShmCompletion+1;  
  BadShmSeg = 0;  
  ShmNumberErrors = BadShmSeg+1;  
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/extutil.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/extutil.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/extutil.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    Pchar  = ^char;
    PDisplay  = ^Display;
    Plongint  = ^longint;
    PxError  = ^xError;
    PXEvent  = ^XEvent;
    PXExtCodes  = ^XExtCodes;
    PXExtensionInfo  = ^XExtensionInfo;
    PXFontStruct  = ^XFontStruct;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _EXTUTIL_H_}
//// {$define _EXTUTIL_H_}
//// {$include <X11/extensions/Xext.h>}





type
  T_XExtDisplayInfo = record
      next : ^T_XExtDisplayInfo;
      display : ^TDisplay;
      codes : ^TXExtCodes;
      data : TXPointer;
    end;
  TXExtDisplayInfo = T_XExtDisplayInfo;




  T_XExtensionInfo = record
      head : ^TXExtDisplayInfo;
      cur : ^TXExtDisplayInfo;
      ndisplays : longint;
    end;
  TXExtensionInfo = T_XExtensionInfo;












  T_XExtensionHooks = record
      create_gc : function (_para1:PTDisplay; _para2:TGC; _para3:PTXExtCodes):longint;cdecl;
      copy_gc : function (_para1:PTDisplay; _para2:TGC; _para3:PTXExtCodes):longint;cdecl;
      flush_gc : function (_para1:PTDisplay; _para2:TGC; _para3:PTXExtCodes):longint;cdecl;
      free_gc : function (_para1:PTDisplay; _para2:TGC; _para3:PTXExtCodes):longint;cdecl;
      create_font : function (_para1:PTDisplay; _para2:PTXFontStruct; _para3:PTXExtCodes):longint;cdecl;
      free_font : function (_para1:PTDisplay; _para2:PTXFontStruct; _para3:PTXExtCodes):longint;cdecl;
      close_display : function (_para1:PTDisplay; _para2:PTXExtCodes):longint;cdecl;
      wire_to_event : function (_para1:PTDisplay; _para2:PTXEvent; _para3:PTxEvent):TBool;cdecl;
      event_to_wire : function (_para1:PTDisplay; _para2:PTXEvent; _para3:PTxEvent):TStatus;cdecl;
      error : function (_para1:PTDisplay; _para2:PTxError; _para3:PTXExtCodes; _para4:Plongint):longint;cdecl;
      error_string : function (_para1:PTDisplay; _para2:longint; _para3:PTXExtCodes; _para4:Pchar; _para5:longint):Pchar;cdecl;
    end;
  TXExtensionHooks = T_XExtensionHooks;

function XextCreateExtension:^TXExtensionInfo;cdecl;external;

procedure XextDestroyExtension(_para1:PTXExtensionInfo);cdecl;external;
//// (* error 
////     _Xconst char*	/* ext_name */,
//// (* error 
////     XExtensionHooks*	/* hooks */,
//// (* error 
////     int			/* nevents */,

//// (* error 
//// );
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)

function XextRemoveDisplay(_para1:PTXExtensionInfo; _para2:PTDisplay):longint;cdecl;external;

function XextFindDisplay(_para1:PTXExtensionInfo; _para2:PTDisplay):^TXExtDisplayInfo;cdecl;external;
function XextHasExtension(i : longint) : Ti;

//// (* error 
////   if (!XextHasExtension(i)) { XMissingExtension (dpy, name); return val; }
in declaration at line 142 *)
      var
        val : Treturn;cvar;public;
//// (* error 
////   if (!XextHasExtension(i)) { XMissingExtension (dpy, name); return val; }
in declaration at line 144 *)
//// (* error 
////   if (!XextHasExtension(i)) { XMissingExtension (dpy, name); return; }
in declaration at line 144 *)
//// (* error 
////   if (!XextHasExtension(i)) { XMissingExtension (dpy, name); return; }

in declaration at line 156 *)
//// (* error 
////     XExtDisplayInfo *dpyinfo; \
//// (* error 
////     if (!extinfo) { if (!(extinfo = XextCreateExtension())) return NULL; } \
in declaration at line 157 *)
//// (* error 
////     if (!extinfo) { if (!(extinfo = XextCreateExtension())) return NULL; } \
in declaration at line 159 *)
//// (* error 
////       dpyinfo = XextAddDisplay (extinfo,dpy,extname,hooks,nev,data); \
//// (* error 
////     return dpyinfo; \
in declaration at line 160 *)
//// (* error 
////     return dpyinfo; \
//// (* error 
//// }
in define line 164 *)
//// (* error 
//// int proc (Display *dpy, XExtCodes *codes) \
in declaration at line 169 *)
//// (* error 
////     return XextRemoveDisplay (extinfo, dpy); \
//// (* error 
//// }
in define line 173 *)
//// (* error 
//// char *proc (Display *dpy, int code, XExtCodes *codes, char *buf, int n) \
in declaration at line 178 *)
//// (* error 
////     code -= codes->first_error;  \
//// (* error 
////     if (code >= 0 && code < nerr) { \
in declaration at line 180 *)
//// (* error 
//// 	char tmp[256]; \
//// (* error 
//// 	snprintf (tmp, sizeof(tmp), "%s.%d", extname, code);            \
in declaration at line 181 *)
//// (* error 
//// 	snprintf (tmp, sizeof(tmp), "%s.%d", extname, code);            \
//// (* error 
//// 	XGetErrorDatabaseText (dpy, "XProtoError", tmp, errl[code], buf, n); \
in declaration at line 182 *)
//// (* error 
//// 	XGetErrorDatabaseText (dpy, "XProtoError", tmp, errl[code], buf, n); \
//// (* error 
//// 	return buf; \
in declaration at line 183 *)
//// (* error 
//// 	return buf; \
//// (* error 
////     } \
in declaration at line 185 *)
//// (* error 
////     return (char *)0; \
//// (* error 
//// }
in define line 189 *)
//// {$endif}

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/Xag.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/Xag.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/Xag.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    PDisplay  = ^Display;
    Plongint  = ^longint;
    PWindow  = ^Window;
    PXAppGroup  = ^XAppGroup;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XAG_H_}
//// {$define _XAG_H_}
//// {$include <X11/extensions/ag.h>}
//// {$include <X11/Xfuncproto.h>}
//// {$include <stdarg.h>}
//// (* error 
//// typedef XID XAppGroup;
in declaration at line 37 *)


function XagQueryVersion(_para1:PTDisplay; _para2:Plongint; _para3:Plongint):TBool;cdecl;external;

function XagCreateEmbeddedApplicationGroup(_para1:PTDisplay; _para2:TVisualID; _para3:TColormap; _para4:dword; _para5:dword; 
               _para6:PTXAppGroup):TStatus;cdecl;external;

function XagCreateNonembeddedApplicationGroup(_para1:PTDisplay; _para2:PTXAppGroup):TStatus;cdecl;external;

function XagDestroyApplicationGroup(_para1:PTDisplay; _para2:TXAppGroup):TStatus;cdecl;external;
function XagGetApplicationGroupAttributes(_para1:PTDisplay; _para2:TXAppGroup; args:array of const):TStatus;cdecl;external;
function XagGetApplicationGroupAttributes(_para1:PTDisplay; _para2:TXAppGroup):TStatus;cdecl;external;

function XagQueryApplicationGroup(_para1:PTDisplay; _para2:TXID; _para3:PTXAppGroup):TStatus;cdecl;external;

function XagCreateAssociation(_para1:PTDisplay; _para2:PTWindow; _para3:pointer):TStatus;cdecl;external;

function XagDestroyAssociation(_para1:PTDisplay; _para2:TWindow):TStatus;cdecl;external;
//// {$endif}

//// (* error 
//// 

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/xf86vm.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/xf86vm.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/xf86vm.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XF86VM_H_}
//// {$define _XF86VM_H_}
//// {$include <X11/Xmd.h>}

const
  CLKFLAG_PROGRAMABLE = 1;  
//// {$ifdef XF86VIDMODE_EVENTS}
  XF86VidModeNotify = 0;  
  XF86VidModeNumberEvents = XF86VidModeNotify+1;  
  XF86VidModeNotifyMask = $00000001;  
  XF86VidModeNonEvent = 0;  
  XF86VidModeModeChange = 1;  
//// {$else}

const
  XF86VidModeNumberEvents = 0;  
//// {$endif}

const
  XF86VidModeBadClock = 0;  
  XF86VidModeBadHTimings = 1;  
  XF86VidModeBadVTimings = 2;  
  XF86VidModeModeUnsuitable = 3;  
  XF86VidModeExtensionDisabled = 4;  
  XF86VidModeClientNotLocal = 5;  
  XF86VidModeZoomLocked = 6;  
  XF86VidModeNumberErrors = XF86VidModeZoomLocked+1;  
  XF86VM_READ_PERMISSION = 1;  
  XF86VM_WRITE_PERMISSION = 2;  
//// {$endif}

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/XKBsrv.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/XKBsrv.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/XKBsrv.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    P_xEvent  = ^_xEvent;
    PBool  = ^Bool;
    Pchar  = ^char;
    Pdword  = ^dword;
    PKeybdCtrl  = ^KeybdCtrl;
    PKeySym  = ^KeySym;
    Plongint  = ^longint;
    PxkbAccessXNotify  = ^xkbAccessXNotify;
    PXkbAction  = ^XkbAction;
    PxkbActionMessage  = ^xkbActionMessage;
    PxkbCompatMapNotify  = ^xkbCompatMapNotify;
    PxkbControlsNotify  = ^xkbControlsNotify;
    PxkbExtensionDeviceNotify  = ^xkbExtensionDeviceNotify;
    PxkbIndicatorNotify  = ^xkbIndicatorNotify;
    PxkbMapNotify  = ^xkbMapNotify;
    PxkbNamesNotify  = ^xkbNamesNotify;
    PxkbNewKeyboardNotify  = ^xkbNewKeyboardNotify;
    PxkbStateNotify  = ^xkbStateNotify;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XKBSRV_H_}
//// {$define _XKBSRV_H_}
//// {$ifdef XKB_IN_SERVER}

const
  XkbAllocClientMap = SrvXkbAllocClientMap;  
  XkbAllocServerMap = SrvXkbAllocServerMap;  
  XkbChangeTypesOfKey = SrvXkbChangeTypesOfKey;  
  XkbAddKeyType = SrvXkbAddKeyType;  
  XkbCopyKeyType = SrvXkbCopyKeyType;  
  XkbCopyKeyTypes = SrvXkbCopyKeyTypes;  
  XkbFreeClientMap = SrvXkbFreeClientMap;  
  XkbFreeServerMap = SrvXkbFreeServerMap;  
  XkbInitCanonicalKeyTypes = SrvXkbInitCanonicalKeyTypes;  
  XkbKeyTypesForCoreSymbols = SrvXkbKeyTypesForCoreSymbols;  
  XkbApplyCompatMapToKey = SrvXkbApplyCompatMapToKey;  
  XkbUpdateMapFromCore = SrvXkbUpdateMapFromCore;  
  XkbResizeKeyActions = SrvXkbResizeKeyActions;  
  XkbResizeKeySyms = SrvXkbResizeKeySyms;  
  XkbResizeKeyType = SrvXkbResizeKeyType;  
  XkbAllocCompatMap = SrvXkbAllocCompatMap;  
  XkbAllocControls = SrvXkbAllocControls;  
  XkbAllocIndicatorMaps = SrvXkbAllocIndicatorMaps;  
  XkbAllocKeyboard = SrvXkbAllocKeyboard;  
  XkbAllocNames = SrvXkbAllocNames;  
  XkbFreeCompatMap = SrvXkbFreeCompatMap;  
  XkbFreeControls = SrvXkbFreeControls;  
  XkbFreeIndicatorMaps = SrvXkbFreeIndicatorMaps;  
  XkbFreeKeyboard = SrvXkbFreeKeyboard;  
  XkbFreeNames = SrvXkbFreeNames;  
  XkbAddDeviceLedInfo = SrvXkbAddDeviceLedInfo;  
  XkbAllocDeviceInfo = SrvXkbAllocDeviceInfo;  
  XkbFreeDeviceInfo = SrvXkbFreeDeviceInfo;  
  XkbResizeDeviceButtonActions = SrvXkbResizeDeviceButtonActions;  
  XkbLatchModifiers = SrvXkbLatchModifiers;  
  XkbLatchGroup = SrvXkbLatchGroup;  
  XkbVirtualModsToReal = SrvXkbVirtualModsToReal;  
  XkbChangeKeycodeRange = SrvXkbChangeKeycodeRange;  
  XkbApplyVirtualModChanges = SrvXkbApplyVirtualModChanges;  
  XkbUpdateActionVirtualMods = SrvXkbUpdateActionVirtualMods;  
  XkbUpdateKeyTypeVirtualMods = SrvXkbUpdateKeyTypeVirtualMods;  
//// {$endif}
//// {$include <X11/extensions/XKBstr.h>}
//// {$include <X11/extensions/XKBproto.h>}
//// {$include "inputstr.h"}
type
  T_XkbInterest = record
      dev : TDeviceIntPtr;
      client : TClientPtr;
      resource : TXID;
      next : ^T_XkbInterest;
      extDevNotifyMask : TCARD16;
      stateNotifyMask : TCARD16;
      namesNotifyMask : TCARD16;
      ctrlsNotifyMask : TCARD32;
      compatNotifyMask : TCARD8;
      bellNotifyMask : TBOOL;
      actionMessageMask : TBOOL;
      accessXNotifyMask : TCARD16;
      iStateNotifyMask : TCARD32;
      iMapNotifyMask : TCARD32;
      altSymsNotifyMask : TCARD16;
      autoCtrls : TCARD32;
      autoCtrlValues : TCARD32;
    end;
  TXkbInterestRec = T_XkbInterest;
  TXkbInterestPtr = ^T_XkbInterest;

  T_XkbRadioGroup = record
      flags : TCARD8;
      nMembers : TCARD8;
      dfltDown : TCARD8;
      currentDown : TCARD8;
      members : array[0..(XkbRGMaxMembers)-1] of TCARD8;
    end;
  TXkbRadioGroupRec = T_XkbRadioGroup;
  TXkbRadioGroupPtr = ^T_XkbRadioGroup;

  T_XkbEventCause = record
      kc : TCARD8;
      event : TCARD8;
      mjr : TCARD8;
      mnr : TCARD8;
      client : TClientPtr;
    end;
  TXkbEventCauseRec = T_XkbEventCause;
  TXkbEventCausePtr = ^T_XkbEventCause;
//// (* error 
//// #define	XkbSetCauseKey(c,k,e)	{ (c)->kc= (k),(c)->event= (e),\
in declaration at line 109 *)
//// (* error 
//// 				  (c)->mjr= (c)->mnr= 0; \
//// (* error 
//// 				  (c)->client= NULL; }
in declaration at line 110 *)
//// (* error 
//// 				  (c)->client= NULL; }
in declaration at line 112 *)
//// (* error 
//// 				  (c)->mjr= (j),(c)->mnr= (n);\
//// (* error 
//// 				  (c)->client= (cl); }
in declaration at line 113 *)
//// (* error 
//// 				  (c)->client= (cl); }
in define line 114 *)

    function XkbSetCauseXkbReq(c,e,cl : longint) : longint;    

    function XkbSetCauseUnknown(c : longint) : longint;    

    const
      _OFF_TIMER = 0;      
      _KRG_WARN_TIMER = 1;      
      _KRG_TIMER = 2;      
      _SK_TIMEOUT_TIMER = 3;      
      _ALL_TIMEOUT_TIMER = 4;      
      _BEEP_NONE = 0;      
      _BEEP_FEATURE_ON = 1;      
      _BEEP_FEATURE_OFF = 2;      
      _BEEP_FEATURE_CHANGE = 3;      
      _BEEP_SLOW_WARN = 4;      
      _BEEP_SLOW_PRESS = 5;      
      _BEEP_SLOW_ACCEPT = 6;      
      _BEEP_SLOW_REJECT = 7;      
      _BEEP_SLOW_RELEASE = 8;      
      _BEEP_STICKY_LATCH = 9;      
      _BEEP_STICKY_LOCK = 10;      
      _BEEP_STICKY_UNLOCK = 11;      
      _BEEP_LED_ON = 12;      
      _BEEP_LED_OFF = 13;      
      _BEEP_LED_CHANGE = 14;      
      _BEEP_BOUNCE_REJECT = 15;      
    type
      T_XkbSrvInfo = record
          prev_state : TXkbStateRec;
          state : TXkbStateRec;
          desc : TXkbDescPtr;
          device : TDeviceIntPtr;
          kbdProc : TKbdCtrlProcPtr;
          radioGroups : TXkbRadioGroupPtr;
          nRadioGroups : TCARD8;
          clearMods : TCARD8;
          setMods : TCARD8;
          groupChange : TINT16;
          dfltPtrDelta : TCARD16;
          mouseKeysCurve : Tdouble;
          mouseKeysCurveFactor : Tdouble;
          mouseKeysDX : TINT16;
          mouseKeysDY : TINT16;
          mouseKeysFlags : TCARD8;
          mouseKeysAccel : TBool;
          mouseKeysCounter : TCARD8;
          lockedPtrButtons : TCARD8;
          shiftKeyCount : TCARD8;
          mouseKey : TKeyCode;
          inactiveKey : TKeyCode;
          slowKey : TKeyCode;
          repeatKey : TKeyCode;
          krgTimerActive : TCARD8;
          beepType : TCARD8;
          beepCount : TCARD8;
          flags : TCARD32;
          lastPtrEventTime : TCARD32;
          lastShiftEventTime : TCARD32;
          beepTimer : TOsTimerPtr;
          mouseKeyTimer : TOsTimerPtr;
          slowKeysTimer : TOsTimerPtr;
          bounceKeysTimer : TOsTimerPtr;
          repeatKeyTimer : TOsTimerPtr;
          krgTimer : TOsTimerPtr;
        end;
      TXkbSrvInfoRec = T_XkbSrvInfo;
      TXkbSrvInfoPtr = ^T_XkbSrvInfo;

    const
      XkbSLI_IsDefault = 1 shl 0;      
      XkbSLI_HasOwnState = 1 shl 1;      
    type
      T_XkbSrvLedInfo = record
          flags : TCARD16;
          _class : TCARD16;
          id : TCARD16;
          fb : record
              case longint of
                0 : ( kf : TKbdFeedbackPtr );
                1 : ( lf : TLedFeedbackPtr );
              end;
          physIndicators : TCARD32;
          autoState : TCARD32;
          explicitState : TCARD32;
          effectiveState : TCARD32;
          mapsPresent : TCARD32;
          namesPresent : TCARD32;
          maps : TXkbIndicatorMapPtr;
          names : ^TAtom;
          usesBase : TCARD32;
          usesLatched : TCARD32;
          usesLocked : TCARD32;
          usesEffective : TCARD32;
          usesCompat : TCARD32;
          usesControls : TCARD32;
          usedComponents : TCARD32;
        end;
      TXkbSrvLedInfoRec = T_XkbSrvLedInfo;
      TXkbSrvLedInfoPtr = ^T_XkbSrvLedInfo;


    const
      _XkbClientInitialized = 1 shl 15;      
//// (* error 
//// 	((c)->xkbClientFlags&XkbPCF_DetectableAutoRepeatMask)
in define line 225 *)

      _XkbStateNotifyInProgress = 1 shl 0;      
    type
      TxkbDeviceInfoRec = record
          processInputProc : TProcessInputProc;
          realInputProc : TProcessInputProc;
          unwrapProc : TDeviceUnwrapProc;
        end;
      TxkbDeviceInfoPtr = ^TxkbDeviceInfoRec;
//// (* error 
//// 	device->public.processInputProc = proc; \
in declaration at line 240 *)
//// (* error 
//// 	device->public.processInputProc = proc; \
//// (* error 
//// 	oldprocs->processInputProc = \
in declaration at line 242 *)
//// (* error 
//// 	oldprocs->realInputProc = device->public.realInputProc; \
//// (* error 
//// 	device->public.realInputProc = proc; \
in declaration at line 243 *)
//// (* error 
//// 	device->public.realInputProc = proc; \
//// (* error 
//// 	oldprocs->unwrapProc = device->unwrapProc; \
in declaration at line 244 *)
//// (* error 
//// 	oldprocs->unwrapProc = device->unwrapProc; \
//// (* error 
//// 	device->unwrapProc = unwrapproc;
in declaration at line 245 *)
//// (* error 
//// 	    device->public.processInputProc = proc; \
in declaration at line 249 *)
//// (* error 
//// 	    device->public.processInputProc = proc; \
//// (* error 
//// 	oldprocs->processInputProc = \
in declaration at line 251 *)
//// (* error 
//// 	oldprocs->realInputProc = device->public.realInputProc; \
//// (* error 
//// 	device->public.realInputProc = proc; \
in declaration at line 252 *)
//// (* error 
//// 	device->public.realInputProc = proc; \
//// (* error 
//// 	oldprocs->unwrapProc = device->unwrapProc; \
in declaration at line 253 *)
//// (* error 
//// 	oldprocs->unwrapProc = device->unwrapProc; \
//// (* error 
//// 	device->unwrapProc = unwrapproc;
in declaration at line 254 *)
//// (* error 
//// 	device->public.processInputProc = oldprocs->processInputProc; \
in declaration at line 257 *)
//// (* error 
//// 	device->public.processInputProc = oldprocs->processInputProc; \
//// (* error 
//// 	device->public.realInputProc = oldprocs->realInputProc; \
in declaration at line 258 *)
//// (* error 
//// 	device->public.realInputProc = oldprocs->realInputProc; \
//// (* error 
//// 	device->unwrapProc = oldprocs->unwrapProc;
in declaration at line 259 *)

    function XKBDEVICEINFO(dev : longint) : TxkbDeviceInfoPtr;    



    const
      XkbAX_KRGMask = XkbSlowKeysMask or XkbBounceKeysMask;      
      XkbAllFilteredEventsMask = ((XkbAccessXKeysMask or XkbRepeatKeysMask) or XkbMouseKeysAccelMask) or XkbAX_KRGMask;      

      var
        XkbReqCode : longint;cvar;external;
        XkbEventBase : longint;cvar;external;
        XkbKeyboardErrorCode : longint;cvar;external;
        XkbDisableLockActions : longint;cvar;external;
        XkbBaseDirectory : ^char;cvar;external;
        XkbBinDirectory : ^char;cvar;external;
        XkbInitialMap : ^char;cvar;external;
        _XkbClientMajor : longint;cvar;external;
        _XkbClientMinor : longint;cvar;external;
        XkbXIUnsupported : dword;cvar;external;
        XkbModelUsed : ^char;cvar;external;
        noXkbExtension : TBool;cvar;external;
        XkbWantRulesProp : TBool;cvar;external;
        XkbLastRepeatEvent : Tpointer;cvar;external;
        xkbDebugFlags : TCARD32;cvar;external;
        xkbDebugCtrls : TCARD32;cvar;external;

    function _XkbAlloc(s : longint) : longint;    

    function _XkbCalloc(n,s : longint) : longint;    

    function _XkbRealloc(o,s : longint) : longint;    

    function _XkbTypedAlloc(t : longint) : pTt;    

    function _XkbTypedCalloc(n,t : longint) : pTt;    

    function _XkbTypedRealloc(o,n,t : longint) : longint;    

//// (* error 
//// #define	_XkbClearElems(a,f,l,t)	bzero(&(a)[f],((l)-(f)+1)*sizeof(t))
in define line 301 *)
    function _XkbFree(p : longint) : longint;    

//// (* error 
//// 	{ _XkbErrCode= (c); _XkbErrLocation= (l); _XkbErrData= (d); }
in declaration at line 305 *)
//// (* error 
//// 	{ _XkbErrCode= (c); _XkbErrLocation= (l); _XkbErrData= (d); }
in declaration at line 305 *)
//// (* error 
//// 	{ _XkbErrCode= (c); _XkbErrLocation= (l); _XkbErrData= (d); }
in declaration at line 305 *)
//// (* error 
//// 	{ _XkbErrCode= (c); _XkbErrLocation= (l); _XkbErrData= (d); }
in define line 306 *)
    function _XkbErrCode3(a,b,c : longint) : longint;    

    function _XkbErrCode4(a,b,c,d : longint) : longint;    

      var
        DeviceKeyPress : longint;cvar;external;
        DeviceButtonPress : longint;cvar;external;
//// {$ifdef XINPUT}
//// (* error 
//// #define	_XkbIsPressEvent(t)	(((t)==KeyPress)||((t)==DeviceKeyPress))
in define line 314 *)
//// (* error 
//// #define	_XkbIsReleaseEvent(t)	(((t)==KeyRelease)||((t)==DeviceKeyRelease))
in define line 315 *)
//// {$else}

    function _XkbIsPressEvent(t : longint) : longint;    

    function _XkbIsReleaseEvent(t : longint) : longint;    

//// {$endif}

    function _XkbCoreKeycodeInRange(c,k : longint) : longint;    

    function _XkbCoreNumKeys(c : longint) : longint;    

    function XConvertCase(s,l,u : longint) : longint;    

//// {$undef	IsKeypadKey}
    function IsKeypadKey(s : longint) : longint;    

    type
      TStatus = longint;

      TXPointer = Tpointer;
      T_XDisplay = TDisplay;
//// {$ifndef True}

    const
      True = 1;      
      False = 0;      
//// {$endif}
//// {$ifndef PATH_MAX}
//// {$ifdef MAXPATHLEN}

    const
      PATH_MAX = MAXPATHLEN;      
//// {$else}

    const
      PATH_MAX = 1024;      
//// {$endif}
//// {$endif}
//// (* error 
//// extern void XkbUseMsg(
in declaration at line 351 *)


function XkbProcessArguments(_para1:longint; _para2:PPchar; _para3:longint):longint;cdecl;external;
procedure XkbSetExtension(device:TDeviceIntPtr; proc:TProcessInputProc);cdecl;external;

procedure XkbFreeCompatMap(_para1:TXkbDescPtr; _para2:dword; _para3:TBool);cdecl;external;

procedure XkbFreeNames(_para1:TXkbDescPtr; _para2:dword; _para3:TBool);cdecl;external;

function _XkbLookupAnyDevice(_para1:longint; _para2:Plongint):TDeviceIntPtr;cdecl;external;

function _XkbLookupKeyboard(_para1:longint; _para2:Plongint):TDeviceIntPtr;cdecl;external;

function _XkbLookupBellDevice(_para1:longint; _para2:Plongint):TDeviceIntPtr;cdecl;external;

function _XkbLookupLedDevice(_para1:longint; _para2:Plongint):TDeviceIntPtr;cdecl;external;

function _XkbLookupButtonDevice(_para1:longint; _para2:Plongint):TDeviceIntPtr;cdecl;external;
function XkbAllocKeyboard:TXkbDescPtr;cdecl;external;

function XkbAllocClientMap(_para1:TXkbDescPtr; _para2:dword; _para3:dword):TStatus;cdecl;external;

function XkbAllocServerMap(_para1:TXkbDescPtr; _para2:dword; _para3:dword):TStatus;cdecl;external;

procedure XkbFreeClientMap(_para1:TXkbDescPtr; _para2:dword; _para3:TBool);cdecl;external;

procedure XkbFreeServerMap(_para1:TXkbDescPtr; _para2:dword; _para3:TBool);cdecl;external;

function XkbAllocIndicatorMaps(_para1:TXkbDescPtr):TStatus;cdecl;external;

function XkbAllocCompatMap(_para1:TXkbDescPtr; _para2:dword; _para3:dword):TStatus;cdecl;external;

function XkbAllocNames(_para1:TXkbDescPtr; _para2:dword; _para3:longint; _para4:longint):TStatus;cdecl;external;

function XkbAllocControls(_para1:TXkbDescPtr; _para2:dword):TStatus;cdecl;external;

function XkbCopyKeyType(_para1:TXkbKeyTypePtr; _para2:TXkbKeyTypePtr):TStatus;cdecl;external;

function XkbCopyKeyTypes(_para1:TXkbKeyTypePtr; _para2:TXkbKeyTypePtr; _para3:longint):TStatus;cdecl;external;

function XkbResizeKeyType(_para1:TXkbDescPtr; _para2:longint; _para3:longint; _para4:TBool; _para5:longint):TStatus;cdecl;external;

procedure XkbFreeKeyboard(_para1:TXkbDescPtr; _para2:dword; _para3:TBool);cdecl;external;

procedure XkbSetActionKeyMods(_para1:TXkbDescPtr; _para2:PTXkbAction; _para3:dword);cdecl;external;

function XkbCheckActionVMods(_para1:TXkbDescPtr; _para2:PTXkbAction; _para3:dword):TBool;cdecl;external;

function XkbApplyVModChanges(_para1:TXkbSrvInfoPtr; _para2:dword; _para3:TXkbChangesPtr; _para4:Pdword; _para5:TXkbEventCausePtr):TBool;cdecl;external;

procedure XkbApplyVModChangesToAllDevices(_para1:TDeviceIntPtr; _para2:TXkbDescPtr; _para3:dword; _para4:TXkbEventCausePtr);cdecl;external;

function XkbMaskForVMask(_para1:TXkbDescPtr; _para2:dword):dword;cdecl;external;

function XkbVirtualModsToReal(_para1:TXkbDescPtr; _para2:dword; _para3:Pdword):TBool;cdecl;external;

function XkbAdjustGroup(_para1:longint; _para2:TXkbControlsPtr):dword;cdecl;external;

function XkbResizeKeySyms(_para1:TXkbDescPtr; _para2:longint; _para3:longint):^TKeySym;cdecl;external;

function XkbResizeKeyActions(_para1:TXkbDescPtr; _para2:longint; _para3:longint):^TXkbAction;cdecl;external;

procedure XkbUpdateKeyTypesFromCore(_para1:TDeviceIntPtr; _para2:TKeyCode; _para3:TCARD8; _para4:TXkbChangesPtr);cdecl;external;

procedure XkbUpdateDescActions(_para1:TXkbDescPtr; _para2:TKeyCode; _para3:TCARD8; _para4:TXkbChangesPtr);cdecl;external;

procedure XkbUpdateActions(_para1:TDeviceIntPtr; _para2:TKeyCode; _para3:TCARD8; _para4:TXkbChangesPtr; _para5:Pdword; 
                _para6:TXkbEventCausePtr);cdecl;external;

procedure XkbUpdateCoreDescription(_para1:TDeviceIntPtr; _para2:TBool);cdecl;external;

procedure XkbApplyMappingChange(_para1:TDeviceIntPtr; _para2:TCARD8; _para3:TKeyCode; _para4:TCARD8; _para5:TClientPtr);cdecl;external;

procedure XkbSetIndicators(_para1:TDeviceIntPtr; _para2:TCARD32; _para3:TCARD32; _para4:TXkbEventCausePtr);cdecl;external;

procedure XkbUpdateIndicators(_para1:TDeviceIntPtr; _para2:TCARD32; _para3:TBool; _para4:TXkbChangesPtr; _para5:TXkbEventCausePtr);cdecl;external;

function XkbAllocSrvLedInfo(_para1:TDeviceIntPtr; _para2:TKbdFeedbackPtr; _para3:TLedFeedbackPtr; _para4:dword):TXkbSrvLedInfoPtr;cdecl;external;

function XkbFindSrvLedInfo(_para1:TDeviceIntPtr; _para2:dword; _para3:dword; _para4:dword):TXkbSrvLedInfoPtr;cdecl;external;

procedure XkbApplyLedNameChanges(_para1:TDeviceIntPtr; _para2:TXkbSrvLedInfoPtr; _para3:dword; _para4:PTxkbExtensionDeviceNotify; _para5:TXkbChangesPtr; 
                _para6:TXkbEventCausePtr);cdecl;external;

procedure XkbApplyLedMapChanges(_para1:TDeviceIntPtr; _para2:TXkbSrvLedInfoPtr; _para3:dword; _para4:PTxkbExtensionDeviceNotify; _para5:TXkbChangesPtr; 
                _para6:TXkbEventCausePtr);cdecl;external;

procedure XkbApplyLedStateChanges(_para1:TDeviceIntPtr; _para2:TXkbSrvLedInfoPtr; _para3:dword; _para4:PTxkbExtensionDeviceNotify; _para5:TXkbChangesPtr; 
                _para6:TXkbEventCausePtr);cdecl;external;

procedure XkbUpdateLedAutoState(_para1:TDeviceIntPtr; _para2:TXkbSrvLedInfoPtr; _para3:dword; _para4:PTxkbExtensionDeviceNotify; _para5:TXkbChangesPtr; 
                _para6:TXkbEventCausePtr);cdecl;external;

procedure XkbFlushLedEvents(_para1:TDeviceIntPtr; _para2:TDeviceIntPtr; _para3:TXkbSrvLedInfoPtr; _para4:PTxkbExtensionDeviceNotify; _para5:TXkbChangesPtr; 
                _para6:TXkbEventCausePtr);cdecl;external;

procedure XkbUpdateAllDeviceIndicators(_para1:TXkbChangesPtr; _para2:TXkbEventCausePtr);cdecl;external;

function XkbIndicatorsToUpdate(_para1:TDeviceIntPtr; _para2:dword; _para3:TBool):dword;cdecl;external;

procedure XkbComputeDerivedState(_para1:TXkbSrvInfoPtr);cdecl;external;

procedure XkbCheckSecondaryEffects(_para1:TXkbSrvInfoPtr; _para2:dword; _para3:TXkbChangesPtr; _para4:TXkbEventCausePtr);cdecl;external;

procedure XkbCheckIndicatorMaps(_para1:TDeviceIntPtr; _para2:TXkbSrvLedInfoPtr; _para3:dword);cdecl;external;

function XkbStateChangedFlags(_para1:TXkbStatePtr; _para2:TXkbStatePtr):dword;cdecl;external;

procedure XkbSendStateNotify(_para1:TDeviceIntPtr; _para2:PTxkbStateNotify);cdecl;external;

procedure XkbSendMapNotify(_para1:TDeviceIntPtr; _para2:PTxkbMapNotify);cdecl;external;

function XkbComputeControlsNotify(_para1:TDeviceIntPtr; _para2:TXkbControlsPtr; _para3:TXkbControlsPtr; _para4:PTxkbControlsNotify; _para5:TBool):longint;cdecl;external;

procedure XkbSendControlsNotify(_para1:TDeviceIntPtr; _para2:PTxkbControlsNotify);cdecl;external;

procedure XkbSendCompatMapNotify(_para1:TDeviceIntPtr; _para2:PTxkbCompatMapNotify);cdecl;external;

procedure XkbSendIndicatorNotify(_para1:TDeviceIntPtr; _para2:longint; _para3:PTxkbIndicatorNotify);cdecl;external;

procedure XkbHandleBell(_para1:TBOOL; _para2:TBOOL; _para3:TDeviceIntPtr; _para4:TCARD8; _para5:Tpointer; 
                _para6:TCARD8; _para7:TAtom; _para8:TWindowPtr; _para9:TClientPtr);cdecl;external;

procedure XkbSendAccessXNotify(_para1:TDeviceIntPtr; _para2:PTxkbAccessXNotify);cdecl;external;

procedure XkbSendNamesNotify(_para1:TDeviceIntPtr; _para2:PTxkbNamesNotify);cdecl;external;

procedure XkbSendCompatNotify(_para1:TDeviceIntPtr; _para2:PTxkbCompatMapNotify);cdecl;external;

procedure XkbSendActionMessage(_para1:TDeviceIntPtr; _para2:PTxkbActionMessage);cdecl;external;

procedure XkbSendExtensionDeviceNotify(_para1:TDeviceIntPtr; _para2:TClientPtr; _para3:PTxkbExtensionDeviceNotify);cdecl;external;

procedure XkbSendNotification(_para1:TDeviceIntPtr; _para2:TXkbChangesPtr; _para3:TXkbEventCausePtr);cdecl;external;

procedure XkbProcessKeyboardEvent(_para1:PT_xEvent; _para2:TDeviceIntPtr; _para3:longint);cdecl;external;

procedure XkbProcessOtherEvent(_para1:PT_xEvent; _para2:TDeviceIntPtr; _para3:longint);cdecl;external;

procedure XkbHandleActions(_para1:TDeviceIntPtr; _para2:TDeviceIntPtr; _para3:PT_xEvent; _para4:longint);cdecl;external;

function XkbEnableDisableControls(_para1:TXkbSrvInfoPtr; _para2:dword; _para3:dword; _para4:TXkbChangesPtr; _para5:TXkbEventCausePtr):TBool;cdecl;external;

procedure AccessXInit(_para1:TDeviceIntPtr);cdecl;external;
//// (* error 
////     register struct _xEvent *	/* xE */,
//// (* error 
////     register DeviceIntPtr	/* keybd */,
//// (* error 
////     int				/* count */

 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
////     register struct _xEvent *	/* xE */,
//// (* error 
////     register DeviceIntPtr	/* keybd */,
//// (* error 
////     int				/* count */

 in declarator_list *)
 in declarator_list *)
 in declarator_list *)

procedure AccessXCancelRepeatKey(_para1:TXkbSrvInfoPtr; _para2:TKeyCode);cdecl;external;

procedure AccessXComputeCurveFactor(_para1:TXkbSrvInfoPtr; _para2:TXkbControlsPtr);cdecl;external;

function XkbAddDeviceLedInfo(_para1:TXkbDeviceInfoPtr; _para2:dword; _para3:dword):TXkbDeviceLedInfoPtr;cdecl;external;

function XkbAllocDeviceInfo(_para1:dword; _para2:dword; _para3:dword):TXkbDeviceInfoPtr;cdecl;external;

procedure XkbFreeDeviceInfo(_para1:TXkbDeviceInfoPtr; _para2:dword; _para3:TBool);cdecl;external;

function XkbResizeDeviceButtonActions(_para1:TXkbDeviceInfoPtr; _para2:dword):TStatus;cdecl;external;

function XkbFindClientResource(_para1:TDevicePtr; _para2:TClientPtr):TXkbInterestPtr;cdecl;external;

function XkbAddClientResource(_para1:TDevicePtr; _para2:TClientPtr; _para3:TXID):TXkbInterestPtr;cdecl;external;

function XkbRemoveClient(_para1:TDevicePtr; _para2:TClientPtr):longint;cdecl;external;

function XkbRemoveResourceClient(_para1:TDevicePtr; _para2:TXID):longint;cdecl;external;

function XkbDDXInitDevice(_para1:TDeviceIntPtr):longint;cdecl;external;

function XkbDDXAccessXBeep(_para1:TDeviceIntPtr; _para2:dword; _para3:dword):longint;cdecl;external;

procedure XkbDDXKeyClick(_para1:TDeviceIntPtr; _para2:longint; _para3:longint);cdecl;external;

function XkbDDXUsesSoftRepeat(_para1:TDeviceIntPtr):longint;cdecl;external;

procedure XkbDDXKeybdCtrlProc(_para1:TDeviceIntPtr; _para2:PTKeybdCtrl);cdecl;external;

procedure XkbDDXChangeControls(_para1:TDeviceIntPtr; _para2:TXkbControlsPtr; _para3:TXkbControlsPtr);cdecl;external;

procedure XkbDDXUpdateIndicators(_para1:TDeviceIntPtr; _para2:TCARD32);cdecl;external;

procedure XkbDDXUpdateDeviceIndicators(_para1:TDeviceIntPtr; _para2:TXkbSrvLedInfoPtr; _para3:TCARD32);cdecl;external;

procedure XkbDDXFakePointerButton(_para1:longint; _para2:longint);cdecl;external;

procedure XkbDDXFakePointerMotion(_para1:dword; _para2:longint; _para3:longint);cdecl;external;

procedure XkbDDXFakeDeviceButton(_para1:TDeviceIntPtr; _para2:TBool; _para3:longint);cdecl;external;

function XkbDDXTerminateServer(_para1:TDeviceIntPtr; _para2:TKeyCode; _para3:PTXkbAction):longint;cdecl;external;

function XkbDDXSwitchScreen(_para1:TDeviceIntPtr; _para2:TKeyCode; _para3:PTXkbAction):longint;cdecl;external;

function XkbDDXPrivate(_para1:TDeviceIntPtr; _para2:TKeyCode; _para3:PTXkbAction):longint;cdecl;external;

procedure XkbDisableComputedAutoRepeats(_para1:TDeviceIntPtr; _para2:dword);cdecl;external;

procedure XkbSetRepeatKeys(_para1:TDeviceIntPtr; _para2:longint; _para3:longint);cdecl;external;

function XkbLatchModifiers(_para1:TDeviceIntPtr; _para2:TCARD8; _para3:TCARD8):longint;cdecl;external;

function XkbLatchGroup(_para1:TDeviceIntPtr; _para2:longint):longint;cdecl;external;

procedure XkbClearAllLatchesAndLocks(_para1:TDeviceIntPtr; _para2:TXkbSrvInfoPtr; _para3:TBool; _para4:TXkbEventCausePtr);cdecl;external;

procedure XkbSetRulesDflts(_para1:Pchar; _para2:Pchar; _para3:Pchar; _para4:Pchar; _para5:Pchar);cdecl;external;

procedure XkbInitDevice(_para1:TDeviceIntPtr);cdecl;external;
//// (* error 
//// 	CARD8 			/* pMods */[],
 in declarator_list *)

//// (* error 
//// );
 in declarator_list *)

function SProcXkbDispatch(_para1:TClientPtr):longint;cdecl;external;

function XkbLookupNamedGeometry(_para1:TDeviceIntPtr; _para2:TAtom; _para3:PTBool):TXkbGeometryPtr;cdecl;external;

function _XkbDupString(_para1:Pchar):^char;cdecl;external;

procedure XkbConvertCase(_para1:TKeySym; _para2:PTKeySym; _para3:PTKeySym);cdecl;external;

function XkbChangeKeycodeRange(_para1:TXkbDescPtr; _para2:longint; _para3:longint; _para4:TXkbChangesPtr):TStatus;cdecl;external;

function XkbFinishDeviceInit(_para1:TDeviceIntPtr):longint;cdecl;external;

procedure XkbFreeSrvLedInfo(_para1:TXkbSrvLedInfoPtr);cdecl;external;

procedure XkbFreeInfo(_para1:TXkbSrvInfoPtr);cdecl;external;

function XkbChangeTypesOfKey(_para1:TXkbDescPtr; _para2:longint; _para3:longint; _para4:dword; _para5:Plongint; 
               _para6:TXkbMapChangesPtr):TStatus;cdecl;external;

function XkbAddKeyType(_para1:TXkbDescPtr; _para2:TAtom; _para3:longint; _para4:TBool; _para5:longint):TXkbKeyTypePtr;cdecl;external;

function XkbInitCanonicalKeyTypes(_para1:TXkbDescPtr; _para2:dword; _para3:longint):TStatus;cdecl;external;

function XkbKeyTypesForCoreSymbols(_para1:TXkbDescPtr; _para2:longint; _para3:PTKeySym; _para4:dword; _para5:Plongint; 
               _para6:PTKeySym):longint;cdecl;external;

function XkbApplyCompatMapToKey(_para1:TXkbDescPtr; _para2:TKeyCode; _para3:TXkbChangesPtr):TBool;cdecl;external;

function XkbUpdateMapFromCore(_para1:TXkbDescPtr; _para2:TKeyCode; _para3:longint; _para4:longint; _para5:PTKeySym; 
               _para6:TXkbChangesPtr):TBool;cdecl;external;

procedure XkbFreeControls(_para1:TXkbDescPtr; _para2:dword; _para3:TBool);cdecl;external;

procedure XkbFreeIndicatorMaps(_para1:TXkbDescPtr);cdecl;external;

function XkbApplyVirtualModChanges(_para1:TXkbDescPtr; _para2:dword; _para3:TXkbChangesPtr):TBool;cdecl;external;

function XkbUpdateActionVirtualMods(_para1:TXkbDescPtr; _para2:PTXkbAction; _para3:dword):TBool;cdecl;external;

procedure XkbUpdateKeyTypeVirtualMods(_para1:TXkbDescPtr; _para2:TXkbKeyTypePtr; _para3:dword; _para4:TXkbChangesPtr);cdecl;external;

procedure XkbSendNewKeyboardNotify(_para1:TDeviceIntPtr; _para2:PTxkbNewKeyboardNotify);cdecl;external;
//// {$ifdef XKBSRV_NEED_FILE_FUNCS}
//// {$include <X11/extensions/XKMformat.h>}
//// {$include <X11/extensions/XKBfile.h>}
//// {$include <X11/extensions/XKBrules.h>}

    const
      _XkbListKeymaps = 0;      
      _XkbListKeycodes = 1;      
      _XkbListTypes = 2;      
      _XkbListCompat = 3;      
      _XkbListSymbols = 4;      
      _XkbListGeometry = 5;      
      _XkbListNumComponents = 6;      
    type
      T_XkbSrvListInfo = record
          szPool : longint;
          nPool : longint;
          pool : ^char;
          maxRtrn : longint;
          nTotal : longint;
          pattern : array[0..(_XkbListNumComponents)-1] of ^char;
          nFound : array[0..(_XkbListNumComponents)-1] of longint;
        end;
      TXkbSrvListInfoRec = T_XkbSrvListInfo;
      TXkbSrvListInfoPtr = ^T_XkbSrvListInfo;


function XkbGetRulesDflts(_para1:TXkbRF_VarDefsPtr):^char;cdecl;external;

procedure XkbSetRulesUsed(_para1:TXkbRF_VarDefsPtr);cdecl;external;

function XkbDDXList(_para1:TDeviceIntPtr; _para2:TXkbSrvListInfoPtr; _para3:TClientPtr):TStatus;cdecl;external;

function XkbDDXLoadKeymapByNames(_para1:TDeviceIntPtr; _para2:TXkbComponentNamesPtr; _para3:dword; _para4:dword; _para5:TXkbFileInfoPtr; 
               _para6:Pchar; _para7:longint):dword;cdecl;external;

function XkbDDXNamesFromRules(_para1:TDeviceIntPtr; _para2:Pchar; _para3:TXkbRF_VarDefsPtr; _para4:TXkbComponentNamesPtr):TBool;cdecl;external;

function XkbDDXOpenConfigFile(_para1:Pchar; _para2:Pchar; _para3:longint):^TFILE;cdecl;external;

function XkbDDXApplyConfig(_para1:TXPointer; _para2:TXkbSrvInfoPtr):TBool;cdecl;external;

function XkbDDXPreloadConfig(_para1:PPchar; _para2:TXkbRF_VarDefsPtr; _para3:TXkbComponentNamesPtr; _para4:TDeviceIntPtr):TXPointer;cdecl;external;

function _XkbStrCaseCmp(_para1:Pchar; _para2:Pchar):longint;cdecl;external;
//// {$endif}

//// (* error 
//// #define	XkbAtomGetString(d,s)	NameForAtom(s)
in define line 1180 *)
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/shape.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/shape.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/shape.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    PBool  = ^Bool;
    PDisplay  = ^Display;
    Pdword  = ^dword;
    Plongint  = ^longint;
    PXRectangle  = ^XRectangle;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _SHAPE_H_}
//// {$define _SHAPE_H_}
//// {$include <X11/Xfuncproto.h>}
//// {$include <X11/extensions/shapeconst.h>}
//// {$ifndef _SHAPE_SERVER_}
//// {$include <X11/Xutil.h>}









type
  TXShapeEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      window : TWindow;
      kind : longint;
      x : longint;
      y : longint;
      width : dword;
      height : dword;
      time : TTime;
      shaped : TBool;
    end;
//// (* error 
//// extern Bool XShapeQueryExtension (

in declaration at line 55 *)


function XShapeQueryVersion(_para1:PTDisplay; _para2:Plongint; _para3:Plongint):TStatus;cdecl;external;

procedure XShapeCombineRegion(_para1:PTDisplay; _para2:TWindow; _para3:longint; _para4:longint; _para5:longint; 
                _para6:TRegion; _para7:longint);cdecl;external;

procedure XShapeCombineRectangles(_para1:PTDisplay; _para2:TWindow; _para3:longint; _para4:longint; _para5:longint; 
                _para6:PTXRectangle; _para7:longint; _para8:longint; _para9:longint);cdecl;external;

procedure XShapeCombineMask(_para1:PTDisplay; _para2:TWindow; _para3:longint; _para4:longint; _para5:longint; 
                _para6:TPixmap; _para7:longint);cdecl;external;

procedure XShapeCombineShape(_para1:PTDisplay; _para2:TWindow; _para3:longint; _para4:longint; _para5:longint; 
                _para6:TWindow; _para7:longint; _para8:longint);cdecl;external;

procedure XShapeOffsetShape(_para1:PTDisplay; _para2:TWindow; _para3:longint; _para4:longint; _para5:longint);cdecl;external;

function XShapeQueryExtents(_para1:PTDisplay; _para2:TWindow; _para3:PTBool; _para4:Plongint; _para5:Plongint; 
               _para6:Pdword; _para7:Pdword; _para8:PTBool; _para9:Plongint; _para10:Plongint; 
               _para11:Pdword; _para12:Pdword):TStatus;cdecl;external;

procedure XShapeSelectInput(_para1:PTDisplay; _para2:TWindow; _para3:dword);cdecl;external;

function XShapeInputSelected(_para1:PTDisplay; _para2:TWindow):dword;cdecl;external;

function XShapeGetRectangles(_para1:PTDisplay; _para2:TWindow; _para3:longint; _para4:Plongint; _para5:Plongint):^TXRectangle;cdecl;external;
//// {$endif}

//// {$endif}

//// (* error 
//// #endif /* _SHAPE_H_ */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/shmstr.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/shmstr.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/shmstr.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _SHMSTR_H_}
//// {$define _SHMSTR_H_}
//// {$include <X11/extensions/shmproto.h>}
//// {$ifdef _XSHM_SERVER_}
//// (* error 
////     DrawablePtr		/* dst */, \

in define line 48 *)
//// (* error 
////     ScreenPtr	/* pScreen */, \

in define line 55 *)
    type
      T_ShmFuncs = record
          CreatePixmap : function (_para1:TXSHM_CREATE_PIXMAP_ARGS):TPixmapPtr;cdecl;
          PutImage : procedure (_para1:TXSHM_PUT_IMAGE_ARGS);cdecl;
        end;
      TShmFuncs = T_ShmFuncs;
      TShmFuncsPtr = ^T_ShmFuncs;
//// {$endif}
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/cupproto.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/cupproto.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/cupproto.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XCUPPROTO_H_ /* { */}
//// {$define _XCUPPROTO_H_}
//// {$include <X11/extensions/cup.h>}

const
  X_XcupQueryVersion = 0;  
  X_XcupGetReservedColormapEntries = 1;  
  X_XcupStoreColors = 2;  


type
  T_XcupQueryVersion = record
      reqType : TCARD8;
      xcupReqType : TCARD8;
      length : TCARD16;
      client_major_version : TCARD16;
      client_minor_version : TCARD16;
    end;
  TxXcupQueryVersionReq = T_XcupQueryVersion;

const
  sz_xXcupQueryVersionReq = 8;  

type
  TxXcupQueryVersionReply = record
      _type : TBYTE;
      pad1 : TBOOL;
      sequence_number : TCARD16;
      length : TCARD32;
      server_major_version : TCARD16;
      server_minor_version : TCARD16;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;

const
  sz_xXcupQueryVersionReply = 32;  


type
  T_XcupGetReservedColormapEntries = record
      reqType : TCARD8;
      xcupReqType : TCARD8;
      length : TCARD16;
      screen : TCARD32;
    end;
  TxXcupGetReservedColormapEntriesReq = T_XcupGetReservedColormapEntries;

const
  sz_xXcupGetReservedColormapEntriesReq = 8;  

type
  TxXcupGetReservedColormapEntriesReply = record
      _type : TBYTE;
      pad1 : TBOOL;
      sequence_number : TCARD16;
      length : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
      pad7 : TCARD32;
    end;

const
  sz_xXcupGetReservedColormapEntriesReply = 32;  


type
  T_XcupStoreColors = record
      reqType : TCARD8;
      xcupReqType : TCARD8;
      length : TCARD16;
      cmap : TCARD32;
    end;
  TxXcupStoreColorsReq = T_XcupStoreColors;

const
  sz_xXcupStoreColorsReq = 8;  

type
  TxXcupStoreColorsReply = record
      _type : TBYTE;
      pad1 : TBOOL;
      sequence_number : TCARD16;
      length : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
      pad7 : TCARD32;
    end;

const
  sz_xXcupStoreColorsReply = 32;  
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/EVIproto.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/EVIproto.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/EVIproto.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _EVIPROTO_H_}
//// {$define _EVIPROTO_H_}
//// {$include <X11/extensions/EVI.h>}

const
  X_EVIQueryVersion = 0;  
  X_EVIGetVisualInfo = 1;  
  VisualID = CARD32;  
type
  TVisualID32 = TCARD32;

const
  sz_VisualID32 = 4;  
type
  T_xExtendedVisualInfo = record
      core_visual_id : TVisualID;
      screen : TINT8;
      level : TINT8;
      transparency_type : TCARD8;
      pad0 : TCARD8;
      transparency_value : TCARD32;
      min_hw_colormaps : TCARD8;
      max_hw_colormaps : TCARD8;
      num_colormap_conflicts : TCARD16;
    end;
  TxExtendedVisualInfo = T_xExtendedVisualInfo;

const
  sz_xExtendedVisualInfo = 16;  


type
  T_XEVIQueryVersion = record
      reqType : TCARD8;
      xeviReqType : TCARD8;
      length : TCARD16;
    end;
  TxEVIQueryVersionReq = T_XEVIQueryVersion;

const
  sz_xEVIQueryVersionReq = 4;  



type
  TxEVIQueryVersionReply = record
      _type : TBYTE;
      unused : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      majorVersion : TCARD16;
      minorVersion : TCARD16;
      pad0 : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
    end;

const
  sz_xEVIQueryVersionReply = 32;  


type
  T_XEVIGetVisualInfoReq = record
      reqType : TCARD8;
      xeviReqType : TCARD8;
      length : TCARD16;
      n_visual : TCARD32;
    end;
  TxEVIGetVisualInfoReq = T_XEVIGetVisualInfoReq;

const
  sz_xEVIGetVisualInfoReq = 8;  

type
  T_XEVIGetVisualInfoReply = record
      _type : TBYTE;
      unused : TCARD8;
      sequenceNumber : TCARD16;
      length : TCARD32;
      n_info : TCARD32;
      n_conflicts : TCARD32;
      pad0 : TCARD32;
      pad1 : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
    end;
  TxEVIGetVisualInfoReply = T_XEVIGetVisualInfoReply;

const
  sz_xEVIGetVisualInfoReply = 32;  
//// {$undef VisualID}
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/xf86dga1proto.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/xf86dga1proto.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/xf86dga1proto.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XF86DGAPROTO1_H_}
//// {$define _XF86DGAPROTO1_H_}
//// {$include <X11/extensions/xf86dga1const.h>}


type
  T_XF86DGAQueryVersion = record
      reqType : TCARD8;
      dgaReqType : TCARD8;
      length : TCARD16;
    end;
  TxXF86DGAQueryVersionReq = T_XF86DGAQueryVersion;

const
  sz_xXF86DGAQueryVersionReq = 4;  



type
  TxXF86DGAQueryVersionReply = record
      _type : TBYTE;
      pad1 : TBOOL;
      sequenceNumber : TCARD16;
      length : TCARD32;
      majorVersion : TCARD16;
      minorVersion : TCARD16;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
      pad6 : TCARD32;
    end;

const
  sz_xXF86DGAQueryVersionReply = 32;  


type
  T_XF86DGAGetVideoLL = record
      reqType : TCARD8;
      dgaReqType : TCARD8;
      length : TCARD16;
      screen : TCARD16;
      pad : TCARD16;
    end;
  TxXF86DGAGetVideoLLReq = T_XF86DGAGetVideoLL;

const
  sz_xXF86DGAGetVideoLLReq = 8;  

type
  T_XF86DGAInstallColormap = record
      reqType : TCARD8;
      dgaReqType : TCARD8;
      length : TCARD16;
      screen : TCARD16;
      pad2 : TCARD16;
      id : TCARD32;
    end;
  TxXF86DGAInstallColormapReq = T_XF86DGAInstallColormap;

const
  sz_xXF86DGAInstallColormapReq = 12;  
type
  TxXF86DGAGetVideoLLReply = record
      _type : TBYTE;
      pad1 : TBOOL;
      sequenceNumber : TCARD16;
      length : TCARD32;
      offset : TCARD32;
      width : TCARD32;
      bank_size : TCARD32;
      ram_size : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_xXF86DGAGetVideoLLReply = 32;  


type
  T_XF86DGADirectVideo = record
      reqType : TCARD8;
      dgaReqType : TCARD8;
      length : TCARD16;
      screen : TCARD16;
      enable : TCARD16;
    end;
  TxXF86DGADirectVideoReq = T_XF86DGADirectVideo;

const
  sz_xXF86DGADirectVideoReq = 8;  


type
  T_XF86DGAGetViewPortSize = record
      reqType : TCARD8;
      dgaReqType : TCARD8;
      length : TCARD16;
      screen : TCARD16;
      pad : TCARD16;
    end;
  TxXF86DGAGetViewPortSizeReq = T_XF86DGAGetViewPortSize;

const
  sz_xXF86DGAGetViewPortSizeReq = 8;  
type
  TxXF86DGAGetViewPortSizeReply = record
      _type : TBYTE;
      pad1 : TBOOL;
      sequenceNumber : TCARD16;
      length : TCARD32;
      width : TCARD32;
      height : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_xXF86DGAGetViewPortSizeReply = 32;  


type
  T_XF86DGASetViewPort = record
      reqType : TCARD8;
      dgaReqType : TCARD8;
      length : TCARD16;
      screen : TCARD16;
      pad : TCARD16;
      x : TCARD32;
      y : TCARD32;
    end;
  TxXF86DGASetViewPortReq = T_XF86DGASetViewPort;

const
  sz_xXF86DGASetViewPortReq = 16;  


type
  T_XF86DGAGetVidPage = record
      reqType : TCARD8;
      dgaReqType : TCARD8;
      length : TCARD16;
      screen : TCARD16;
      pad : TCARD16;
    end;
  TxXF86DGAGetVidPageReq = T_XF86DGAGetVidPage;

const
  sz_xXF86DGAGetVidPageReq = 8;  
type
  TxXF86DGAGetVidPageReply = record
      _type : TBYTE;
      pad1 : TBOOL;
      sequenceNumber : TCARD16;
      length : TCARD32;
      vpage : TCARD32;
      pad : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_xXF86DGAGetVidPageReply = 32;  


type
  T_XF86DGASetVidPage = record
      reqType : TCARD8;
      dgaReqType : TCARD8;
      length : TCARD16;
      screen : TCARD16;
      vpage : TCARD16;
    end;
  TxXF86DGASetVidPageReq = T_XF86DGASetVidPage;

const
  sz_xXF86DGASetVidPageReq = 8;  


type
  T_XF86DGAQueryDirectVideo = record
      reqType : TCARD8;
      dgaReqType : TCARD8;
      length : TCARD16;
      screen : TCARD16;
      pad : TCARD16;
    end;
  TxXF86DGAQueryDirectVideoReq = T_XF86DGAQueryDirectVideo;

const
  sz_xXF86DGAQueryDirectVideoReq = 8;  
type
  TxXF86DGAQueryDirectVideoReply = record
      _type : TBYTE;
      pad1 : TBOOL;
      sequenceNumber : TCARD16;
      length : TCARD32;
      flags : TCARD32;
      pad : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_xXF86DGAQueryDirectVideoReply = 32;  


type
  T_XF86DGAViewPortChanged = record
      reqType : TCARD8;
      dgaReqType : TCARD8;
      length : TCARD16;
      screen : TCARD16;
      n : TCARD16;
    end;
  TxXF86DGAViewPortChangedReq = T_XF86DGAViewPortChanged;

const
  sz_xXF86DGAViewPortChangedReq = 8;  
type
  TxXF86DGAViewPortChangedReply = record
      _type : TBYTE;
      pad1 : TBOOL;
      sequenceNumber : TCARD16;
      length : TCARD32;
      result : TCARD32;
      pad : TCARD32;
      pad2 : TCARD32;
      pad3 : TCARD32;
      pad4 : TCARD32;
      pad5 : TCARD32;
    end;

const
  sz_xXF86DGAViewPortChangedReply = 32;  
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/Xge.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/Xge.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/Xge.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    PDisplay  = ^Display;
    Plongint  = ^longint;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XGE_H_}
//// {$define _XGE_H_}
//// {$include <X11/Xlib.h>}
//// {$include <X11/Xfuncproto.h>}

//// (* error 
//// typedef struct {
in declaration at line 46 *)
      var
        pad0 : byte;cvar;public;
        pad1 : word;cvar;public;
        evmask : dword;cvar;public;
//// (* error 
//// } XGenericEventMask;
in declaration at line 50 *)

function XGEQueryExtension(dpy:PTDisplay; event_basep:Plongint; err_basep:Plongint):TBool;cdecl;external;
function XGEQueryVersion(dpy:PTDisplay; major:Plongint; minor:Plongint):TBool;cdecl;external;
//// {$endif}

//// (* error 
//// #endif /* _XGE_H_ */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/scrnsaver.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/scrnsaver.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/scrnsaver.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    PAtom  = ^Atom;
    PDisplay  = ^Display;
    Plongint  = ^longint;
    PVisual  = ^Visual;
    PXID  = ^XID;
    PXScreenSaverInfo  = ^XScreenSaverInfo;
    PXSetWindowAttributes  = ^XSetWindowAttributes;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _SCRNSAVER_H_}
//// {$define _SCRNSAVER_H_}
//// {$include <X11/Xfuncproto.h>}
//// {$include <X11/Xlib.h>}
//// {$include <X11/extensions/saver.h>}










type
  TXScreenSaverNotifyEvent = record
      _type : longint;
      serial : dword;
      send_event : TBool;
      display : ^TDisplay;
      window : TWindow;
      root : TWindow;
      state : longint;
      kind : longint;
      forced : TBool;
      time : TTime;
    end;







  TXScreenSaverInfo = record
      window : TWindow;
      state : longint;
      kind : longint;
      til_or_since : dword;
      idle : dword;
      eventMask : dword;
    end;
//// (* error 
//// extern Bool XScreenSaverQueryExtension (

in declaration at line 64 *)


function XScreenSaverQueryVersion(_para1:PTDisplay; _para2:Plongint; _para3:Plongint):TStatus;cdecl;external;
function XScreenSaverAllocInfo:^TXScreenSaverInfo;cdecl;external;

function XScreenSaverQueryInfo(_para1:PTDisplay; _para2:TDrawable; _para3:PTXScreenSaverInfo):TStatus;cdecl;external;

procedure XScreenSaverSelectInput(_para1:PTDisplay; _para2:TDrawable; _para3:dword);cdecl;external;

procedure XScreenSaverSetAttributes(_para1:PTDisplay; _para2:TDrawable; _para3:longint; _para4:longint; _para5:dword; 
                _para6:dword; _para7:dword; _para8:longint; _para9:dword; _para10:PTVisual; 
                _para11:dword; _para12:PTXSetWindowAttributes);cdecl;external;

procedure XScreenSaverUnsetAttributes(_para1:PTDisplay; _para2:TDrawable);cdecl;external;

function XScreenSaverRegister(_para1:PTDisplay; _para2:longint; _para3:TXID; _para4:TAtom):TStatus;cdecl;external;

function XScreenSaverUnregister(_para1:PTDisplay; _para2:longint):TStatus;cdecl;external;

function XScreenSaverGetRegistered(_para1:PTDisplay; _para2:longint; _para3:PTXID; _para4:PTAtom):TStatus;cdecl;external;

procedure XScreenSaverSuspend(_para1:PTDisplay; _para2:TBool);cdecl;external;
//// {$endif}

//// (* error 
//// #endif /* _SCRNSAVER_H_ */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/Xrender.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/Xrender.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/Xrender.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

Type
Pchar  = ^char;
PDisplay  = ^Display;
Plongint  = ^longint;
PXAnimCursor  = ^XAnimCursor;
PXConicalGradient  = ^XConicalGradient;
PXFixed  = ^XFixed;
PXLinearGradient  = ^XLinearGradient;
PXRadialGradient  = ^XRadialGradient;
PXRenderColor  = ^XRenderColor;
PXTransform  = ^XTransform;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XRENDER_H_}
//// {$define _XRENDER_H_}
//// {$include <X11/Xlib.h>}
//// {$include <X11/Xfuncproto.h>}
//// {$include <X11/Xosdefs.h>}
//// {$include <X11/Xutil.h>}
//// {$include <X11/extensions/render.h>}
type
  TXRenderDirectFormat = record
      red : smallint;
      redMask : smallint;
      green : smallint;
      greenMask : smallint;
      blue : smallint;
      blueMask : smallint;
      alpha : smallint;
      alphaMask : smallint;
    end;

  TXRenderPictFormat = record
      id : TPictFormat;
      _type : longint;
      depth : longint;
      direct : TXRenderDirectFormat;
      colormap : TColormap;
    end;

const
  PictFormatID = 1 shl 0;  
  PictFormatType = 1 shl 1;  
  PictFormatDepth = 1 shl 2;  
  PictFormatRed = 1 shl 3;  
  PictFormatRedMask = 1 shl 4;  
  PictFormatGreen = 1 shl 5;  
  PictFormatGreenMask = 1 shl 6;  
  PictFormatBlue = 1 shl 7;  
  PictFormatBlueMask = 1 shl 8;  
  PictFormatAlpha = 1 shl 9;  
  PictFormatAlphaMask = 1 shl 10;  
  PictFormatColormap = 1 shl 11;  
type
  T_XRenderPictureAttributes = record
      _repeat : longint;
      alpha_map : TPicture;
      alpha_x_origin : longint;
      alpha_y_origin : longint;
      clip_x_origin : longint;
      clip_y_origin : longint;
      clip_mask : TPixmap;
      graphics_exposures : TBool;
      subwindow_mode : longint;
      poly_edge : longint;
      poly_mode : longint;
      dither : TAtom;
      component_alpha : TBool;
    end;
  TXRenderPictureAttributes = T_XRenderPictureAttributes;

  TXRenderColor = record
      red : word;
      green : word;
      blue : word;
      alpha : word;
    end;

  T_XGlyphInfo = record
      width : word;
      height : word;
      x : smallint;
      y : smallint;
      xOff : smallint;
      yOff : smallint;
    end;
  TXGlyphInfo = T_XGlyphInfo;
//// (* error 
////     _Xconst char	    *chars;
 in declarator_list *)

  T_XGlyphElt8 = record
      glyphset : TGlyphSet;
;
      nchars : longint;
      xOff : longint;
      yOff : longint;
    end;
  TXGlyphElt8 = T_XGlyphElt8;
//// (* error 
////     _Xconst unsigned short  *chars;
 in declarator_list *)

  T_XGlyphElt16 = record
      glyphset : TGlyphSet;
;
      nchars : longint;
      xOff : longint;
      yOff : longint;
    end;
  TXGlyphElt16 = T_XGlyphElt16;
//// (* error 
////     _Xconst unsigned int    *chars;
 in declarator_list *)

  T_XGlyphElt32 = record
      glyphset : TGlyphSet;
;
      nchars : longint;
      xOff : longint;
      yOff : longint;
    end;
  TXGlyphElt32 = T_XGlyphElt32;

  TXDouble = Tdouble;

  T_XPointDouble = record
      x : TXDouble;
      y : TXDouble;
    end;
  TXPointDouble = T_XPointDouble;

function XDoubleToFixed(f : longint) : TXFixed;

function XFixedToDouble(f : longint) : longint;

type
  TXFixed = longint;

  T_XPointFixed = record
      x : TXFixed;
      y : TXFixed;
    end;
  TXPointFixed = T_XPointFixed;

  T_XLineFixed = record
      p1 : TXPointFixed;
      p2 : TXPointFixed;
    end;
  TXLineFixed = T_XLineFixed;

  T_XTriangle = record
      p1 : TXPointFixed;
      p2 : TXPointFixed;
      p3 : TXPointFixed;
    end;
  TXTriangle = T_XTriangle;

  T_XCircle = record
      x : TXFixed;
      y : TXFixed;
      radius : TXFixed;
    end;
  TXCircle = T_XCircle;

  T_XTrapezoid = record
      top : TXFixed;
      bottom : TXFixed;
      left : TXLineFixed;
      right : TXLineFixed;
    end;
  TXTrapezoid = T_XTrapezoid;

  T_XTransform = record
      matrix : array[0..2] of array[0..2] of TXFixed;
    end;
  TXTransform = T_XTransform;

  T_XFilters = record
      nfilter : longint;
      filter : ^^char;
      nalias : longint;
      alias : ^smallint;
    end;
  TXFilters = T_XFilters;

  T_XIndexValue = record
      pixel : dword;
      red : word;
      green : word;
      blue : word;
      alpha : word;
    end;
  TXIndexValue = T_XIndexValue;

  T_XAnimCursor = record
      cursor : TCursor;
      delay : dword;
    end;
  TXAnimCursor = T_XAnimCursor;

  T_XSpanFix = record
      left : TXFixed;
      right : TXFixed;
      y : TXFixed;
    end;
  TXSpanFix = T_XSpanFix;

  T_XTrap = record
      top : TXSpanFix;
      bottom : TXSpanFix;
    end;
  TXTrap = T_XTrap;

  T_XLinearGradient = record
      p1 : TXPointFixed;
      p2 : TXPointFixed;
    end;
  TXLinearGradient = T_XLinearGradient;

  T_XRadialGradient = record
      inner : TXCircle;
      outer : TXCircle;
    end;
  TXRadialGradient = T_XRadialGradient;


  T_XConicalGradient = record
      center : TXPointFixed;
      angle : TXFixed;
    end;
  TXConicalGradient = T_XConicalGradient;
//// (* error 
//// Bool XRenderQueryExtension (Display *dpy, int *event_basep, int *error_basep);
//// (* error 
//// Bool XRenderQueryExtension (Display *dpy, int *event_basep, int *error_basep);
//// (* error 
//// Bool XRenderQueryExtension (Display *dpy, int *event_basep, int *error_basep);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)

function XRenderQueryVersion(dpy:PTDisplay; major_versionp:Plongint; minor_versionp:Plongint):TStatus;cdecl;external;
function XRenderQueryFormats(dpy:PTDisplay):TStatus;cdecl;external;
function XRenderQuerySubpixelOrder(dpy:PTDisplay; screen:longint):longint;cdecl;external;
function XRenderSetSubpixelOrder(dpy:PTDisplay; screen:longint; subpixel:longint):TBool;cdecl;external;
//// (* error 
//// XRenderFindVisualFormat (Display *dpy, _Xconst Visual *visual);
 in declarator_list *)
//// (* error 
//// 		   _Xconst XRenderPictFormat	*templ,
//// (* error 
//// 		   int				count);
 in declarator_list *)
 in declarator_list *)
const
  PictStandardARGB32 = 0;  
  PictStandardRGB24 = 1;  
  PictStandardA8 = 2;  
  PictStandardA4 = 3;  
  PictStandardA1 = 4;  
  PictStandardNUM = 5;  

function XRenderFindStandardFormat(dpy:PTDisplay; format:longint):^TXRenderPictFormat;cdecl;external;
//// (* error 
//// 			    _Xconst XRenderPictFormat	*format,
//// (* error 
//// 			    int				*num);
 in declarator_list *)
 in declarator_list *)
//// (* error 
//// 		      _Xconst XRenderPictFormat		*format,
//// (* error 
//// 		      unsigned long			valuemask,
//// (* error 
//// 		      _Xconst XRenderPictureAttributes	*attributes);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
//// 		      _Xconst XRenderPictureAttributes  *attributes);
 in declarator_list *)
//// (* error 
//// 				 _Xconst XRectangle *rects,
//// (* error 
//// 				 int		    n);
 in declarator_list *)
 in declarator_list *)
procedure XRenderSetPictureClipRegion(dpy:PTDisplay; picture:TPicture; r:TRegion);cdecl;external;
procedure XRenderSetPictureTransform(dpy:PTDisplay; picture:TPicture; transform:PTXTransform);cdecl;external;
procedure XRenderFreePicture(dpy:PTDisplay; picture:TPicture);cdecl;external;
procedure XRenderComposite(dpy:PTDisplay; op:longint; src:TPicture; mask:TPicture; dst:TPicture; 
            src_x:longint; src_y:longint; mask_x:longint; mask_y:longint; dst_x:longint; 
            dst_y:longint; width:dword; height:dword);cdecl;external;
//// (* error 
//// XRenderCreateGlyphSet (Display *dpy, _Xconst XRenderPictFormat *format);
 in declarator_list *)
function XRenderReferenceGlyphSet(dpy:PTDisplay; existing:TGlyphSet):TGlyphSet;cdecl;external;
procedure XRenderFreeGlyphSet(dpy:PTDisplay; glyphset:TGlyphSet);cdecl;external;
//// (* error 
//// 		  _Xconst Glyph		*gids,
//// (* error 
//// 		  _Xconst XGlyphInfo	*glyphs,
//// (* error 
//// 		  int			nglyphs,
//// (* error 
//// 		  _Xconst char		*images,
//// (* error 
//// 		  int			nbyte_images);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
//// 		   _Xconst Glyph    *gids,
//// (* error 
//// 		   int		    nglyphs);
 in declarator_list *)
 in declarator_list *)
//// (* error 
//// 			 _Xconst XRenderPictFormat  *maskFormat,
//// (* error 
//// 			 GlyphSet		    glyphset,
//// (* error 
//// 			 int			    xSrc,
//// (* error 
//// 			 int			    ySrc,
//// (* error 
//// 			 int			    xDst,
//// (* error 
//// 			 int			    yDst,
//// (* error 
//// 			 _Xconst char		    *string,
//// (* error 
//// 			 int			    nchar);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
//// 			  _Xconst XRenderPictFormat *maskFormat,
//// (* error 
//// 			  GlyphSet		    glyphset,
//// (* error 
//// 			  int			    xSrc,
//// (* error 
//// 			  int			    ySrc,
//// (* error 
//// 			  int			    xDst,
//// (* error 
//// 			  int			    yDst,
//// (* error 
//// 			  _Xconst unsigned short    *string,
//// (* error 
//// 			  int			    nchar);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
//// 			  _Xconst XRenderPictFormat *maskFormat,
//// (* error 
//// 			  GlyphSet		    glyphset,
//// (* error 
//// 			  int			    xSrc,
//// (* error 
//// 			  int			    ySrc,
//// (* error 
//// 			  int			    xDst,
//// (* error 
//// 			  int			    yDst,
//// (* error 
//// 			  _Xconst unsigned int	    *string,
//// (* error 
//// 			  int			    nchar);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
//// 		       _Xconst XRenderPictFormat    *maskFormat,
//// (* error 
//// 		       int			    xSrc,
//// (* error 
//// 		       int			    ySrc,
//// (* error 
//// 		       int			    xDst,
//// (* error 
//// 		       int			    yDst,
//// (* error 
//// 		       _Xconst XGlyphElt8	    *elts,
//// (* error 
//// 		       int			    nelt);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
//// 			_Xconst XRenderPictFormat   *maskFormat,
//// (* error 
//// 			int			    xSrc,
//// (* error 
//// 			int			    ySrc,
//// (* error 
//// 			int			    xDst,
//// (* error 
//// 			int			    yDst,
//// (* error 
//// 			_Xconst XGlyphElt16	    *elts,
//// (* error 
//// 			int			    nelt);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
//// 			_Xconst XRenderPictFormat   *maskFormat,
//// (* error 
//// 			int			    xSrc,
//// (* error 
//// 			int			    ySrc,
//// (* error 
//// 			int			    xDst,
//// (* error 
//// 			int			    yDst,
//// (* error 
//// 			_Xconst XGlyphElt32	    *elts,
//// (* error 
//// 			int			    nelt);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
//// 		      _Xconst XRenderColor  *color,
//// (* error 
//// 		      int		    x,
//// (* error 
//// 		      int		    y,
//// (* error 
//// 		      unsigned int	    width,
//// (* error 
//// 		      unsigned int	    height);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
//// 		       _Xconst XRenderColor *color,
//// (* error 
//// 		       _Xconst XRectangle   *rectangles,
//// (* error 
//// 		       int		    n_rects);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
//// 			    _Xconst XRenderPictFormat	*maskFormat,
//// (* error 
//// 			    int			xSrc,
//// (* error 
//// 			    int			ySrc,
//// (* error 
//// 			    _Xconst XTrapezoid	*traps,
//// (* error 
//// 			    int			ntrap);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
//// 			    _Xconst XRenderPictFormat	*maskFormat,
//// (* error 
//// 			   int			xSrc,
//// (* error 
//// 			   int			ySrc,
//// (* error 
//// 			   _Xconst XTriangle	*triangles,
//// (* error 
//// 			   int			ntriangle);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
//// 			    _Xconst XRenderPictFormat	*maskFormat,
//// (* error 
//// 			  int			xSrc,
//// (* error 
//// 			  int			ySrc,
//// (* error 
//// 			  _Xconst XPointFixed	*points,
//// (* error 
//// 			  int			npoint);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
//// 			_Xconst XRenderPictFormat	*maskFormat,
//// (* error 
//// 			int			xSrc,
//// (* error 
//// 			int			ySrc,
//// (* error 
//// 			_Xconst XPointFixed	*points,
//// (* error 
//// 			int			npoint);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
//// (* error 
//// 			    _Xconst XRenderPictFormat	*maskFormat,
//// (* error 
//// 			    int			    xSrc,
//// (* error 
//// 			    int			    ySrc,
//// (* error 
//// 			    int			    xDst,
//// (* error 
//// 			    int			    yDst,
//// (* error 
//// 			    _Xconst XPointDouble    *fpoints,
//// (* error 
//// 			    int			    npoints,
//// (* error 
//// 			    int			    winding);
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
 in declarator_list *)
function XRenderParseColor(dpy:PTDisplay; spec:Pchar; def:PTXRenderColor):TStatus;cdecl;external;
function XRenderCreateCursor(dpy:PTDisplay; source:TPicture; x:dword; y:dword):TCursor;cdecl;external;
function XRenderQueryFilters(dpy:PTDisplay; drawable:TDrawable):^TXFilters;cdecl;external;
procedure XRenderSetPictureFilter(dpy:PTDisplay; picture:TPicture; filter:Pchar; params:PTXFixed; nparams:longint);cdecl;external;
function XRenderCreateAnimCursor(dpy:PTDisplay; ncursor:longint; cursors:PTXAnimCursor):TCursor;cdecl;external;
//// (* error 
//// 		 _Xconst XTrap	    *traps,
//// (* error 
//// 		 int		    ntrap);
 in declarator_list *)
 in declarator_list *)
function XRenderCreateSolidFill(dpy:PTDisplay; color:PTXRenderColor):TPicture;cdecl;external;
function XRenderCreateLinearGradient(dpy:PTDisplay; gradient:PTXLinearGradient; stops:PTXFixed; colors:PTXRenderColor; nstops:longint):TPicture;cdecl;external;
function XRenderCreateRadialGradient(dpy:PTDisplay; gradient:PTXRadialGradient; stops:PTXFixed; colors:PTXRenderColor; nstops:longint):TPicture;cdecl;external;
function XRenderCreateConicalGradient(dpy:PTDisplay; gradient:PTXConicalGradient; stops:PTXFixed; colors:PTXRenderColor; nstops:longint):TPicture;cdecl;external;
//// {$endif}

//// (* error 
//// #endif /* _XRENDER_H_ */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/extensions/saver.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/extensions/saver.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/extensions/saver.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _SAVER_H_}
//// {$define _SAVER_H_}

const
  ScreenSaverName = 'MIT-SCREEN-SAVER';  
  ScreenSaverPropertyName = '_MIT_SCREEN_SAVER_ID';  
  ScreenSaverNotifyMask = $00000001;  
  ScreenSaverCycleMask = $00000002;  
  ScreenSaverMajorVersion = 1;  
  ScreenSaverMinorVersion = 1;  
  ScreenSaverOff = 0;  
  ScreenSaverOn = 1;  
  ScreenSaverCycle = 2;  
  ScreenSaverDisabled = 3;  
  ScreenSaverBlanked = 0;  
  ScreenSaverInternal = 1;  
  ScreenSaverExternal = 2;  
  ScreenSaverNotify = 0;  
  ScreenSaverNumberEvents = 1;  
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/ICE/ICEproto.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/ICE/ICEproto.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/ICE/ICEproto.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _ICEPROTO_H_}
//// {$define _ICEPROTO_H_}
//// {$include <X11/Xmd.h>}
type
  TiceMsg = record
      majorOpcode : TCARD8;
      minorOpcode : TCARD8;
      data : array[0..1] of TCARD8;
      length : TCARD32;
    end;



  TiceErrorMsg = record
      majorOpcode : TCARD8;
      minorOpcode : TCARD8;
      errorClass : TCARD16;
      length : TCARD32;
      offendingMinorOpcode : TCARD8;
      severity : TCARD8;
      unused : TCARD16;
      offendingSequenceNum : TCARD32;
    end;

  TiceByteOrderMsg = record
      majorOpcode : TCARD8;
      minorOpcode : TCARD8;
      byteOrder : TCARD8;
      unused : TCARD8;
      length : TCARD32;
    end;






  TiceConnectionSetupMsg = record
      majorOpcode : TCARD8;
      minorOpcode : TCARD8;
      versionCount : TCARD8;
      authCount : TCARD8;
      length : TCARD32;
      mustAuthenticate : TCARD8;
      unused : array[0..6] of TCARD8;
    end;



  TiceAuthRequiredMsg = record
      majorOpcode : TCARD8;
      minorOpcode : TCARD8;
      authIndex : TCARD8;
      unused1 : TCARD8;
      length : TCARD32;
      authDataLength : TCARD16;
      unused2 : array[0..5] of TCARD8;
    end;



  TiceAuthReplyMsg = record
      majorOpcode : TCARD8;
      minorOpcode : TCARD8;
      unused1 : array[0..1] of TCARD8;
      length : TCARD32;
      authDataLength : TCARD16;
      unused2 : array[0..5] of TCARD8;
    end;



  TiceAuthNextPhaseMsg = record
      majorOpcode : TCARD8;
      minorOpcode : TCARD8;
      unused1 : array[0..1] of TCARD8;
      length : TCARD32;
      authDataLength : TCARD16;
      unused2 : array[0..5] of TCARD8;
    end;




  TiceConnectionReplyMsg = record
      majorOpcode : TCARD8;
      minorOpcode : TCARD8;
      versionIndex : TCARD8;
      unused : TCARD8;
      length : TCARD32;
    end;







  TiceProtocolSetupMsg = record
      majorOpcode : TCARD8;
      minorOpcode : TCARD8;
      protocolOpcode : TCARD8;
      mustAuthenticate : TCARD8;
      length : TCARD32;
      versionCount : TCARD8;
      authCount : TCARD8;
      unused : array[0..5] of TCARD8;
    end;




  TiceProtocolReplyMsg = record
      majorOpcode : TCARD8;
      minorOpcode : TCARD8;
      versionIndex : TCARD8;
      protocolOpcode : TCARD8;
      length : TCARD32;
    end;

  TicePingMsg = TiceMsg;

  TicePingReplyMsg = TiceMsg;

  TiceWantToCloseMsg = TiceMsg;

  TiceNoCloseMsg = TiceMsg;


const
  sz_iceMsg = 8;  
  sz_iceErrorMsg = 16;  
  sz_iceByteOrderMsg = 8;  
  sz_iceConnectionSetupMsg = 16;  
  sz_iceAuthRequiredMsg = 16;  
  sz_iceAuthReplyMsg = 16;  
  sz_iceAuthNextPhaseMsg = 16;  
  sz_iceConnectionReplyMsg = 8;  
  sz_iceProtocolSetupMsg = 16;  
  sz_iceProtocolReplyMsg = 8;  
  sz_icePingMsg = 8;  
  sz_icePingReplyMsg = 8;  
  sz_iceWantToCloseMsg = 8;  
  sz_iceNoCloseMsg = 8;  
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/ICE/ICE.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/ICE/ICE.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/ICE/ICE.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _ICE_H_}
//// {$define _ICE_H_}


const
  IceProtoMajor = 1;  
  IceProtoMinor = 0;  

  IceLSBfirst = 0;  
  IceMSBfirst = 1;  

  ICE_Error = 0;  
  ICE_ByteOrder = 1;  
  ICE_ConnectionSetup = 2;  
  ICE_AuthRequired = 3;  
  ICE_AuthReply = 4;  
  ICE_AuthNextPhase = 5;  
  ICE_ConnectionReply = 6;  
  ICE_ProtocolSetup = 7;  
  ICE_ProtocolReply = 8;  
  ICE_Ping = 9;  
  ICE_PingReply = 10;  
  ICE_WantToClose = 11;  
  ICE_NoClose = 12;  

  IceCanContinue = 0;  
  IceFatalToProtocol = 1;  
  IceFatalToConnection = 2;  

  IceBadMinor = $8000;  
  IceBadState = $8001;  
  IceBadLength = $8002;  
  IceBadValue = $8003;  

  IceBadMajor = 0;  
  IceNoAuth = 1;  
  IceNoVersion = 2;  
  IceSetupFailed = 3;  
  IceAuthRejected = 4;  
  IceAuthFailed = 5;  
  IceProtocolDuplicate = 6;  
  IceMajorOpcodeDuplicate = 7;  
  IceUnknownProtocol = 8;  
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/ICE/ICEutil.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/ICE/ICEutil.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/ICE/ICEutil.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    Pchar  = ^char;
    PFILE  = ^FILE;
    PIceAuthDataEntry  = ^IceAuthDataEntry;
    PIceAuthFileEntry  = ^IceAuthFileEntry;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _ICEUTIL_H_}
//// {$define _ICEUTIL_H_}
//// {$include <X11/Xfuncproto.h>}
//// {$include <stdio.h>}

//// (* error 
//// typedef struct {
in declaration at line 43 *)
      var
        protocol_data_length : word;cvar;public;
        protocol_data : ^char;cvar;public;
        network_id : ^char;cvar;public;
        auth_name : ^char;cvar;public;
        auth_data_length : word;cvar;public;
        auth_data : ^char;cvar;public;
//// (* error 
//// } IceAuthFileEntry;
in declaration at line 50 *)

    type
      TIceAuthDataEntry = record
          protocol_name : ^char;
          network_id : ^char;
          auth_name : ^char;
          auth_data_length : word;
          auth_data : ^char;
        end;



    const
      IceAuthLockSuccess = 0;      

      IceAuthLockError = 1;      

      IceAuthLockTimeout = 2;      


function IceAuthFileName:^char;cdecl;external;

function IceLockAuthFile(_para1:Pchar; _para2:longint; _para3:longint; _para4:longint):longint;cdecl;external;

procedure IceUnlockAuthFile(_para1:Pchar);cdecl;external;

function IceReadAuthFileEntry(_para1:PTFILE):^TIceAuthFileEntry;cdecl;external;

procedure IceFreeAuthFileEntry(_para1:PTIceAuthFileEntry);cdecl;external;

function IceWriteAuthFileEntry(_para1:PTFILE; _para2:PTIceAuthFileEntry):TStatus;cdecl;external;

function IceGetAuthFileEntry(_para1:Pchar; _para2:Pchar; _para3:Pchar):^TIceAuthFileEntry;cdecl;external;

function IceGenerateMagicCookie(_para1:longint):^char;cdecl;external;

procedure IceSetPaAuthData(_para1:longint; _para2:PTIceAuthDataEntry);cdecl;external;
//// {$endif}

//// (* error 
//// #endif /* _ICEUTIL_H_ */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/ICE/ICEconn.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/ICE/ICEconn.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/ICE/ICEconn.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _ICECONN_H_}
//// {$define _ICECONN_H_}
//// {$include <X11/ICE/ICElib.h>}

type
  T_IceSavedReplyWait = record
      reply_wait : ^TIceReplyWaitInfo;
      reply_ready : TBool;
      next : ^T_IceSavedReplyWait;
    end;

  T_IcePingWait = record
      ping_reply_proc : TIcePingReplyProc;
      client_data : TIcePointer;
      next : ^T_IcePingWait;
    end;

  T_IcePoProtocol = record
      vendor : ^char;
      release : ^char;
      version_count : longint;
      version_recs : ^TIcePoVersionRec;
      auth_count : longint;
      auth_names : ^^char;
      auth_procs : ^TIcePoAuthProc;
      io_error_proc : TIceIOErrorProc;
    end;

  T_IcePaProtocol = record
      vendor : ^char;
      release : ^char;
      version_count : longint;
      version_recs : ^TIcePaVersionRec;
      protocol_setup_proc : TIceProtocolSetupProc;
      protocol_activate_proc : TIceProtocolActivateProc;
      auth_count : longint;
      auth_names : ^^char;
      auth_procs : ^TIcePaAuthProc;
      host_based_auth_proc : TIceHostBasedAuthProc;
      io_error_proc : TIceIOErrorProc;
    end;

  T_IceProtocol = record
      protocol_name : ^char;
      orig_client : ^T_IcePoProtocol;
      accept_client : ^T_IcePaProtocol;
    end;

  T_IceProcessMsgInfo = record
      in_use : TBool;
      my_opcode : longint;
      protocol : ^T_IceProtocol;
      client_data : TIcePointer;
      accept_flag : TBool;
      process_msg_proc : record
          case longint of
            0 : ( accept_client : TIcePaProcessMsgProc );
            1 : ( orig_client : TIcePoProcessMsgProc );
          end;
    end;

  T_IceConnectToMeInfo = record
      his_version_index : longint;
      my_version_index : longint;
      his_vendor : ^char;
      his_release : ^char;
      my_auth_index : char;
      my_auth_state : TIcePointer;
      must_authenticate : TBool;
    end;

  T_IceProtoSetupToMeInfo = record
      his_opcode : longint;
      my_opcode : longint;
      his_version_index : longint;
      my_version_index : longint;
      his_vendor : ^char;
      his_release : ^char;
      my_auth_index : char;
      my_auth_state : TIcePointer;
      must_authenticate : TBool;
    end;

  T_IceConnectToYouInfo = record
      auth_active : TBool;
      my_auth_index : char;
      my_auth_state : TIcePointer;
    end;

  T_IceProtoSetupToYouInfo = record
      my_opcode : longint;
      my_auth_count : longint;
      my_auth_indices : ^longint;
      auth_active : TBool;
      my_auth_index : char;
      my_auth_state : TIcePointer;
    end;




































  T_IceConn = record
      flag0 : word;
      connection_status : TIceConnectStatus;
      my_ice_version_index : byte;
      trans_conn : ^T_XtransConnInfo;
      send_sequence : dword;
      receive_sequence : dword;
      connection_string : ^char;
      vendor : ^char;
      release : ^char;
      inbuf : ^char;
      inbufptr : ^char;
      inbufmax : ^char;
      outbuf : ^char;
      outbufptr : ^char;
      outbufmax : ^char;
      scratch : ^char;
      scratch_size : dword;
      dispatch_level : longint;
      context : TIcePointer;
      process_msg_info : ^T_IceProcessMsgInfo;
      his_min_opcode : char;
      his_max_opcode : char;
      open_ref_count : byte;
      proto_ref_count : byte;
      listen_obj : TIceListenObj;
      saved_reply_waits : ^T_IceSavedReplyWait;
      ping_waits : ^T_IcePingWait;
      connect_to_you : ^T_IceConnectToYouInfo;
      protosetup_to_you : ^T_IceProtoSetupToYouInfo;
      connect_to_me : ^T_IceConnectToMeInfo;
      protosetup_to_me : ^T_IceProtoSetupToMeInfo;
    end;


const
  bm_T_IceConn_io_ok = $1;
  bp_T_IceConn_io_ok = 0;
  bm_T_IceConn_swap = $2;
  bp_T_IceConn_swap = 1;
  bm_T_IceConn_waiting_for_byteorder = $4;
  bp_T_IceConn_waiting_for_byteorder = 2;
  bm_T_IceConn_skip_want_to_close = $8;
  bp_T_IceConn_skip_want_to_close = 3;
  bm_T_IceConn_want_to_close = $10;
  bp_T_IceConn_want_to_close = 4;
  bm_T_IceConn_free_asap = $20;
  bp_T_IceConn_free_asap = 5;
  bm_T_IceConn_unused1 = $C0;
  bp_T_IceConn_unused1 = 6;
  bm_T_IceConn_unused2 = $FF00;
  bp_T_IceConn_unused2 = 8;

function io_ok(var a : T_IceConn) : dword;
procedure set_io_ok(var a : T_IceConn; __io_ok : dword);
function swap(var a : T_IceConn) : dword;
procedure set_swap(var a : T_IceConn; __swap : dword);
function waiting_for_byteorder(var a : T_IceConn) : dword;
procedure set_waiting_for_byteorder(var a : T_IceConn; __waiting_for_byteorder : dword);
function skip_want_to_close(var a : T_IceConn) : dword;
procedure set_skip_want_to_close(var a : T_IceConn; __skip_want_to_close : dword);
function want_to_close(var a : T_IceConn) : dword;
procedure set_want_to_close(var a : T_IceConn; __want_to_close : dword);
function free_asap(var a : T_IceConn) : dword;
procedure set_free_asap(var a : T_IceConn; __free_asap : dword);
function unused1(var a : T_IceConn) : dword;
procedure set_unused1(var a : T_IceConn; __unused1 : dword);
function unused2(var a : T_IceConn) : dword;
procedure set_unused2(var a : T_IceConn; __unused2 : dword);
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/ICE/ICElib.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/ICE/ICElib.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/ICE/ICElib.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    PBool  = ^Bool;
    Pchar  = ^char;
    PIceAcceptStatus  = ^IceAcceptStatus;
    PIceListenObj  = ^IceListenObj;
    PIcePaAuthProc  = ^IcePaAuthProc;
    PIcePaVersionRec  = ^IcePaVersionRec;
    PIcePointer  = ^IcePointer;
    PIceReplyWaitInfo  = ^IceReplyWaitInfo;
    Plongint  = ^longint;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _ICELIB_H_}
//// {$define _ICELIB_H_}
//// {$include <X11/ICE/ICE.h>}
//// {$include <X11/Xfuncproto.h>}

const
  Bool = longint;  
  Status = longint;  
  True = 1;  
  False = 0;  
type
  TIcePointer = pointer;

  TIcePoAuthStatus = (IcePoAuthHaveReply,IcePoAuthRejected,IcePoAuthFailed,
    IcePoAuthDoneCleanup);

  TIcePaAuthStatus = (IcePaAuthContinue,IcePaAuthAccepted,IcePaAuthRejected,
    IcePaAuthFailed);

  TIceConnectStatus = (IceConnectPending,IceConnectAccepted,IceConnectRejected,
    IceConnectIOError);

  TIceProtocolSetupStatus = (IceProtocolSetupSuccess,IceProtocolSetupFailure,
    IceProtocolSetupIOError,IceProtocolAlreadyActive
    );

  TIceAcceptStatus = (IceAcceptSuccess,IceAcceptFailure,IceAcceptBadMalloc
    );

  TIceCloseStatus = (IceClosedNow,IceClosedASAP,IceConnectionInUse,
    IceStartedShutdownNegotiation);

  TIceProcessMessagesStatus = (IceProcessMessagesSuccess,IceProcessMessagesIOError,
    IceProcessMessagesConnectionClosed);

  TIceReplyWaitInfo = record
      sequence_of_request : dword;
      major_opcode_of_request : longint;
      minor_opcode_of_request : longint;
      reply : TIcePointer;
    end;

  TIceConn = ^T_IceConn;

  TIceListenObj = ^T_IceListenObj;


  TIceWatchProc = procedure (_para1:TIceConn; _para2:TIcePointer; _para3:TBool; _para4:PTIcePointer);cdecl;


  TIcePoProcessMsgProc = procedure (_para1:TIceConn; _para2:TIcePointer; _para3:longint; _para4:dword; _para5:TBool; 
                _para6:PTIceReplyWaitInfo; _para7:PTBool);cdecl;


  TIcePaProcessMsgProc = procedure (_para1:TIceConn; _para2:TIcePointer; _para3:longint; _para4:dword; _para5:TBool);cdecl;

  TIcePoVersionRec = record
      major_version : longint;
      minor_version : longint;
      process_msg_proc : TIcePoProcessMsgProc;
    end;

  TIcePaVersionRec = record
      major_version : longint;
      minor_version : longint;
      process_msg_proc : TIcePaProcessMsgProc;
    end;


  TIcePoAuthProc = function (_para1:TIceConn; _para2:PTIcePointer; _para3:TBool; _para4:TBool; _para5:longint; 
               _para6:TIcePointer; _para7:Plongint; _para8:PTIcePointer; _para9:PPchar):TIcePoAuthStatus;cdecl;


  TIcePaAuthProc = function (_para1:TIceConn; _para2:PTIcePointer; _para3:TBool; _para4:longint; _para5:TIcePointer; 
               _para6:Plongint; _para7:PTIcePointer; _para8:PPchar):TIcePaAuthStatus;cdecl;


  TIceHostBasedAuthProc = function (_para1:Pchar):TBool;cdecl;


  TIceProtocolSetupProc = function (_para1:TIceConn; _para2:longint; _para3:longint; _para4:Pchar; _para5:Pchar; 
               _para6:PTIcePointer; _para7:PPchar):TStatus;cdecl;


  TIceProtocolActivateProc = procedure (_para1:TIceConn; _para2:TIcePointer);cdecl;


  TIceIOErrorProc = procedure (_para1:TIceConn);cdecl;


  TIcePingReplyProc = procedure (_para1:TIceConn; _para2:TIcePointer);cdecl;


  TIceErrorHandler = procedure (_para1:TIceConn; _para2:TBool; _para3:longint; _para4:dword; _para5:longint; 
                _para6:longint; _para7:TIcePointer);cdecl;


  TIceIOErrorHandler = procedure (_para1:TIceConn);cdecl;

//// (* error 
//// extern int IceRegisterForProtocolSetup (

in declaration at line 218 *)


function IceRegisterForProtocolReply(_para1:Pchar; _para2:Pchar; _para3:Pchar; _para4:longint; _para5:PTIcePaVersionRec; 
               _para6:longint; _para7:PPchar; _para8:PTIcePaAuthProc; _para9:TIceHostBasedAuthProc; _para10:TIceProtocolSetupProc; 
               _para11:TIceProtocolActivateProc; _para12:TIceIOErrorProc):longint;cdecl;external;

function IceOpenConnection(_para1:Pchar; _para2:TIcePointer; _para3:TBool; _para4:longint; _para5:longint; 
               _para6:Pchar):TIceConn;cdecl;external;

function IceGetConnectionContext(_para1:TIceConn):TIcePointer;cdecl;external;

function IceListenForConnections(_para1:Plongint; _para2:PPTIceListenObj; _para3:longint; _para4:Pchar):TStatus;cdecl;external;

function IceListenForWellKnownConnections(_para1:Pchar; _para2:Plongint; _para3:PPTIceListenObj; _para4:longint; _para5:Pchar):TStatus;cdecl;external;

function IceGetListenConnectionNumber(_para1:TIceListenObj):longint;cdecl;external;

function IceGetListenConnectionString(_para1:TIceListenObj):^char;cdecl;external;

function IceComposeNetworkIdList(_para1:longint; _para2:PTIceListenObj):^char;cdecl;external;

procedure IceFreeListenObjs(_para1:longint; _para2:PTIceListenObj);cdecl;external;

procedure IceSetHostBasedAuthProc(_para1:TIceListenObj; _para2:TIceHostBasedAuthProc);cdecl;external;

function IceAcceptConnection(_para1:TIceListenObj; _para2:PTIceAcceptStatus):TIceConn;cdecl;external;

procedure IceSetShutdownNegotiation(_para1:TIceConn; _para2:TBool);cdecl;external;

function IceCheckShutdownNegotiation(_para1:TIceConn):TBool;cdecl;external;

function IceCloseConnection(_para1:TIceConn):TIceCloseStatus;cdecl;external;

function IceAddConnectionWatch(_para1:TIceWatchProc; _para2:TIcePointer):TStatus;cdecl;external;

procedure IceRemoveConnectionWatch(_para1:TIceWatchProc; _para2:TIcePointer);cdecl;external;

function IceProtocolSetup(_para1:TIceConn; _para2:longint; _para3:TIcePointer; _para4:TBool; _para5:Plongint; 
               _para6:Plongint; _para7:PPchar; _para8:PPchar; _para9:longint; _para10:Pchar):TIceProtocolSetupStatus;cdecl;external;

function IceProtocolShutdown(_para1:TIceConn; _para2:longint):TStatus;cdecl;external;

function IceProcessMessages(_para1:TIceConn; _para2:PTIceReplyWaitInfo; _para3:PTBool):TIceProcessMessagesStatus;cdecl;external;

function IcePing(_para1:TIceConn; _para2:TIcePingReplyProc; _para3:TIcePointer):TStatus;cdecl;external;

function IceAllocScratch(_para1:TIceConn; _para2:dword):^char;cdecl;external;

function IceFlush(_para1:TIceConn):longint;cdecl;external;

function IceGetOutBufSize(_para1:TIceConn):longint;cdecl;external;

function IceGetInBufSize(_para1:TIceConn):longint;cdecl;external;

function IceConnectionStatus(_para1:TIceConn):TIceConnectStatus;cdecl;external;

function IceVendor(_para1:TIceConn):^char;cdecl;external;

function IceRelease(_para1:TIceConn):^char;cdecl;external;

function IceProtocolVersion(_para1:TIceConn):longint;cdecl;external;

function IceProtocolRevision(_para1:TIceConn):longint;cdecl;external;

function IceConnectionNumber(_para1:TIceConn):longint;cdecl;external;

function IceConnectionString(_para1:TIceConn):^char;cdecl;external;

function IceLastSentSequenceNumber(_para1:TIceConn):dword;cdecl;external;

function IceLastReceivedSequenceNumber(_para1:TIceConn):dword;cdecl;external;

function IceSwapping(_para1:TIceConn):TBool;cdecl;external;

function IceSetErrorHandler(_para1:TIceErrorHandler):TIceErrorHandler;cdecl;external;

function IceSetIOErrorHandler(_para1:TIceIOErrorHandler):TIceIOErrorHandler;cdecl;external;

function IceGetPeerName(_para1:TIceConn):^char;cdecl;external;

function IceInitThreads:TStatus;cdecl;external;

procedure IceAppLockConn(_para1:TIceConn);cdecl;external;

procedure IceAppUnlockConn(_para1:TIceConn);cdecl;external;
//// {$endif}

//// (* error 
//// #endif /* _ICELIB_H_ */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/ICE/ICEmsg.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/ICE/ICEmsg.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/ICE/ICEmsg.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    Pchar  = ^char;
    PIcePointer  = ^IcePointer;
    Plongint  = ^longint;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _ICEMSG_H_}
//// {$define _ICEMSG_H_}
//// {$include <X11/Xfuncproto.h>}
//// {$include <X11/ICE/ICEconn.h>}

//// (* error 
//// extern Status _IceRead (

in declaration at line 46 *)


procedure _IceReadSkip(_para1:TIceConn; _para2:dword);cdecl;external;

procedure _IceWrite(_para1:TIceConn; _para2:dword; _para3:Pchar);cdecl;external;

procedure _IceErrorBadMinor(_para1:TIceConn; _para2:longint; _para3:longint; _para4:longint);cdecl;external;

procedure _IceErrorBadState(_para1:TIceConn; _para2:longint; _para3:longint; _para4:longint);cdecl;external;

procedure _IceErrorBadLength(_para1:TIceConn; _para2:longint; _para3:longint; _para4:longint);cdecl;external;

procedure _IceErrorBadValue(_para1:TIceConn; _para2:longint; _para3:longint; _para4:longint; _para5:longint; 
                _para6:TIcePointer);cdecl;external;

function _IcePoMagicCookie1Proc(_para1:TIceConn; _para2:PTIcePointer; _para3:TBool; _para4:TBool; _para5:longint; 
               _para6:TIcePointer; _para7:Plongint; _para8:PTIcePointer; _para9:PPchar):TIcePoAuthStatus;cdecl;external;

function _IcePaMagicCookie1Proc(_para1:TIceConn; _para2:PTIcePointer; _para3:TBool; _para4:longint; _para5:TIcePointer; 
               _para6:Plongint; _para7:PTIcePointer; _para8:PPchar):TIcePaAuthStatus;cdecl;external;

    function IceValidIO(_iceConn : longint) : longint;    


//// (* error 
////         IceFlush (_iceConn); \
in declaration at line 127 *)
//// (* error 
////         IceFlush (_iceConn); \
//// (* error 
////     _pMsg = (_msgType *) _iceConn->outbufptr; \
in declaration at line 128 *)
//// (* error 
////     _pMsg = (_msgType *) _iceConn->outbufptr; \
//// (* error 
////     _pMsg->majorOpcode = _major; \
in declaration at line 129 *)
//// (* error 
////     _pMsg->majorOpcode = _major; \
//// (* error 
////     _pMsg->minorOpcode = _minor; \
in declaration at line 130 *)
//// (* error 
////     _pMsg->minorOpcode = _minor; \
//// (* error 
////     _pMsg->length = (_headerSize - SIZEOF (iceMsg)) >> 3; \
in declaration at line 131 *)
//// (* error 
////     _pMsg->length = (_headerSize - SIZEOF (iceMsg)) >> 3; \
//// (* error 
////     _iceConn->outbufptr += _headerSize; \
in declaration at line 132 *)
//// (* error 
////     _iceConn->outbufptr += _headerSize; \
//// (* error 
////     _iceConn->send_sequence++
in declaration at line 138 *)
//// (* error 
////         IceFlush (_iceConn); \
//// (* error 
////     _pMsg = (_msgType *) _iceConn->outbufptr; \
in declaration at line 139 *)
//// (* error 
////     _pMsg = (_msgType *) _iceConn->outbufptr; \
//// (* error 
////     if ((_iceConn->outbufptr + \
in declaration at line 142 *)
//// (* error 
////         _pData = (char *) _pMsg + _headerSize; \
//// (* error 
////     else \
in declaration at line 144 *)
//// (* error 
////         _pData = NULL; \
//// (* error 
////     _pMsg->majorOpcode = _major; \
in declaration at line 145 *)
//// (* error 
////     _pMsg->majorOpcode = _major; \
//// (* error 
////     _pMsg->minorOpcode = _minor; \
in declaration at line 146 *)
//// (* error 
////     _pMsg->minorOpcode = _minor; \
//// (* error 
////     _pMsg->length = ((_headerSize - SIZEOF (iceMsg)) >> 3) + (_extra); \
in declaration at line 147 *)
//// (* error 
////     _pMsg->length = ((_headerSize - SIZEOF (iceMsg)) >> 3) + (_extra); \
//// (* error 
////     _iceConn->outbufptr += (_headerSize + ((_extra) << 3)); \
in declaration at line 148 *)
//// (* error 
////     _iceConn->outbufptr += (_headerSize + ((_extra) << 3)); \
//// (* error 
////     _iceConn->send_sequence++
in declaration at line 153 *)
//// (* error 
////     iceMsg *_pMsg; \
//// (* error 
////     IceGetHeader (_iceConn, _major, _minor, SIZEOF (iceMsg), iceMsg, _pMsg); \
in declaration at line 154 *)
//// (* error 
////     IceGetHeader (_iceConn, _major, _minor, SIZEOF (iceMsg), iceMsg, _pMsg); \
//// (* error 
//// }
in declaration at line 159 *)
//// (* error 
////     iceErrorMsg	*_pMsg; \
//// (* error 
//// \
in declaration at line 162 *)
//// (* error 
//// 	SIZEOF (iceErrorMsg), iceErrorMsg, _pMsg); \
//// (* error 
////     _pMsg->length += (_dataLength); \
in declaration at line 163 *)
//// (* error 
////     _pMsg->length += (_dataLength); \
//// (* error 
////     _pMsg->offendingMinorOpcode = (CARD8) _offendingMinorOpcode; \
in declaration at line 164 *)
//// (* error 
////     _pMsg->offendingMinorOpcode = (CARD8) _offendingMinorOpcode; \
//// (* error 
////     _pMsg->severity = (CARD8) _severity; \
in declaration at line 165 *)
//// (* error 
////     _pMsg->severity = (CARD8) _severity; \
//// (* error 
////     _pMsg->offendingSequenceNum = (CARD32) _offendingSequenceNum; \
in declaration at line 166 *)
//// (* error 
////     _pMsg->offendingSequenceNum = (CARD32) _offendingSequenceNum; \
//// (* error 
////     _pMsg->errorClass = (CARD16) _errorClass; \
in declaration at line 167 *)
//// (* error 
////     _pMsg->errorClass = (CARD16) _errorClass; \
//// (* error 
//// }

in declaration at line 179 *)
//// (* error 
//// 	IceFlush (_iceConn); \
//// (* error 
////         _IceWrite (_iceConn, (unsigned long) (_bytes), _data); \
in declaration at line 180 *)
//// (* error 
////         _IceWrite (_iceConn, (unsigned long) (_bytes), _data); \
//// (* error 
////     } \
in declaration at line 184 *)
//// (* error 
////         memcpy (_iceConn->outbufptr, _data, _bytes); \
//// (* error 
////         _iceConn->outbufptr += (_bytes); \
in declaration at line 185 *)
//// (* error 
////         _iceConn->outbufptr += (_bytes); \
//// (* error 
////     } \
in define line 190 *)
    function IceWriteData32(_iceConn,_bytes,_data : longint) : longint;    


//// (* error 
//// { \
in declaration at line 205 *)
//// (* error 
//// 	IceFlush (_iceConn); \
//// (* error 
////     _IceWrite (_iceConn, (unsigned long) (_bytes), _data); \
in declaration at line 206 *)
//// (* error 
////     _IceWrite (_iceConn, (unsigned long) (_bytes), _data); \
//// (* error 
//// }

in declaration at line 217 *)
//// (* error 
////     char _dummy[7] = { 0 }; \
//// (* error 
////     IceWriteData (_iceConn, (_bytes), _dummy); \
in declaration at line 218 *)
//// (* error 
////     IceWriteData (_iceConn, (_bytes), _dummy); \
//// (* error 
//// }

in declaration at line 228 *)
//// (* error 
////     unsigned long _bytes; \
//// (* error 
////     IceReadMessageHeader (_iceConn, _headerSize, _msgType, _pMsg); \
in declaration at line 229 *)
//// (* error 
////     IceReadMessageHeader (_iceConn, _headerSize, _msgType, _pMsg); \
//// (* error 
////     _bytes = (_pMsg->length << 3) - (_headerSize - SIZEOF (iceMsg)); \
in declaration at line 230 *)
//// (* error 
////     _bytes = (_pMsg->length << 3) - (_headerSize - SIZEOF (iceMsg)); \
//// (* error 
////     if ((_iceConn->inbufmax - _iceConn->inbufptr) >= _bytes) \
in declaration at line 233 *)
//// (* error 
//// 	_IceRead (_iceConn, _bytes, _iceConn->inbufptr); \
//// (* error 
//// 	_pData = _iceConn->inbufptr; \
in declaration at line 234 *)
//// (* error 
//// 	_pData = _iceConn->inbufptr; \
//// (* error 
//// 	_iceConn->inbufptr += _bytes; \
in declaration at line 235 *)
//// (* error 
//// 	_iceConn->inbufptr += _bytes; \
//// (* error 
////     } \
in declaration at line 239 *)
//// (* error 
//// 	_pData = malloc (_bytes); \
//// (* error 
////         if (_pData) \
in declaration at line 241 *)
//// (* error 
//// 	    _IceRead (_iceConn, _bytes, _pData); \
//// (* error 
////         else \
in declaration at line 243 *)
//// (* error 
//// 	    _IceReadSkip (_iceConn, _bytes); \
//// (* error 
////     } \
in declaration at line 250 *)
//// (* error 
////     _pMsg = (_msgType *) (_iceConn->inbuf);
in declaration at line 254 *)
//// (* error 
//// { \
in declaration at line 260 *)
//// (* error 
//// 	_iceConn->inbufptr); \
//// (* error 
////     _pMsg = (_msgType *) (_iceConn->inbuf); \
in declaration at line 261 *)
//// (* error 
////     _pMsg = (_msgType *) (_iceConn->inbuf); \
//// (* error 
////     _iceConn->inbufptr += (_headerSize - SIZEOF (iceMsg)); \
in declaration at line 262 *)
//// (* error 
////     _iceConn->inbufptr += (_headerSize - SIZEOF (iceMsg)); \
//// (* error 
//// }
in declaration at line 266 *)
//// (* error 
////     _IceRead (_iceConn, (unsigned long) (_bytes), (char *) _pData); \
//// (* error 
//// #define IceReadData16(_iceConn, _swap, _bytes, _pData) \
in declaration at line 270 *)
//// (* error 
////     _IceRead (_iceConn, (unsigned long) (_bytes), (char *) _pData); \
//// (* error 
//// }
in declaration at line 275 *)
//// (* error 
////     _IceRead (_iceConn, (unsigned long) (_bytes), (char *) _pData); \
//// (* error 
//// }

in declaration at line 286 *)
//// (* error 
////     char _dummy[7]; \
//// (* error 
////     _IceRead (_iceConn, (unsigned long) (_bytes), _dummy); \
in declaration at line 287 *)
//// (* error 
////     _IceRead (_iceConn, (unsigned long) (_bytes), _dummy); \
//// (* error 
//// }
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/AsciiSinkP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/AsciiSinkP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/AsciiSinkP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}





//// {$ifndef _XawAsciiSinkP_h}
//// {$define _XawAsciiSinkP_h}

//// {$include <X11/Xaw3d/TextSinkP.h> }
//// {$include <X11/Xaw3d/AsciiSink.h> }

type
  T_AsciiSinkClassPart = record
      foo : longint;
    end;
  TAsciiSinkClassPart = T_AsciiSinkClassPart;


  T_AsciiSinkClassRec = record
      object_class : TObjectClassPart;
      text_sink_class : TTextSinkClassPart;
      ascii_sink_class : TAsciiSinkClassPart;
    end;
  TAsciiSinkClassRec = T_AsciiSinkClassRec;
  var
    asciiSinkClassRec : TAsciiSinkClassRec;cvar;external;





type
  TAsciiSinkPart = record
      font : ^TXFontStruct;
      echo : TBoolean;
      display_nonprinting : TBoolean;
      normgc : TGC;
      invgc : TGC;
      xorgc : TGC;
      insertCursorOn : TPixmap;
      laststate : TXawTextInsertState;
      cursor_x : smallint;
      cursor_y : smallint;
    end;


  T_AsciiSinkRec = record
      object : TObjectPart;
      text_sink : TTextSinkPart;
      ascii_sink : TAsciiSinkPart;
    end;
  TAsciiSinkRec = T_AsciiSinkRec;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/AllWidgets.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/AllWidgets.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/AllWidgets.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XawAllWidgets_h}
//// {$define _XawAllWidgets_h}

  var
    XawWidgetArray : ^TXmuWidgetNode;cvar;external;
    XawWidgetCount : longint;cvar;external;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/FormP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/FormP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/FormP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}





//// {$ifndef _XawFormP_h}
//// {$define _XawFormP_h}
//// {$include <X11/Xaw3d/Form.h>}

const
  XtREdgeType = 'EdgeType';  
type
  TLayoutState = (LayoutPending,LayoutInProgress,LayoutDone
    );
//// (* error 
//// #define XtInheritLayout ((Boolean (*)())_XtInherit)
in define line 61 *)

      TFormClassPart = record
          layout : function :TBoolean;cdecl;
        end;


      T_FormClassRec = record
          core_class : TCoreClassPart;
          composite_class : TCompositeClassPart;
          constraint_class : TConstraintClassPart;
          form_class : TFormClassPart;
        end;
      TFormClassRec = T_FormClassRec;
      var
        formClassRec : TFormClassRec;cvar;external;









    type
      T_FormPart = record
          default_spacing : longint;
          old_width : TDimension;
          old_height : TDimension;
          no_refigure : longint;
          needs_relayout : TBoolean;
          resize_in_layout : TBoolean;
          preferred_width : TDimension;
          preferred_height : TDimension;
          resize_is_no_op : TBoolean;
        end;
      TFormPart = T_FormPart;

      T_FormRec = record
          core : TCorePart;
          composite : TCompositePart;
          constraint : TConstraintPart;
          form : TFormPart;
        end;
      TFormRec = T_FormRec;













      T_FormConstraintsPart = record
          top : TXtEdgeType;
          bottom : TXtEdgeType;
          left : TXtEdgeType;
          right : TXtEdgeType;
          dx : longint;
          dy : longint;
          horiz_base : TWidget;
          vert_base : TWidget;
          allow_resize : TBoolean;
          virtual_width : smallint;
          virtual_height : smallint;
          new_x : TPosition;
          new_y : TPosition;
          layout_state : TLayoutState;
          deferred_resize : TBoolean;
        end;
      TFormConstraintsPart = T_FormConstraintsPart;

      T_FormConstraintsRec = record
          form : TFormConstraintsPart;
        end;
      TFormConstraintsRec = T_FormConstraintsRec;
      TFormConstraints = ^T_FormConstraintsRec;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/SmeLine.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/SmeLine.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/SmeLine.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _SmeLine_h}
//// {$define _SmeLine_h}
//// {$include <X11/Xaw3d/Sme.h>}
//// {$include <X11/Xmu/Converters.h>}



const
  XtCLineWidth = 'LineWidth';  
  XtCStipple = 'Stipple';  
  XtNlineWidth = 'lineWidth';  
  XtNstipple = 'stipple';  
type
  TSmeLineObjectClass = ^T_SmeLineClassRec;

  TSmeLineObject = ^T_SmeLineRec;
  var
    smeLineObjectClass : TWidgetClass;cvar;external;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/DialogP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/DialogP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/DialogP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}





//// {$ifndef _DialogP_h}
//// {$define _DialogP_h}
//// {$include <X11/Xaw3d/Dialog.h>}
//// {$include <X11/Xaw3d/FormP.h>}
type
  TDialogClassPart = record
      empty : longint;
    end;

  T_DialogClassRec = record
      core_class : TCoreClassPart;
      composite_class : TCompositeClassPart;
      constraint_class : TConstraintClassPart;
      form_class : TFormClassPart;
      dialog_class : TDialogClassPart;
    end;
  TDialogClassRec = T_DialogClassRec;
  var
    dialogClassRec : TDialogClassRec;cvar;external;








type
  T_DialogPart = record
      _label : TString;
      value : TString;
      icon : TPixmap;
      iconW : TWidget;
      labelW : TWidget;
      valueW : TWidget;
    end;
  TDialogPart = T_DialogPart;

  T_DialogRec = record
      core : TCorePart;
      composite : TCompositePart;
      constraint : TConstraintPart;
      form : TFormPart;
      dialog : TDialogPart;
    end;
  TDialogRec = T_DialogRec;

  TDialogConstraintsPart = record
      empty : longint;
    end;

  T_DialogConstraintsRec = record
      form : TFormConstraintsPart;
      dialog : TDialogConstraintsPart;
    end;
  TDialogConstraintsRec = T_DialogConstraintsRec;
  TDialogConstraints = ^T_DialogConstraintsRec;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Panner.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/Panner.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/Panner.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XawPanner_h}
//// {$define _XawPanner_h}
//// {$include <X11/Xaw3d/Reports.h>}


//// {$ifndef _XtStringDefs_h_}

const
  XtNresize = 'resize';  
  XtCResize = 'Resize';  
//// {$endif}

const
  XtNallowOff = 'allowOff';  
  XtCAllowOff = 'AllowOff';  
  XtNbackgroundStipple = 'backgroundStipple';  
  XtCBackgroundStipple = 'BackgroundStipple';  
  XtNdefaultScale = 'defaultScale';  
  XtCDefaultScale = 'DefaultScale';  
  XtNcanvasWidth = 'canvasWidth';  
  XtCCanvasWidth = 'CanvasWidth';  
  XtNcanvasHeight = 'canvasHeight';  
  XtCCanvasHeight = 'CanvasHeight';  
  XtNinternalSpace = 'internalSpace';  
  XtCInternalSpace = 'InternalSpace';  
  XtNlineWidth = 'lineWidth';  
  XtCLineWidth = 'LineWidth';  
  XtNrubberBand = 'rubberBand';  
  XtCRubberBand = 'RubberBand';  
  XtNshadowThickness = 'shadowThickness';  
  XtCShadowThickness = 'ShadowThickness';  
  XtNshadowColor = 'shadowColor';  
  XtCShadowColor = 'ShadowColor';  
  XtNsliderX = 'sliderX';  
  XtCSliderX = 'SliderX';  
  XtNsliderY = 'sliderY';  
  XtCSliderY = 'SliderY';  
  XtNsliderWidth = 'sliderWidth';  
  XtCSliderWidth = 'SliderWidth';  
  XtNsliderHeight = 'sliderHeight';  
  XtCSliderHeight = 'SliderHeight';  

  var
    pannerWidgetClass : TWidgetClass;cvar;external;
type
  TPannerWidgetClass = ^T_PannerClassRec;

  TPannerWidget = ^T_PannerRec;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/SmeBSB.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/SmeBSB.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/SmeBSB.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _SmeBSB_h}
//// {$define _SmeBSB_h}
//// {$include <X11/Xmu/Converters.h>}
//// {$include "Xaw3dP.h"}
//// {$include <X11/Xaw3d/Sme.h>}


type
  TSmeBSBObjectClass = ^T_SmeBSBClassRec;

  TSmeBSBObject = ^T_SmeBSBRec;
  var
    smeBSBObjectClass : TWidgetClass;cvar;external;

const
  XtNleftBitmap = 'leftBitmap';  
  XtNleftMargin = 'leftMargin';  
  XtNleftWhitespace = 'leftWhitespace';  
  XtNrightBitmap = 'rightBitmap';  
  XtNrightMargin = 'rightMargin';  
  XtNrightWhitespace = 'rightWhitespace';  
  XtNvertSpace = 'vertSpace';  
  XtNmenuName = 'menuName';  
  XtNunderline = 'underline';  
//// {$ifdef XAW_INTERNATIONALIZATION}
//// {$ifndef XtNfontSet}

const
  XtNfontSet = 'fontSet';  
//// {$endif}
//// {$ifndef XtCFontSet}

const
  XtCFontSet = 'FontSet';  
//// {$endif}
//// {$endif}

const
  XtCLeftBitmap = 'LeftBitmap';  
  XtCRightBitmap = 'RightBitmap';  
  XtCHorizontalMargins = 'HorizontalMargins';  
  XtCVertSpace = 'VertSpace';  
  XtCMenuName = 'MenuName';  
  XtCUnderline = 'Underline';  
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Sme.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/Sme.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/Sme.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _Sme_h}
//// {$define _Sme_h}
//// {$include "Xaw3dP.h"}
//// {$include <X11/RectObj.h>}


//// {$ifdef XAW_INTERNATIONALIZATION}
//// {$ifndef XtCInternational}

const
  XtCInternational = 'International';  
//// {$endif}
//// {$ifndef XtNinternational}

const
  XtNinternational = 'international';  
//// {$endif}
//// {$endif}
type
  TSmeObjectClass = ^T_SmeClassRec;

  TSmeObject = ^T_SmeRec;
  var
    smeObjectClass : TWidgetClass;cvar;external;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Cardinals.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/Cardinals.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/Cardinals.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _Cardinals_h}
//// {$define _Cardinals_h}

function ZERO : TCardinal;  

function ONE : TCardinal;  

function TWO : TCardinal;  

function THREE : TCardinal;  

function FOUR : TCardinal;  

function FIVE : TCardinal;  

function SIX : TCardinal;  

function SEVEN : TCardinal;  

function EIGHT : TCardinal;  

function NINE : TCardinal;  

function TEN : TCardinal;  

//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Toggle.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/Toggle.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/Toggle.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XawToggle_h}
//// {$define _XawToggle_h}

//// {$include <X11/Xaw3d/Command.h>}



const
  XtCWidget = 'Widget';  
  XtCState = 'State';  
  XtCRadioGroup = 'RadioGroup';  
  XtCRadioData = 'RadioData';  
//// {$ifndef _XtStringDefs_h_}

const
  XtRWidget = 'Widget';  
//// {$endif}

const
  XtNstate = 'state';  
  XtNradioGroup = 'radioGroup';  
  XtNradioData = 'radioData';  
  var
    toggleWidgetClass : TWidgetClass;cvar;external;
type
  TToggleWidgetClass = ^T_ToggleClassRec;

  TToggleWidget = ^T_ToggleRec;


//// (* error 
//// extern void XawToggleChangeRadioGroup(
//// {$if NeedFunctionPrototypes}

//// {$endif}
in declaration at line 133 *)

//// {$if NeedFunctionPrototypes}

//// {$endif}

function XawToggleGetCurrent(_para1:TWidget):TXtPointer;cdecl;external;

//// {$if NeedFunctionPrototypes}

//// {$endif}

procedure XawToggleSetCurrent(_para1:TWidget; _para2:TXtPointer);cdecl;external;

//// {$if NeedFunctionPrototypes}

//// {$endif}

procedure XawToggleUnsetCurrent(_para1:TWidget);cdecl;external;
//// {$endif}

//// (* error 
//// #endif /* _XawToggle_h */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/TipP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/TipP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/TipP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XawTipP_h}
//// {$define _XawTipP_h}
//// {$include "Xaw3dP.h"}
//// {$include <X11/Xaw3d/Tip.h>}
type
  TTipClassPart = record
      extension : TXtPointer;
    end;

  T_TipClassRec = record
      core_class : TCoreClassPart;
      tip_class : TTipClassPart;
    end;
  TTipClassRec = T_TipClassRec;
  var
    tipClassRec : TTipClassRec;cvar;external;

//// {$ifdef XAW_INTERNATIONALIZATION}
//// {$endif}

//// {$ifdef XAW_INTERNATIONALIZATION}
//// {$endif}
type
  T_TipPart = record
      foreground : TPixel;
      font : ^TXFontStruct;
      fontset : TXFontSet;
      internal_width : TDimension;
      internal_height : TDimension;
      _label : TString;
      backing_store : longint;
      timeout : longint;
      gc : TGC;
      timer : TXtIntervalId;
      international : TBoolean;
      encoding : byte;
    end;
  TTipPart = T_TipPart;

  T_TipRec = record
      core : TCorePart;
      tip : TTipPart;
    end;
  TTipRec = T_TipRec;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Simple.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/Simple.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/Simple.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _Simple_h}
//// {$define _Simple_h}
//// {$include "Xaw3dP.h"}
//// {$include <X11/Xmu/Converters.h>}



const
  XtNcursor = 'cursor';  
  XtNcursorName = 'cursorName';  
  XtNinsensitiveBorder = 'insensitiveBorder';  
  XtCInsensitive = 'Insensitive';  
//// {$ifdef XAW_INTERNATIONALIZATION}
//// {$ifndef XtCInternational}

const
  XtCInternational = 'International';  
//// {$endif}
//// {$ifndef XtNinternational}

const
  XtNinternational = 'international';  
//// {$endif}
//// {$endif}
type
  TSimpleWidgetClass = ^T_SimpleClassRec;

  TSimpleWidget = ^T_SimpleRec;
  var
    simpleWidgetClass : TWidgetClass;cvar;external;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/SimpleMenP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/SimpleMenP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/SimpleMenP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _SimpleMenuP_h}
//// {$define _SimpleMenuP_h}
//// {$include <X11/Xaw3d/SimpleMenu.h>}
//// {$include <X11/Xaw3d/SmeP.h>}
//// {$include <X11/ShellP.h>}

type
  TSimpleMenuClassPart = record
      extension : TXtPointer;
    end;

  T_SimpleMenuClassRec = record
      core_class : TCoreClassPart;
      composite_class : TCompositeClassPart;
      shell_class : TShellClassPart;
      override_shell_class : TOverrideShellClassPart;
      simpleMenu_class : TSimpleMenuClassPart;
    end;
  TSimpleMenuClassRec = T_SimpleMenuClassRec;
  var
    simpleMenuClassRec : TSimpleMenuClassRec;cvar;external;























type
  T_SimpleMenuPart = record
      label_string : TString;
      _label : TSmeObject;
      label_class : TWidgetClass;
      top_margin : TDimension;
      bottom_margin : TDimension;
      left_whitespace : TDimension;
      right_whitespace : TDimension;
      row_height : TDimension;
      cursor : TCursor;
      popup_entry : TSmeObject;
      menu_on_screen : TBoolean;
      backing_store : longint;
      recursive_set_values : TBoolean;
      menu_width : TBoolean;
      menu_height : TBoolean;
      entry_set : TSmeObject;
      threeD : TWidget;
      first_entry : ^TSmeObject;
      current_first : ^TSmeObject;
      last_y : TDimension;
      first_y : longint;
      jump_val : longint;
      too_tall : TBoolean;
      didnt_fit : TBoolean;
      sub_menu : TWidget;
      state : byte;
    end;
  TSimpleMenuPart = T_SimpleMenuPart;

  T_SimpleMenuRec = record
      core : TCorePart;
      composite : TCompositePart;
      shell : TShellPart;
      override : TOverrideShellPart;
      simple_menu : TSimpleMenuPart;
    end;
  TSimpleMenuRec = T_SimpleMenuRec;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/AsciiTextP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/AsciiTextP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/AsciiTextP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}






//// {$ifndef _AsciiTextP_h}
//// {$define _AsciiTextP_h}
//// {$include "Xaw3dP.h"}
//// {$include <X11/Xaw3d/TextP.h>}
//// {$include <X11/Xaw3d/AsciiText.h>}
//// {$include <X11/Xaw3d/AsciiSrc.h>}
//// {$ifdef XAW_INTERNATIONALIZATION}
//// {$include <X11/Xaw3d/MultiSrc.h>}
//// {$endif}
type
  TAsciiClassPart = record
      empty : longint;
    end;

  T_AsciiTextClassRec = record
      core_class : TCoreClassPart;
      simple_class : TSimpleClassPart;
      text_class : TTextClassPart;
      ascii_class : TAsciiClassPart;
    end;
  TAsciiTextClassRec = T_AsciiTextClassRec;
  var
    asciiTextClassRec : TAsciiTextClassRec;cvar;external;
type
  TAsciiPart = record
      foo : char;
    end;

  T_AsciiRec = record
      core : TCorePart;
      simple : TSimplePart;
      text : TTextPart;
      ascii : TAsciiPart;
    end;
  TAsciiRec = T_AsciiRec;
//// {$ifdef ASCII_STRING}

  TAsciiStringClassPart = record
      empty : longint;
    end;

  T_AsciiStringClassRec = record
      core_class : TCoreClassPart;
      simple_class : TSimpleClassPart;
      text_class : TTextClassPart;
      ascii_class : TAsciiClassPart;
      string_class : TAsciiStringClassPart;
    end;
  TAsciiStringClassRec = T_AsciiStringClassRec;
  var
    asciiStringClassRec : TAsciiStringClassRec;cvar;external;
type
  TAsciiStringPart = record
      foo : char;
    end;

  T_AsciiStringRec = record
      core : TCorePart;
      simple : TSimplePart;
      text : TTextPart;
      ascii : TAsciiPart;
      ascii_str : TAsciiStringPart;
    end;
  TAsciiStringRec = T_AsciiStringRec;
//// {$endif}

//// {$ifdef ASCII_DISK}
type
  TAsciiDiskClassPart = record
      empty : longint;
    end;

  T_AsciiDiskClassRec = record
      core_class : TCoreClassPart;
      simple_class : TSimpleClassPart;
      text_class : TTextClassPart;
      ascii_class : TAsciiClassPart;
      disk_class : TAsciiDiskClassPart;
    end;
  TAsciiDiskClassRec = T_AsciiDiskClassRec;
  var
    asciiDiskClassRec : TAsciiDiskClassRec;cvar;external;
type
  TAsciiDiskPart = record
      foo : char;
    end;

  T_AsciiDiskRec = record
      core : TCorePart;
      simple : TSimplePart;
      text : TTextPart;
      ascii : TAsciiPart;
      ascii_disk : TAsciiDiskPart;
    end;
  TAsciiDiskRec = T_AsciiDiskRec;
//// {$endif}

//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/StripChart.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/StripChart.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/StripChart.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XawStripChart_h}
//// {$define _XawStripChart_h}



const
  DEFAULT_JUMP = -(1);  
//// {$ifndef _XtStringDefs_h_}

const
  XtNhighlight = 'highlight';  
  XtNupdate = 'update';  
//// {$endif}

const
  XtCJumpScroll = 'JumpScroll';  
  XtCScale = 'Scale';  
  XtNgetValue = 'getValue';  
  XtNjumpScroll = 'jumpScroll';  
  XtNminScale = 'minScale';  
  XtNscale = 'scale';  
  XtNvmunix = 'vmunix';  
type
  TStripChartWidget = ^T_StripChartRec;

  TStripChartWidgetClass = ^T_StripChartClassRec;
  var
    stripChartWidgetClass : TWidgetClass;cvar;external;
//// {$endif}



// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/TextSrcP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/TextSrcP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/TextSrcP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

Type
Pchar  = ^char;
PDisplay  = ^Display;
Plongint  = ^longint;
Pwchar_t  = ^wchar_t;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}





//// {$ifndef _XawTextSrcP_h}
//// {$define _XawTextSrcP_h}

//// {$include <X11/Xaw3d/TextSrc.h>}
//// {$include <X11/Xaw3d/TextP.h>	/* This source works with the Text widget. */}

type
  TTextSrcExtRec = record
      next_extension : TXtPointer;
      record_type : TXrmQuark;
      version : longint;
      record_size : TCardinal;
      Input : function :longint;cdecl;
    end;
  TTextSrcExt = ^TTextSrcExtRec;

  T_TextSrcClassPart = record
      Read : function :TXawTextPosition;cdecl;
      Replace : function :longint;cdecl;
      Scan : function :TXawTextPosition;cdecl;
      Search : function :TXawTextPosition;cdecl;
      SetSelection : procedure ;cdecl;
      ConvertSelection : function :TBoolean;cdecl;
    end;
  TTextSrcClassPart = T_TextSrcClassPart;


  T_TextSrcClassRec = record
      object_class : TObjectClassPart;
      textSrc_class : TTextSrcClassPart;
    end;
  TTextSrcClassRec = T_TextSrcClassRec;
  var
    textSrcClassRec : TTextSrcClassRec;cvar;external;




type
  TTextSrcPart = record
      edit_mode : TXawTextEditType;
      text_format : TXrmQuark;
    end;


  T_TextSrcRec = record
      object : TObjectPart;
      textSrc : TTextSrcPart;
    end;
  TTextSrcRec = T_TextSrcRec;

//// {$if NeedFunctionPrototypes}

//// {$endif}

function _XawTextWCToMB(_para1:PTDisplay; _para2:PTwchar_t; _para3:Plongint):^char;cdecl;external;
//// {$if NeedFunctionPrototypes}

//// {$endif}

function _XawTextMBToWC(_para1:PTDisplay; _para2:Pchar; _para3:Plongint):^Twchar_t;cdecl;external;

type

  T_XawBooleanFunc = function :TBoolean;cdecl;

  T_XawIntFunc = function :longint;cdecl;

  T_XawTextPositionFunc = function :TXawTextPosition;cdecl;

  T_XawTextVoidFunc = procedure ;cdecl;

function XtInheritInput : T_XawTextPositionFunc;  

function XtInheritRead : T_XawTextPositionFunc;  

function XtInheritReplace : T_XawIntFunc;  

function XtInheritScan : T_XawTextPositionFunc;  

function XtInheritSearch : T_XawTextPositionFunc;  

function XtInheritSetSelection : T_XawTextVoidFunc;  

function XtInheritConvertSelection : T_XawBooleanFunc;  

const
  XtTextSrcExtVersion = 1;  
  XtTextSrcExtTypeString = 'XT_TEXTSRC_EXT';  
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/MultiSrc.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/MultiSrc.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/MultiSrc.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}






//// {$ifndef _XawMultiSrc_h}
//// {$define _XawMultiSrc_h}
//// {$include <X11/Xaw3d/TextSrc.h>}



  var
    multiSrcObjectClass : TWidgetClass;cvar;external;
type
  TMultiSrcObjectClass = ^T_MultiSrcClassRec;

  TMultiSrcObject = ^T_MultiSrcRec;


const
  MultiSourceObjectClass = MultiSrcObjectClass;  
  MultiSourceObject = MultiSrcObject;  

  XtCDataCompression = 'DataCompression';  
  XtCPieceSize = 'PieceSize';  
  XtCType = 'Type';  
  XtCUseStringInPlace = 'UseStringInPlace';  
  XtNdataCompression = 'dataCompression';  
  XtNpieceSize = 'pieceSize';  
  XtNtype = 'type';  
  XtNuseStringInPlace = 'useStringInPlace';  
  XtRMultiType = 'MultiType';  
  XtEstring = 'string';  
  XtEfile = 'file';  

//// (* error 
//// extern void XawMultiSourceFreeString(
//// {$if NeedFunctionPrototypes}

//// {$endif}
in declaration at line 132 *)
//// {$if NeedFunctionPrototypes}

//// {$endif}

function _XawMultiSave(_para1:TWidget):TBoolean;cdecl;external;
//// {$if NeedFunctionPrototypes}
//// (* error 
////     _Xconst char*	/* name */

//// {$endif}
 in declarator_list *)
//// {$endif}

//// (* error 
//// 

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/BoxP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/BoxP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/BoxP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}





//// {$ifndef _XawBoxP_h}
//// {$define _XawBoxP_h}

//// {$include <X11/Xaw3d/Box.h>}
//// {$include <X11/Xmu/Converters.h>}

type
  TBoxClassPart = record
      empty : longint;
    end;


  T_BoxClassRec = record
      core_class : TCoreClassPart;
      composite_class : TCompositeClassPart;
      box_class : TBoxClassPart;
    end;
  TBoxClassRec = T_BoxClassRec;
  var
    boxClassRec : TBoxClassRec;cvar;external;



type
  TBoxPart = record
      h_space : TDimension;
      v_space : TDimension;
      orientation : TXtOrientation;
      preferred_width : TDimension;
      preferred_height : TDimension;
      last_query_width : TDimension;
      last_query_height : TDimension;
      last_query_mode : TXtGeometryMask;
    end;


  T_BoxRec = record
      core : TCorePart;
      composite : TCompositePart;
      box : TBoxPart;
    end;
  TBoxRec = T_BoxRec;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/ViewportP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/ViewportP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/ViewportP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _ViewportP_h}
//// {$define _ViewportP_h}
//// {$include <X11/Xaw3d/Viewport.h>}
//// {$include <X11/Xaw3d/FormP.h>}
//// {$include <X11/Xaw3d/ThreeDP.h>}
type
  TViewportClassPart = record
      empty : longint;
    end;

  T_ViewportClassRec = record
      core_class : TCoreClassPart;
      composite_class : TCompositeClassPart;
      constraint_class : TConstraintClassPart;
      form_class : TFormClassPart;
      viewport_class : TViewportClassPart;
    end;
  TViewportClassRec = T_ViewportClassRec;
  var
    viewportClassRec : TViewportClassRec;cvar;external;











type
  T_ViewportPart = record
      forcebars : TBoolean;
      allowhoriz : TBoolean;
      allowvert : TBoolean;
      usebottom : TBoolean;
      useright : TBoolean;
      report_callbacks : TXtCallbackList;
      clip : TWidget;
      child : TWidget;
      horiz_bar : TWidget;
      vert_bar : TWidget;
      threeD : TThreeDWidget;
    end;
  TViewportPart = T_ViewportPart;

  T_ViewportRec = record
      core : TCorePart;
      composite : TCompositePart;
      constraint : TConstraintPart;
      form : TFormPart;
      viewport : TViewportPart;
    end;
  TViewportRec = T_ViewportRec;




  TViewportConstraintsPart = record
      reparented : TBoolean;
    end;

  T_ViewportConstraintsRec = record
      form : TFormConstraintsPart;
      viewport : TViewportConstraintsPart;
    end;
  TViewportConstraintsRec = T_ViewportConstraintsRec;
  TViewportConstraints = ^T_ViewportConstraintsRec;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/MultiSink.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/MultiSink.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/MultiSink.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}





//// {$ifndef _XawMultiSink_h}
//// {$define _XawMultiSink_h}

//// {$include <X11/Xaw3d/TextSink.h>}


const
  XtCOutput = 'Output';  
  XtNdisplayNonprinting = 'displayNonprinting';  
  XtNecho = 'echo';  
//// {$ifndef XtNfontSet		/*Sheeran, Omron KK, 93/03/04*/}

const
  XtNfontSet = 'fontSet';  
//// {$endif}
//// {$ifndef XtCFontSet		/*Sheeran, Omron KK, 93/03/04*/}

const
  XtCFontSet = 'FontSet';  
//// {$endif}

  var
    multiSinkObjectClass : TWidgetClass;cvar;external;
type
  TMultiSinkObjectClass = ^T_MultiSinkClassRec;

  TMultiSinkObject = ^T_MultiSinkRec;
//// {$endif}



// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/TemplateP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/TemplateP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/TemplateP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _TemplateP_h}
//// {$define _TemplateP_h}
//// {$include <X11/Xaw3d/Template.h>}

//// {$include <X11/CoreP.h>}


const
  XtRTemplateResource = 'TemplateResource';  
type
  TTemplateClassPart = record
      empty : longint;
    end;

  T_TemplateClassRec = record
      core_class : TCoreClassPart;
      template_class : TTemplateClassPart;
    end;
  TTemplateClassRec = T_TemplateClassRec;
  var
    templateClassRec : TTemplateClassRec;cvar;external;


type
  TTemplatePart = record
      resource : ^char;
    end;

  T_TemplateRec = record
      core : TCorePart;
      template : TTemplatePart;
    end;
  TTemplateRec = T_TemplateRec;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/AsciiSrcP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/AsciiSrcP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/AsciiSrcP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}






//// {$ifndef _XawAsciiSrcP_h}
//// {$define _XawAsciiSrcP_h}
//// {$include <X11/Xaw3d/TextSrcP.h>}
//// {$include <X11/Xaw3d/AsciiSrc.h>}

//// {$ifdef L_tmpnam}

const
  TMPSIZ = L_tmpnam;  
//// {$else}
//// {$ifdef PATH_MAX}

const
  TMPSIZ = PATH_MAX;  
//// {$else}


const
  TMPSIZ = 1024;  
//// {$endif}
//// {$endif}


function MAGIC_VALUE : TXawTextPosition;  

function streq(a,b : longint) : longint;





type
  T_Piece = record
      text : ^char;
      used : TXawTextPosition;
      prev : ^T_Piece;
      next : ^T_Piece;
    end;
  TPiece = T_Piece;


  T_AsciiSrcClassPart = record
      foo : char;
    end;
  TAsciiSrcClassPart = T_AsciiSrcClassPart;


  T_AsciiSrcClassRec = record
      object_class : TObjectClassPart;
      text_src_class : TTextSrcClassPart;
      ascii_src_class : TAsciiSrcClassPart;
    end;
  TAsciiSrcClassRec = T_AsciiSrcClassRec;
  var
    asciiSrcClassRec : TAsciiSrcClassRec;cvar;external;









//// {$ifdef ASCII_DISK}

//// {$endif}







type
  T_AsciiSrcPart = record
      _string : ^char;
      _type : TXawAsciiType;
      piece_size : TXawTextPosition;
      data_compression : TBoolean;
      callback : TXtCallbackList;
      use_string_in_place : TBoolean;
      ascii_length : longint;
      filename : TString;
      is_tempfile : TBoolean;
      changes : TBoolean;
      allocated_string : TBoolean;
      length : TXawTextPosition;
      first_piece : ^TPiece;
    end;
  TAsciiSrcPart = T_AsciiSrcPart;


  T_AsciiSrcRec = record
      object : TObjectPart;
      text_src : TTextSrcPart;
      ascii_src : TAsciiSrcPart;
    end;
  TAsciiSrcRec = T_AsciiSrcRec;
//// {$endif}

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Command.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/Command.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/Command.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XawCommand_h}
//// {$define _XawCommand_h}
//// {$include <X11/Xaw3d/Label.h>}


const
  XtNhighlightThickness = 'highlightThickness';  
  XtNshapeStyle = 'shapeStyle';  
  XtCShapeStyle = 'ShapeStyle';  
  XtRShapeStyle = 'ShapeStyle';  
  XtNcornerRoundPercent = 'cornerRoundPercent';  
  XtCCornerRoundPercent = 'CornerRoundPercent';  
  XawShapeRectangle = XmuShapeRectangle;  
  XawShapeOval = XmuShapeOval;  
  XawShapeEllipse = XmuShapeEllipse;  
  XawShapeRoundedRectangle = XmuShapeRoundedRectangle;  
  var
    commandWidgetClass : TWidgetClass;cvar;external;
type
  TCommandWidgetClass = ^T_CommandClassRec;

  TCommandWidget = ^T_CommandRec;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Viewport.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/Viewport.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/Viewport.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XawViewport_h}
//// {$define _XawViewport_h}
//// {$include <X11/Xaw3d/Form.h>}
//// {$include <X11/Xaw3d/Reports.h>}


//// {$ifndef _XtStringDefs_h_}

const
  XtNforceBars = 'forceBars';  
  XtNallowHoriz = 'allowHoriz';  
  XtNallowVert = 'allowVert';  
  XtNuseBottom = 'useBottom';  
  XtNuseRight = 'useRight';  
//// {$endif}
  var
    viewportWidgetClass : TWidgetClass;cvar;external;
type
  TViewportWidgetClass = ^T_ViewportClassRec;

  TViewportWidget = ^T_ViewportRec;
//// (* error 
//// extern void XawViewportSetLocation (
//// {$if NeedFunctionPrototypes}
//// {$if NeedWidePrototypes}

//// {$else}

//// {$endif}
//// {$endif}
in declaration at line 107 *)
//// {$if NeedFunctionPrototypes}
//// {$if NeedWidePrototypes}

//// {$else}

//// {$endif}
//// {$endif}

procedure XawViewportSetCoordinates(_para1:TWidget; _para2:longint; Position:longint; _para4:TPosition);cdecl;external;
//// {$endif}

//// (* error 
//// #endif /* _XawViewport_h */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/LayoutP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/LayoutP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/LayoutP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XawLayoutP_h}
//// {$define _XawLayoutP_h}
//// {$if defined(LAYOUT)}
//// {$include "Layout.h"}
//// {$else}
//// {$include <X11/Xaw3d/Layout.h>}
//// {$endif}
//// {$include <X11/ConstrainP.h>}
//// {$ifdef MOTIF}
//// {$include "Xm/ManagerP.h"}
//// {$endif}

function GlueEqual(a,b : longint) : longint;

//// (* error 
//// #define AddGlue(r,a,b)	if (a.order == b.order) { \
in declaration at line 44 *)
//// (* error 
//// 			    r.order = a.order; \
//// (* error 
//// 			    r.value = a.value + b.value; \
in declaration at line 45 *)
//// (* error 
//// 			    r.value = a.value + b.value; \
//// (* error 
//// 			} else { \
in declaration at line 48 *)
//// (* error 
//// 				r = a; \
//// (* error 
//// 			    else \
in declaration at line 50 *)
//// (* error 
//// 				r = b; \
//// (* error 
//// 			}
in declaration at line 54 *)
//// (* error 
//// 			    r.order = a.order; \
//// (* error 
//// 			    if (a.value > b.value) \
in declaration at line 56 *)
//// (* error 
//// 				r.value = b.value; \
//// (* error 
//// 			    else \
in declaration at line 58 *)
//// (* error 
//// 				r.value = a.value; \
//// (* error 
//// 			} else { \
in declaration at line 61 *)
//// (* error 
//// 				r = b; \
//// (* error 
//// 			    else \
in declaration at line 63 *)
//// (* error 
//// 				r = a; \
//// (* error 
//// 			}
in declaration at line 67 *)
//// (* error 
//// 			    r.order = a.order; \
//// (* error 
//// 			    r.value = a.value - b.value; \
in declaration at line 68 *)
//// (* error 
//// 			    r.value = a.value - b.value; \
//// (* error 
//// 			} else { \
in declaration at line 71 *)
//// (* error 
//// 				r = a; \
//// (* error 
//// 			    else { \
in declaration at line 73 *)
//// (* error 
//// 				r.order = b.order; \
//// (* error 
//// 				r.value = -b.value; \
in declaration at line 74 *)
//// (* error 
//// 				r.value = -b.value; \
//// (* error 
//// 			    } \
in define line 78 *)
    function IsZeroGlue(g : longint) : longint;    

//// (* error 
//// 					   (char *) XrmQuarkToString(q));
in declaration at line 82 *)
    type
      T_BoxType = (BoxBox,WidgetBox,GlueBox,VariableBox
        );
      TBoxType = T_BoxType;

      T_LayoutDirection = (LayoutHorizontal := 0,LayoutVertical := 1
        );
      TLayoutDirection = T_LayoutDirection;

      T_Operator = (Plus,Minus,Times,Divide,Percent);
      TOperator = T_Operator;

      T_ExprType = (Constant,Binary,Unary,Width,Height,Variable
        );
      TExprType = T_ExprType;

      TExprPtr = ^T_Expr;

      T_Expr = record
          _type : TExprType;
          u : record
              case longint of
                0 : ( constant : Tdouble );
                1 : ( binary : record
                    op : TOperator;
                    left : TExprPtr;
                    right : TExprPtr;
                  end );
                2 : ( unary : record
                    op : TOperator;
                    down : TExprPtr;
                  end );
                3 : ( width : TXrmQuark );
                4 : ( height : TXrmQuark );
                5 : ( variable : TXrmQuark );
              end;
        end;
      TExprRec = T_Expr;

      T_Glue = record
          order : longint;
          value : Tdouble;
          expr : TExprPtr;
        end;
      TGlueRec = T_Glue;
      TGluePtr = ^T_Glue;

      T_BoxParams = record
          stretch : array[0..1] of TGlueRec;
          shrink : array[0..1] of TGlueRec;
        end;
      TBoxParamsRec = T_BoxParams;
      TBoxParamsPtr = ^T_BoxParams;

      TBoxPtr = ^T_Box;

      TLayoutPtr = TBoxPtr;

      T_Box = record
          nextSibling : TBoxPtr;
          parent : TBoxPtr;
          params : TBoxParamsRec;
          size : array[0..1] of longint;
          natural : array[0..1] of longint;
          _type : TBoxType;
          u : record
              case longint of
                0 : ( box : record
                    firstChild : TBoxPtr;
                    dir : TLayoutDirection;
                  end );
                1 : ( widget : record
                    quark : TXrmQuark;
                    widget : TWidget;
                  end );
                2 : ( glue : record
                    expr : TExprPtr;
                  end );
                3 : ( variable : record
                    quark : TXrmQuark;
                    expr : TExprPtr;
                  end );
              end;
        end;
      TLBoxRec = T_Box;


      T_SubInfo = record
          naturalSize : array[0..1] of longint;
          naturalBw : longint;
        end;
      TSubInfoRec = T_SubInfo;
      TSubInfoPtr = ^T_SubInfo;


    function New(t : longint) : pTt;    

    function Dispose(p : longint) : longint;    

    function Some(t,n : longint) : pTt;    

//// (* error 
//// #define More(p,t,n) ((p)? (t *) XtRealloc((char *) p, sizeof(t)*n):Some(t,n)
in define line 173 *)



    type
      T_LayoutClassPart = record
          foo : longint;
        end;
      TLayoutClassPart = T_LayoutClassPart;

//// {$ifdef MOTIF}
//// {$endif}
    type
      T_LayoutClassRec = record
          core_class : TCoreClassPart;
          composite_class : TCompositeClassPart;
          constraint_class : TConstraintClassPart;
          manager_class : TXmManagerClassPart;
          layout_class : TLayoutClassPart;
        end;
      TLayoutClassRec = T_LayoutClassRec;
      var
        layoutClassRec : TLayoutClassRec;cvar;external;
//// {$ifdef MOTIF}
//// {$endif}
    type
      T_LayoutConstraintsRec = record
          manager : TXmManagerConstraintPart;
          layout : TSubInfoRec;
        end;
      TLayoutConstraintsRec = T_LayoutConstraintsRec;
      TLayoutConstraints = ^T_LayoutConstraintsRec;

    function SubInfo(w : longint) : longint;    



    type
      TLayoutPart = record
          layout : TLayoutPtr;
          debug : TBoolean;
        end;

//// {$ifdef MOTIF}
//// {$endif}
    type
      T_LayoutRec = record
          core : TCorePart;
          composite : TCompositePart;
          constraint : TConstraintPart;
          manager : TXmManagerPart;
          layout : TLayoutPart;
        end;
      TLayoutRec = T_LayoutRec;
//// {$endif}

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/MenuButtoP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/MenuButtoP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/MenuButtoP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}





//// {$ifndef _XawMenuButtonP_h}
//// {$define _XawMenuButtonP_h}
//// {$include <X11/Xaw3d/MenuButton.h>}
//// {$include <X11/Xaw3d/CommandP.h>}



type
  T_MenuButtonClass = record
      makes_compiler_happy : longint;
    end;
  TMenuButtonClassPart = T_MenuButtonClass;


  T_MenuButtonClassRec = record
      core_class : TCoreClassPart;
      simple_class : TSimpleClassPart;
      threeD_class : TThreeDClassPart;
      label_class : TLabelClassPart;
      command_class : TCommandClassPart;
      menuButton_class : TMenuButtonClassPart;
    end;
  TMenuButtonClassRec = T_MenuButtonClassRec;
  var
    menuButtonClassRec : TMenuButtonClassRec;cvar;external;



type
  TMenuButtonPart = record
      menu_name : TString;
    end;


  T_MenuButtonRec = record
      core : TCorePart;
      simple : TSimplePart;
      threeD : TThreeDPart;
      _label : TLabelPart;
      command : TCommandPart;
      menu_button : TMenuButtonPart;
    end;
  TMenuButtonRec = T_MenuButtonRec;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/TextSinkP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/TextSinkP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/TextSinkP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}





//// {$ifndef _XawTextSinkP_h}
//// {$define _XawTextSinkP_h}

//// {$include <X11/Xaw3d/TextSink.h>}
//// {$include <X11/Xaw3d/TextP.h>	/* This source works with the Text widget. */}
//// {$include <X11/Xaw3d/TextSrcP.h>	/* This source works with the Text Source. */}

type
  T_TextSinkClassPart = record
      DisplayText : procedure ;cdecl;
      InsertCursor : procedure ;cdecl;
      ClearToBackground : procedure ;cdecl;
      FindPosition : procedure ;cdecl;
      FindDistance : procedure ;cdecl;
      Resolve : procedure ;cdecl;
      MaxLines : function :longint;cdecl;
      MaxHeight : function :longint;cdecl;
      SetTabs : procedure ;cdecl;
      GetCursorBounds : procedure ;cdecl;
    end;
  TTextSinkClassPart = T_TextSinkClassPart;


  T_TextSinkClassRec = record
      object_class : TObjectClassPart;
      text_sink_class : TTextSinkClassPart;
    end;
  TTextSinkClassRec = T_TextSinkClassRec;
  var
    textSinkClassRec : TTextSinkClassRec;cvar;external;








type
  TTextSinkPart = record
      foreground : TPixel;
      background : TPixel;
      tabs : ^TPosition;
      char_tabs : ^smallint;
      tab_count : longint;
    end;


  T_TextSinkRec = record
      object : TObjectPart;
      text_sink : TTextSinkPart;
    end;
  TTextSinkRec = T_TextSinkRec;


  T_XawSinkIntFunc = function :longint;cdecl;

  T_XawSinkVoidFunc = procedure ;cdecl;

function XtInheritDisplayText : T_XawSinkVoidFunc;  

function XtInheritInsertCursor : T_XawSinkVoidFunc;  

function XtInheritClearToBackground : T_XawSinkVoidFunc;  

function XtInheritFindPosition : T_XawSinkVoidFunc;  

function XtInheritFindDistance : T_XawSinkVoidFunc;  

function XtInheritResolve : T_XawSinkVoidFunc;  

function XtInheritMaxLines : T_XawSinkIntFunc;  

function XtInheritMaxHeight : T_XawSinkIntFunc;  

function XtInheritSetTabs : T_XawSinkVoidFunc;  

function XtInheritGetCursorBounds : T_XawSinkVoidFunc;  

//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/CommandP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/CommandP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/CommandP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}





//// {$ifndef _XawCommandP_h}
//// {$define _XawCommandP_h}
//// {$include <X11/Xaw3d/Command.h>}
//// {$include <X11/Xaw3d/LabelP.h>}




type
  TXtCommandHighlight = (HighlightNone,HighlightWhenUnset,HighlightAlways
    );




  T_CommandClass = record
      makes_compiler_happy : longint;
    end;
  TCommandClassPart = T_CommandClass;


  T_CommandClassRec = record
      core_class : TCoreClassPart;
      simple_class : TSimpleClassPart;
      threeD_class : TThreeDClassPart;
      label_class : TLabelClassPart;
      command_class : TCommandClassPart;
    end;
  TCommandClassRec = T_CommandClassRec;
  var
    commandClassRec : TCommandClassRec;cvar;external;





type
  TCommandPart = record
      highlight_thickness : TDimension;
      callbacks : TXtCallbackList;
      gray_pixmap : TPixmap;
      normal_GC : TGC;
      inverse_GC : TGC;
      set : TBoolean;
      highlighted : TXtCommandHighlight;
      shadow_width : TDimension;
      shape_style : longint;
      corner_round : TDimension;
    end;



  T_CommandRec = record
      core : TCorePart;
      simple : TSimplePart;
      threeD : TThreeDPart;
      _label : TLabelPart;
      command : TCommandPart;
    end;
  TCommandRec = T_CommandRec;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/ThreeD.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/ThreeD.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/ThreeD.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    PXColor  = ^XColor;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XawThreeD_h}
//// {$define _XawThreeD_h}

//// {$include <X11/Xmu/Converters.h>}


const
  XtNshadowWidth = 'shadowWidth';  
  XtCShadowWidth = 'ShadowWidth';  
  XtNtopShadowPixel = 'topShadowPixel';  
  XtCTopShadowPixel = 'TopShadowPixel';  
  XtNbottomShadowPixel = 'bottomShadowPixel';  
  XtCBottomShadowPixel = 'BottomShadowPixel';  
  XtNtopShadowContrast = 'topShadowContrast';  
  XtCTopShadowContrast = 'TopShadowContrast';  
  XtNbottomShadowContrast = 'bottomShadowContrast';  
  XtCBottomShadowContrast = 'BottomShadowContrast';  
  XtNbeNiceToColormap = 'beNiceToColormap';  
  XtCBeNiceToColormap = 'BeNiceToColormap';  
  XtNbeNiceToColourmap = 'beNiceToColormap';  
  XtCBeNiceToColourmap = 'BeNiceToColormap';  
  XtNuserData = 'userData';  
  XtCUserData = 'UserData';  
  XtNrelief = 'relief';  
  XtCRelief = 'Relief';  
type
  TXtRelief = (XtReliefNone,XtReliefRaised,XtReliefSunken,
    XtReliefRidge,XtReliefGroove);

  TThreeDWidget = ^T_ThreeDRec;

  TThreeDWidgetClass = ^T_ThreeDClassRec;
  var
    threeDWidgetClass : TWidgetClass;cvar;external;
//// (* error 
//// extern void Xaw3dComputeTopShadowRGB (
//// {$if NeedFunctionPrototypes}

//// {$endif}
in declaration at line 95 *)
//// {$if NeedFunctionPrototypes}

//// {$endif}

procedure Xaw3dComputeBottomShadowRGB(_para1:TWidget; _para2:PTXColor);cdecl;external;
//// {$if NeedFunctionPrototypes}
//// {$endif}

procedure _ShadowSurroundedBox(_para1:TWidget; _para2:TThreeDWidget; _para3:TPosition; _para4:TPosition; _para5:TPosition; 
                _para6:TPosition; _para7:TXtRelief; _para8:TBoolean);cdecl;external;
//// {$endif}

//// (* error 
//// #endif /* _XawThreeD_h */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/TextP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/TextP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/TextP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

Type
PAtom  = ^Atom;
PPosition  = ^Position;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XawTextP_h}
//// {$define _XawTextP_h}
//// {$include <X11/Xaw3d/Text.h>}
//// {$include <X11/Xaw3d/SimpleP.h>}



const
  MAXCUT = 30000;  

function GETLASTPOS : longint; { return type might be wrong }

function zeroPosition : TXawTextPosition;  

  var
    _XawTextActionsTable : ^TXtActionsRec;cvar;external;
    _XawTextActionsTableCount : TCardinal;cvar;external;

const
  XawLF = $0a;  
  XawCR = $0d;  
  XawTAB = $09;  
  XawBS = $08;  
  XawSP = $20;  
  XawDEL = $7f;  
  XawESC = $1b;  
  XawBSLASH = '\\';  


function DEFAULT_TEXT_HEIGHT : TDimension;  


type
  TXawTextLineTableEntry = record
      position : TXawTextPosition;
      y : TPosition;
      textWidth : TDimension;
    end;
  TXawTextLineTableEntryPtr = ^TXawTextLineTableEntry;

  TXawTextSelection = record
      left : TXawTextPosition;
      right : TXawTextPosition;
      _type : TXawTextSelectType;
      selections : ^TAtom;
      atom_count : longint;
      array_size : longint;
    end;

  T_XawTextSelectionSalt = record
      next : ^T_XawTextSelectionSalt;
      s : TXawTextSelection;
      contents : ^char;
      length : longint;
    end;
  TXawTextSelectionSalt = T_XawTextSelectionSalt;





  TXawTextLineTable = record
      top : TXawTextPosition;
      lines : longint;
      info : ^TXawTextLineTableEntry;
    end;
  TXawTextLineTablePtr = ^TXawTextLineTable;

  T_XawTextMargin = record
      left : TPosition;
      right : TPosition;
      top : TPosition;
      bottom : TPosition;
    end;
  TXawTextMargin = T_XawTextMargin;

function VMargins(ctx : longint) : longint;

function HMargins(ctx : longint) : longint;

function IsPositionVisible(ctx,pos : longint) : longint;












type
  TSearchAndReplace = record
      selection_changed : TBoolean;
      search_popup : TWidget;
      label1 : TWidget;
      label2 : TWidget;
      left_toggle : TWidget;
      right_toggle : TWidget;
      rep_label : TWidget;
      rep_text : TWidget;
      search_text : TWidget;
      rep_one : TWidget;
      rep_all : TWidget;
    end;



  TActionProc = function :longint;cdecl;


  TTextClassPart = record
      empty : longint;
    end;
  Ttext_move = record
      h : longint;
      v : longint;
      next : ^Ttext_move;
    end;



  T_TextClassRec = record
      core_class : TCoreClassPart;
      simple_class : TSimpleClassPart;
      text_class : TTextClassPart;
    end;
  TTextClassRec = T_TextClassRec;
  var
    textClassRec : TTextClassRec;cvar;external;






































type
  T_TextPart = record
      source : TWidget;
      sink : TWidget;
      insertPos : TXawTextPosition;
      s : TXawTextSelection;
      sarray : ^TXawTextSelectType;
      salt : ^TXawTextSelectionSalt;
      options : longint;
      dialog_horiz_offset : longint;
      dialog_vert_offset : longint;
      display_caret : TBoolean;
      auto_fill : TBoolean;
      scroll_vert : TXawTextScrollMode;
      scroll_horiz : TXawTextScrollMode;
      wrap : TXawTextWrapMode;
      resize : TXawTextResizeMode;
      r_margin : TXawTextMargin;
      unrealize_callbacks : TXtCallbackList;
      margin : TXawTextMargin;
      lt : TXawTextLineTable;
      extendDir : TXawTextScanDirection;
      origSel : TXawTextSelection;
      lasttime : TTime;
      time : TTime;
      ev_x : TPosition;
      ev_y : TPosition;
      vbar : TWidget;
      hbar : TWidget;
      search : ^TSearchAndReplace;
      file_insert : TWidget;
      updateFrom : ^TXawTextPosition;
      updateTo : ^TXawTextPosition;
      numranges : longint;
      maxranges : longint;
      lastPos : TXawTextPosition;
      gc : TGC;
      showposition : TBoolean;
      hasfocus : TBoolean;
      update_disabled : TBoolean;
      single_char : TBoolean;
      old_insert : TXawTextPosition;
      mult : smallint;
      copy_area_offsets : ^Ttext_move;
      threeD : TWidget;
      redisplay_needed : TBoolean;
      salt2 : ^TXawTextSelectionSalt;
    end;
  TTextPart = T_TextPart;


const
  XtRScrollMode = 'ScrollMode';  
  XtRWrapMode = 'WrapMode';  
  XtRResizeMode = 'ResizeMode';  

type
  T_TextRec = record
      core : TCorePart;
      simple : TSimplePart;
      text : TTextPart;
    end;
  TTextRec = T_TextRec;

//// {$if NeedFunctionPrototypes}

//// {$endif}

procedure _XawTextBuildLineTable(_para1:TTextWidget; _para2:TXawTextPosition; _para3:T_XtBoolean);cdecl;external;
//// {$if NeedFunctionPrototypes}

//// {$endif}

function _XawTextGetSTRING(_para1:TTextWidget; _para2:TXawTextPosition; _para3:TXawTextPosition):^char;cdecl;external;
//// {$if NeedFunctionPrototypes}

//// {$endif}

procedure _XawTextSaltAwaySelection(_para1:TTextWidget; _para2:PTAtom; _para3:longint);cdecl;external;
//// {$if NeedFunctionPrototypes}

//// {$endif}

procedure _XawTextPosToXY(_para1:TWidget; _para2:TXawTextPosition; _para3:PTPosition; _para4:PTPosition);cdecl;external;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/SimpleP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/SimpleP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/SimpleP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _SimpleP_h}
//// {$define _SimpleP_h}
//// {$include "Xaw3dP.h"}
//// {$include <X11/Xaw3d/Simple.h>}
type
  TSimpleClassPart = record
      change_sensitive : function :TBoolean;cdecl;
    end;
//// (* error 
//// #define XtInheritChangeSensitive ((Boolean (*)())_XtInherit)
in define line 62 *)

      T_SimpleClassRec = record
          core_class : TCoreClassPart;
          simple_class : TSimpleClassPart;
        end;
      TSimpleClassRec = T_SimpleClassRec;
      var
        simpleClassRec : TSimpleClassRec;cvar;external;



//// {$ifdef XAW_INTERNATIONALIZATION}
//// {$endif}

    type
      TSimplePart = record
          cursor : TCursor;
          insensitive_border : TPixmap;
          cursor_name : TString;
          pointer_fg : TPixel;
          pointer_bg : TPixel;
          international : TBoolean;
        end;

      T_SimpleRec = record
          core : TCorePart;
          simple : TSimplePart;
        end;
      TSimpleRec = T_SimpleRec;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/MenuButton.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/MenuButton.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/MenuButton.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}





//// {$ifndef _XawMenuButton_h}
//// {$define _XawMenuButton_h}
//// {$include <X11/Xaw3d/Command.h>}


const
  XtNmenuName = 'menuName';  
  XtCMenuName = 'MenuName';  
  var
    menuButtonWidgetClass : TWidgetClass;cvar;external;
type
  TMenuButtonWidgetClass = ^T_MenuButtonClassRec;

  TMenuButtonWidget = ^T_MenuButtonRec;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/XawImP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/XawImP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/XawImP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

Type
PKeySym  = ^KeySym;
PStatus  = ^Status;
Pwchar_t  = ^wchar_t;
PXKeyPressedEvent  = ^XKeyPressedEvent;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XawImP_h}
//// {$define _XawImP_h}

const
  XtNinputMethod = 'inputMethod';  
  XtCInputMethod = 'InputMethod';  
  XtNpreeditType = 'preeditType';  
  XtCPreeditType = 'PreeditType';  
  XtNopenIm = 'openIm';  
  XtCOpenIm = 'OpenIm';  
  XtNsharedIc = 'sharedIc';  
  XtCSharedIc = 'SharedIc';  
//// {$include <X11/Xaw3d/Text.h>}

const
  CIICFocus = 1 shl 0;  
  CIFontSet = 1 shl 1;  
  CIFg = 1 shl 2;  
  CIBg = 1 shl 3;  
  CIBgPixmap = 1 shl 4;  
  CICursorP = 1 shl 5;  
  CILineS = 1 shl 6;  
type
  T_XawImPart = record
      xim : TXIM;
      resources : TXrmResourceList;
      num_resources : TCardinal;
      open_im : TBoolean;
      initialized : TBoolean;
      area_height : TDimension;
      input_method : TString;
      preedit_type : TString;
    end;
  TXawImPart = T_XawImPart;

  T_XawIcTablePart = record
      widget : TWidget;
      xic : TXIC;
      input_style : TXIMStyle;
      flg : dword;
      prev_flg : dword;
      ic_focused : TBoolean;
      font_set : TXFontSet;
      foreground : TPixel;
      background : TPixel;
      bg_pixmap : TPixmap;
      cursor_position : TXawTextPosition;
      line_spacing : dword;
      openic_error : TBoolean;
      next : ^T_XawIcTablePart;
    end;
  TXawIcTablePart = T_XawIcTablePart;
  TXawIcTableList = ^T_XawIcTablePart;

  T_XawIcPart = record
      input_style : TXIMStyle;
      shared_ic : TBoolean;
      shared_ic_table : TXawIcTableList;
      current_ic_table : TXawIcTableList;
      ic_table : TXawIcTableList;
    end;
  TXawIcPart = T_XawIcPart;

  T_contextDataRec = record
      parent : TWidget;
      ve : TWidget;
    end;
  TcontextDataRec = T_contextDataRec;

  T_contextErrDataRec = record
      widget : TWidget;
      xim : TXIM;
    end;
  TcontextErrDataRec = T_contextErrDataRec;
//// {$if NeedFunctionPrototypes}

//// {$endif}

procedure _XawImResizeVendorShell(_para1:TWidget);cdecl;external;
//// {$if NeedFunctionPrototypes}

//// {$endif}

function _XawImGetShellHeight(_para1:TWidget):TDimension;cdecl;external;
//// {$if NeedFunctionPrototypes}

//// {$endif}

procedure _XawImRealize(_para1:TWidget);cdecl;external;
//// {$if NeedFunctionPrototypes}


//// {$endif}

procedure _XawImInitialize(_para1:TWidget; _para2:TWidget);cdecl;external;
//// {$if NeedFunctionPrototypes}

//// {$endif}

procedure _XawImReconnect(_para1:TWidget);cdecl;external;
//// {$if NeedFunctionPrototypes}

//// {$endif}

procedure _XawImRegister(_para1:TWidget);cdecl;external;
//// {$if NeedFunctionPrototypes}

//// {$endif}

procedure _XawImUnregister(_para1:TWidget);cdecl;external;
//// {$if NeedFunctionPrototypes}



//// {$endif}

procedure _XawImSetValues(_para1:TWidget; _para2:TArgList; _para3:TCardinal);cdecl;external;

//// {$if NeedVarargsPrototypes}

//// {$endif}

procedure _XawImVASetValues(_para1:TWidget; args:array of const);cdecl;external;
procedure _XawImVASetValues(_para1:TWidget);cdecl;external;
//// {$if NeedFunctionPrototypes}



//// {$endif}

procedure _XawImSetFocusValues(_para1:TWidget; _para2:TArgList; _para3:TCardinal);cdecl;external;

//// {$if NeedVarargsPrototypes}

//// {$endif}

procedure _XawImVASetFocusValues(_para1:TWidget; args:array of const);cdecl;external;
procedure _XawImVASetFocusValues(_para1:TWidget);cdecl;external;
//// {$if NeedFunctionPrototypes}

//// {$endif}

procedure _XawImUnsetFocus(_para1:TWidget);cdecl;external;
//// {$if NeedFunctionPrototypes}






//// {$endif}

function _XawImWcLookupString(_para1:TWidget; _para2:PTXKeyPressedEvent; _para3:PTwchar_t; _para4:longint; _para5:PTKeySym; 
           _para6:PTStatus):longint;cdecl;external;
//// {$if NeedFunctionPrototypes}

//// {$endif}

function _XawImGetImAreaHeight(_para1:TWidget):longint;cdecl;external;
//// {$if NeedFunctionPrototypes}

//// {$endif}

procedure _XawImCallVendorShellExtResize(_para1:TWidget);cdecl;external;
//// {$if NeedFunctionPrototypes}


//// {$endif}

procedure _XawImDestroy(_para1:TWidget; _para2:TWidget);cdecl;external;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/AsciiSink.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/AsciiSink.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/AsciiSink.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XawAsciiSink_h}
//// {$define _XawAsciiSink_h}

//// {$include <X11/Xaw3d/TextSink.h>}


const
  XtCOutput = 'Output';  
  XtNdisplayNonprinting = 'displayNonprinting';  
  XtNecho = 'echo';  

  var
    asciiSinkObjectClass : TWidgetClass;cvar;external;
type
  TAsciiSinkObjectClass = ^T_AsciiSinkClassRec;

  TAsciiSinkObject = ^T_AsciiSinkRec;

//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Form.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/Form.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/Form.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XawForm_h}
//// {$define _XawForm_h}
//// {$include <X11/Constraint.h>}



//// {$ifndef _XtStringDefs_h_}

const
  XtNtop = 'top';  
  XtRWidget = 'Widget';  
//// {$endif}

const
  XtNdefaultDistance = 'defaultDistance';  
  XtNbottom = 'bottom';  
  XtNleft = 'left';  
  XtNright = 'right';  
  XtNfromHoriz = 'fromHoriz';  
  XtNfromVert = 'fromVert';  
  XtNhorizDistance = 'horizDistance';  
  XtNvertDistance = 'vertDistance';  
  XtNresizable = 'resizable';  
  XtCEdge = 'Edge';  
  XtCWidget = 'Widget';  
//// {$ifndef _XawEdgeType_e}
//// {$define _XawEdgeType_e}





type
  TXawEdgeType = (XawChainTop,XawChainBottom,XawChainLeft,
    XawChainRight,XawRubber);
//// {$endif}



const
  XtEdgeType = XawEdgeType;  
  XtChainTop = XawChainTop;  
  XtChainBottom = XawChainBottom;  
  XtChainLeft = XawChainLeft;  
  XtChainRight = XawChainRight;  
  XtRubber = XawRubber;  
type
  TFormWidgetClass = ^T_FormClassRec;

  TFormWidget = ^T_FormRec;
  var
    formWidgetClass : TWidgetClass;cvar;external;
//// (* error 
//// extern void XawFormDoLayout(
//// {$if NeedFunctionPrototypes}
//// {$if NeedWidePrototypes}

//// {$else}

//// {$endif}
//// {$endif}
in declaration at line 164 *)
//// {$endif}

//// (* error 
//// #endif /* _XawForm_h */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Repeater.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/Repeater.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/Repeater.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XawRepeater_h}
//// {$define _XawRepeater_h}
//// {$include <X11/Xaw3d/Command.h>}



const
  XtNdecay = 'decay';  
  XtCDecay = 'Decay';  
  XtNinitialDelay = 'initialDelay';  
  XtCDelay = 'Delay';  
  XtNminimumDelay = 'minimumDelay';  
  XtCMinimumDelay = 'MinimumDelay';  
  XtNrepeatDelay = 'repeatDelay';  
  XtNflash = 'flash';  
  XtNstartCallback = 'startCallback';  
  XtCStartCallback = 'StartCallback';  
  XtNstopCallback = 'stopCallback';  
  XtCStopCallback = 'StopCallback';  

  var
    repeaterWidgetClass : TWidgetClass;cvar;external;
type
  TRepeaterWidgetClass = ^T_RepeaterClassRec;

  TRepeaterWidget = ^T_RepeaterRec;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/TextSink.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/TextSink.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/TextSink.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    Plongint  = ^longint;
    PXawTextPosition  = ^XawTextPosition;
    PXRectangle  = ^XRectangle;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XawTextSink_h}
//// {$define _XawTextSink_h}
//// {$include <X11/Xaw3d/Text.h>}



  var
    textSinkObjectClass : TWidgetClass;cvar;external;
type
  TTextSinkObjectClass = ^T_TextSinkClassRec;

  TTextSinkObject = ^T_TextSinkRec;

  TXawTextInsertState = (XawisOn,XawisOff);


//// (* error 
//// extern void XawTextSinkDisplayText(
//// {$if NeedFunctionPrototypes}
//// {$if NeedWidePrototypes}
//// {$else}
//// {$endif}
//// {$if NeedWidePrototypes}

//// {$else}

//// {$endif}
//// {$endif}
in declaration at line 121 *)

//// {$if NeedFunctionPrototypes}
//// {$if NeedWidePrototypes}

//// {$else}

//// {$endif}
//// {$endif}

procedure XawTextSinkInsertCursor(_para1:TWidget; _para2:longint; _para3:longint; Position:longint; _para5:TPosition; 
                _para6:TXawTextInsertState);cdecl;external;

//// {$if NeedFunctionPrototypes}
//// {$if NeedWidePrototypes}

//// {$else}

//// {$endif}
//// {$endif}

procedure XawTextSinkClearToBackground(_para1:TWidget; _para2:longint; _para3:longint; _para4:longint; Position:longint; 
                _para6:TPosition; _para7:TDimension; _para8:TDimension);cdecl;external;

//// {$if NeedFunctionPrototypes}
//// {$if NeedWidePrototypes}
//// {$else}
//// {$endif}

//// {$endif}

procedure XawTextSinkFindPosition(_para1:TWidget; _para2:TXawTextPosition; _para3:longint; _para4:longint; _para5:longint; 
                _para6:TBoolean; _para7:PTXawTextPosition; _para8:Plongint; _para9:Plongint);cdecl;external;

//// {$if NeedFunctionPrototypes}

//// {$endif}

procedure XawTextSinkFindDistance(_para1:TWidget; _para2:TXawTextPosition; _para3:longint; _para4:TXawTextPosition; _para5:Plongint; 
                _para6:PTXawTextPosition; _para7:Plongint);cdecl;external;

//// {$if NeedFunctionPrototypes}

//// {$endif}

procedure XawTextSinkResolve(_para1:TWidget; _para2:TXawTextPosition; _para3:longint; _para4:longint; _para5:PTXawTextPosition);cdecl;external;

//// {$if NeedFunctionPrototypes}
//// {$if NeedWidePrototypes}

//// {$else}

//// {$endif}
//// {$endif}

function XawTextSinkMaxLines(_para1:TWidget; Dimension:longint):longint;cdecl;external;

//// {$if NeedFunctionPrototypes}

//// {$endif}

function XawTextSinkMaxHeight(_para1:TWidget; _para2:longint):longint;cdecl;external;

//// {$if NeedFunctionPrototypes}

//// {$endif}

procedure XawTextSinkSetTabs(_para1:TWidget; _para2:longint; _para3:Plongint);cdecl;external;

//// {$if NeedFunctionPrototypes}

//// {$endif}

procedure XawTextSinkGetCursorBounds(_para1:TWidget; _para2:PTXRectangle);cdecl;external;
//// {$endif}

//// (* error 
//// #endif /* _XawTextSrc_h */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/SmeP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/SmeP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/SmeP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XawSmeP_h}
//// {$define _XawSmeP_h}

//// {$include "Xaw3dP.h"}
//// {$include <X11/Xaw3d/Sme.h>}

type
  T_SmeClassPart = record
      highlight : procedure ;cdecl;
      unhighlight : procedure ;cdecl;
      notify : procedure ;cdecl;
      extension : TXtPointer;
    end;
  TSmeClassPart = T_SmeClassPart;


  T_SmeClassRec = record
      rect_class : TRectObjClassPart;
      sme_class : TSmeClassPart;
    end;
  TSmeClassRec = T_SmeClassRec;
  var
    smeClassRec : TSmeClassRec;cvar;external;



//// {$ifdef XAW_INTERNATIONALIZATION}
//// {$endif}
type
  TSmePart = record
      callbacks : TXtCallbackList;
      international : TBoolean;
    end;


  T_SmeRec = record
      object : TObjectPart;
      rectangle : TRectObjPart;
      sme : TSmePart;
    end;
  TSmeRec = T_SmeRec;


  T_XawEntryVoidFunc = procedure ;cdecl;

function XtInheritHighlight : T_XawEntryVoidFunc;  

const
  XtInheritUnhighlight = XtInheritHighlight;  
  XtInheritNotify = XtInheritHighlight;  
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Grip.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/Grip.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/Grip.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}





//// {$ifndef _XawGrip_h}
//// {$define _XawGrip_h}
//// {$include <X11/Xaw3d/Simple.h>}



const
  XtNgripTranslations = 'gripTranslations';  



type
  T_XawGripCallData = record
      event : ^TXEvent;
      params : ^TString;
      num_params : TCardinal;
    end;
  TXawGripCallDataRec = T_XawGripCallData;
  TXawGripCallData = ^T_XawGripCallData;
  TGripCallDataRec = T_XawGripCallData;
  TGripCallData = ^T_XawGripCallData;


  var
    gripWidgetClass : TWidgetClass;cvar;external;
type
  TGripWidgetClass = ^T_GripClassRec;

  TGripWidget = ^T_GripRec;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Xaw3dP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/Xaw3dP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/Xaw3dP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

Type
PDisplay  = ^Display;
PScreen  = ^Screen;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _Xaw3dP_h}
//// {$define _Xaw3dP_h}
//// {$include <X11/IntrinsicP.h>}

//// {$define XAW_INTERNATIONALIZATION}
//// {$undef XAW_MULTIPLANE_PIXMAPS}
//// {$define XAW_GRAY_BLKWHT_STIPPLES}
//// {$define XAW_ARROW_SCROLLBARS}
//// {$ifndef XtX}

function XtX(w : longint) : longint;

//// {$endif}
//// {$ifndef XtY}

function XtY(w : longint) : longint;

//// {$endif}
//// {$ifndef XtWidth}

function XtWidth(w : longint) : longint;

//// {$endif}
//// {$ifndef XtHeight}

function XtHeight(w : longint) : longint;

//// {$endif}
//// {$ifndef XtBorderWidth}

function XtBorderWidth(w : longint) : longint;

//// {$endif}
//// {$ifdef XAW_GRAY_BLKWHT_STIPPLES}
//// {$if NeedFunctionPrototypes}
//// {$endif}

function grayPixel(_para1:dword; _para2:PTDisplay; _para3:PTScreen):dword;cdecl;external;
//// {$else}

function grayPixel(p,dpy,scn : longint) : longint;

//// {$endif}
//// {$ifdef XAW_MULTIPLANE_PIXMAPS}
//// {$if NeedFunctionPrototypes}
//// {$endif}

function stipplePixmap(_para1:TWidget; _para2:TPixmap; _para3:TColormap; _para4:TPixel; _para5:dword):TPixmap;cdecl;external;
//// {$endif}
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Label.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/Label.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/Label.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XawLabel_h}
//// {$define _XawLabel_h}

//// {$include "Xaw3dP.h"}
//// {$include <X11/Xaw3d/Simple.h>}


const
  XawTextEncoding8bit = 0;  
  XawTextEncodingChar2b = 1;  
  XtNleftBitmap = 'leftBitmap';  
  XtCLeftBitmap = 'LeftBitmap';  
  XtNencoding = 'encoding';  
  XtCEncoding = 'Encoding';  
//// {$ifdef XAW_INTERNATIONALIZATION}
//// {$ifndef XtNfontSet}

const
  XtNfontSet = 'fontSet';  
//// {$endif}
//// {$ifndef XtCFontSet}

const
  XtCFontSet = 'FontSet';  
//// {$endif}
//// {$endif}
//// {$ifndef _XtStringDefs_h_}

const
  XtNbitmap = 'bitmap';  
  XtNforeground = 'foreground';  
  XtNlabel = 'label';  
  XtNfont = 'font';  
  XtNinternalWidth = 'internalWidth';  
  XtNinternalHeight = 'internalHeight';  
  XtNresize = 'resize';  
  XtCResize = 'Resize';  
  XtCBitmap = 'Bitmap';  
//// {$endif}

  var
    labelWidgetClass : TWidgetClass;cvar;external;
type
  TLabelWidgetClass = ^T_LabelClassRec;

  TLabelWidget = ^T_LabelRec;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Layout.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/Layout.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/Layout.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XawLayout_h}
//// {$define _XawLayout_h}
//// {$include <X11/Constraint.h>}
//// {$include <X11/Xfuncproto.h>}





const
  XtNlayout = 'layout';  
  XtCLayout = 'Layout';  
  XtRLayout = 'Layout';  
  XtNdebug = 'debug';  

  var
    layoutWidgetClass : TWidgetClass;cvar;external;
type
  TLayoutWidgetClass = ^T_LayoutClassRec;

  TLayoutWidget = ^T_LayoutRec;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/SmeThreeDP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/SmeThreeDP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/SmeThreeDP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XawSmeThreeDP_h}
//// {$define _XawSmeThreeDP_h}
//// {$include <X11/Xaw3d/SmeThreeD.h>}
//// {$include <X11/Xaw3d/SmeP.h>}
type
  TSmeThreeDPart = record
      shadow_width : TDimension;
      top_shadow_pixel : TPixel;
      bot_shadow_pixel : TPixel;
      top_shadow_pxmap : TPixmap;
      bot_shadow_pxmap : TPixmap;
      top_shadow_contrast : longint;
      bot_shadow_contrast : longint;
      top_shadow_GC : TGC;
      bot_shadow_GC : TGC;
      erase_GC : TGC;
      user_data : TXtPointer;
      be_nice_to_cmap : TBoolean;
      shadowed : TBoolean;
    end;


  T_SmeThreeDRec = record
      object : TObjectPart;
      rectangle : TRectObjPart;
      sme : TSmePart;
      sme_threeD : TSmeThreeDPart;
    end;
  TSmeThreeDRec = T_SmeThreeDRec;
//// {$if NeedFunctionPrototypes}
//// {$endif}
type

  TXawSme3dShadowDrawProc = procedure (_para1:TWidget);cdecl;

  TSmeThreeDClassPart = record
      shadowdraw : TXawSme3dShadowDrawProc;
    end;


  T_SmeThreeDClassRec = record
      rect_class : TRectObjClassPart;
      sme_class : TSmeClassPart;
      sme_threeD_class : TSmeThreeDClassPart;
    end;
  TSmeThreeDClassRec = T_SmeThreeDClassRec;

  var
    smeThreeDClassRec : TSmeThreeDClassRec;cvar;external;

function XtInheritXawSme3dShadowDraw : TXawSme3dShadowDrawProc;  

//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/PanedP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/PanedP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/PanedP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XawPanedP_h}
//// {$define _XawPanedP_h}
//// {$include <X11/Xaw3d/Paned.h>}



type
  T_PanedClassPart = record
      foo : longint;
    end;
  TPanedClassPart = T_PanedClassPart;


  T_PanedClassRec = record
      core_class : TCoreClassPart;
      composite_class : TCompositeClassPart;
      constraint_class : TConstraintClassPart;
      paned_class : TPanedClassPart;
    end;
  TPanedClassRec = T_PanedClassRec;
  var
    panedClassRec : TPanedClassRec;cvar;external;

















type
  T_PanedConstraintsPart = record
      min : TDimension;
      max : TDimension;
      allow_resize : TBoolean;
      show_grip : TBoolean;
      skip_adjust : TBoolean;
      position : longint;
      preferred_size : TDimension;
      resize_to_pref : TBoolean;
      delta : TPosition;
      olddelta : TPosition;
      paned_adjusted_me : TBoolean;
      wp_size : TDimension;
      size : longint;
      grip : TWidget;
    end;
  TPanedConstraintsPart = T_PanedConstraintsPart;
  TPane = ^T_PanedConstraintsPart;

  T_PanedConstraintsRec = record
      paned : TPanedConstraintsPart;
    end;
  TPanedConstraintsRec = T_PanedConstraintsRec;
  TPanedConstraints = ^T_PanedConstraintsRec;





  T_PaneStack = record
      next : ^T_PaneStack;
      pane : TPane;
      start_size : longint;
    end;
  TPaneStack = T_PaneStack;

































  TPanedPart = record
      grip_indent : TPosition;
      refiguremode : TBoolean;
      grip_translations : TXtTranslations;
      internal_bp : TPixel;
      internal_bw : TDimension;
      orientation : TXtOrientation;
      cursor : TCursor;
      grip_cursor : TCursor;
      v_grip_cursor : TCursor;
      h_grip_cursor : TCursor;
      adjust_this_cursor : TCursor;
      v_adjust_this_cursor : TCursor;
      h_adjust_this_cursor : TCursor;
      adjust_upper_cursor : TCursor;
      adjust_lower_cursor : TCursor;
      adjust_left_cursor : TCursor;
      adjust_right_cursor : TCursor;
      recursively_called : TBoolean;
      resize_children_to_pref : TBoolean;
      start_loc : longint;
      whichadd : TWidget;
      whichsub : TWidget;
      normgc : TGC;
      invgc : TGC;
      flipgc : TGC;
      num_panes : longint;
      stack : ^TPaneStack;
    end;


  T_PanedRec = record
      core : TCorePart;
      composite : TCompositePart;
      constraint : TConstraintPart;
      paned : TPanedPart;
    end;
  TPanedRec = T_PanedRec;
//// {$endif}



// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/GripP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/GripP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/GripP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}





//// {$ifndef _XawGripP_h}
//// {$define _XawGripP_h}
//// {$include <X11/Xaw3d/Grip.h>}
//// {$include <X11/Xaw3d/ThreeDP.h>}


const
  DEFAULT_GRIP_SIZE = 8;  

type
  TGripClassPart = record
      empty : longint;
    end;


  T_GripClassRec = record
      core_class : TCoreClassPart;
      simple_class : TSimpleClassPart;
      threeD_class : TThreeDClassPart;
      grip_class : TGripClassPart;
    end;
  TGripClassRec = T_GripClassRec;
  var
    gripClassRec : TGripClassRec;cvar;external;

type
  TGripPart = record
      grip_action : TXtCallbackList;
    end;


  T_GripRec = record
      core : TCorePart;
      simple : TSimplePart;
      threeD : TThreeDPart;
      grip : TGripPart;
    end;
  TGripRec = T_GripRec;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Dialog.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/Dialog.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/Dialog.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XawDialog_h}
//// {$define _XawDialog_h}
//// {$include <X11/Xaw3d/Form.h>}



const
  XtCIcon = 'Icon';  
  XtNicon = 'icon';  
type
  TDialogWidgetClass = ^T_DialogClassRec;

  TDialogWidget = ^T_DialogRec;
  var
    dialogWidgetClass : TWidgetClass;cvar;external;
//// (* error 
//// extern void XawDialogAddButton(
//// {$if NeedFunctionPrototypes}

//// {$endif}
in declaration at line 99 *)
//// {$if NeedFunctionPrototypes}

//// {$endif}

function XawDialogGetValueString(_para1:TWidget):^char;cdecl;external;
//// {$endif}

//// (* error 
//// #endif /* _XawDialog_h */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/StripCharP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/StripCharP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/StripCharP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XawStripChartP_h}
//// {$define _XawStripChartP_h}
//// {$include <X11/Xaw3d/StripChart.h>}
//// {$include <X11/Xaw3d/ThreeDP.h>}

const
  NO_GCS = 0;  
//// (* error 
//// #define FOREGROUND 1 << 0
in define line 61 *)
//// (* error 
//// #define HIGHLIGHT  1 << 1
in define line 62 *)
      ALL_GCS = FOREGROUND or HIGHLIGHT;      















    type
      TStripChartPart = record
          fgpixel : TPixel;
          hipixel : TPixel;
          fgGC : TGC;
          hiGC : TGC;
          update : longint;
          scale : longint;
          min_scale : longint;
          interval : longint;
          points : ^TXPoint;
          max_value : Tdouble;
          valuedata : array[0..2047] of Tdouble;
          interval_id : TXtIntervalId;
          get_value : TXtCallbackList;
          jump_val : longint;
        end;


      T_StripChartRec = record
          core : TCorePart;
          simple : TSimplePart;
          threeD : TThreeDPart;
          strip_chart : TStripChartPart;
        end;
      TStripChartRec = T_StripChartRec;


      TStripChartClassPart = record
          dummy : longint;
        end;


      T_StripChartClassRec = record
          core_class : TCoreClassPart;
          simple_class : TSimpleClassPart;
          threeD_class : TThreeDClassPart;
          strip_chart_class : TStripChartClassPart;
        end;
      TStripChartClassRec = T_StripChartClassRec;

      var
        stripChartClassRec : TStripChartClassRec;cvar;external;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Box.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/Box.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/Box.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XawBox_h}
//// {$define _XawBox_h}
//// {$include <X11/Xmu/Converters.h>}



//// {$ifndef _XtStringDefs_h_}

const
  XtNhSpace = 'hSpace';  
  XtNvSpace = 'vSpace';  
//// {$endif}

  var
    boxWidgetClass : TWidgetClass;cvar;external;
type
  TBoxWidgetClass = ^T_BoxClassRec;

  TBoxWidget = ^T_BoxRec;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/ScrollbarP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/ScrollbarP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/ScrollbarP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}








//// {$ifndef _ScrollbarP_h}
//// {$define _ScrollbarP_h}
//// {$include "Xaw3dP.h"}
//// {$include <X11/Xaw3d/Scrollbar.h>}
//// {$include <X11/Xaw3d/ThreeDP.h>}







//// {$ifndef XAW_ARROW_SCROLLBARS}






//// {$endif}







//// {$ifdef XAW_ARROW_SCROLLBARS}


//// {$else}


//// {$endif}




type
  TScrollbarPart = record
      foreground : TPixel;
      orientation : TXtOrientation;
      scrollProc : TXtCallbackList;
      thumbProc : TXtCallbackList;
      jumpProc : TXtCallbackList;
      thumb : TPixmap;
      upCursor : TCursor;
      downCursor : TCursor;
      leftCursor : TCursor;
      rightCursor : TCursor;
      verCursor : TCursor;
      horCursor : TCursor;
      top : single;
      shown : single;
      length : TDimension;
      thickness : TDimension;
      min_thumb : TDimension;
      picked : single;
      timer_id : TXtIntervalId;
      scroll_mode : char;
      inactiveCursor : TCursor;
      direction : char;
      gc : TGC;
      topLoc : TPosition;
      shownLength : TDimension;
      pick_top : TBoolean;
    end;

  T_ScrollbarRec = record
      core : TCorePart;
      simple : TSimplePart;
      threeD : TThreeDPart;
      scrollbar : TScrollbarPart;
    end;
  TScrollbarRec = T_ScrollbarRec;

  TScrollbarClassPart = record
      empty : longint;
    end;

  T_ScrollbarClassRec = record
      core_class : TCoreClassPart;
      simple_class : TSimpleClassPart;
      threeD_class : TThreeDClassPart;
      scrollbar_class : TScrollbarClassPart;
    end;
  TScrollbarClassRec = T_ScrollbarClassRec;
  var
    scrollbarClassRec : TScrollbarClassRec;cvar;external;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/SimpleMenu.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/SimpleMenu.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/SimpleMenu.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _SimpleMenu_h}
//// {$define _SimpleMenu_h}
//// {$include <X11/Shell.h>}
//// {$include <X11/Xmu/Converters.h>}


type
  TSimpleMenuWidgetClass = ^T_SimpleMenuClassRec;

  TSimpleMenuWidget = ^T_SimpleMenuRec;
  var
    simpleMenuWidgetClass : TWidgetClass;cvar;external;

const
  XtNcursor = 'cursor';  
  XtNbottomMargin = 'bottomMargin';  
  XtNcolumnWidth = 'columnWidth';  
  XtNlabelClass = 'labelClass';  
  XtNmenuOnScreen = 'menuOnScreen';  
  XtNpopupOnEntry = 'popupOnEntry';  
  XtNrowHeight = 'rowHeight';  
  XtNtopMargin = 'topMargin';  
  XtNjumpScroll = 'jumpScroll';  
  XtNleftWhitespace = 'leftWhitespace';  
  XtNrightWhitespace = 'rightWhitespace';  
  XtCColumnWidth = 'ColumnWidth';  
  XtCLabelClass = 'LabelClass';  
  XtCMenuOnScreen = 'MenuOnScreen';  
  XtCPopupOnEntry = 'PopupOnEntry';  
  XtCRowHeight = 'RowHeight';  
  XtCVerticalMargins = 'VerticalMargins';  
  XtCJumpScroll = 'JumpScroll';  
  XtCLeftWhitespace = 'LeftWhitespace';  
  XtCRightWhitespace = 'RightWhitespace';  
  XtCHorizontalWhitespace = 'HorizontalWhitespace';  


//// (* error 
//// extern void XawSimpleMenuAddGlobalActions(
//// {$if NeedFunctionPrototypes}

//// {$endif}
in declaration at line 131 *)

//// {$if NeedFunctionPrototypes}

//// {$endif}

function XawSimpleMenuGetActiveEntry(_para1:TWidget):TWidget;cdecl;external;

//// {$if NeedFunctionPrototypes}

//// {$endif}

procedure XawSimpleMenuClearActiveEntry(_para1:TWidget);cdecl;external;
//// {$endif}

//// (* error 
//// #endif /* _SimpleMenu_h */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/ListP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/ListP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/ListP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}





//// {$ifndef _XawListP_h}
//// {$define _XawListP_h}

//// {$include "Xaw3dP.h"}
//// {$include <X11/Xaw3d/SimpleP.h>}
//// {$include <X11/Xaw3d/List.h>}

const
  NO_HIGHLIGHT = XAW_LIST_NONE;  
  OUT_OF_RANGE = -(1);  
  OKAY = 0;  

type
  TListClassPart = record
      foo : longint;
    end;


  T_ListClassRec = record
      core_class : TCoreClassPart;
      simple_class : TSimpleClassPart;
      list_class : TListClassPart;
    end;
  TListClassRec = T_ListClassRec;
  var
    listClassRec : TListClassRec;cvar;external;







//// {$ifdef XAW_INTERNATIONALIZATION}

//// {$endif}











type
  TListPart = record
      foreground : TPixel;
      internal_width : TDimension;
      internal_height : TDimension;
      column_space : TDimension;
      row_space : TDimension;
      default_cols : longint;
      force_cols : TBoolean;
      paste : TBoolean;
      vertical_cols : TBoolean;
      longest : longint;
      nitems : longint;
      font : ^TXFontStruct;
      fontset : TXFontSet;
      list : ^TString;
      callback : TXtCallbackList;
      is_highlighted : longint;
      highlight : longint;
      col_width : longint;
      row_height : longint;
      nrows : longint;
      ncols : longint;
      normgc : TGC;
      revgc : TGC;
      graygc : TGC;
      freedoms : longint;
    end;


  T_ListRec = record
      core : TCorePart;
      simple : TSimplePart;
      list : TListPart;
    end;
  TListRec = T_ListRec;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/SmeLineP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/SmeLineP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/SmeLineP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XawSmeLineP_h}
//// {$define _XawSmeLineP_h}

//// {$include <X11/Xaw3d/SmeP.h>}
//// {$include <X11/Xaw3d/SmeLine.h>}

type
  T_SmeLineClassPart = record
      extension : TXtPointer;
    end;
  TSmeLineClassPart = T_SmeLineClassPart;


  T_SmeLineClassRec = record
      rect_class : TRectObjClassPart;
      sme_class : TSmeClassPart;
      sme_line_class : TSmeLineClassPart;
    end;
  TSmeLineClassRec = T_SmeLineClassRec;
  var
    smeLineClassRec : TSmeLineClassRec;cvar;external;







type
  TSmeLinePart = record
      foreground : TPixel;
      stipple : TPixmap;
      line_width : TDimension;
      gc : TGC;
    end;


  T_SmeLineRec = record
      object : TObjectPart;
      rectangle : TRectObjPart;
      sme : TSmePart;
      sme_line : TSmeLinePart;
    end;
  TSmeLineRec = T_SmeLineRec;

//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Template.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/Template.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/Template.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _Template_h}
//// {$define _Template_h}




const
  XtNtemplateResource = 'templateResource';  
  XtCTemplateResource = 'TemplateResource';  

type
  TTemplateWidgetClass = ^T_TemplateClassRec;

  TTemplateWidget = ^T_TemplateRec;

  var
    templateWidgetClass : TWidgetClass;cvar;external;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/AsciiSrc.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/AsciiSrc.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/AsciiSrc.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}





//// {$ifndef _XawAsciiSrc_h}
//// {$define _XawAsciiSrc_h}
//// {$include <X11/Xaw3d/TextSrc.h>}


  var
    asciiSrcObjectClass : TWidgetClass;cvar;external;
type
  TAsciiSrcObjectClass = ^T_AsciiSrcClassRec;

  TAsciiSrcObject = ^T_AsciiSrcRec;


const
  AsciiSourceObjectClass = AsciiSrcObjectClass;  
  AsciiSourceObject = AsciiSrcObject;  

  XtCDataCompression = 'DataCompression';  
  XtCPieceSize = 'PieceSize';  
  XtCType = 'Type';  
  XtCUseStringInPlace = 'UseStringInPlace';  
  XtNdataCompression = 'dataCompression';  
  XtNpieceSize = 'pieceSize';  
  XtNtype = 'type';  
  XtNuseStringInPlace = 'useStringInPlace';  
  XtRAsciiType = 'AsciiType';  
  XtEstring = 'string';  
  XtEfile = 'file';  
type
  TXawAsciiType = (XawAsciiFile,XawAsciiString);


//// (* error 
//// extern void XawAsciiSourceFreeString(
//// {$if NeedFunctionPrototypes}

//// {$endif}
in declaration at line 119 *)

//// {$if NeedFunctionPrototypes}

//// {$endif}

function XawAsciiSave(_para1:TWidget):TBoolean;cdecl;external;

//// {$if NeedFunctionPrototypes}
//// (* error 
////     _Xconst char*	/* name */

//// {$endif}
 in declarator_list *)

//// {$if NeedFunctionPrototypes}

//// {$endif}

function XawAsciiSourceChanged(_para1:TWidget):TBoolean;cdecl;external;
//// {$endif}

//// (* error 
//// 

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/SmeThreeD.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/SmeThreeD.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/SmeThreeD.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    PXColor  = ^XColor;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XawSmeThreeD_h}
//// {$define _XawSmeThreeD_h}

//// {$include <X11/Xmu/Converters.h>}
//// {$include <X11/Xaw3d/Sme.h>}


const
  XtNshadowWidth = 'shadowWidth';  
  XtCShadowWidth = 'ShadowWidth';  
  XtNtopShadowPixel = 'topShadowPixel';  
  XtCTopShadowPixel = 'TopShadowPixel';  
  XtNbottomShadowPixel = 'bottomShadowPixel';  
  XtCBottomShadowPixel = 'BottomShadowPixel';  
  XtNtopShadowContrast = 'topShadowContrast';  
  XtCTopShadowContrast = 'TopShadowContrast';  
  XtNbottomShadowContrast = 'bottomShadowContrast';  
  XtCBottomShadowContrast = 'BottomShadowContrast';  
  XtNbeNiceToColormap = 'beNiceToColormap';  
  XtCBeNiceToColormap = 'BeNiceToColormap';  
  XtNbeNiceToColourmap = 'beNiceToColormap';  
  XtCBeNiceToColourmap = 'BeNiceToColormap';  
  XtNuserData = 'userData';  
  XtCUserData = 'UserData';  
type
  TSmeThreeDObjectClass = ^T_SmeThreeDClassRec;

  TSmeThreeDObject = ^T_SmeThreeDRec;
  var
    smeThreeDWidgetClass : TWidgetClass;cvar;external;
//// (* error 
//// extern void XawSme3dComputeTopShadowRGB (
//// {$if NeedFunctionPrototypes}

//// {$endif}
in declaration at line 85 *)
//// {$if NeedFunctionPrototypes}

//// {$endif}

procedure XawSme3dComputeBottomShadowRGB(_para1:TWidget; _para2:PTXColor);cdecl;external;
//// {$endif}

//// (* error 
//// #endif /* _XawSmeThreeD_h */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Scrollbar.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/Scrollbar.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/Scrollbar.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _Scrollbar_h}
//// {$define _Scrollbar_h}

//// {$include <X11/Xmu/Converters.h>}
//// {$include <X11/Xfuncproto.h>}



const
  XtCMinimumThumb = 'MinimumThumb';  
  XtCShown = 'Shown';  
  XtCTopOfThumb = 'TopOfThumb';  
  XtCPickTop = 'PickTop';  
  XtNminimumThumb = 'minimumThumb';  
  XtNtopOfThumb = 'topOfThumb';  
  XtNpickTop = 'pickTop';  
type
  TScrollbarWidget = ^T_ScrollbarRec;

  TScrollbarWidgetClass = ^T_ScrollbarClassRec;
  var
    scrollbarWidgetClass : TWidgetClass;cvar;external;
//// (* error 
//// extern void XawScrollbarSetThumb(
//// {$if NeedFunctionPrototypes}
//// {$if NeedWidePrototypes}

//// {$else}

//// {$endif}
//// {$endif}
in declaration at line 142 *)
//// {$endif}

//// (* error 
//// #endif /* _Scrollbar_h */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Tree.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/Tree.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/Tree.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XawTree_h}
//// {$define _XawTree_h}
//// {$include <X11/Xmu/Converters.h>}


//// {$ifndef _XtStringDefs_h_}

const
  XtNhSpace = 'hSpace';  
  XtNvSpace = 'vSpace';  
  XtCHSpace = 'HSpace';  
  XtCVSpace = 'VSpace';  
//// {$endif}

const
  XtNautoReconfigure = 'autoReconfigure';  
  XtNlineWidth = 'lineWidth';  
  XtNtreeGC = 'treeGC';  
  XtNtreeParent = 'treeParent';  
  XtNgravity = 'gravity';  

  XtCAutoReconfigure = 'AutoReconfigure';  
  XtCLineWidth = 'LineWidth';  
  XtCTreeGC = 'TreeGC';  
  XtCTreeParent = 'TreeParent';  
  XtCGravity = 'Gravity';  
  XtRGC = 'GC';  

  var
    treeWidgetClass : TWidgetClass;cvar;external;
type
  TTreeWidgetClass = ^T_TreeClassRec;

  TTreeWidget = ^T_TreeRec;
//// (* error 
//// extern void XawTreeForceLayout (
//// {$if NeedFunctionPrototypes}

//// {$endif}
in declaration at line 121 *)
//// {$endif}

//// (* error 
//// #endif /* _XawTree_h */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Porthole.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/Porthole.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/Porthole.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XawPorthole_h}
//// {$define _XawPorthole_h}
//// {$include <X11/Xaw3d/Reports.h>}


  var
    portholeWidgetClass : TWidgetClass;cvar;external;
type
  TPortholeWidgetClass = ^T_PortholeClassRec;

  TPortholeWidget = ^T_PortholeRec;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Reports.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/Reports.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/Reports.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _Xaw_Reports_h}
//// {$define _Xaw_Reports_h}





type
  TXawPannerReport = record
      changed : dword;
      slider_x : TPosition;
      slider_y : TPosition;
      slider_width : TDimension;
      slider_height : TDimension;
      canvas_width : TDimension;
      canvas_height : TDimension;
    end;

const
  XawPRSliderX = 1 shl 0;  
  XawPRSliderY = 1 shl 1;  
  XawPRSliderWidth = 1 shl 2;  
  XawPRSliderHeight = 1 shl 3;  
  XawPRCanvasWidth = 1 shl 4;  
  XawPRCanvasHeight = 1 shl 5;  

  XawPRAll = 63;  
  XtNreportCallback = 'reportCallback';  
  XtCReportCallback = 'reportCallback';  
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/ThreeDP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/ThreeDP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/ThreeDP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _ThreeDP_h}
//// {$define _ThreeDP_h}
//// {$include <X11/Xaw3d/ThreeD.h>}
//// {$include <X11/Xaw3d/SimpleP.h>}

const
  XtRRelief = 'Relief';  
type
  TThreeDPart = record
      shadow_width : TDimension;
      top_shadow_pixel : TPixel;
      bot_shadow_pixel : TPixel;
      top_shadow_pxmap : TPixmap;
      bot_shadow_pxmap : TPixmap;
      top_shadow_contrast : longint;
      bot_shadow_contrast : longint;
      top_shadow_GC : TGC;
      bot_shadow_GC : TGC;
      user_data : TXtPointer;
      be_nice_to_cmap : TBoolean;
      relief : TXtRelief;
    end;


  T_ThreeDRec = record
      core : TCorePart;
      simple : TSimplePart;
      threeD : TThreeDPart;
    end;
  TThreeDRec = T_ThreeDRec;

  TThreeDClassPart = record
      shadowdraw : procedure ;cdecl;
    end;
//// (* error 
//// #define XtInheritXaw3dShadowDraw ((void (*)())_XtInherit)
in define line 64 *)


      T_ThreeDClassRec = record
          core_class : TCoreClassPart;
          simple_class : TSimpleClassPart;
          threeD_class : TThreeDClassPart;
        end;
      TThreeDClassRec = T_ThreeDClassRec;

      var
        threeDClassRec : TThreeDClassRec;cvar;external;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/MultiSinkP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/MultiSinkP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/MultiSinkP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

Type
PPosition  = ^Position;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}






//// {$ifndef _XawMultiSinkP_h}
//// {$define _XawMultiSinkP_h}

//// {$include <X11/Xaw3d/TextSinkP.h> }
//// {$include <X11/Xaw3d/MultiSink.h> }

type
  T_MultiSinkClassPart = record
      foo : longint;
    end;
  TMultiSinkClassPart = T_MultiSinkClassPart;


  T_MultiSinkClassRec = record
      object_class : TObjectClassPart;
      text_sink_class : TTextSinkClassPart;
      multi_sink_class : TMultiSinkClassPart;
    end;
  TMultiSinkClassRec = T_MultiSinkClassRec;
  var
    multiSinkClassRec : TMultiSinkClassRec;cvar;external;





type
  TMultiSinkPart = record
      echo : TBoolean;
      display_nonprinting : TBoolean;
      normgc : TGC;
      invgc : TGC;
      xorgc : TGC;
      insertCursorOn : TPixmap;
      laststate : TXawTextInsertState;
      cursor_x : smallint;
      cursor_y : smallint;
      fontset : TXFontSet;
    end;


  T_MultiSinkRec = record
      object : TObjectPart;
      text_sink : TTextSinkPart;
      multi_sink : TMultiSinkPart;
    end;
  TMultiSinkRec = T_MultiSinkRec;

//// {$if NeedFunctionPrototypes}

//// {$endif}

procedure _XawMultiSinkPosToXY(_para1:TWidget; _para2:TXawTextPosition; _para3:PTPosition; _para4:PTPosition);cdecl;external;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/VendorEP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/VendorEP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/VendorEP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _VendorEP_h}
//// {$define _VendorEP_h}
//// {$include <X11/Xaw3d/XawImP.h>}
type
  TXawVendorShellExtClassPart = record
      extension : TXtPointer;
    end;

  T_VendorShellExtClassRec = record
      object_class : TObjectClassPart;
      vendor_shell_ext_class : TXawVendorShellExtClassPart;
    end;
  TXawVendorShellExtClassRec = T_VendorShellExtClassRec;

  TXawVendorShellExtPart = record
      parent : TWidget;
      im : TXawImPart;
      ic : TXawIcPart;
    end;

  TXawVendorShellExtRec = record
      object : TObjectPart;
      vendor_ext : TXawVendorShellExtPart;
    end;
  TXawVendorShellExtWidget = ^TXawVendorShellExtRec;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/LabelP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/LabelP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/LabelP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}





//// {$ifndef _XawLabelP_h}
//// {$define _XawLabelP_h}

//// {$include "Xaw3dP.h"}
//// {$include <X11/Xaw3d/Label.h>}
//// {$include <X11/Xaw3d/ThreeDP.h>}

type
  TLabelClassPart = record
      foo : longint;
    end;


  T_LabelClassRec = record
      core_class : TCoreClassPart;
      simple_class : TSimpleClassPart;
      threeD_class : TThreeDClassPart;
      label_class : TLabelClassPart;
    end;
  TLabelClassRec = T_LabelClassRec;
  var
    labelClassRec : TLabelClassRec;cvar;external;


//// {$ifdef XAW_INTERNATIONALIZATION}
//// {$endif}






type
  TLabelPart = record
      foreground : TPixel;
      font : ^TXFontStruct;
      fontset : TXFontSet;
      _label : ^char;
      justify : TXtJustify;
      internal_width : TDimension;
      internal_height : TDimension;
      pixmap : TPixmap;
      resize : TBoolean;
      encoding : byte;
      left_bitmap : TPixmap;
      normal_GC : TGC;
      gray_GC : TGC;
      stipple : TPixmap;
      stippled : TPixmap;
      left_stippled : TPixmap;
      label_x : TPosition;
      label_y : TPosition;
      label_width : TDimension;
      label_height : TDimension;
      label_len : TDimension;
      lbm_y : longint;
      lbm_width : dword;
      lbm_height : dword;
      depth : dword;
    end;


  T_LabelRec = record
      core : TCorePart;
      simple : TSimplePart;
      threeD : TThreeDPart;
      _label : TLabelPart;
    end;
  TLabelRec = T_LabelRec;

function LEFT_OFFSET(lw : longint) : longint;

//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/ToggleP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/ToggleP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/ToggleP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}





//// {$ifndef _XawToggleP_h}
//// {$define _XawToggleP_h}
//// {$include <X11/Xaw3d/Toggle.h>}
//// {$include <X11/Xaw3d/CommandP.h>}


function streq(a,b : longint) : longint;



type
  T_RadioGroup = record
      prev : ^T_RadioGroup;
      next : ^T_RadioGroup;
      widget : TWidget;
    end;
  TRadioGroup = T_RadioGroup;



  T_ToggleClass = record
      Set : TXtActionProc;
      Unset : TXtActionProc;
      extension : TXtPointer;
    end;
  TToggleClassPart = T_ToggleClass;


  T_ToggleClassRec = record
      core_class : TCoreClassPart;
      simple_class : TSimpleClassPart;
      threeD_class : TThreeDClassPart;
      label_class : TLabelClassPart;
      command_class : TCommandClassPart;
      toggle_class : TToggleClassPart;
    end;
  TToggleClassRec = T_ToggleClassRec;
  var
    toggleClassRec : TToggleClassRec;cvar;external;




type
  TTogglePart = record
      widget : TWidget;
      radio_data : TXtPointer;
      radio_group : ^TRadioGroup;
    end;


  T_ToggleRec = record
      core : TCorePart;
      simple : TSimplePart;
      threeD : TThreeDPart;
      _label : TLabelPart;
      command : TCommandPart;
      toggle : TTogglePart;
    end;
  TToggleRec = T_ToggleRec;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/MultiSrcP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/MultiSrcP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/MultiSrcP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}








//// {$ifndef _XawMultiSrcP_h}
//// {$define _XawMultiSrcP_h}
//// {$include <X11/Xaw3d/TextSrcP.h>}
//// {$include <X11/Xaw3d/MultiSrc.h>}

//// {$ifdef L_tmpnam}

const
  TMPSIZ = L_tmpnam;  
//// {$else}
//// {$ifdef PATH_MAX}

const
  TMPSIZ = PATH_MAX;  
//// {$else}


const
  TMPSIZ = 1024;  
//// {$endif}
//// {$endif}


function MAGIC_VALUE : TXawTextPosition;  

function streq(a,b : longint) : longint;





type
  T_MultiPiece = record
      text : ^Twchar_t;
      used : TXawTextPosition;
      prev : ^T_MultiPiece;
      next : ^T_MultiPiece;
    end;
  TMultiPiece = T_MultiPiece;


  T_MultiSrcClassPart = record
      foo : char;
    end;
  TMultiSrcClassPart = T_MultiSrcClassPart;


  T_MultiSrcClassRec = record
      object_class : TObjectClassPart;
      text_src_class : TTextSrcClassPart;
      multi_src_class : TMultiSrcClassPart;
    end;
  TMultiSrcClassRec = T_MultiSrcClassRec;
  var
    multiSrcClassRec : TMultiSrcClassRec;cvar;external;
















type
  T_MultiSrcPart = record
      ic : TXIC;
      _string : TXtPointer;
      _type : TXawAsciiType;
      piece_size : TXawTextPosition;
      data_compression : TBoolean;
      callback : TXtCallbackList;
      use_string_in_place : TBoolean;
      multi_length : longint;
      is_tempfile : TBoolean;
      changes : TBoolean;
      allocated_string : TBoolean;
      length : TXawTextPosition;
      first_piece : ^TMultiPiece;
    end;
  TMultiSrcPart = T_MultiSrcPart;


  T_MultiSrcRec = record
      object : TObjectPart;
      text_src : TTextSrcPart;
      multi_src : TMultiSrcPart;
    end;
  TMultiSrcRec = T_MultiSrcRec;
//// {$if NeedFunctionPrototypes}

procedure _XawMultiSourceFreeString(_para1:TWidget);cdecl;external;
//// {$else}

procedure _XawMultiSourceFreeString;cdecl;external;
//// {$endif}
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/PannerP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/PannerP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/PannerP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XawPannerP_h}
//// {$define _XawPannerP_h}
//// {$include <X11/Xaw3d/Panner.h>}
//// {$include <X11/Xaw3d/SimpleP.h>		/* parent */}

type
  TPannerClassPart = record
      dummy : longint;
    end;


  T_PannerClassRec = record
      core_class : TCoreClassPart;
      simple_class : TSimpleClassPart;
      panner_class : TPannerClassPart;
    end;
  TPannerClassRec = T_PannerClassRec;



































  TPannerPart = record
      report_callbacks : TXtCallbackList;
      allow_off : TBoolean;
      resize_to_pref : TBoolean;
      foreground : TPixel;
      shadow_color : TPixel;
      shadow_thickness : TDimension;
      default_scale : TDimension;
      line_width : TDimension;
      canvas_width : TDimension;
      canvas_height : TDimension;
      slider_x : TPosition;
      slider_y : TPosition;
      slider_width : TDimension;
      slider_height : TDimension;
      internal_border : TDimension;
      stipple_name : TString;
      slider_gc : TGC;
      shadow_gc : TGC;
      xor_gc : TGC;
      haspect : Tdouble;
      vaspect : Tdouble;
      rubber_band : TBoolean;
      tmp : record
          doing : TBoolean;
          showing : TBoolean;
          startx : TPosition;
          starty : TPosition;
          dx : TPosition;
          dy : TPosition;
          x : TPosition;
          y : TPosition;
        end;
      knob_x : TPosition;
      knob_y : TPosition;
      knob_width : TDimension;
      knob_height : TDimension;
      shadow_valid : TBoolean;
      shadow_rects : array[0..1] of TXRectangle;
      last_x : TPosition;
      last_y : TPosition;
    end;

  T_PannerRec = record
      core : TCorePart;
      simple : TSimplePart;
      panner : TPannerPart;
    end;
  TPannerRec = T_PannerRec;

function PANNER_HSCALE(pw,val : longint) : longint;

function PANNER_VSCALE(pw,val : longint) : longint;

function PANNER_DSCALE(pw,val : longint) : TDimension;


const
  PANNER_DEFAULT_SCALE = 8;  
  PANNER_OUTOFRANGE = -(30000);  

  var
    pannerClassRec : TPannerClassRec;cvar;external;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Text.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/Text.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/Text.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    PXawTextBlock  = ^XawTextBlock;
    PXawTextPosition  = ^XawTextPosition;
    PXawTextSelectType  = ^XawTextSelectType;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XawText_h}
//// {$define _XawText_h}
//// {$include <X11/Xaw3d/Simple.h>}

type
  TXawTextPosition = longint;

  TXawTextScrollMode = (XawtextScrollNever,XawtextScrollWhenNeeded,
    XawtextScrollAlways);

  TXawTextWrapMode = (XawtextWrapNever,XawtextWrapLine,XawtextWrapWord
    );

  TXawTextResizeMode = (XawtextResizeNever,XawtextResizeWidth,XawtextResizeHeight,
    XawtextResizeBoth);

  TXawTextScanDirection = (XawsdLeft,XawsdRight);

  TXawTextEditType = (XawtextRead,XawtextAppend,XawtextEdit);

  TXawTextSelectType = (XawselectNull,XawselectPosition,XawselectChar,
    XawselectWord,XawselectLine,XawselectParagraph,
    XawselectAll);

  TXawTextBlock = record
      firstPos : longint;
      length : longint;
      ptr : ^char;
      format : dword;
    end;
  TXawTextBlockPtr = ^TXawTextBlock;
//// {$include <X11/Xaw3d/TextSink.h>}
//// {$include <X11/Xaw3d/TextSrc.h>}

const
  XtEtextScrollNever = 'never';  
  XtEtextScrollWhenNeeded = 'whenneeded';  
  XtEtextScrollAlways = 'always';  
  XtEtextWrapNever = 'never';  
  XtEtextWrapLine = 'line';  
  XtEtextWrapWord = 'word';  
  XtEtextResizeNever = 'never';  
  XtEtextResizeWidth = 'width';  
  XtEtextResizeHeight = 'height';  
  XtEtextResizeBoth = 'both';  
  XtNautoFill = 'autoFill';  
  XtNbottomMargin = 'bottomMargin';  
  XtNdialogHOffset = 'dialogHOffset';  
  XtNdialogVOffset = 'dialogVOffset';  
  XtNdisplayCaret = 'displayCaret';  
  XtNdisplayPosition = 'displayPosition';  
  XtNleftMargin = 'leftMargin';  
  XtNrightMargin = 'rightMargin';  
  XtNscrollVertical = 'scrollVertical';  
  XtNscrollHorizontal = 'scrollHorizontal';  
  XtNselectTypes = 'selectTypes';  
  XtNtopMargin = 'topMargin';  
  XtNwrap = 'wrap';  
  XtCAutoFill = 'AutoFill';  
  XtCScroll = 'Scroll';  
  XtCSelectTypes = 'SelectTypes';  
  XtCWrap = 'Wrap';  
//// {$ifndef _XtStringDefs_h_}

const
  XtNinsertPosition = 'insertPosition';  
  XtNresize = 'resize';  
  XtNselection = 'selection';  
  XtCResize = 'Resize';  
//// {$endif}


const
  XawTextSearchError = -(12345);  

  XawReplaceError = -(1);  
  XawEditDone = 0;  
  XawEditError = 1;  
  XawPositionError = 2;  
  var
    FMT8BIT : dword;cvar;external;
    XawFmt8Bit : dword;cvar;external;
    XawFmtWide : dword;cvar;external;

    textWidgetClass : TWidgetClass;cvar;external;
type
  TTextWidgetClass = ^T_TextClassRec;

  TTextWidget = ^T_TextRec;
//// (* error 
//// extern XrmQuark _XawTextFormat(
//// {$if NeedFunctionPrototypes}

//// {$endif}
in declaration at line 178 *)
//// {$if NeedFunctionPrototypes}

//// {$endif}

procedure XawTextDisplay(_para1:TWidget);cdecl;external;
//// {$if NeedFunctionPrototypes}

//// {$endif}

procedure XawTextEnableRedisplay(_para1:TWidget);cdecl;external;
//// {$if NeedFunctionPrototypes}

//// {$endif}

procedure XawTextDisableRedisplay(_para1:TWidget);cdecl;external;
//// {$if NeedFunctionPrototypes}

//// {$endif}

procedure XawTextSetSelectionArray(_para1:TWidget; _para2:PTXawTextSelectType);cdecl;external;
//// {$if NeedFunctionPrototypes}

//// {$endif}

procedure XawTextGetSelectionPos(_para1:TWidget; _para2:PTXawTextPosition; _para3:PTXawTextPosition);cdecl;external;
//// {$if NeedFunctionPrototypes}

//// {$endif}

procedure XawTextSetSource(_para1:TWidget; _para2:TWidget; _para3:TXawTextPosition);cdecl;external;
//// {$if NeedFunctionPrototypes}

//// {$endif}

function XawTextReplace(_para1:TWidget; _para2:TXawTextPosition; _para3:TXawTextPosition; _para4:PTXawTextBlock):longint;cdecl;external;
//// {$if NeedFunctionPrototypes}

//// {$endif}

function XawTextTopPosition(_para1:TWidget):TXawTextPosition;cdecl;external;
//// {$if NeedFunctionPrototypes}

//// {$endif}

procedure XawTextSetInsertionPoint(_para1:TWidget; _para2:TXawTextPosition);cdecl;external;
//// {$if NeedFunctionPrototypes}

//// {$endif}

function XawTextGetInsertionPoint(_para1:TWidget):TXawTextPosition;cdecl;external;
//// {$if NeedFunctionPrototypes}

//// {$endif}

procedure XawTextUnsetSelection(_para1:TWidget);cdecl;external;
//// {$if NeedFunctionPrototypes}

//// {$endif}

procedure XawTextSetSelection(_para1:TWidget; _para2:TXawTextPosition; _para3:TXawTextPosition);cdecl;external;
//// {$if NeedFunctionPrototypes}

//// {$endif}

procedure XawTextInvalidate(_para1:TWidget; _para2:TXawTextPosition; _para3:TXawTextPosition);cdecl;external;
//// {$if NeedFunctionPrototypes}

//// {$endif}

function XawTextGetSource(_para1:TWidget):TWidget;cdecl;external;
//// {$if NeedFunctionPrototypes}
//// {$if NeedWidePrototypes}
//// {$else}
//// {$endif}

//// {$endif}

function XawTextSearch(_para1:TWidget; _para2:longint; _para3:TXawTextScanDirection; _para4:PTXawTextBlock):TXawTextPosition;cdecl;external;
//// {$if NeedFunctionPrototypes}
//// {$if NeedWidePrototypes}

//// {$else}

//// {$endif}
//// {$endif}

procedure XawTextDisplayCaret(_para1:TWidget; Boolean:longint);cdecl;external;

//// {$include <X11/Xaw3d/AsciiSrc.h>}
//// {$include <X11/Xaw3d/AsciiSink.h>}
//// {$endif}


//// (* error 
//// /* DON'T ADD STUFF AFTER THIS #endif */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/RepeaterP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/RepeaterP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/RepeaterP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XawRepeaterP_h}
//// {$define _XawRepeaterP_h}
//// {$include <X11/Xaw3d/CommandP.h>}
//// {$include <X11/Xaw3d/Repeater.h>}

type
  TRepeaterClassPart = record
      dummy : longint;
    end;


  T_RepeaterClassRec = record
      core_class : TCoreClassPart;
      simple_class : TSimpleClassPart;
      threeD_class : TThreeDClassPart;
      label_class : TLabelClassPart;
      command_class : TCommandClassPart;
      repeater_class : TRepeaterClassPart;
    end;
  TRepeaterClassRec = T_RepeaterClassRec;













  TRepeaterPart = record
      initial_delay : longint;
      repeat_delay : longint;
      minimum_delay : longint;
      decay : longint;
      flash : TBoolean;
      start_callbacks : TXtCallbackList;
      stop_callbacks : TXtCallbackList;
      next_delay : longint;
      timer : TXtIntervalId;
    end;

  T_RepeaterRec = record
      core : TCorePart;
      simple : TSimplePart;
      threeD : TThreeDPart;
      _label : TLabelPart;
      command : TCommandPart;
      repeater : TRepeaterPart;
    end;
  TRepeaterRec = T_RepeaterRec;


const
  REP_DEF_DECAY = 5;  

  REP_DEF_INITIAL_DELAY = 200;  

  REP_DEF_MINIMUM_DELAY = 10;  

  REP_DEF_REPEAT_DELAY = 50;  

  var
    repeaterClassRec : TRepeaterClassRec;cvar;external;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/TreeP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/TreeP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/TreeP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XawTreeP_h}
//// {$define _XawTreeP_h}
//// {$include <X11/Xaw3d/Tree.h>}
type
  T_TreeClassPart = record
      ignore : longint;
    end;
  TTreeClassPart = T_TreeClassPart;

  T_TreeClassRec = record
      core_class : TCoreClassPart;
      composite_class : TCompositeClassPart;
      constraint_class : TConstraintClassPart;
      tree_class : TTreeClassPart;
    end;
  TTreeClassRec = T_TreeClassRec;
  var
    treeClassRec : TTreeClassRec;cvar;external;













type
  TTreePart = record
      hpad : TDimension;
      vpad : TDimension;
      line_width : TDimension;
      foreground : TPixel;
      gravity : TXtGravity;
      auto_reconfigure : TBoolean;
      gc : TGC;
      tree_root : TWidget;
      largest : ^TDimension;
      n_largest : longint;
      maxwidth : TDimension;
      maxheight : TDimension;
    end;

  T_TreeRec = record
      core : TCorePart;
      composite : TCompositePart;
      constraint : TConstraintPart;
      tree : TTreePart;
    end;
  TTreeRec = T_TreeRec;








  T_TreeConstraintsPart = record
      parent : TWidget;
      gc : TGC;
      children : ^TWidget;
      n_children : longint;
      max_children : longint;
      bbsubwidth : TDimension;
      bbsubheight : TDimension;
      bbwidth : TDimension;
      bbheight : TDimension;
      x : TPosition;
      y : TPosition;
    end;
  TTreeConstraintsPart = T_TreeConstraintsPart;

  T_TreeConstraintsRec = record
      tree : TTreeConstraintsPart;
    end;
  TTreeConstraintsRec = T_TreeConstraintsRec;
  TTreeConstraints = ^T_TreeConstraintsRec;


function TREE_CONSTRAINT(w : longint) : TTreeConstraints;


const
  TREE_INITIAL_DEPTH = 10;  
  TREE_HORIZONTAL_DEFAULT_SPACING = 20;  
  TREE_VERTICAL_DEFAULT_SPACING = 6;  
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Tip.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/Tip.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/Tip.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XawTip_h}
//// {$define _XawTip_h}

//// {$include "Xaw3dP.h"}
//// {$include <X11/Xaw3d/Simple.h>}

type
  TTipWidgetClass = ^T_TipClassRec;

  TTipWidget = ^T_TipRec;
  var
    tipWidgetClass : TWidgetClass;cvar;external;

const
  XawTextEncoding8bit = 0;  
  XawTextEncodingChar2b = 1;  
  XtNencoding = 'encoding';  
  XtNtimeout = 'timeout';  
  XtNtip = 'tip';  
//// {$ifdef XAW_INTERNATIONALIZATION}
//// {$ifndef XtNfontSet}

const
  XtNfontSet = 'fontSet';  
//// {$endif}
//// {$ifndef XtCFontSet}

const
  XtCFontSet = 'FontSet';  
//// {$endif}
//// {$endif}

const
  XtCEncoding = 'Encoding';  
  XtCTimeout = 'Timeout';  
  XtCTip = 'Tip';  
//// {$ifndef _XtStringDefs_h_}

const
  XtNforeground = 'foreground';  
  XtNlabel = 'label';  
  XtNfont = 'font';  
  XtNinternalWidth = 'internalWidth';  
  XtNinternalHeight = 'internalHeight';  
//// {$endif}


//// {$if NeedFunctionPrototypes}
//// {$endif}

procedure XawTipEnable(_para1:TWidget; _para2:TString);cdecl;external;

//// {$if NeedFunctionPrototypes}
//// {$endif}

procedure XawTipDisable(_para1:TWidget);cdecl;external;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/PortholeP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/PortholeP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/PortholeP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// {$ifndef _XawPortholeP_h}
//// {$define _XawPortholeP_h}
//// {$include <X11/Xaw3d/Porthole.h>}

type
  TPortholeClassPart = record
      dummy : longint;
    end;


  T_PortholeClassRec = record
      core_class : TCoreClassPart;
      composite_class : TCompositeClassPart;
      porthole_class : TPortholeClassPart;
    end;
  TPortholeClassRec = T_PortholeClassRec;





  TPortholePart = record
      report_callbacks : TXtCallbackList;
    end;

  T_PortholeRec = record
      core : TCorePart;
      composite : TCompositePart;
      porthole : TPortholePart;
    end;
  TPortholeRec = T_PortholeRec;

  var
    portholeClassRec : TPortholeClassRec;cvar;external;
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/TextSrc.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/TextSrc.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/TextSrc.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    PAtom  = ^Atom;
    Pdword  = ^dword;
    Plongint  = ^longint;
    PXawTextBlock  = ^XawTextBlock;
    PXtPointer  = ^XtPointer;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XawTextSrc_h}
//// {$define _XawTextSrc_h}

//// {$include <X11/Xaw3d/Text.h>}


  var
    textSrcObjectClass : TWidgetClass;cvar;external;
type
  TTextSrcObjectClass = ^T_TextSrcClassRec;

  TTextSrcObject = ^T_TextSrcRec;

  TXawTextScanType = (XawstPositions,XawstWhiteSpace,XawstEOL,
    XawstParagraph,XawstAll);

  ThighlightType = (Normal,Selected);

  TXawTextSelectionMode = (XawsmTextSelect,XawsmTextExtend);

  TXawTextSelectionAction = (XawactionStart,XawactionAdjust,XawactionEnd
    );


const
  XawTextReadError = -(1);  
  XawTextScanError = -(1);  


//// (* error 
//// extern XawTextPosition XawTextSourceRead(
//// {$if NeedFunctionPrototypes}

//// {$endif}
in declaration at line 117 *)

//// {$if NeedFunctionPrototypes}

//// {$endif}

function XawTextSourceReplace(_para1:TWidget; _para2:TXawTextPosition; _para3:TXawTextPosition; _para4:PTXawTextBlock):longint;cdecl;external;

//// {$if NeedFunctionPrototypes}
//// {$if NeedWidePrototypes}
//// {$else}
//// {$endif}
//// {$if NeedWidePrototypes}

//// {$else}

//// {$endif}
//// {$endif}

function XawTextSourceScan(_para1:TWidget; _para2:TXawTextPosition; _para3:longint; _para4:longint; _para5:TXawTextScanType; 
               _para6:TXawTextScanDirection; _para7:longint; Boolean:longint):TXawTextPosition;cdecl;external;

//// {$if NeedFunctionPrototypes}
//// {$if NeedWidePrototypes}
//// {$else}
//// {$endif}

//// {$endif}

function XawTextSourceSearch(_para1:TWidget; _para2:TXawTextPosition; _para3:longint; _para4:TXawTextScanDirection; _para5:PTXawTextBlock):TXawTextPosition;cdecl;external;

//// {$if NeedFunctionPrototypes}

//// {$endif}

function XawTextSourceConvertSelection(_para1:TWidget; _para2:PTAtom; _para3:PTAtom; _para4:PTAtom; _para5:PTXtPointer; 
               _para6:Pdword; _para7:Plongint):TBoolean;cdecl;external;

//// {$if NeedFunctionPrototypes}

//// {$endif}

procedure XawTextSourceSetSelection(_para1:TWidget; _para2:TXawTextPosition; _para3:TXawTextPosition; _para4:TAtom);cdecl;external;
//// {$endif}


//// (* error 
//// /* DON'T ADD STUFF AFTER THIS #endif */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/List.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/List.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/List.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}





//// {$ifndef _XawList_h}
//// {$define _XawList_h}

//// {$include "Xaw3dP.h"}
//// {$include <X11/Xaw3d/Simple.h>}



const
  XAW_LIST_NONE = -(1);  
  XtCList = 'List';  
  XtCSpacing = 'Spacing';  
  XtCColumns = 'Columns';  
  XtCLongest = 'Longest';  
  XtCNumberStrings = 'NumberStrings';  
  XtNcursor = 'cursor';  
  XtNcolumnSpacing = 'columnSpacing';  
  XtNdefaultColumns = 'defaultColumns';  
  XtNforceColumns = 'forceColumns';  
  XtNlist = 'list';  
  XtNlongest = 'longest';  
  XtNnumberStrings = 'numberStrings';  
  XtNpasteBuffer = 'pasteBuffer';  
  XtNrowSpacing = 'rowSpacing';  
  XtNverticalList = 'verticalList';  
//// {$ifdef XAW_INTERNATIONALIZATION}
//// {$ifndef XtNfontSet}

const
  XtNfontSet = 'fontSet';  
//// {$endif}
//// {$ifndef XtCFontSet}

const
  XtCFontSet = 'FontSet';  
//// {$endif}
//// {$endif}

  var
    listWidgetClass : TWidgetClass;cvar;external;
type
  TListWidgetClass = ^T_ListClassRec;

  TListWidget = ^T_ListRec;


  T_XawListReturnStruct = record
      _string : TString;
      list_index : longint;
    end;
  TXawListReturnStruct = T_XawListReturnStruct;


//// (* error 
//// extern void XawListChange(
//// {$if NeedFunctionPrototypes}
//// {$if NeedWidePrototypes}

//// {$else}

//// {$endif}
//// {$endif}
in declaration at line 196 *)

//// {$if NeedFunctionPrototypes}

//// {$endif}

procedure XawListUnhighlight(_para1:TWidget);cdecl;external;

//// {$if NeedFunctionPrototypes}

//// {$endif}

procedure XawListHighlight(_para1:TWidget; _para2:longint);cdecl;external;

//// {$if NeedFunctionPrototypes}

//// {$endif}

function XawListShowCurrent(_para1:TWidget):^TXawListReturnStruct;cdecl;external;
//// {$endif}

//// (* error 
//// #endif /* _XawList_h */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/AsciiText.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/AsciiText.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/AsciiText.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}






//// {$ifndef _AsciiText_h}
//// {$define _AsciiText_h}

//// {$include "Xaw3dP.h"}
//// {$include <X11/Xaw3d/Text.h>		/* AsciiText is a subclass of Text */}
//// {$include <X11/Xaw3d/AsciiSrc.h>}
//// {$ifdef XAW_INTERNATIONALIZATION}
//// {$include <X11/Xaw3d/MultiSrc.h>}
//// {$endif}


type
  TAsciiTextWidgetClass = ^T_AsciiTextClassRec;

  TAsciiWidget = ^T_AsciiRec;
  var
    asciiTextWidgetClass : TWidgetClass;cvar;external;

//// {$ifdef ASCII_STRING}
    asciiStringWidgetClass : TWidgetClass;cvar;external;
//// {$endif}
//// {$ifdef ASCII_DISK}
  var
    asciiDiskWidgetClass : TWidgetClass;cvar;external;
//// {$endif}
//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Paned.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/Paned.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/Paned.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

    Type
    Plongint  = ^longint;
//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}





//// {$ifndef _XawPaned_h}
//// {$define _XawPaned_h}
//// {$include <X11/Constraint.h>}
//// {$include <X11/Xmu/Converters.h>}



const
  PANED_ASK_CHILD = 0;  
  PANED_GRIP_SIZE = 0;  

  XtNallowResize = 'allowResize';  
  XtNbetweenCursor = 'betweenCursor';  
  XtNverticalBetweenCursor = 'verticalBetweenCursor';  
  XtNhorizontalBetweenCursor = 'horizontalBetweenCursor';  
  XtNgripCursor = 'gripCursor';  
  XtNgripIndent = 'gripIndent';  
  XtNhorizontalGripCursor = 'horizontalGripCursor';  
  XtNinternalBorderColor = 'internalBorderColor';  
  XtNinternalBorderWidth = 'internalBorderWidth';  
  XtNleftCursor = 'leftCursor';  
  XtNlowerCursor = 'lowerCursor';  
  XtNrefigureMode = 'refigureMode';  
  XtNposition = 'position';  
  XtNmin = 'min';  
  XtNmax = 'max';  
  XtNpreferredPaneSize = 'preferredPaneSize';  
  XtNresizeToPreferred = 'resizeToPreferred';  
  XtNrightCursor = 'rightCursor';  
  XtNshowGrip = 'showGrip';  
  XtNskipAdjust = 'skipAdjust';  
  XtNupperCursor = 'upperCursor';  
  XtNverticalGripCursor = 'verticalGripCursor';  
  XtCGripIndent = 'GripIndent';  
  XtCMin = 'Min';  
  XtCMax = 'Max';  
  XtCPreferredPaneSize = 'PreferredPaneSize';  
  XtCShowGrip = 'ShowGrip';  

  var
    panedWidgetClass : TWidgetClass;cvar;external;
type
  TPanedWidgetClass = ^T_PanedClassRec;

  TPanedWidget = ^T_PanedRec;


//// (* error 
//// extern void XawPanedSetMinMax(
//// {$if NeedFunctionPrototypes}

//// {$endif}
in declaration at line 188 *)

//// {$if NeedFunctionPrototypes}

//// {$endif}

procedure XawPanedGetMinMax(_para1:TWidget; _para2:Plongint; _para3:Plongint);cdecl;external;

//// {$if NeedFunctionPrototypes}
//// {$if NeedWidePrototypes}

//// {$else}

//// {$endif}
//// {$endif}

procedure XawPanedSetRefigureMode(_para1:TWidget; Boolean:longint);cdecl;external;

//// {$if NeedFunctionPrototypes}

//// {$endif}

function XawPanedGetNumSub(_para1:TWidget):longint;cdecl;external;

//// {$if NeedFunctionPrototypes}
//// {$if NeedWidePrototypes}

//// {$else}

//// {$endif}
//// {$endif}

procedure XawPanedAllowResize(_para1:TWidget; Boolean:longint);cdecl;external;
//// {$endif}

//// (* error 
//// #endif /* _XawPaned_h */

// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/SmeBSBP.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/SmeBSBP.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/SmeBSBP.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}




//// {$ifndef _XawSmeBSBP_h}
//// {$define _XawSmeBSBP_h}

//// {$include "Xaw3dP.h"}
//// {$include <X11/Xaw3d/SmeThreeDP.h>}
//// {$include <X11/Xaw3d/SmeBSB.h>}

type
  T_SmeBSBClassPart = record
      extension : TXtPointer;
    end;
  TSmeBSBClassPart = T_SmeBSBClassPart;


  T_SmeBSBClassRec = record
      rect_class : TRectObjClassPart;
      sme_class : TSmeClassPart;
      sme_threeD_class : TSmeThreeDClassPart;
      sme_bsb_class : TSmeBSBClassPart;
    end;
  TSmeBSBClassRec = T_SmeBSBClassRec;
  var
    smeBSBClassRec : TSmeBSBClassRec;cvar;external;








//// {$ifdef XAW_INTERNATIONALIZATION}

//// {$endif}











type
  TSmeBSBPart = record
      _label : TString;
      vert_space : longint;
      left_bitmap : TPixmap;
      right_bitmap : TPixmap;
      left_margin : TDimension;
      right_margin : TDimension;
      foreground : TPixel;
      font : ^TXFontStruct;
      fontset : TXFontSet;
      justify : TXtJustify;
      underline : longint;
      set_values_area_cleared : TBoolean;
      norm_gc : TGC;
      rev_gc : TGC;
      norm_gray_gc : TGC;
      invert_gc : TGC;
      left_stippled : TPixmap;
      right_stippled : TPixmap;
      left_bitmap_width : TDimension;
      left_bitmap_height : TDimension;
      right_bitmap_width : TDimension;
      right_bitmap_height : TDimension;
      left_depth : dword;
      right_depth : dword;
      menu_name : TString;
    end;


  T_SmeBSBRec = record
      object : TObjectPart;
      rectangle : TRectObjPart;
      sme : TSmePart;
      sme_threeD : TSmeThreeDPart;
      sme_bsb : TSmeBSBPart;
    end;
  TSmeBSBRec = T_SmeBSBRec;

//// {$endif}


// --------- inteface ------------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/XawInit.pp
// -------------------------------------------------

{
  Automatically converted by H2Pas 1.0.0 from /tmp/Xaw-Konverter-header/Xaw3d/XawInit.h
  The following command line parameters were used:
    /tmp/Xaw-Konverter-header/Xaw3d/XawInit.h
    -lgtk4
    -p
    -t
    -S
    -d
    -c
}

//// {$IFDEF FPC}
//// {$PACKRECORDS C}
//// {$ENDIF}



//// (* error 
//// extern void XawInitializeWidgetSet();	/* called from ClassInit procs */
in declaration at line 29 *)

//// (* error 
//// _XFUNCPROTOEND


implementation
// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/ShellP.pp
// -------------------------------------------------

    function XtInheritRootGeometryManager : TXtGeometryHandler;
      begin
        XtInheritRootGeometryManager:=TXtGeometryHandler(_XtInherit);
      end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/CallbackI.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/ResConfigP.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xfuncproto.pp
// -------------------------------------------------

    function __has_attribute(x : longint) : longint;
    begin
      __has_attribute:=0;
    end;

    function __has_feature(x : longint) : longint;
    begin
      __has_feature:=0;
    end;

    function __has_extension(x : longint) : longint;
    begin
      __has_extension:=0;
    end;

    function _X_SENTINEL(x : longint) : longint;
    begin
      _X_SENTINEL:=__attribute__(__sentinel__(x));
    end;

    function _X_HIDDEN : longint; { return type might be wrong }
      begin
        _X_HIDDEN:=__attribute__(visibility('hidden'));
      end;

    function _X_INTERNAL : longint; { return type might be wrong }
      begin
        _X_INTERNAL:=__attribute__(visibility('internal'));
      end;

    function _X_LIKELY(x : longint) : longint;
    begin
      _X_LIKELY:=__builtin_expect( not ( not (x)),1);
    end;

    function _X_UNLIKELY(x : longint) : longint;
    begin
      _X_UNLIKELY:=__builtin_expect( not ( not (x)),0);
    end;

    function _X_LIKELY(x : longint) : longint;
    begin
      _X_LIKELY:=x;
    end;

    function _X_UNLIKELY(x : longint) : longint;
    begin
      _X_UNLIKELY:=x;
    end;

    function _X_DEPRECATED_MSG(_msg : longint) : longint;
    begin
      _X_DEPRECATED_MSG:=_X_DEPRECATED;
    end;

    function _X_NOTSAN : longint; { return type might be wrong }
      begin
        _X_NOTSAN:=__attribute__(no_sanitize_thread);
      end;

    function _X_NONSTRING : longint; { return type might be wrong }
      begin
        _X_NONSTRING:=__attribute__(nonstring);
      end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/CoreP.pp
// -------------------------------------------------

function XtInheritTranslations : TString;
  begin
    XtInheritTranslations:=TString(@(_XtInheritTranslations));
  end;

function XtInheritRealize : TXtRealizeProc;
  begin
    XtInheritRealize:=TXtRealizeProc(_XtInherit);
  end;

function XtInheritResize : TXtWidgetProc;
  begin
    XtInheritResize:=TXtWidgetProc(_XtInherit);
  end;

function XtInheritExpose : TXtExposeProc;
  begin
    XtInheritExpose:=TXtExposeProc(_XtInherit);
  end;

function XtInheritSetValuesAlmost : TXtAlmostProc;
  begin
    XtInheritSetValuesAlmost:=TXtAlmostProc(_XtInherit);
  end;

function XtInheritAcceptFocus : TXtAcceptFocusProc;
  begin
    XtInheritAcceptFocus:=TXtAcceptFocusProc(_XtInherit);
  end;

function XtInheritQueryGeometry : TXtGeometryHandler;
  begin
    XtInheritQueryGeometry:=TXtGeometryHandler(_XtInherit);
  end;

function XtInheritDisplayAccelerator : TXtStringProc;
  begin
    XtInheritDisplayAccelerator:=TXtStringProc(_XtInherit);
  end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/xpm.pp
// -------------------------------------------------

    function XpmReadPixmapFile(dpy,d,file,pix,mask,att : longint) : longint;
    begin
      XpmReadPixmapFile:=XpmReadFileToPixmap(dpy,d,file,pix,mask,att);
    end;

    function XpmWritePixmapFile(dpy,file,pix,mask,att : longint) : longint;
    begin
      XpmWritePixmapFile:=XpmWriteFileFromPixmap(dpy,file,pix,mask,att);
    end;

    function XReadPixmapFile(dpy,d,file,pix,mask,att : longint) : longint;
    begin
      XReadPixmapFile:=XpmReadFileToPixmap(dpy,d,file,pix,mask,att);
    end;

    function XWritePixmapFile(dpy,file,pix,mask,att : longint) : longint;
    begin
      XWritePixmapFile:=XpmWriteFileFromPixmap(dpy,file,pix,mask,att);
    end;

    function XCreatePixmapFromData(dpy,d,data,pix,mask,att : longint) : longint;
    begin
      XCreatePixmapFromData:=XpmCreatePixmapFromData(dpy,d,data,pix,mask,att);
    end;

    function XCreateDataFromPixmap(dpy,data,pix,mask,att : longint) : longint;
    begin
      XCreateDataFromPixmap:=XpmCreateDataFromPixmap(dpy,data,pix,mask,att);
    end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xwinsock.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xos.pp
// -------------------------------------------------

function index(s,c : longint) : longint;
begin
  index:=strchr(s,c);
end;

function rindex(s,c : longint) : longint;
begin
  rindex:=strrchr(s,c);
end;

    function X_GETTIMEOFDAY(t : longint) : longint;
    begin
      X_GETTIMEOFDAY:=gettimeofday(t);
    end;

    function X_GETTIMEOFDAY(t : longint) : longint;
    begin
      X_GETTIMEOFDAY:=gettimeofday(t,pTtimezone(0));
    end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/PassivGraI.pp
// -------------------------------------------------

    function ownerEvents(var a : _XtServerGrabRec) : dword;
    begin
      ownerEvents:=(a.flag0 and bm__XtServerGrabRec_ownerEvents) shr bp__XtServerGrabRec_ownerEvents;
    end;

    procedure set_ownerEvents(var a : _XtServerGrabRec; __ownerEvents : dword);
    begin
      a.flag0:=a.flag0 or ((__ownerEvents shl bp__XtServerGrabRec_ownerEvents) and bm__XtServerGrabRec_ownerEvents);
    end;

    function pointerMode(var a : _XtServerGrabRec) : dword;
    begin
      pointerMode:=(a.flag0 and bm__XtServerGrabRec_pointerMode) shr bp__XtServerGrabRec_pointerMode;
    end;

    procedure set_pointerMode(var a : _XtServerGrabRec; __pointerMode : dword);
    begin
      a.flag0:=a.flag0 or ((__pointerMode shl bp__XtServerGrabRec_pointerMode) and bm__XtServerGrabRec_pointerMode);
    end;

    function keyboardMode(var a : _XtServerGrabRec) : dword;
    begin
      keyboardMode:=(a.flag0 and bm__XtServerGrabRec_keyboardMode) shr bp__XtServerGrabRec_keyboardMode;
    end;

    procedure set_keyboardMode(var a : _XtServerGrabRec; __keyboardMode : dword);
    begin
      a.flag0:=a.flag0 or ((__keyboardMode shl bp__XtServerGrabRec_keyboardMode) and bm__XtServerGrabRec_keyboardMode);
    end;

    function hasExt(var a : _XtServerGrabRec) : dword;
    begin
      hasExt:=(a.flag0 and bm__XtServerGrabRec_hasExt) shr bp__XtServerGrabRec_hasExt;
    end;

    procedure set_hasExt(var a : _XtServerGrabRec; __hasExt : dword);
    begin
      a.flag0:=a.flag0 or ((__hasExt shl bp__XtServerGrabRec_hasExt) and bm__XtServerGrabRec_hasExt);
    end;

    function confineToIsWidgetWin(var a : _XtServerGrabRec) : dword;
    begin
      confineToIsWidgetWin:=(a.flag0 and bm__XtServerGrabRec_confineToIsWidgetWin) shr bp__XtServerGrabRec_confineToIsWidgetWin;
    end;

    procedure set_confineToIsWidgetWin(var a : _XtServerGrabRec; __confineToIsWidgetWin : dword);
    begin
      a.flag0:=a.flag0 or ((__confineToIsWidgetWin shl bp__XtServerGrabRec_confineToIsWidgetWin) and bm__XtServerGrabRec_confineToIsWidgetWin);
    end;

    function GRABEXT(p : longint) : TXtServerGrabExtPtr;
    begin
      GRABEXT:=TXtServerGrabExtPtr(Tp(+(1)));
    end;

    function map_handler_added(var a : XtPerWidgetInputRec) : dword;
    begin
      map_handler_added:=(a.flag0 and bm_XtPerWidgetInputRec_map_handler_added) shr bp_XtPerWidgetInputRec_map_handler_added;
    end;

    procedure set_map_handler_added(var a : XtPerWidgetInputRec; __map_handler_added : dword);
    begin
      a.flag0:=a.flag0 or ((__map_handler_added shl bp_XtPerWidgetInputRec_map_handler_added) and bm_XtPerWidgetInputRec_map_handler_added);
    end;

    function realize_handler_added(var a : XtPerWidgetInputRec) : dword;
    begin
      realize_handler_added:=(a.flag0 and bm_XtPerWidgetInputRec_realize_handler_added) shr bp_XtPerWidgetInputRec_realize_handler_added;
    end;

    procedure set_realize_handler_added(var a : XtPerWidgetInputRec; __realize_handler_added : dword);
    begin
      a.flag0:=a.flag0 or ((__realize_handler_added shl bp_XtPerWidgetInputRec_realize_handler_added) and bm_XtPerWidgetInputRec_realize_handler_added);
    end;

    function active_handler_added(var a : XtPerWidgetInputRec) : dword;
    begin
      active_handler_added:=(a.flag0 and bm_XtPerWidgetInputRec_active_handler_added) shr bp_XtPerWidgetInputRec_active_handler_added;
    end;

    procedure set_active_handler_added(var a : XtPerWidgetInputRec; __active_handler_added : dword);
    begin
      a.flag0:=a.flag0 or ((__active_handler_added shl bp_XtPerWidgetInputRec_active_handler_added) and bm_XtPerWidgetInputRec_active_handler_added);
    end;

    function haveFocus(var a : XtPerWidgetInputRec) : dword;
    begin
      haveFocus:=(a.flag0 and bm_XtPerWidgetInputRec_haveFocus) shr bp_XtPerWidgetInputRec_haveFocus;
    end;

    procedure set_haveFocus(var a : XtPerWidgetInputRec; __haveFocus : dword);
    begin
      a.flag0:=a.flag0 or ((__haveFocus shl bp_XtPerWidgetInputRec_haveFocus) and bm_XtPerWidgetInputRec_haveFocus);
    end;

    function IsPseudoGrab(g : longint) : longint;
    begin
      IsPseudoGrab:=g=XtPseudoPassiveServerGrab;
    end;

    function _XtGetGrabList(pdi : longint) : longint;
    begin
      _XtGetGrabList:=@(pdi^.grabList);
    end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/ConstrainP.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xcms.pp
// -------------------------------------------------

function XcmsUndefinedFormat : TXcmsColorFormat;
  begin
    XcmsUndefinedFormat:=TXcmsColorFormat($00000000);
  end;

function XcmsCIEXYZFormat : TXcmsColorFormat;
  begin
    XcmsCIEXYZFormat:=TXcmsColorFormat($00000001);
  end;

function XcmsCIEuvYFormat : TXcmsColorFormat;
  begin
    XcmsCIEuvYFormat:=TXcmsColorFormat($00000002);
  end;

function XcmsCIExyYFormat : TXcmsColorFormat;
  begin
    XcmsCIExyYFormat:=TXcmsColorFormat($00000003);
  end;

function XcmsCIELabFormat : TXcmsColorFormat;
  begin
    XcmsCIELabFormat:=TXcmsColorFormat($00000004);
  end;

function XcmsCIELuvFormat : TXcmsColorFormat;
  begin
    XcmsCIELuvFormat:=TXcmsColorFormat($00000005);
  end;

function XcmsTekHVCFormat : TXcmsColorFormat;
  begin
    XcmsTekHVCFormat:=TXcmsColorFormat($00000006);
  end;

function XcmsRGBFormat : TXcmsColorFormat;
  begin
    XcmsRGBFormat:=TXcmsColorFormat($80000000);
  end;

function XcmsRGBiFormat : TXcmsColorFormat;
  begin
    XcmsRGBiFormat:=TXcmsColorFormat($80000001);
  end;

function DisplayOfCCC(ccc : longint) : longint;
begin
  DisplayOfCCC:=ccc^.dpy;
end;

function ScreenNumberOfCCC(ccc : longint) : longint;
begin
  ScreenNumberOfCCC:=ccc^.screenNumber;
end;

function VisualOfCCC(ccc : longint) : longint;
begin
  VisualOfCCC:=ccc^.visual;
end;

function ClientWhitePointOfCCC(ccc : longint) : longint;
begin
  ClientWhitePointOfCCC:=@(ccc^.clientWhitePt);
end;

function ScreenWhitePointOfCCC(ccc : longint) : longint;
begin
  ScreenWhitePointOfCCC:=@(ccc^.(pPerScrnInfo^.screenWhitePt));
end;

function FunctionSetOfCCC(ccc : longint) : longint;
begin
  FunctionSetOfCCC:=ccc^.(pPerScrnInfo^.functionSet);
end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xmd.pp
// -------------------------------------------------

function cvtINT8toInt(val : longint) : longint;
begin
  cvtINT8toInt:=val;
end;

function cvtINT16toInt(val : longint) : longint;
begin
  cvtINT16toInt:=val;
end;

function cvtINT32toInt(val : longint) : longint;
begin
  cvtINT32toInt:=val;
end;

function cvtINT8toShort(val : longint) : longint;
begin
  cvtINT8toShort:=val;
end;

function cvtINT16toShort(val : longint) : longint;
begin
  cvtINT16toShort:=val;
end;

function cvtINT32toShort(val : longint) : longint;
begin
  cvtINT32toShort:=val;
end;

function cvtINT8toLong(val : longint) : longint;
begin
  cvtINT8toLong:=val;
end;

function cvtINT16toLong(val : longint) : longint;
begin
  cvtINT16toLong:=val;
end;

function cvtINT32toLong(val : longint) : longint;
begin
  cvtINT32toLong:=val;
end;

function NEXTPTR(p,t : longint) : longint;
begin
  NEXTPTR:=(pTt(p))+1;
end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/XF86keysym.pp
// -------------------------------------------------

function _EVDEVK(_v : longint) : longint;
begin
  _EVDEVK:=$10081000+_v;
end;

function XF86XK_BrightnessAuto : longint; { return type might be wrong }
  begin
    XF86XK_BrightnessAuto:=_EVDEVK($0F4);
  end;

function XF86XK_DisplayOff : longint; { return type might be wrong }
  begin
    XF86XK_DisplayOff:=_EVDEVK($0F5);
  end;

function XF86XK_Info : longint; { return type might be wrong }
  begin
    XF86XK_Info:=_EVDEVK($166);
  end;

function XF86XK_AspectRatio : longint; { return type might be wrong }
  begin
    XF86XK_AspectRatio:=_EVDEVK($177);
  end;

function XF86XK_DVD : longint; { return type might be wrong }
  begin
    XF86XK_DVD:=_EVDEVK($185);
  end;

function XF86XK_Audio : longint; { return type might be wrong }
  begin
    XF86XK_Audio:=_EVDEVK($188);
  end;

function XF86XK_ChannelUp : longint; { return type might be wrong }
  begin
    XF86XK_ChannelUp:=_EVDEVK($192);
  end;

function XF86XK_ChannelDown : longint; { return type might be wrong }
  begin
    XF86XK_ChannelDown:=_EVDEVK($193);
  end;

function XF86XK_Break : longint; { return type might be wrong }
  begin
    XF86XK_Break:=_EVDEVK($19B);
  end;

function XF86XK_VideoPhone : longint; { return type might be wrong }
  begin
    XF86XK_VideoPhone:=_EVDEVK($1A0);
  end;

function XF86XK_ZoomReset : longint; { return type might be wrong }
  begin
    XF86XK_ZoomReset:=_EVDEVK($1A4);
  end;

function XF86XK_Editor : longint; { return type might be wrong }
  begin
    XF86XK_Editor:=_EVDEVK($1A6);
  end;

function XF86XK_GraphicsEditor : longint; { return type might be wrong }
  begin
    XF86XK_GraphicsEditor:=_EVDEVK($1A8);
  end;

function XF86XK_Presentation : longint; { return type might be wrong }
  begin
    XF86XK_Presentation:=_EVDEVK($1A9);
  end;

function XF86XK_Database : longint; { return type might be wrong }
  begin
    XF86XK_Database:=_EVDEVK($1AA);
  end;

function XF86XK_Voicemail : longint; { return type might be wrong }
  begin
    XF86XK_Voicemail:=_EVDEVK($1AC);
  end;

function XF86XK_Addressbook : longint; { return type might be wrong }
  begin
    XF86XK_Addressbook:=_EVDEVK($1AD);
  end;

function XF86XK_DisplayToggle : longint; { return type might be wrong }
  begin
    XF86XK_DisplayToggle:=_EVDEVK($1AF);
  end;

function XF86XK_SpellCheck : longint; { return type might be wrong }
  begin
    XF86XK_SpellCheck:=_EVDEVK($1B0);
  end;

function XF86XK_ContextMenu : longint; { return type might be wrong }
  begin
    XF86XK_ContextMenu:=_EVDEVK($1B6);
  end;

function XF86XK_MediaRepeat : longint; { return type might be wrong }
  begin
    XF86XK_MediaRepeat:=_EVDEVK($1B7);
  end;

function XF86XK_10ChannelsUp : longint; { return type might be wrong }
  begin
    XF86XK_10ChannelsUp:=_EVDEVK($1B8);
  end;

function XF86XK_10ChannelsDown : longint; { return type might be wrong }
  begin
    XF86XK_10ChannelsDown:=_EVDEVK($1B9);
  end;

function XF86XK_Images : longint; { return type might be wrong }
  begin
    XF86XK_Images:=_EVDEVK($1BA);
  end;

function XF86XK_NotificationCenter : longint; { return type might be wrong }
  begin
    XF86XK_NotificationCenter:=_EVDEVK($1BC);
  end;

function XF86XK_PickupPhone : longint; { return type might be wrong }
  begin
    XF86XK_PickupPhone:=_EVDEVK($1BD);
  end;

function XF86XK_HangupPhone : longint; { return type might be wrong }
  begin
    XF86XK_HangupPhone:=_EVDEVK($1BE);
  end;

function XF86XK_Fn : longint; { return type might be wrong }
  begin
    XF86XK_Fn:=_EVDEVK($1D0);
  end;

function XF86XK_Fn_Esc : longint; { return type might be wrong }
  begin
    XF86XK_Fn_Esc:=_EVDEVK($1D1);
  end;

function XF86XK_FnRightShift : longint; { return type might be wrong }
  begin
    XF86XK_FnRightShift:=_EVDEVK($1E5);
  end;

function XF86XK_Numeric0 : longint; { return type might be wrong }
  begin
    XF86XK_Numeric0:=_EVDEVK($200);
  end;

function XF86XK_Numeric1 : longint; { return type might be wrong }
  begin
    XF86XK_Numeric1:=_EVDEVK($201);
  end;

function XF86XK_Numeric2 : longint; { return type might be wrong }
  begin
    XF86XK_Numeric2:=_EVDEVK($202);
  end;

function XF86XK_Numeric3 : longint; { return type might be wrong }
  begin
    XF86XK_Numeric3:=_EVDEVK($203);
  end;

function XF86XK_Numeric4 : longint; { return type might be wrong }
  begin
    XF86XK_Numeric4:=_EVDEVK($204);
  end;

function XF86XK_Numeric5 : longint; { return type might be wrong }
  begin
    XF86XK_Numeric5:=_EVDEVK($205);
  end;

function XF86XK_Numeric6 : longint; { return type might be wrong }
  begin
    XF86XK_Numeric6:=_EVDEVK($206);
  end;

function XF86XK_Numeric7 : longint; { return type might be wrong }
  begin
    XF86XK_Numeric7:=_EVDEVK($207);
  end;

function XF86XK_Numeric8 : longint; { return type might be wrong }
  begin
    XF86XK_Numeric8:=_EVDEVK($208);
  end;

function XF86XK_Numeric9 : longint; { return type might be wrong }
  begin
    XF86XK_Numeric9:=_EVDEVK($209);
  end;

function XF86XK_NumericStar : longint; { return type might be wrong }
  begin
    XF86XK_NumericStar:=_EVDEVK($20A);
  end;

function XF86XK_NumericPound : longint; { return type might be wrong }
  begin
    XF86XK_NumericPound:=_EVDEVK($20B);
  end;

function XF86XK_NumericA : longint; { return type might be wrong }
  begin
    XF86XK_NumericA:=_EVDEVK($20C);
  end;

function XF86XK_NumericB : longint; { return type might be wrong }
  begin
    XF86XK_NumericB:=_EVDEVK($20D);
  end;

function XF86XK_NumericC : longint; { return type might be wrong }
  begin
    XF86XK_NumericC:=_EVDEVK($20E);
  end;

function XF86XK_NumericD : longint; { return type might be wrong }
  begin
    XF86XK_NumericD:=_EVDEVK($20F);
  end;

function XF86XK_CameraFocus : longint; { return type might be wrong }
  begin
    XF86XK_CameraFocus:=_EVDEVK($210);
  end;

function XF86XK_WPSButton : longint; { return type might be wrong }
  begin
    XF86XK_WPSButton:=_EVDEVK($211);
  end;

function XF86XK_CameraZoomIn : longint; { return type might be wrong }
  begin
    XF86XK_CameraZoomIn:=_EVDEVK($215);
  end;

function XF86XK_CameraZoomOut : longint; { return type might be wrong }
  begin
    XF86XK_CameraZoomOut:=_EVDEVK($216);
  end;

function XF86XK_CameraUp : longint; { return type might be wrong }
  begin
    XF86XK_CameraUp:=_EVDEVK($217);
  end;

function XF86XK_CameraDown : longint; { return type might be wrong }
  begin
    XF86XK_CameraDown:=_EVDEVK($218);
  end;

function XF86XK_CameraLeft : longint; { return type might be wrong }
  begin
    XF86XK_CameraLeft:=_EVDEVK($219);
  end;

function XF86XK_CameraRight : longint; { return type might be wrong }
  begin
    XF86XK_CameraRight:=_EVDEVK($21A);
  end;

function XF86XK_AttendantOn : longint; { return type might be wrong }
  begin
    XF86XK_AttendantOn:=_EVDEVK($21B);
  end;

function XF86XK_AttendantOff : longint; { return type might be wrong }
  begin
    XF86XK_AttendantOff:=_EVDEVK($21C);
  end;

function XF86XK_AttendantToggle : longint; { return type might be wrong }
  begin
    XF86XK_AttendantToggle:=_EVDEVK($21D);
  end;

function XF86XK_LightsToggle : longint; { return type might be wrong }
  begin
    XF86XK_LightsToggle:=_EVDEVK($21E);
  end;

function XF86XK_ALSToggle : longint; { return type might be wrong }
  begin
    XF86XK_ALSToggle:=_EVDEVK($230);
  end;

function XF86XK_Buttonconfig : longint; { return type might be wrong }
  begin
    XF86XK_Buttonconfig:=_EVDEVK($240);
  end;

function XF86XK_Taskmanager : longint; { return type might be wrong }
  begin
    XF86XK_Taskmanager:=_EVDEVK($241);
  end;

function XF86XK_Journal : longint; { return type might be wrong }
  begin
    XF86XK_Journal:=_EVDEVK($242);
  end;

function XF86XK_ControlPanel : longint; { return type might be wrong }
  begin
    XF86XK_ControlPanel:=_EVDEVK($243);
  end;

function XF86XK_AppSelect : longint; { return type might be wrong }
  begin
    XF86XK_AppSelect:=_EVDEVK($244);
  end;

function XF86XK_Screensaver : longint; { return type might be wrong }
  begin
    XF86XK_Screensaver:=_EVDEVK($245);
  end;

function XF86XK_VoiceCommand : longint; { return type might be wrong }
  begin
    XF86XK_VoiceCommand:=_EVDEVK($246);
  end;

function XF86XK_Assistant : longint; { return type might be wrong }
  begin
    XF86XK_Assistant:=_EVDEVK($247);
  end;

function XF86XK_EmojiPicker : longint; { return type might be wrong }
  begin
    XF86XK_EmojiPicker:=_EVDEVK($249);
  end;

function XF86XK_Dictate : longint; { return type might be wrong }
  begin
    XF86XK_Dictate:=_EVDEVK($24A);
  end;

function XF86XK_BrightnessMin : longint; { return type might be wrong }
  begin
    XF86XK_BrightnessMin:=_EVDEVK($250);
  end;

function XF86XK_BrightnessMax : longint; { return type might be wrong }
  begin
    XF86XK_BrightnessMax:=_EVDEVK($251);
  end;

function XF86XK_KbdInputAssistPrev : longint; { return type might be wrong }
  begin
    XF86XK_KbdInputAssistPrev:=_EVDEVK($260);
  end;

function XF86XK_KbdInputAssistNext : longint; { return type might be wrong }
  begin
    XF86XK_KbdInputAssistNext:=_EVDEVK($261);
  end;

function XF86XK_KbdInputAssistPrevgroup : longint; { return type might be wrong }
  begin
    XF86XK_KbdInputAssistPrevgroup:=_EVDEVK($262);
  end;

function XF86XK_KbdInputAssistNextgroup : longint; { return type might be wrong }
  begin
    XF86XK_KbdInputAssistNextgroup:=_EVDEVK($263);
  end;

function XF86XK_KbdInputAssistAccept : longint; { return type might be wrong }
  begin
    XF86XK_KbdInputAssistAccept:=_EVDEVK($264);
  end;

function XF86XK_KbdInputAssistCancel : longint; { return type might be wrong }
  begin
    XF86XK_KbdInputAssistCancel:=_EVDEVK($265);
  end;

function XF86XK_RightUp : longint; { return type might be wrong }
  begin
    XF86XK_RightUp:=_EVDEVK($266);
  end;

function XF86XK_RightDown : longint; { return type might be wrong }
  begin
    XF86XK_RightDown:=_EVDEVK($267);
  end;

function XF86XK_LeftUp : longint; { return type might be wrong }
  begin
    XF86XK_LeftUp:=_EVDEVK($268);
  end;

function XF86XK_LeftDown : longint; { return type might be wrong }
  begin
    XF86XK_LeftDown:=_EVDEVK($269);
  end;

function XF86XK_RootMenu : longint; { return type might be wrong }
  begin
    XF86XK_RootMenu:=_EVDEVK($26A);
  end;

function XF86XK_MediaTopMenu : longint; { return type might be wrong }
  begin
    XF86XK_MediaTopMenu:=_EVDEVK($26B);
  end;

function XF86XK_Numeric11 : longint; { return type might be wrong }
  begin
    XF86XK_Numeric11:=_EVDEVK($26C);
  end;

function XF86XK_Numeric12 : longint; { return type might be wrong }
  begin
    XF86XK_Numeric12:=_EVDEVK($26D);
  end;

function XF86XK_AudioDesc : longint; { return type might be wrong }
  begin
    XF86XK_AudioDesc:=_EVDEVK($26E);
  end;

function XF86XK_3DMode : longint; { return type might be wrong }
  begin
    XF86XK_3DMode:=_EVDEVK($26F);
  end;

function XF86XK_NextFavorite : longint; { return type might be wrong }
  begin
    XF86XK_NextFavorite:=_EVDEVK($270);
  end;

function XF86XK_StopRecord : longint; { return type might be wrong }
  begin
    XF86XK_StopRecord:=_EVDEVK($271);
  end;

function XF86XK_PauseRecord : longint; { return type might be wrong }
  begin
    XF86XK_PauseRecord:=_EVDEVK($272);
  end;

function XF86XK_VOD : longint; { return type might be wrong }
  begin
    XF86XK_VOD:=_EVDEVK($273);
  end;

function XF86XK_Unmute : longint; { return type might be wrong }
  begin
    XF86XK_Unmute:=_EVDEVK($274);
  end;

function XF86XK_FastReverse : longint; { return type might be wrong }
  begin
    XF86XK_FastReverse:=_EVDEVK($275);
  end;

function XF86XK_SlowReverse : longint; { return type might be wrong }
  begin
    XF86XK_SlowReverse:=_EVDEVK($276);
  end;

function XF86XK_Data : longint; { return type might be wrong }
  begin
    XF86XK_Data:=_EVDEVK($277);
  end;

function XF86XK_OnScreenKeyboard : longint; { return type might be wrong }
  begin
    XF86XK_OnScreenKeyboard:=_EVDEVK($278);
  end;

function XF86XK_PrivacyScreenToggle : longint; { return type might be wrong }
  begin
    XF86XK_PrivacyScreenToggle:=_EVDEVK($279);
  end;

function XF86XK_SelectiveScreenshot : longint; { return type might be wrong }
  begin
    XF86XK_SelectiveScreenshot:=_EVDEVK($27A);
  end;

function XF86XK_Macro1 : longint; { return type might be wrong }
  begin
    XF86XK_Macro1:=_EVDEVK($290);
  end;

function XF86XK_Macro2 : longint; { return type might be wrong }
  begin
    XF86XK_Macro2:=_EVDEVK($291);
  end;

function XF86XK_Macro3 : longint; { return type might be wrong }
  begin
    XF86XK_Macro3:=_EVDEVK($292);
  end;

function XF86XK_Macro4 : longint; { return type might be wrong }
  begin
    XF86XK_Macro4:=_EVDEVK($293);
  end;

function XF86XK_Macro5 : longint; { return type might be wrong }
  begin
    XF86XK_Macro5:=_EVDEVK($294);
  end;

function XF86XK_Macro6 : longint; { return type might be wrong }
  begin
    XF86XK_Macro6:=_EVDEVK($295);
  end;

function XF86XK_Macro7 : longint; { return type might be wrong }
  begin
    XF86XK_Macro7:=_EVDEVK($296);
  end;

function XF86XK_Macro8 : longint; { return type might be wrong }
  begin
    XF86XK_Macro8:=_EVDEVK($297);
  end;

function XF86XK_Macro9 : longint; { return type might be wrong }
  begin
    XF86XK_Macro9:=_EVDEVK($298);
  end;

function XF86XK_Macro10 : longint; { return type might be wrong }
  begin
    XF86XK_Macro10:=_EVDEVK($299);
  end;

function XF86XK_Macro11 : longint; { return type might be wrong }
  begin
    XF86XK_Macro11:=_EVDEVK($29A);
  end;

function XF86XK_Macro12 : longint; { return type might be wrong }
  begin
    XF86XK_Macro12:=_EVDEVK($29B);
  end;

function XF86XK_Macro13 : longint; { return type might be wrong }
  begin
    XF86XK_Macro13:=_EVDEVK($29C);
  end;

function XF86XK_Macro14 : longint; { return type might be wrong }
  begin
    XF86XK_Macro14:=_EVDEVK($29D);
  end;

function XF86XK_Macro15 : longint; { return type might be wrong }
  begin
    XF86XK_Macro15:=_EVDEVK($29E);
  end;

function XF86XK_Macro16 : longint; { return type might be wrong }
  begin
    XF86XK_Macro16:=_EVDEVK($29F);
  end;

function XF86XK_Macro17 : longint; { return type might be wrong }
  begin
    XF86XK_Macro17:=_EVDEVK($2A0);
  end;

function XF86XK_Macro18 : longint; { return type might be wrong }
  begin
    XF86XK_Macro18:=_EVDEVK($2A1);
  end;

function XF86XK_Macro19 : longint; { return type might be wrong }
  begin
    XF86XK_Macro19:=_EVDEVK($2A2);
  end;

function XF86XK_Macro20 : longint; { return type might be wrong }
  begin
    XF86XK_Macro20:=_EVDEVK($2A3);
  end;

function XF86XK_Macro21 : longint; { return type might be wrong }
  begin
    XF86XK_Macro21:=_EVDEVK($2A4);
  end;

function XF86XK_Macro22 : longint; { return type might be wrong }
  begin
    XF86XK_Macro22:=_EVDEVK($2A5);
  end;

function XF86XK_Macro23 : longint; { return type might be wrong }
  begin
    XF86XK_Macro23:=_EVDEVK($2A6);
  end;

function XF86XK_Macro24 : longint; { return type might be wrong }
  begin
    XF86XK_Macro24:=_EVDEVK($2A7);
  end;

function XF86XK_Macro25 : longint; { return type might be wrong }
  begin
    XF86XK_Macro25:=_EVDEVK($2A8);
  end;

function XF86XK_Macro26 : longint; { return type might be wrong }
  begin
    XF86XK_Macro26:=_EVDEVK($2A9);
  end;

function XF86XK_Macro27 : longint; { return type might be wrong }
  begin
    XF86XK_Macro27:=_EVDEVK($2AA);
  end;

function XF86XK_Macro28 : longint; { return type might be wrong }
  begin
    XF86XK_Macro28:=_EVDEVK($2AB);
  end;

function XF86XK_Macro29 : longint; { return type might be wrong }
  begin
    XF86XK_Macro29:=_EVDEVK($2AC);
  end;

function XF86XK_Macro30 : longint; { return type might be wrong }
  begin
    XF86XK_Macro30:=_EVDEVK($2AD);
  end;

function XF86XK_MacroRecordStart : longint; { return type might be wrong }
  begin
    XF86XK_MacroRecordStart:=_EVDEVK($2B0);
  end;

function XF86XK_MacroRecordStop : longint; { return type might be wrong }
  begin
    XF86XK_MacroRecordStop:=_EVDEVK($2B1);
  end;

function XF86XK_MacroPresetCycle : longint; { return type might be wrong }
  begin
    XF86XK_MacroPresetCycle:=_EVDEVK($2B2);
  end;

function XF86XK_MacroPreset1 : longint; { return type might be wrong }
  begin
    XF86XK_MacroPreset1:=_EVDEVK($2B3);
  end;

function XF86XK_MacroPreset2 : longint; { return type might be wrong }
  begin
    XF86XK_MacroPreset2:=_EVDEVK($2B4);
  end;

function XF86XK_MacroPreset3 : longint; { return type might be wrong }
  begin
    XF86XK_MacroPreset3:=_EVDEVK($2B5);
  end;

function XF86XK_KbdLcdMenu1 : longint; { return type might be wrong }
  begin
    XF86XK_KbdLcdMenu1:=_EVDEVK($2B8);
  end;

function XF86XK_KbdLcdMenu2 : longint; { return type might be wrong }
  begin
    XF86XK_KbdLcdMenu2:=_EVDEVK($2B9);
  end;

function XF86XK_KbdLcdMenu3 : longint; { return type might be wrong }
  begin
    XF86XK_KbdLcdMenu3:=_EVDEVK($2BA);
  end;

function XF86XK_KbdLcdMenu4 : longint; { return type might be wrong }
  begin
    XF86XK_KbdLcdMenu4:=_EVDEVK($2BB);
  end;

function XF86XK_KbdLcdMenu5 : longint; { return type might be wrong }
  begin
    XF86XK_KbdLcdMenu5:=_EVDEVK($2BC);
  end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/ObjectP.pp
// -------------------------------------------------

    function XtInheritAllocate : TXtAllocateProc;
      begin
        XtInheritAllocate:=TXtAllocateProc(_XtInherit);
      end;

    function XtInheritDeallocate : TXtDeallocateProc;
      begin
        XtInheritDeallocate:=TXtDeallocateProc(_XtInherit);
      end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/ConvertI.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Composite.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/CreateI.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xosdefs.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/VendorP.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/VarargsI.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xlibint.pp
// -------------------------------------------------

function XAllocIDs(dpy,ids,n : longint) : longint;
begin
  XAllocIDs:=dpy^.idlist_alloc(dpyidsn);
end;

function X_DPY_GET_REQUEST(dpy : longint) : longint;
begin
  X_DPY_GET_REQUEST:=(Tuint64_t((pT_XDisplay(dpy))^.request))+((Tuint64_t((pT_XDisplay(dpy))^.request_upper32bit)) shl 32);
end;

    function X_DPY_GET_LAST_REQUEST_READ(dpy : longint) : longint;
    begin
      X_DPY_GET_LAST_REQUEST_READ:=(Tuint64_t((pT_XDisplay(dpy))^.last_request_read))+((Tuint64_t((pT_XDisplay(dpy))^.last_request_read_upper32bit)) shl 32);
    end;

    function X_DPY_WIDEN_UNSIGNED_LONG_SEQ(dpy,ulseq : longint) : longint;
    begin
      X_DPY_WIDEN_UNSIGNED_LONG_SEQ:=(Tuint64_t(ulseq))+(((Tuint64_t((pT_XDisplay(dpy))^.request_upper32bit))-(Tuint64_t(ulseq>((pT_XDisplay(dpy))^.request)))) shl 32);
    end;

    function X_DPY_GET_REQUEST(dpy : longint) : longint;
    begin
      X_DPY_GET_REQUEST:=(pT_XDisplay(dpy))^.request;
    end;

    function X_DPY_GET_LAST_REQUEST_READ(dpy : longint) : longint;
    begin
      X_DPY_GET_LAST_REQUEST_READ:=(pT_XDisplay(dpy))^.last_request_read;
    end;

    function X_DPY_WIDEN_UNSIGNED_LONG_SEQ(dpy,ulseq : longint) : longint;
    begin
      X_DPY_WIDEN_UNSIGNED_LONG_SEQ:=ulseq;
    end;

    function Xfree(ptr : longint) : longint;
    begin
      Xfree:=free(ptr);
    end;

    function Xmalloc(size : longint) : longint;
    var
       if_local1 : longint;
    (* result types are not known *)
    begin
      Xmalloc:=malloc(Tsize_t(size=(if_local1)));
    end;

    function Xrealloc(ptr,size : longint) : longint;
    var
       if_local1 : longint;
    (* result types are not known *)
    begin
      Xrealloc:=realloc(ptr,Tsize_t(size=(if_local1)));
    end;

    function Xcalloc(nelem,elsize : longint) : longint;
    var
       if_local1 : longint;
    (* result types are not known *)
    begin
      Xcalloc:=calloc(Tsize_t(nelem=(if_local1)),Tsize_t(elsize));
    end;

    function Xmalloc(size : longint) : longint;
    begin
      Xmalloc:=malloc(Tsize_t(size));
    end;

    function Xrealloc(ptr,size : longint) : longint;
    begin
      Xrealloc:=realloc(ptr,Tsize_t(size));
    end;

    function Xcalloc(nelem,elsize : longint) : longint;
    begin
      Xcalloc:=calloc(Tsize_t(nelem),Tsize_t(elsize));
    end;

    function _XRead16Pad(dpy,data,len : longint) : longint;
    begin
      _XRead16Pad:=_XReadPad(dpy,pchar(data),len);
    end;

    function _XRead16(dpy,data,len : longint) : longint;
    begin
      _XRead16:=_XRead(dpy,pchar(data),len);
    end;

    function _XRead32(dpy,data,len : longint) : longint;
    begin
      _XRead32:=_XRead(dpy,pchar(data),len);
    end;

    function PackData16(dpy,data,len : longint) : longint;
    begin
      PackData16:=Data16(dpy,data,len);
    end;

    function PackData32(dpy,data,len : longint) : longint;
    begin
      PackData32:=Data32(dpy,data,len);
    end;

    function PackData(dpy,data,len : longint) : longint;
    begin
      PackData:=PackData16(dpy,data,len);
    end;

    function min(a,b : longint) : longint;
    var
       if_local1 : longint;
    (* result types are not known *)
    begin
      if a<b then
        if_local1:=a
      else
        if_local1:=b;
      min:=if_local1;
    end;

    function max(a,b : longint) : longint;
    var
       if_local1 : longint;
    (* result types are not known *)
    begin
      if a>b then
        if_local1:=a
      else
        if_local1:=b;
      max:=if_local1;
    end;

    function CI_NONEXISTCHAR(cs : longint) : longint;
    begin
      CI_NONEXISTCHAR:=((cs^.width)=0) and (@(((((cs^.rbearing) or (cs^.lbearing)) or (cs^.ascent)) or (cs^.descent))=0));
    end;

    function _XOpenFile(path,flags : longint) : longint;
    begin
      _XOpenFile:=open(path,flags);
    end;

    function _XOpenFileMode(path,flags,mode : longint) : longint;
    begin
      _XOpenFileMode:=open(path,flags,mode);
    end;

    function _XFopenFile(path,mode : longint) : longint;
    begin
      _XFopenFile:=fopen(path,mode);
    end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/XWDFile.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xauth.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/keysym.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xarch.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xresource.pp
// -------------------------------------------------

    function NULLQUARK : TXrmQuark;
      begin
        NULLQUARK:=TXrmQuark(0);
      end;

    function NULLSTRING : TXrmString;
      begin
        NULLSTRING:=TXrmString(0);
      end;

    function XrmStringsEqual(a1,a2 : longint) : longint;
    begin
      XrmStringsEqual:=(strcmp(a1,a2))=0;
    end;

    function XrmNameToString(name : longint) : longint;
    begin
      XrmNameToString:=XrmQuarkToString(name);
    end;

    function XrmStringToName(_string : longint) : longint;
    begin
      XrmStringToName:=XrmStringToQuark(_string);
    end;

    function XrmStringToNameList(str,name : longint) : longint;
    begin
      XrmStringToNameList:=XrmStringToQuarkList(str,name);
    end;

    function XrmClassToString(c_class : longint) : longint;
    begin
      XrmClassToString:=XrmQuarkToString(c_class);
    end;

    function XrmStringToClass(c_class : longint) : longint;
    begin
      XrmStringToClass:=XrmStringToQuark(c_class);
    end;

    function XrmStringToClassList(str,c_class : longint) : longint;
    begin
      XrmStringToClassList:=XrmStringToQuarkList(str,c_class);
    end;

    function XrmStringToRepresentation(_string : longint) : longint;
    begin
      XrmStringToRepresentation:=XrmStringToQuark(_string);
    end;

    function XrmRepresentationToString(_type : longint) : longint;
    begin
      XrmRepresentationToString:=XrmQuarkToString(_type);
    end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Object.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/ImUtil.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/IntrinsicP.pp
// -------------------------------------------------

    function XtExposeNoCompress : TXtEnum;
      begin
        XtExposeNoCompress:=TXtEnum(_False);
      end;

    function XtExposeCompressSeries : TXtEnum;
      begin
        XtExposeCompressSeries:=TXtEnum(_True);
      end;

    function XtDisplay(widget : longint) : longint;
    begin
      XtDisplay:=DisplayOfScreen(widget^.(core.screen));
    end;

    function XtScreen(widget : longint) : longint;
    begin
      XtScreen:=widget^.(core.screen);
    end;

    function XtWindow(widget : longint) : longint;
    begin
      XtWindow:=widget^.(core.window);
    end;

    function XtClass(widget : longint) : longint;
    begin
      XtClass:=widget^.(core.widget_class);
    end;

    function XtSuperclass(widget : longint) : longint;
    begin
      XtSuperclass:=(XtClass(widget))^.(core_class.superclass);
    end;

    function XtIsRealized(object : longint) : longint;
    begin
      XtIsRealized:=(XtWindowOfObject(object))<>None;
    end;

    function XtParent(widget : longint) : longint;
    begin
      XtParent:=widget^.(core.parent);
    end;

    function XtIsRectObj(obj : longint) : longint;
    begin
      XtIsRectObj:=((TObject(obj))^.(object.(widget_class^.(core_class.class_inited)))) and $02;
    end;

    function XtIsWidget(obj : longint) : longint;
    begin
      XtIsWidget:=((TObject(obj))^.(object.(widget_class^.(core_class.class_inited)))) and $04;
    end;

    function XtIsComposite(obj : longint) : longint;
    begin
      XtIsComposite:=((TObject(obj))^.(object.(widget_class^.(core_class.class_inited)))) and $08;
    end;

    function XtIsConstraint(obj : longint) : longint;
    begin
      XtIsConstraint:=((TObject(obj))^.(object.(widget_class^.(core_class.class_inited)))) and $10;
    end;

    function XtIsShell(obj : longint) : longint;
    begin
      XtIsShell:=((TObject(obj))^.(object.(widget_class^.(core_class.class_inited)))) and $20;
    end;

    function XtIsWMShell(obj : longint) : longint;
    begin
      XtIsWMShell:=((TObject(obj))^.(object.(widget_class^.(core_class.class_inited)))) and $40;
    end;

    function XtIsTopLevelShell(obj : longint) : longint;
    begin
      XtIsTopLevelShell:=((TObject(obj))^.(object.(widget_class^.(core_class.class_inited)))) and $80;
    end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xw32defs.pp
// -------------------------------------------------

function sleep(x : longint) : longint;
begin
  sleep:=Sleep(x*1000);
end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xatom.pp
// -------------------------------------------------

function XA_PRIMARY : TAtom;
  begin
    XA_PRIMARY:=TAtom(1);
  end;

function XA_SECONDARY : TAtom;
  begin
    XA_SECONDARY:=TAtom(2);
  end;

function XA_ARC : TAtom;
  begin
    XA_ARC:=TAtom(3);
  end;

function XA_ATOM : TAtom;
  begin
    XA_ATOM:=TAtom(4);
  end;

function XA_BITMAP : TAtom;
  begin
    XA_BITMAP:=TAtom(5);
  end;

function XA_CARDINAL : TAtom;
  begin
    XA_CARDINAL:=TAtom(6);
  end;

function XA_COLORMAP : TAtom;
  begin
    XA_COLORMAP:=TAtom(7);
  end;

function XA_CURSOR : TAtom;
  begin
    XA_CURSOR:=TAtom(8);
  end;

function XA_CUT_BUFFER0 : TAtom;
  begin
    XA_CUT_BUFFER0:=TAtom(9);
  end;

function XA_CUT_BUFFER1 : TAtom;
  begin
    XA_CUT_BUFFER1:=TAtom(10);
  end;

function XA_CUT_BUFFER2 : TAtom;
  begin
    XA_CUT_BUFFER2:=TAtom(11);
  end;

function XA_CUT_BUFFER3 : TAtom;
  begin
    XA_CUT_BUFFER3:=TAtom(12);
  end;

function XA_CUT_BUFFER4 : TAtom;
  begin
    XA_CUT_BUFFER4:=TAtom(13);
  end;

function XA_CUT_BUFFER5 : TAtom;
  begin
    XA_CUT_BUFFER5:=TAtom(14);
  end;

function XA_CUT_BUFFER6 : TAtom;
  begin
    XA_CUT_BUFFER6:=TAtom(15);
  end;

function XA_CUT_BUFFER7 : TAtom;
  begin
    XA_CUT_BUFFER7:=TAtom(16);
  end;

function XA_DRAWABLE : TAtom;
  begin
    XA_DRAWABLE:=TAtom(17);
  end;

function XA_FONT : TAtom;
  begin
    XA_FONT:=TAtom(18);
  end;

function XA_INTEGER : TAtom;
  begin
    XA_INTEGER:=TAtom(19);
  end;

function XA_PIXMAP : TAtom;
  begin
    XA_PIXMAP:=TAtom(20);
  end;

function XA_POINT : TAtom;
  begin
    XA_POINT:=TAtom(21);
  end;

function XA_RECTANGLE : TAtom;
  begin
    XA_RECTANGLE:=TAtom(22);
  end;

function XA_RESOURCE_MANAGER : TAtom;
  begin
    XA_RESOURCE_MANAGER:=TAtom(23);
  end;

function XA_RGB_COLOR_MAP : TAtom;
  begin
    XA_RGB_COLOR_MAP:=TAtom(24);
  end;

function XA_RGB_BEST_MAP : TAtom;
  begin
    XA_RGB_BEST_MAP:=TAtom(25);
  end;

function XA_RGB_BLUE_MAP : TAtom;
  begin
    XA_RGB_BLUE_MAP:=TAtom(26);
  end;

function XA_RGB_DEFAULT_MAP : TAtom;
  begin
    XA_RGB_DEFAULT_MAP:=TAtom(27);
  end;

function XA_RGB_GRAY_MAP : TAtom;
  begin
    XA_RGB_GRAY_MAP:=TAtom(28);
  end;

function XA_RGB_GREEN_MAP : TAtom;
  begin
    XA_RGB_GREEN_MAP:=TAtom(29);
  end;

function XA_RGB_RED_MAP : TAtom;
  begin
    XA_RGB_RED_MAP:=TAtom(30);
  end;

function XA_STRING : TAtom;
  begin
    XA_STRING:=TAtom(31);
  end;

function XA_VISUALID : TAtom;
  begin
    XA_VISUALID:=TAtom(32);
  end;

function XA_WINDOW : TAtom;
  begin
    XA_WINDOW:=TAtom(33);
  end;

function XA_WM_COMMAND : TAtom;
  begin
    XA_WM_COMMAND:=TAtom(34);
  end;

function XA_WM_HINTS : TAtom;
  begin
    XA_WM_HINTS:=TAtom(35);
  end;

function XA_WM_CLIENT_MACHINE : TAtom;
  begin
    XA_WM_CLIENT_MACHINE:=TAtom(36);
  end;

function XA_WM_ICON_NAME : TAtom;
  begin
    XA_WM_ICON_NAME:=TAtom(37);
  end;

function XA_WM_ICON_SIZE : TAtom;
  begin
    XA_WM_ICON_SIZE:=TAtom(38);
  end;

function XA_WM_NAME : TAtom;
  begin
    XA_WM_NAME:=TAtom(39);
  end;

function XA_WM_NORMAL_HINTS : TAtom;
  begin
    XA_WM_NORMAL_HINTS:=TAtom(40);
  end;

function XA_WM_SIZE_HINTS : TAtom;
  begin
    XA_WM_SIZE_HINTS:=TAtom(41);
  end;

function XA_WM_ZOOM_HINTS : TAtom;
  begin
    XA_WM_ZOOM_HINTS:=TAtom(42);
  end;

function XA_MIN_SPACE : TAtom;
  begin
    XA_MIN_SPACE:=TAtom(43);
  end;

function XA_NORM_SPACE : TAtom;
  begin
    XA_NORM_SPACE:=TAtom(44);
  end;

function XA_MAX_SPACE : TAtom;
  begin
    XA_MAX_SPACE:=TAtom(45);
  end;

function XA_END_SPACE : TAtom;
  begin
    XA_END_SPACE:=TAtom(46);
  end;

function XA_SUPERSCRIPT_X : TAtom;
  begin
    XA_SUPERSCRIPT_X:=TAtom(47);
  end;

function XA_SUPERSCRIPT_Y : TAtom;
  begin
    XA_SUPERSCRIPT_Y:=TAtom(48);
  end;

function XA_SUBSCRIPT_X : TAtom;
  begin
    XA_SUBSCRIPT_X:=TAtom(49);
  end;

function XA_SUBSCRIPT_Y : TAtom;
  begin
    XA_SUBSCRIPT_Y:=TAtom(50);
  end;

function XA_UNDERLINE_POSITION : TAtom;
  begin
    XA_UNDERLINE_POSITION:=TAtom(51);
  end;

function XA_UNDERLINE_THICKNESS : TAtom;
  begin
    XA_UNDERLINE_THICKNESS:=TAtom(52);
  end;

function XA_STRIKEOUT_ASCENT : TAtom;
  begin
    XA_STRIKEOUT_ASCENT:=TAtom(53);
  end;

function XA_STRIKEOUT_DESCENT : TAtom;
  begin
    XA_STRIKEOUT_DESCENT:=TAtom(54);
  end;

function XA_ITALIC_ANGLE : TAtom;
  begin
    XA_ITALIC_ANGLE:=TAtom(55);
  end;

function XA_X_HEIGHT : TAtom;
  begin
    XA_X_HEIGHT:=TAtom(56);
  end;

function XA_QUAD_WIDTH : TAtom;
  begin
    XA_QUAD_WIDTH:=TAtom(57);
  end;

function XA_WEIGHT : TAtom;
  begin
    XA_WEIGHT:=TAtom(58);
  end;

function XA_POINT_SIZE : TAtom;
  begin
    XA_POINT_SIZE:=TAtom(59);
  end;

function XA_RESOLUTION : TAtom;
  begin
    XA_RESOLUTION:=TAtom(60);
  end;

function XA_COPYRIGHT : TAtom;
  begin
    XA_COPYRIGHT:=TAtom(61);
  end;

function XA_NOTICE : TAtom;
  begin
    XA_NOTICE:=TAtom(62);
  end;

function XA_FONT_NAME : TAtom;
  begin
    XA_FONT_NAME:=TAtom(63);
  end;

function XA_FAMILY_NAME : TAtom;
  begin
    XA_FAMILY_NAME:=TAtom(64);
  end;

function XA_FULL_NAME : TAtom;
  begin
    XA_FULL_NAME:=TAtom(65);
  end;

function XA_CAP_HEIGHT : TAtom;
  begin
    XA_CAP_HEIGHT:=TAtom(66);
  end;

function XA_WM_CLASS : TAtom;
  begin
    XA_WM_CLASS:=TAtom(67);
  end;

function XA_WM_TRANSIENT_FOR : TAtom;
  begin
    XA_WM_TRANSIENT_FOR:=TAtom(68);
  end;

function XA_LAST_PREDEFINED : TAtom;
  begin
    XA_LAST_PREDEFINED:=TAtom(68);
  end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/IntrinsicI.pp
// -------------------------------------------------

function XtDisplayOfObject(object : longint) : longint;
var
   if_local1, if_local2 : longint;
(* result types are not known *)
begin
  if XtIsWidget(object) then
    if_local1:=object^.(core.(screen^.display))
  else
    if_local1:=_XtIsHookObject(object);
  if if_local1 then
    if_local2:=(THookObject(object))^.(hooks.(screen^.display))
  else
    if_local2:=(_XtWindowedAncestor(object))^.(core.(screen^.display));
  XtDisplayOfObject:=if_local2;
end;

function XtScreenOfObject(object : longint) : longint;
var
   if_local1, if_local2 : longint;
(* result types are not known *)
begin
  if XtIsWidget(object) then
    if_local1:=object^.(core.screen)
  else
    if_local1:=_XtIsHookObject(object);
  if if_local1 then
    if_local2:=(THookObject(object))^.(hooks.screen)
  else
    if_local2:=(_XtWindowedAncestor(object))^.(core.screen);
  XtScreenOfObject:=if_local2;
end;

function XtWindowOfObject(object : longint) : longint;
var
   if_local1 : longint;
(* result types are not known *)
begin
  if XtIsWidget(object) then
    if_local1:=object
  else
    if_local1:=_XtWindowedAncestor(object);
  XtWindowOfObject:=(if_local1)^.(core.window);
end;

function XtIsManaged(object : longint) : longint;
var
   if_local1 : longint;
(* result types are not known *)
begin
  if XtIsRectObj(object) then
    if_local1:=object^.(core.managed)
  else
    if_local1:=_False;
  XtIsManaged:=if_local1;
end;

function XtIsSensitive(object : longint) : longint;
var
   if_local1 : longint;
(* result types are not known *)
begin
  if XtIsRectObj(object) then
    if_local1:=(object^.(core.sensitive)) and (@(object^.(core.ancestor_sensitive)))
  else
    if_local1:=_False;
  XtIsSensitive:=if_local1;
end;

    function XtSetBit(dst,src : longint) : longint;
    begin
      XtSetBit:=XtSetBits(dst,src,1);
    end;

    function XtMemcmp(b1,b2,size : longint) : longint;
    begin
      XtMemcmp:=memcmp(pointer(b1),pointer(b2),Tsize_t(size));
    end;

    function XtStackAlloc(size,stack_cache_array : longint) : longint;
    var
       if_local1 : longint;
    (* result types are not known *)
    begin
      if sizeof(stack_cache_array) then
        if_local1:=TXtPointer(stack_cache_array)
      else
        if_local1:=XtMalloc(TCardinal(size));
      XtStackAlloc:=size<=(if_local1);
    end;

    function CALLGEOTAT(f : longint) : longint;
    begin
      CALLGEOTAT:=f;
    end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/HPkeysym.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/ap_keysym.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/RectObj.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Core.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Constraint.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xfuncs.pp
// -------------------------------------------------

function bzero(b,len : longint) : longint;
begin
  bzero:=memset(b,0,len);
end;

function bcmp(b1,b2,len : longint) : longint;
begin
  bcmp:=memcmp(b1,b2,len);
end;

function bzero(b,len : longint) : longint;
begin
  bzero:=memset(b,0,len);
end;

function bcopy(b1,b2,len : longint) : longint;
begin
  bcopy:=memmove(b2,b1,Tsize_t(len));
end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xregion.pp
// -------------------------------------------------

function MAX(a,b : longint) : longint;
var
   if_local1 : longint;
(* result types are not known *)
begin
  if a>b then
    if_local1:=a
  else
    if_local1:=b;
  MAX:=if_local1;
end;

function MIN(a,b : longint) : longint;
var
   if_local1 : longint;
(* result types are not known *)
begin
  if a<b then
    if_local1:=a
  else
    if_local1:=b;
  MIN:=if_local1;
end;

function EXTENTCHECK(r1,r2 : longint) : longint;
begin
  EXTENTCHECK:=((((r1^.x2)>((r2^.x1) and (@(r1^.x1))))<((r2^.x2) and (@(r1^.y2))))>((r2^.y1) and (@(r1^.y1))))<(r2^.y2);
end;

    function REGION_NOT_EMPTY(pReg : longint) : longint;
    begin
      REGION_NOT_EMPTY:=pReg^.numRects;
    end;

    function INBOX(r,x,y : longint) : longint;
    begin
      INBOX:=((((r.x2)>x) and (@((r.x1)<=x))) and (@((r.y2)>y))) and (@((r.y1)<=y));
    end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/ShellI.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/TranslateI.pp
// -------------------------------------------------

function knot(var a : _LateBindings) : dword;
begin
  knot:=(a.flag0 and bm__LateBindings_knot) shr bp__LateBindings_knot;
end;

procedure set_knot(var a : _LateBindings; __knot : dword);
begin
  a.flag0:=a.flag0 or ((__knot shl bp__LateBindings_knot) and bm__LateBindings_knot);
end;

function pair(var a : _LateBindings) : dword;
begin
  pair:=(a.flag0 and bm__LateBindings_pair) shr bp__LateBindings_pair;
end;

procedure set_pair(var a : _LateBindings; __pair : dword);
begin
  a.flag0:=a.flag0 or ((__pair shl bp__LateBindings_pair) and bm__LateBindings_pair);
end;

function isCycleStart(var a : _XtStateRec) : dword;
begin
  isCycleStart:=(a.flag0 and bm__XtStateRec_isCycleStart) shr bp__XtStateRec_isCycleStart;
end;

procedure set_isCycleStart(var a : _XtStateRec; __isCycleStart : dword);
begin
  a.flag0:=a.flag0 or ((__isCycleStart shl bp__XtStateRec_isCycleStart) and bm__XtStateRec_isCycleStart);
end;

function isCycleEnd(var a : _XtStateRec) : dword;
begin
  isCycleEnd:=(a.flag0 and bm__XtStateRec_isCycleEnd) shr bp__XtStateRec_isCycleEnd;
end;

procedure set_isCycleEnd(var a : _XtStateRec; __isCycleEnd : dword);
begin
  a.flag0:=a.flag0 or ((__isCycleEnd shl bp__XtStateRec_isCycleEnd) and bm__XtStateRec_isCycleEnd);
end;

function isSimple(var a : _TMBranchHeadRec) : dword;
begin
  isSimple:=(a.flag0 and bm__TMBranchHeadRec_isSimple) shr bp__TMBranchHeadRec_isSimple;
end;

procedure set_isSimple(var a : _TMBranchHeadRec; __isSimple : dword);
begin
  a.flag0:=a.flag0 or ((__isSimple shl bp__TMBranchHeadRec_isSimple) and bm__TMBranchHeadRec_isSimple);
end;

function hasActions(var a : _TMBranchHeadRec) : dword;
begin
  hasActions:=(a.flag0 and bm__TMBranchHeadRec_hasActions) shr bp__TMBranchHeadRec_hasActions;
end;

procedure set_hasActions(var a : _TMBranchHeadRec; __hasActions : dword);
begin
  a.flag0:=a.flag0 or ((__hasActions shl bp__TMBranchHeadRec_hasActions) and bm__TMBranchHeadRec_hasActions);
end;

function hasCycles(var a : _TMBranchHeadRec) : dword;
begin
  hasCycles:=(a.flag0 and bm__TMBranchHeadRec_hasCycles) shr bp__TMBranchHeadRec_hasCycles;
end;

procedure set_hasCycles(var a : _TMBranchHeadRec; __hasCycles : dword);
begin
  a.flag0:=a.flag0 or ((__hasCycles shl bp__TMBranchHeadRec_hasCycles) and bm__TMBranchHeadRec_hasCycles);
end;

function more(var a : _TMBranchHeadRec) : dword;
begin
  more:=(a.flag0 and bm__TMBranchHeadRec_more) shr bp__TMBranchHeadRec_more;
end;

procedure set_more(var a : _TMBranchHeadRec; __more : dword);
begin
  a.flag0:=a.flag0 or ((__more shl bp__TMBranchHeadRec_more) and bm__TMBranchHeadRec_more);
end;

function isSimple(var a : _TMSimpleStateTreeRec) : dword;
begin
  isSimple:=(a.flag0 and bm__TMSimpleStateTreeRec_isSimple) shr bp__TMSimpleStateTreeRec_isSimple;
end;

procedure set_isSimple(var a : _TMSimpleStateTreeRec; __isSimple : dword);
begin
  a.flag0:=a.flag0 or ((__isSimple shl bp__TMSimpleStateTreeRec_isSimple) and bm__TMSimpleStateTreeRec_isSimple);
end;

function isAccelerator(var a : _TMSimpleStateTreeRec) : dword;
begin
  isAccelerator:=(a.flag0 and bm__TMSimpleStateTreeRec_isAccelerator) shr bp__TMSimpleStateTreeRec_isAccelerator;
end;

procedure set_isAccelerator(var a : _TMSimpleStateTreeRec; __isAccelerator : dword);
begin
  a.flag0:=a.flag0 or ((__isAccelerator shl bp__TMSimpleStateTreeRec_isAccelerator) and bm__TMSimpleStateTreeRec_isAccelerator);
end;

function mappingNotifyInterest(var a : _TMSimpleStateTreeRec) : dword;
begin
  mappingNotifyInterest:=(a.flag0 and bm__TMSimpleStateTreeRec_mappingNotifyInterest) shr bp__TMSimpleStateTreeRec_mappingNotifyInterest;
end;

procedure set_mappingNotifyInterest(var a : _TMSimpleStateTreeRec; __mappingNotifyInterest : dword);
begin
  a.flag0:=a.flag0 or ((__mappingNotifyInterest shl bp__TMSimpleStateTreeRec_mappingNotifyInterest) and bm__TMSimpleStateTreeRec_mappingNotifyInterest);
end;

function refCount(var a : _TMSimpleStateTreeRec) : dword;
begin
  refCount:=(a.flag0 and bm__TMSimpleStateTreeRec_refCount) shr bp__TMSimpleStateTreeRec_refCount;
end;

procedure set_refCount(var a : _TMSimpleStateTreeRec; __refCount : dword);
begin
  a.flag0:=a.flag0 or ((__refCount shl bp__TMSimpleStateTreeRec_refCount) and bm__TMSimpleStateTreeRec_refCount);
end;

function isSimple(var a : _TMComplexStateTreeRec) : dword;
begin
  isSimple:=(a.flag0 and bm__TMComplexStateTreeRec_isSimple) shr bp__TMComplexStateTreeRec_isSimple;
end;

procedure set_isSimple(var a : _TMComplexStateTreeRec; __isSimple : dword);
begin
  a.flag0:=a.flag0 or ((__isSimple shl bp__TMComplexStateTreeRec_isSimple) and bm__TMComplexStateTreeRec_isSimple);
end;

function isAccelerator(var a : _TMComplexStateTreeRec) : dword;
begin
  isAccelerator:=(a.flag0 and bm__TMComplexStateTreeRec_isAccelerator) shr bp__TMComplexStateTreeRec_isAccelerator;
end;

procedure set_isAccelerator(var a : _TMComplexStateTreeRec; __isAccelerator : dword);
begin
  a.flag0:=a.flag0 or ((__isAccelerator shl bp__TMComplexStateTreeRec_isAccelerator) and bm__TMComplexStateTreeRec_isAccelerator);
end;

function mappingNotifyInterest(var a : _TMComplexStateTreeRec) : dword;
begin
  mappingNotifyInterest:=(a.flag0 and bm__TMComplexStateTreeRec_mappingNotifyInterest) shr bp__TMComplexStateTreeRec_mappingNotifyInterest;
end;

procedure set_mappingNotifyInterest(var a : _TMComplexStateTreeRec; __mappingNotifyInterest : dword);
begin
  a.flag0:=a.flag0 or ((__mappingNotifyInterest shl bp__TMComplexStateTreeRec_mappingNotifyInterest) and bm__TMComplexStateTreeRec_mappingNotifyInterest);
end;

function refCount(var a : _TMComplexStateTreeRec) : dword;
begin
  refCount:=(a.flag0 and bm__TMComplexStateTreeRec_refCount) shr bp__TMComplexStateTreeRec_refCount;
end;

procedure set_refCount(var a : _TMComplexStateTreeRec; __refCount : dword);
begin
  a.flag0:=a.flag0 or ((__refCount shl bp__TMComplexStateTreeRec_refCount) and bm__TMComplexStateTreeRec_refCount);
end;

function isSimple(var a : _TMParseStateTreeRec) : dword;
begin
  isSimple:=(a.flag0 and bm__TMParseStateTreeRec_isSimple) shr bp__TMParseStateTreeRec_isSimple;
end;

procedure set_isSimple(var a : _TMParseStateTreeRec; __isSimple : dword);
begin
  a.flag0:=a.flag0 or ((__isSimple shl bp__TMParseStateTreeRec_isSimple) and bm__TMParseStateTreeRec_isSimple);
end;

function isAccelerator(var a : _TMParseStateTreeRec) : dword;
begin
  isAccelerator:=(a.flag0 and bm__TMParseStateTreeRec_isAccelerator) shr bp__TMParseStateTreeRec_isAccelerator;
end;

procedure set_isAccelerator(var a : _TMParseStateTreeRec; __isAccelerator : dword);
begin
  a.flag0:=a.flag0 or ((__isAccelerator shl bp__TMParseStateTreeRec_isAccelerator) and bm__TMParseStateTreeRec_isAccelerator);
end;

function mappingNotifyInterest(var a : _TMParseStateTreeRec) : dword;
begin
  mappingNotifyInterest:=(a.flag0 and bm__TMParseStateTreeRec_mappingNotifyInterest) shr bp__TMParseStateTreeRec_mappingNotifyInterest;
end;

procedure set_mappingNotifyInterest(var a : _TMParseStateTreeRec; __mappingNotifyInterest : dword);
begin
  a.flag0:=a.flag0 or ((__mappingNotifyInterest shl bp__TMParseStateTreeRec_mappingNotifyInterest) and bm__TMParseStateTreeRec_mappingNotifyInterest);
end;

function isStackQuarks(var a : _TMParseStateTreeRec) : dword;
begin
  isStackQuarks:=(a.flag0 and bm__TMParseStateTreeRec_isStackQuarks) shr bp__TMParseStateTreeRec_isStackQuarks;
end;

procedure set_isStackQuarks(var a : _TMParseStateTreeRec; __isStackQuarks : dword);
begin
  a.flag0:=a.flag0 or ((__isStackQuarks shl bp__TMParseStateTreeRec_isStackQuarks) and bm__TMParseStateTreeRec_isStackQuarks);
end;

function isStackBranchHeads(var a : _TMParseStateTreeRec) : dword;
begin
  isStackBranchHeads:=(a.flag0 and bm__TMParseStateTreeRec_isStackBranchHeads) shr bp__TMParseStateTreeRec_isStackBranchHeads;
end;

procedure set_isStackBranchHeads(var a : _TMParseStateTreeRec; __isStackBranchHeads : dword);
begin
  a.flag0:=a.flag0 or ((__isStackBranchHeads shl bp__TMParseStateTreeRec_isStackBranchHeads) and bm__TMParseStateTreeRec_isStackBranchHeads);
end;

function isStackComplexBranchHeads(var a : _TMParseStateTreeRec) : dword;
begin
  isStackComplexBranchHeads:=(a.flag0 and bm__TMParseStateTreeRec_isStackComplexBranchHeads) shr bp__TMParseStateTreeRec_isStackComplexBranchHeads;
end;

procedure set_isStackComplexBranchHeads(var a : _TMParseStateTreeRec; __isStackComplexBranchHeads : dword);
begin
  a.flag0:=a.flag0 or ((__isStackComplexBranchHeads shl bp__TMParseStateTreeRec_isStackComplexBranchHeads) and bm__TMParseStateTreeRec_isStackComplexBranchHeads);
end;

function unused(var a : _TMParseStateTreeRec) : dword;
begin
  unused:=(a.flag0 and bm__TMParseStateTreeRec_unused) shr bp__TMParseStateTreeRec_unused;
end;

procedure set_unused(var a : _TMParseStateTreeRec; __unused : dword);
begin
  a.flag0:=a.flag0 or ((__unused shl bp__TMParseStateTreeRec_unused) and bm__TMParseStateTreeRec_unused);
end;

function isComplex(var a : _TMSimpleBindDataRec) : dword;
begin
  isComplex:=(a.flag0 and bm__TMSimpleBindDataRec_isComplex) shr bp__TMSimpleBindDataRec_isComplex;
end;

procedure set_isComplex(var a : _TMSimpleBindDataRec; __isComplex : dword);
begin
  a.flag0:=a.flag0 or ((__isComplex shl bp__TMSimpleBindDataRec_isComplex) and bm__TMSimpleBindDataRec_isComplex);
end;

function isComplex(var a : _TMComplexBindDataRec) : dword;
begin
  isComplex:=(a.flag0 and bm__TMComplexBindDataRec_isComplex) shr bp__TMComplexBindDataRec_isComplex;
end;

procedure set_isComplex(var a : _TMComplexBindDataRec; __isComplex : dword);
begin
  a.flag0:=a.flag0 or ((__isComplex shl bp__TMComplexBindDataRec_isComplex) and bm__TMComplexBindDataRec_isComplex);
end;

function _XtEventTimerEventType : TTMLongCard;
  begin
    _XtEventTimerEventType:=TTMLongCard( not (0));
  end;

    function TMNewMatchSemantics : longint;
    begin
      TMNewMatchSemantics:=_XtGlobalTM.newMatchSemantics;
    end;

    function TMBranchMore(branch : longint) : longint;
    begin
      TMBranchMore:=branch^.more;
    end;

    function TMComplexBranchHead(tree,br : longint) : longint;
    begin
      TMComplexBranchHead:=(TTMComplexStateTree(tree))^.(complexBranchHeadTbl[TMBranchMore(br)]);
    end;

    function TMGetComplexBindEntry(bindData,idx : longint) : TTMComplexBindProcs;
    begin
      TMGetComplexBindEntry:=TTMComplexBindProcs(@((TTMComplexBindData(bindData))^.(bindTbl[idx])));
    end;

    function TMGetSimpleBindEntry(bindData,idx : longint) : TTMSimpleBindProcs;
    begin
      TMGetSimpleBindEntry:=TTMSimpleBindProcs(@((TTMSimpleBindData(bindData))^.(bindTbl[idx])));
    end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xdefs.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xpoll.pp
// -------------------------------------------------

function NFDBITS : longint; { return type might be wrong }
  begin
    NFDBITS:=(sizeof(fd_mask))*NBBY;
  end;

function howmany(x,y : longint) : longint;
begin
  howmany:=(Tx(+(Ty(-(1)))))/y;
end;

function Select(n,r,w,e,t : longint) : longint;
begin
  Select:=select(n,pTfd_set(r),pTfd_set(w),pTfd_set(e),pTtimeval(t));
end;

function __FDS_BITS(p : longint) : longint;
begin
  __FDS_BITS:=p^.__X_FDS_BITS;
end;

    function Select(n,r,w,e,t : longint) : longint;
    begin
      Select:=select(0,pTfd_set(r),pTfd_set(w),pTfd_set(e),pTtimeval(t));
    end;

    function XFD_SETCOUNT(p : longint) : longint;
    begin
      XFD_SETCOUNT:=(pTfd_set(p))^.fd_count;
    end;

    function XFD_FD(p,i : longint) : longint;
    begin
      XFD_FD:=(pTfd_set(p))^.(fd_array[i]);
    end;

    function XFD_ANYSET(p : longint) : longint;
    begin
      XFD_ANYSET:=XFD_SETCOUNT(p);
    end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/keysymdef.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/InitialI.pp
// -------------------------------------------------

    function _XtHeapAlloc(heap,bytes : longint) : longint;
    begin
      _XtHeapAlloc:=_XtHeapMalloc(heap,bytes,__FILE__,__LINE__);
    end;

    function _XtGetPerDisplay(display : longint) : longint;
    var
       if_local1 : longint;
    (* result types are not known *)
    begin
      if _XtperDisplayList<>(NULL and (@((_XtperDisplayList^.dpy)=display))) then
        if_local1:=@(_XtperDisplayList^.perDpy)
      else
        if_local1:=_XtSortPerDisplayList(display);
      _XtGetPerDisplay:=if_local1;
    end;

    function _XtGetPerDisplayInput(display : longint) : longint;
    var
       if_local1 : longint;
    (* result types are not known *)
    begin
      if _XtperDisplayList<>(NULL and (@((_XtperDisplayList^.dpy)=display))) then
        if_local1:=@(_XtperDisplayList^.(perDpy.pdi))
      else
        if_local1:=@((_XtSortPerDisplayList(display))^.pdi);
      _XtGetPerDisplayInput:=if_local1;
    end;

    function _XtGetPerDisplay(display : longint) : longint;
    var
       if_local1 : longint;
    (* result types are not known *)
    begin
      if (_XtperDisplayList^.dpy)=display then
        if_local1:=@(_XtperDisplayList^.perDpy)
      else
        if_local1:=_XtSortPerDisplayList(display);
      _XtGetPerDisplay:=if_local1;
    end;

    function _XtGetPerDisplayInput(display : longint) : longint;
    var
       if_local1 : longint;
    (* result types are not known *)
    begin
      if (_XtperDisplayList^.dpy)=display then
        if_local1:=@(_XtperDisplayList^.(perDpy.pdi))
      else
        if_local1:=@((_XtSortPerDisplayList(display))^.pdi);
      _XtGetPerDisplayInput:=if_local1;
    end;

    function _XtSafeToDestroy(app : longint) : longint;
    begin
      _XtSafeToDestroy:=(app^.dispatch_level)=0;
    end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xwindows.pp
// -------------------------------------------------

function RT_FONT : TRESTYPE;
  begin
    RT_FONT:=TRESTYPE(4);
  end;

function RT_CURSOR : TRESTYPE;
  begin
    RT_CURSOR:=TRESTYPE(5);
  end;

function sleep(x : longint) : longint;
begin
  sleep:=Sleep(x*1000);
end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/XlibConf.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xos_r.pp
// -------------------------------------------------

function _Xos_processLock : longint; { return type might be wrong }
  var
     if_local1 : longint;
  (* result types are not known *)
  begin
    if _XLockMutex_fn then
      if_local1:=_XLockMutex_fn(_Xglobal_lock__FILE____LINE__)
    else
      if_local1:=0;
    _Xos_processLock:=if_local1;
  end;

function _Xos_processUnlock : longint; { return type might be wrong }
  var
     if_local1 : longint;
  (* result types are not known *)
  begin
    if _XUnlockMutex_fn then
      if_local1:=_XUnlockMutex_fn(_Xglobal_lock__FILE____LINE__)
    else
      if_local1:=0;
    _Xos_processUnlock:=if_local1;
  end;

    function _Xos_processLock : longint; { return type might be wrong }
      begin
        _Xos_processLock:=XtProcessLock;
      end;

    function _Xos_processUnlock : longint; { return type might be wrong }
      begin
        _Xos_processUnlock:=XtProcessUnlock;
      end;

    function _XGetpwuid(u,p : longint) : longint;
    begin
      _XGetpwuid:=getpwuid(u);
    end;

    function _XGetpwnam(u,p : longint) : longint;
    begin
      _XGetpwnam:=getpwnam(u);
    end;

    function _XGetpwuid(u,p : longint) : longint;
    var
       if_local1 : longint;
    (* result types are not known *)
    begin
      if (getpwuid_r(u,@(p.pws),p.pwbuf,sizeof(p.pwbuf)))=(-(1)) then
        if_local1:=NULL
      else
        if_local1:=@(p.pws);
      _XGetpwuid:=if_local1;
    end;

    function _XGetpwnam(u,p : longint) : longint;
    var
       if_local1 : longint;
    (* result types are not known *)
    begin
      if (getpwnam_r(u,@(p.pws),p.pwbuf,sizeof(p.pwbuf)))=(-(1)) then
        if_local1:=NULL
      else
        if_local1:=@(p.pws);
      _XGetpwnam:=if_local1;
    end;

    function _XGetpwuid(u,p : longint) : longint;
    var
       if_local1 : longint;
    (* result types are not known *)
    begin
      if (getpwuid_r(u,@(p.pws),p.pwbuf,sizeof(p.pwbuf)))=NULL then
        if_local1:=NULL
      else
        if_local1:=@(p.pws);
      _XGetpwuid:=if_local1;
    end;

    function _XGetpwnam(u,p : longint) : longint;
    var
       if_local1 : longint;
    (* result types are not known *)
    begin
      if (getpwnam_r(u,@(p.pws),p.pwbuf,sizeof(p.pwbuf)))=NULL then
        if_local1:=NULL
      else
        if_local1:=@(p.pws);
      _XGetpwnam:=if_local1;
    end;

    function _XGetpwuid(u,p : longint) : longint;
    var
       if_local1 : longint;
    (* result types are not known *)
    begin
      if (getpwuid_r(u,@(p.pws),p.pwbuf,sizeof(p.pwbuf),@(p.pwp)))=0 then
        if_local1:=p.pwp
      else
        if_local1:=NULL;
      _XGetpwuid:=if_local1;
    end;

    function _XGetpwnam(u,p : longint) : longint;
    var
       if_local1 : longint;
    (* result types are not known *)
    begin
      if (getpwnam_r(u,@(p.pws),p.pwbuf,sizeof(p.pwbuf),@(p.pwp)))=0 then
        if_local1:=p.pwp
      else
        if_local1:=NULL;
      _XGetpwnam:=if_local1;
    end;

    function _XGethostbyname(h,hp : longint) : longint;
    begin
      _XGethostbyname:=gethostbyname(h);
    end;

    function _XGethostbyaddr(a,al,t,hp : longint) : longint;
    begin
      _XGethostbyaddr:=gethostbyaddr(a,al,t);
    end;

    function _XGetservbyname(s,p,sp : longint) : longint;
    begin
      _XGetservbyname:=getservbyname(s,p);
    end;

    function _XGethostbyname(h,hp : longint) : longint;
    begin
      _XGethostbyname:=gethostbyname_r(h,@(hp.hent),hp.hbuf,sizeof(hp.hbuf),@(hp.herr));
    end;

    function _XGethostbyaddr(a,al,t,hp : longint) : longint;
    begin
      _XGethostbyaddr:=gethostbyaddr_r(a,al,t,@(hp.hent),hp.hbuf,sizeof(hp.hbuf),@(hp.herr));
    end;

    function _XGetservbyname(s,p,sp : longint) : longint;
    begin
      _XGetservbyname:=getservbyname_r(s,p,@(sp.sent),sp.sbuf,sizeof(sp.sbuf));
    end;

    function _XGethostbyname(h,hp : longint) : longint;
    begin
      _XGethostbyname:=gethostbyname(h);
    end;

    function _XGethostbyaddr(a,al,t,hp : longint) : longint;
    begin
      _XGethostbyaddr:=gethostbyaddr(a,al,t);
    end;

    function _XGetservbyname(s,p,sp : longint) : longint;
    begin
      _XGetservbyname:=getservbyname(s,p);
    end;

    function _XReaddir(d,p : longint) : longint;
    begin
      _XReaddir:=readdir(d);
    end;

    function _XReaddir(d,p : longint) : longint;
    var
       if_local1 : longint;
    (* result types are not known *)
    begin
      if readdir_r(d,@(p.dir_entry),@(p.result)) then
        if_local1:=NULL
      else
        if_local1:=p.result;
      _XReaddir:=if_local1;
    end;

    function _XReaddir(d,p : longint) : longint;
    var
       if_local1 : longint;
    (* result types are not known *)
    begin
      if readdir_r(d,@(p.dir_entry)) then
        if_local1:=NULL
      else
        if_local1:=@(p.dir_entry);
      _XReaddir:=if_local1;
    end;

    function _XReaddir(d,p : longint) : longint;
    begin
      _XReaddir:=readdir_r(d,@(p.dir_entry));
    end;

    function _XGetlogin(p : longint) : longint;
    begin
      _XGetlogin:=getlogin;
    end;

    function _XTtyname(f : longint) : longint;
    begin
      _XTtyname:=ttyname(f);
    end;

    function _XGetlogin(p : longint) : longint;
    var
       if_local1 : longint;
    (* result types are not known *)
    begin
      if getlogin_r(p.buf,sizeof(p.buf)) then
        if_local1:=NULL
      else
        if_local1:=p.buf;
      _XGetlogin:=if_local1;
    end;

    function _XTtyname(f,p : longint) : longint;
    var
       if_local1 : longint;
    (* result types are not known *)
    begin
      if ttyname_r(f,p.buf,sizeof(p.buf)) then
        if_local1:=NULL
      else
        if_local1:=p.buf;
      _XTtyname:=if_local1;
    end;

    function _XGetlogin(p : longint) : longint;
    begin
      _XGetlogin:=getlogin_r(p.buf,sizeof(p.buf));
    end;

    function _XTtyname(f,p : longint) : longint;
    begin
      _XTtyname:=ttyname_r(f,p.buf,sizeof(p.buf));
    end;

    function _XStrtok(s1,s2,p : longint) : longint;
    begin
      _XStrtok:=strtok_r(s1,s2,@(p));
    end;

    function _XAsctime(t,p : longint) : longint;
    begin
      _XAsctime:=asctime(t);
    end;

    function _XCtime(t,p : longint) : longint;
    begin
      _XCtime:=ctime(t);
    end;

    function _XGmtime(t,p : longint) : longint;
    begin
      _XGmtime:=gmtime(t);
    end;

    function _XLocaltime(t,p : longint) : longint;
    begin
      _XLocaltime:=localtime(t);
    end;

    function _XAsctime(t,p : longint) : longint;
    var
       if_local1 : longint;
    (* result types are not known *)
    begin
      if asctime_r(t,p,sizeof(p)) then
        if_local1:=NULL
      else
        if_local1:=p;
      _XAsctime:=if_local1;
    end;

    function _XCtime(t,p : longint) : longint;
    var
       if_local1 : longint;
    (* result types are not known *)
    begin
      if ctime_r(t,p,sizeof(p)) then
        if_local1:=NULL
      else
        if_local1:=p;
      _XCtime:=if_local1;
    end;

    function _XGmtime(t,p : longint) : longint;
    var
       if_local1 : longint;
    (* result types are not known *)
    begin
      if gmtime_r(t,@(p)) then
        if_local1:=NULL
      else
        if_local1:=@(p);
      _XGmtime:=if_local1;
    end;

    function _XLocaltime(t,p : longint) : longint;
    var
       if_local1 : longint;
    (* result types are not known *)
    begin
      if localtime_r(t,@(p)) then
        if_local1:=NULL
      else
        if_local1:=@(p);
      _XLocaltime:=if_local1;
    end;

    function _XAsctime(t,p : longint) : longint;
    begin
      _XAsctime:=asctime_r(t,p,sizeof(p));
    end;

    function _XCtime(t,p : longint) : longint;
    begin
      _XCtime:=ctime_r(t,p,sizeof(p));
    end;

    function _XGmtime(t,p : longint) : longint;
    begin
      _XGmtime:=gmtime_r(t,@(p));
    end;

    function _XLocaltime(t,p : longint) : longint;
    begin
      _XLocaltime:=localtime_r(t,@(p));
    end;

    function _XAsctime(t,p : longint) : longint;
    begin
      _XAsctime:=asctime_r(t,p);
    end;

    function _XCtime(t,p : longint) : longint;
    begin
      _XCtime:=ctime_r(t,p);
    end;

    function _XGmtime(t,p : longint) : longint;
    begin
      _XGmtime:=gmtime_r(t,@(p));
    end;

    function _XLocaltime(t,p : longint) : longint;
    begin
      _XLocaltime:=localtime_r(t,@(p));
    end;

    function _XGetgrgid(g,p : longint) : longint;
    begin
      _XGetgrgid:=getgrgid(g);
    end;

    function _XGetgrnam(n,p : longint) : longint;
    begin
      _XGetgrnam:=getgrnam(n);
    end;

    function _XGetgrgid(g,p : longint) : longint;
    begin
      _XGetgrgid:=getgrgid_r(g,@(p.grp),p.buf,sizeof(p.buf));
    end;

    function _XGetgrnam(n,p : longint) : longint;
    begin
      _XGetgrnam:=getgrnam_r(n,@(p.grp),p.buf,sizeof(p.buf));
    end;

    function _XGetgrgid(g,p : longint) : longint;
    var
       if_local1 : longint;
    (* result types are not known *)
    begin
      if getgrgid_r(g,@(p.grp),p.buf,sizeof(p.buf)) then
        if_local1:=NULL
      else
        if_local1:=@(p.grp);
      _XGetgrgid:=if_local1;
    end;

    function _XGetgrnam(n,p : longint) : longint;
    var
       if_local1 : longint;
    (* result types are not known *)
    begin
      if getgrnam_r(n,@(p.grp),p.buf,sizeof(p.buf)) then
        if_local1:=NULL
      else
        if_local1:=@(p.grp);
      _XGetgrnam:=if_local1;
    end;

    function _XGetgrgid(g,p : longint) : longint;
    var
       if_local1 : longint;
    (* result types are not known *)
    begin
      if getgrgid_r(g,@(p.grp),p.buf,sizeof(p.buf),@(p.result)) then
        if_local1:=NULL
      else
        if_local1:=p.result;
      _XGetgrgid:=if_local1;
    end;

    function _XGetgrnam(n,p : longint) : longint;
    var
       if_local1 : longint;
    (* result types are not known *)
    begin
      if getgrnam_r(n,@(p.grp),p.buf,sizeof(p.buf),@(p.result)) then
        if_local1:=NULL
      else
        if_local1:=p.result;
      _XGetgrnam:=if_local1;
    end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/SelectionI.pp
// -------------------------------------------------

function incremental(var a : _SelectRec) : dword;
begin
  incremental:=(a.flag0 and bm__SelectRec_incremental) shr bp__SelectRec_incremental;
end;

procedure set_incremental(var a : _SelectRec; __incremental : dword);
begin
  a.flag0:=a.flag0 or ((__incremental shl bp__SelectRec_incremental) and bm__SelectRec_incremental);
end;

function free_when_done(var a : _SelectRec) : dword;
begin
  free_when_done:=(a.flag0 and bm__SelectRec_free_when_done) shr bp__SelectRec_free_when_done;
end;

procedure set_free_when_done(var a : _SelectRec; __free_when_done : dword);
begin
  a.flag0:=a.flag0 or ((__free_when_done shl bp__SelectRec_free_when_done) and bm__SelectRec_free_when_done);
end;

function was_disowned(var a : _SelectRec) : dword;
begin
  was_disowned:=(a.flag0 and bm__SelectRec_was_disowned) shr bp__SelectRec_was_disowned;
end;

procedure set_was_disowned(var a : _SelectRec; __was_disowned : dword);
begin
  a.flag0:=a.flag0 or ((__was_disowned shl bp__SelectRec_was_disowned) and bm__SelectRec_was_disowned);
end;

function MAX_SELECTION_INCR(dpy : longint) : longint;
var
   if_local1 : longint;
(* result types are not known *)
begin
  if 65536<(XMaxRequestSize(dpy)) then
    if_local1:=65536 shl 2
  else
    if_local1:=(XMaxRequestSize(dpy)) shl 2;
  MAX_SELECTION_INCR:=(if_local1)-100;
end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xutil.pp
// -------------------------------------------------

function XDestroyImage(ximage : longint) : longint;
begin
  XDestroyImage:=ximage^.(f.destroy_image)(ximage);
end;

function XGetPixel(ximage,x,y : longint) : longint;
begin
  XGetPixel:=ximage^.(f.get_pixel)(ximagexy);
end;

function XPutPixel(ximage,x,y,pixel : longint) : longint;
begin
  XPutPixel:=ximage^.(f.put_pixel)(ximagexypixel);
end;

function XSubImage(ximage,x,y,width,height : longint) : longint;
begin
  XSubImage:=ximage^.(f.sub_image)(ximagexywidthheight);
end;

function XAddPixel(ximage,value : longint) : longint;
begin
  XAddPixel:=ximage^.(f.add_pixel)(ximagevalue);
end;

function IsKeypadKey(keysym : longint) : longint;
begin
  IsKeypadKey:=((TKeySym(keysym))>=XK_KP_Space) and (@((TKeySym(keysym))<=XK_KP_Equal));
end;

function IsPrivateKeypadKey(keysym : longint) : longint;
begin
  IsPrivateKeypadKey:=((TKeySym(keysym))>=$11000000) and (@((TKeySym(keysym))<=$1100FFFF));
end;

function IsCursorKey(keysym : longint) : longint;
begin
  IsCursorKey:=((TKeySym(keysym))>=XK_Home) and (@((TKeySym(keysym))<XK_Select));
end;

function IsPFKey(keysym : longint) : longint;
begin
  IsPFKey:=((TKeySym(keysym))>=XK_KP_F1) and (@((TKeySym(keysym))<=XK_KP_F4));
end;

function IsFunctionKey(keysym : longint) : longint;
begin
  IsFunctionKey:=((TKeySym(keysym))>=XK_F1) and (@((TKeySym(keysym))<=XK_F35));
end;

function IsMiscFunctionKey(keysym : longint) : longint;
begin
  IsMiscFunctionKey:=((TKeySym(keysym))>=XK_Select) and (@((TKeySym(keysym))<=XK_Break));
end;

    function ReleaseByFreeingColormap : TXID;
      begin
        ReleaseByFreeingColormap:=TXID(1);
      end;

    function XUniqueContext : TXContext;
    begin
      XUniqueContext:=TXContext(XrmUniqueQuark);
    end;

    function XStringToContext(_string : longint) : TXContext;
    begin
      XStringToContext:=TXContext(XrmStringToQuark(_string));
    end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xlib.pp
// -------------------------------------------------

function ConnectionNumber(dpy : longint) : longint;
begin
  ConnectionNumber:=(T_XPrivDisplay(dpy))^.fd;
end;

function RootWindow(dpy,scr : longint) : longint;
begin
  RootWindow:=(ScreenOfDisplay(dpy,scr))^.root;
end;

function DefaultScreen(dpy : longint) : longint;
begin
  DefaultScreen:=(T_XPrivDisplay(dpy))^.default_screen;
end;

function DefaultRootWindow(dpy : longint) : longint;
begin
  DefaultRootWindow:=(ScreenOfDisplay(dpy,DefaultScreen(dpy)))^.root;
end;

function DefaultVisual(dpy,scr : longint) : longint;
begin
  DefaultVisual:=(ScreenOfDisplay(dpy,scr))^.root_visual;
end;

function DefaultGC(dpy,scr : longint) : longint;
begin
  DefaultGC:=(ScreenOfDisplay(dpy,scr))^.default_gc;
end;

function BlackPixel(dpy,scr : longint) : longint;
begin
  BlackPixel:=(ScreenOfDisplay(dpy,scr))^.black_pixel;
end;

function WhitePixel(dpy,scr : longint) : longint;
begin
  WhitePixel:=(ScreenOfDisplay(dpy,scr))^.white_pixel;
end;

function AllPlanes : dword;
  begin
    AllPlanes:=dword( not (0));
  end;

function QLength(dpy : longint) : longint;
begin
  QLength:=(T_XPrivDisplay(dpy))^.qlen;
end;

function DisplayWidth(dpy,scr : longint) : longint;
begin
  DisplayWidth:=(ScreenOfDisplay(dpy,scr))^.width;
end;

function DisplayHeight(dpy,scr : longint) : longint;
begin
  DisplayHeight:=(ScreenOfDisplay(dpy,scr))^.height;
end;

function DisplayWidthMM(dpy,scr : longint) : longint;
begin
  DisplayWidthMM:=(ScreenOfDisplay(dpy,scr))^.mwidth;
end;

function DisplayHeightMM(dpy,scr : longint) : longint;
begin
  DisplayHeightMM:=(ScreenOfDisplay(dpy,scr))^.mheight;
end;

function DisplayPlanes(dpy,scr : longint) : longint;
begin
  DisplayPlanes:=(ScreenOfDisplay(dpy,scr))^.root_depth;
end;

function DisplayCells(dpy,scr : longint) : longint;
begin
  DisplayCells:=(DefaultVisual(dpy,scr))^.map_entries;
end;

function ScreenCount(dpy : longint) : longint;
begin
  ScreenCount:=(T_XPrivDisplay(dpy))^.nscreens;
end;

function ServerVendor(dpy : longint) : longint;
begin
  ServerVendor:=(T_XPrivDisplay(dpy))^.vendor;
end;

function ProtocolVersion(dpy : longint) : longint;
begin
  ProtocolVersion:=(T_XPrivDisplay(dpy))^.proto_major_version;
end;

function ProtocolRevision(dpy : longint) : longint;
begin
  ProtocolRevision:=(T_XPrivDisplay(dpy))^.proto_minor_version;
end;

function VendorRelease(dpy : longint) : longint;
begin
  VendorRelease:=(T_XPrivDisplay(dpy))^.release;
end;

function DisplayString(dpy : longint) : longint;
begin
  DisplayString:=(T_XPrivDisplay(dpy))^.display_name;
end;

function DefaultDepth(dpy,scr : longint) : longint;
begin
  DefaultDepth:=(ScreenOfDisplay(dpy,scr))^.root_depth;
end;

function DefaultColormap(dpy,scr : longint) : longint;
begin
  DefaultColormap:=(ScreenOfDisplay(dpy,scr))^.cmap;
end;

function BitmapUnit(dpy : longint) : longint;
begin
  BitmapUnit:=(T_XPrivDisplay(dpy))^.bitmap_unit;
end;

function BitmapBitOrder(dpy : longint) : longint;
begin
  BitmapBitOrder:=(T_XPrivDisplay(dpy))^.bitmap_bit_order;
end;

function BitmapPad(dpy : longint) : longint;
begin
  BitmapPad:=(T_XPrivDisplay(dpy))^.bitmap_pad;
end;

function ImageByteOrder(dpy : longint) : longint;
begin
  ImageByteOrder:=(T_XPrivDisplay(dpy))^.byte_order;
end;

function NextRequest(dpy : longint) : longint;
begin
  NextRequest:=((T_XPrivDisplay(dpy))^.request)+1;
end;

function LastKnownRequestProcessed(dpy : longint) : longint;
begin
  LastKnownRequestProcessed:=(T_XPrivDisplay(dpy))^.last_request_read;
end;

function ScreenOfDisplay(dpy,scr : longint) : longint;
begin
  ScreenOfDisplay:=@((T_XPrivDisplay(dpy))^.(screens[scr]));
end;

function DefaultScreenOfDisplay(dpy : longint) : longint;
begin
  DefaultScreenOfDisplay:=ScreenOfDisplay(dpy,DefaultScreen(dpy));
end;

function DisplayOfScreen(s : longint) : longint;
begin
  DisplayOfScreen:=s^.display;
end;

function RootWindowOfScreen(s : longint) : longint;
begin
  RootWindowOfScreen:=s^.root;
end;

function BlackPixelOfScreen(s : longint) : longint;
begin
  BlackPixelOfScreen:=s^.black_pixel;
end;

function WhitePixelOfScreen(s : longint) : longint;
begin
  WhitePixelOfScreen:=s^.white_pixel;
end;

function DefaultColormapOfScreen(s : longint) : longint;
begin
  DefaultColormapOfScreen:=s^.cmap;
end;

function DefaultDepthOfScreen(s : longint) : longint;
begin
  DefaultDepthOfScreen:=s^.root_depth;
end;

function DefaultGCOfScreen(s : longint) : longint;
begin
  DefaultGCOfScreen:=s^.default_gc;
end;

function DefaultVisualOfScreen(s : longint) : longint;
begin
  DefaultVisualOfScreen:=s^.root_visual;
end;

function WidthOfScreen(s : longint) : longint;
begin
  WidthOfScreen:=s^.width;
end;

function HeightOfScreen(s : longint) : longint;
begin
  HeightOfScreen:=s^.height;
end;

function WidthMMOfScreen(s : longint) : longint;
begin
  WidthMMOfScreen:=s^.mwidth;
end;

function HeightMMOfScreen(s : longint) : longint;
begin
  HeightMMOfScreen:=s^.mheight;
end;

function PlanesOfScreen(s : longint) : longint;
begin
  PlanesOfScreen:=s^.root_depth;
end;

function CellsOfScreen(s : longint) : longint;
begin
  CellsOfScreen:=(DefaultVisualOfScreen(s))^.map_entries;
end;

function MinCmapsOfScreen(s : longint) : longint;
begin
  MinCmapsOfScreen:=s^.min_maps;
end;

function MaxCmapsOfScreen(s : longint) : longint;
begin
  MaxCmapsOfScreen:=s^.max_maps;
end;

function DoesSaveUnders(s : longint) : longint;
begin
  DoesSaveUnders:=s^.save_unders;
end;

function DoesBackingStore(s : longint) : longint;
begin
  DoesBackingStore:=s^.backing_store;
end;

function EventMaskOfScreen(s : longint) : longint;
begin
  EventMaskOfScreen:=s^.root_input_mask;
end;

function XAllocID(dpy : longint) : longint;
begin
  XAllocID:=(T_XPrivDisplay(dpy))^.resource_alloc(dpy);
end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/X.pp
// -------------------------------------------------

function RevertToNone : longint;
  begin
    RevertToNone:=longint(None);
  end;

function RevertToPointerRoot : longint;
  begin
    RevertToPointerRoot:=longint(PointerRoot);
  end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/HookObjI.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xtos.pp
// -------------------------------------------------

function ALLOCATE_LOCAL_FALLBACK(_size : longint) : longint;
begin
  ALLOCATE_LOCAL_FALLBACK:=XtMalloc(dword(_size));
end;

function DEALLOCATE_LOCAL_FALLBACK(_ptr : longint) : longint;
begin
  DEALLOCATE_LOCAL_FALLBACK:=XtFree(TXtPointer(_ptr));
end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/ResourceI.pp
// -------------------------------------------------

function StringToQuark(_string : longint) : longint;
begin
  StringToQuark:=XrmStringToQuark(_string);
end;

function StringToName(_string : longint) : longint;
begin
  StringToName:=XrmStringToName(_string);
end;

function StringToClass(_string : longint) : longint;
begin
  StringToClass:=XrmStringToClass(_string);
end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xalloca.pp
// -------------------------------------------------

function ALLOCATE_LOCAL(size : longint) : longint;
begin
  ALLOCATE_LOCAL:=alloca(Tsize_t(size));
end;

function ALLOCATE_LOCAL(size : longint) : longint;
begin
  ALLOCATE_LOCAL:=alloca(Tsize_t(size));
end;

function ALLOCATE_LOCAL(_size : longint) : longint;
begin
  ALLOCATE_LOCAL:=ALLOCATE_LOCAL_FALLBACK(_size);
end;

function DEALLOCATE_LOCAL(_ptr : longint) : longint;
begin
  DEALLOCATE_LOCAL:=DEALLOCATE_LOCAL_FALLBACK(_ptr);
end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Shell.pp
// -------------------------------------------------

    function XtNiconName : TString;
      begin
        XtNiconName:=TString(@(XtShellStrings[0]));
      end;

    function XtCIconName : TString;
      begin
        XtCIconName:=TString(@(XtShellStrings[9]));
      end;

    function XtNiconPixmap : TString;
      begin
        XtNiconPixmap:=TString(@(XtShellStrings[18]));
      end;

    function XtCIconPixmap : TString;
      begin
        XtCIconPixmap:=TString(@(XtShellStrings[29]));
      end;

    function XtNiconWindow : TString;
      begin
        XtNiconWindow:=TString(@(XtShellStrings[40]));
      end;

    function XtCIconWindow : TString;
      begin
        XtCIconWindow:=TString(@(XtShellStrings[51]));
      end;

    function XtNiconMask : TString;
      begin
        XtNiconMask:=TString(@(XtShellStrings[62]));
      end;

    function XtCIconMask : TString;
      begin
        XtCIconMask:=TString(@(XtShellStrings[71]));
      end;

    function XtNwindowGroup : TString;
      begin
        XtNwindowGroup:=TString(@(XtShellStrings[80]));
      end;

    function XtCWindowGroup : TString;
      begin
        XtCWindowGroup:=TString(@(XtShellStrings[92]));
      end;

    function XtNvisual : TString;
      begin
        XtNvisual:=TString(@(XtShellStrings[104]));
      end;

    function XtCVisual : TString;
      begin
        XtCVisual:=TString(@(XtShellStrings[111]));
      end;

    function XtNtitleEncoding : TString;
      begin
        XtNtitleEncoding:=TString(@(XtShellStrings[118]));
      end;

    function XtCTitleEncoding : TString;
      begin
        XtCTitleEncoding:=TString(@(XtShellStrings[132]));
      end;

    function XtNsaveUnder : TString;
      begin
        XtNsaveUnder:=TString(@(XtShellStrings[146]));
      end;

    function XtCSaveUnder : TString;
      begin
        XtCSaveUnder:=TString(@(XtShellStrings[156]));
      end;

    function XtNtransient : TString;
      begin
        XtNtransient:=TString(@(XtShellStrings[166]));
      end;

    function XtCTransient : TString;
      begin
        XtCTransient:=TString(@(XtShellStrings[176]));
      end;

    function XtNoverrideRedirect : TString;
      begin
        XtNoverrideRedirect:=TString(@(XtShellStrings[186]));
      end;

    function XtCOverrideRedirect : TString;
      begin
        XtCOverrideRedirect:=TString(@(XtShellStrings[203]));
      end;

    function XtNtransientFor : TString;
      begin
        XtNtransientFor:=TString(@(XtShellStrings[220]));
      end;

    function XtCTransientFor : TString;
      begin
        XtCTransientFor:=TString(@(XtShellStrings[233]));
      end;

    function XtNiconNameEncoding : TString;
      begin
        XtNiconNameEncoding:=TString(@(XtShellStrings[246]));
      end;

    function XtCIconNameEncoding : TString;
      begin
        XtCIconNameEncoding:=TString(@(XtShellStrings[263]));
      end;

    function XtNallowShellResize : TString;
      begin
        XtNallowShellResize:=TString(@(XtShellStrings[280]));
      end;

    function XtCAllowShellResize : TString;
      begin
        XtCAllowShellResize:=TString(@(XtShellStrings[297]));
      end;

    function XtNcreatePopupChildProc : TString;
      begin
        XtNcreatePopupChildProc:=TString(@(XtShellStrings[314]));
      end;

    function XtCCreatePopupChildProc : TString;
      begin
        XtCCreatePopupChildProc:=TString(@(XtShellStrings[335]));
      end;

    function XtNtitle : TString;
      begin
        XtNtitle:=TString(@(XtShellStrings[356]));
      end;

    function XtCTitle : TString;
      begin
        XtCTitle:=TString(@(XtShellStrings[362]));
      end;

    function XtRAtom : TString;
      begin
        XtRAtom:=TString(@(XtShellStrings[368]));
      end;

    function XtNargc : TString;
      begin
        XtNargc:=TString(@(XtShellStrings[373]));
      end;

    function XtCArgc : TString;
      begin
        XtCArgc:=TString(@(XtShellStrings[378]));
      end;

    function XtNargv : TString;
      begin
        XtNargv:=TString(@(XtShellStrings[383]));
      end;

    function XtCArgv : TString;
      begin
        XtCArgv:=TString(@(XtShellStrings[388]));
      end;

    function XtNiconX : TString;
      begin
        XtNiconX:=TString(@(XtShellStrings[393]));
      end;

    function XtCIconX : TString;
      begin
        XtCIconX:=TString(@(XtShellStrings[399]));
      end;

    function XtNiconY : TString;
      begin
        XtNiconY:=TString(@(XtShellStrings[405]));
      end;

    function XtCIconY : TString;
      begin
        XtCIconY:=TString(@(XtShellStrings[411]));
      end;

    function XtNinput : TString;
      begin
        XtNinput:=TString(@(XtShellStrings[417]));
      end;

    function XtCInput : TString;
      begin
        XtCInput:=TString(@(XtShellStrings[423]));
      end;

    function XtNiconic : TString;
      begin
        XtNiconic:=TString(@(XtShellStrings[429]));
      end;

    function XtCIconic : TString;
      begin
        XtCIconic:=TString(@(XtShellStrings[436]));
      end;

    function XtNinitialState : TString;
      begin
        XtNinitialState:=TString(@(XtShellStrings[443]));
      end;

    function XtCInitialState : TString;
      begin
        XtCInitialState:=TString(@(XtShellStrings[456]));
      end;

    function XtNgeometry : TString;
      begin
        XtNgeometry:=TString(@(XtShellStrings[469]));
      end;

    function XtCGeometry : TString;
      begin
        XtCGeometry:=TString(@(XtShellStrings[478]));
      end;

    function XtNbaseWidth : TString;
      begin
        XtNbaseWidth:=TString(@(XtShellStrings[487]));
      end;

    function XtCBaseWidth : TString;
      begin
        XtCBaseWidth:=TString(@(XtShellStrings[497]));
      end;

    function XtNbaseHeight : TString;
      begin
        XtNbaseHeight:=TString(@(XtShellStrings[507]));
      end;

    function XtCBaseHeight : TString;
      begin
        XtCBaseHeight:=TString(@(XtShellStrings[518]));
      end;

    function XtNwinGravity : TString;
      begin
        XtNwinGravity:=TString(@(XtShellStrings[529]));
      end;

    function XtCWinGravity : TString;
      begin
        XtCWinGravity:=TString(@(XtShellStrings[540]));
      end;

    function XtNminWidth : TString;
      begin
        XtNminWidth:=TString(@(XtShellStrings[551]));
      end;

    function XtCMinWidth : TString;
      begin
        XtCMinWidth:=TString(@(XtShellStrings[560]));
      end;

    function XtNminHeight : TString;
      begin
        XtNminHeight:=TString(@(XtShellStrings[569]));
      end;

    function XtCMinHeight : TString;
      begin
        XtCMinHeight:=TString(@(XtShellStrings[579]));
      end;

    function XtNmaxWidth : TString;
      begin
        XtNmaxWidth:=TString(@(XtShellStrings[589]));
      end;

    function XtCMaxWidth : TString;
      begin
        XtCMaxWidth:=TString(@(XtShellStrings[598]));
      end;

    function XtNmaxHeight : TString;
      begin
        XtNmaxHeight:=TString(@(XtShellStrings[607]));
      end;

    function XtCMaxHeight : TString;
      begin
        XtCMaxHeight:=TString(@(XtShellStrings[617]));
      end;

    function XtNwidthInc : TString;
      begin
        XtNwidthInc:=TString(@(XtShellStrings[627]));
      end;

    function XtCWidthInc : TString;
      begin
        XtCWidthInc:=TString(@(XtShellStrings[636]));
      end;

    function XtNheightInc : TString;
      begin
        XtNheightInc:=TString(@(XtShellStrings[645]));
      end;

    function XtCHeightInc : TString;
      begin
        XtCHeightInc:=TString(@(XtShellStrings[655]));
      end;

    function XtNminAspectY : TString;
      begin
        XtNminAspectY:=TString(@(XtShellStrings[665]));
      end;

    function XtCMinAspectY : TString;
      begin
        XtCMinAspectY:=TString(@(XtShellStrings[676]));
      end;

    function XtNmaxAspectY : TString;
      begin
        XtNmaxAspectY:=TString(@(XtShellStrings[687]));
      end;

    function XtCMaxAspectY : TString;
      begin
        XtCMaxAspectY:=TString(@(XtShellStrings[698]));
      end;

    function XtNminAspectX : TString;
      begin
        XtNminAspectX:=TString(@(XtShellStrings[709]));
      end;

    function XtCMinAspectX : TString;
      begin
        XtCMinAspectX:=TString(@(XtShellStrings[720]));
      end;

    function XtNmaxAspectX : TString;
      begin
        XtNmaxAspectX:=TString(@(XtShellStrings[731]));
      end;

    function XtCMaxAspectX : TString;
      begin
        XtCMaxAspectX:=TString(@(XtShellStrings[742]));
      end;

    function XtNwmTimeout : TString;
      begin
        XtNwmTimeout:=TString(@(XtShellStrings[753]));
      end;

    function XtCWmTimeout : TString;
      begin
        XtCWmTimeout:=TString(@(XtShellStrings[763]));
      end;

    function XtNwaitForWm : TString;
      begin
        XtNwaitForWm:=TString(@(XtShellStrings[773]));
      end;

    function XtCWaitForWm : TString;
      begin
        XtCWaitForWm:=TString(@(XtShellStrings[783]));
      end;

    function XtNwaitforwm : TString;
      begin
        XtNwaitforwm:=TString(@(XtShellStrings[793]));
      end;

    function XtCWaitforwm : TString;
      begin
        XtCWaitforwm:=TString(@(XtShellStrings[803]));
      end;

    function XtNclientLeader : TString;
      begin
        XtNclientLeader:=TString(@(XtShellStrings[813]));
      end;

    function XtCClientLeader : TString;
      begin
        XtCClientLeader:=TString(@(XtShellStrings[826]));
      end;

    function XtNwindowRole : TString;
      begin
        XtNwindowRole:=TString(@(XtShellStrings[839]));
      end;

    function XtCWindowRole : TString;
      begin
        XtCWindowRole:=TString(@(XtShellStrings[850]));
      end;

    function XtNurgency : TString;
      begin
        XtNurgency:=TString(@(XtShellStrings[861]));
      end;

    function XtCUrgency : TString;
      begin
        XtCUrgency:=TString(@(XtShellStrings[869]));
      end;

    function XtNcancelCallback : TString;
      begin
        XtNcancelCallback:=TString(@(XtShellStrings[877]));
      end;

    function XtNcloneCommand : TString;
      begin
        XtNcloneCommand:=TString(@(XtShellStrings[892]));
      end;

    function XtCCloneCommand : TString;
      begin
        XtCCloneCommand:=TString(@(XtShellStrings[905]));
      end;

    function XtNconnection : TString;
      begin
        XtNconnection:=TString(@(XtShellStrings[918]));
      end;

    function XtCConnection : TString;
      begin
        XtCConnection:=TString(@(XtShellStrings[929]));
      end;

    function XtNcurrentDirectory : TString;
      begin
        XtNcurrentDirectory:=TString(@(XtShellStrings[940]));
      end;

    function XtCCurrentDirectory : TString;
      begin
        XtCCurrentDirectory:=TString(@(XtShellStrings[957]));
      end;

    function XtNdieCallback : TString;
      begin
        XtNdieCallback:=TString(@(XtShellStrings[974]));
      end;

    function XtNdiscardCommand : TString;
      begin
        XtNdiscardCommand:=TString(@(XtShellStrings[986]));
      end;

    function XtCDiscardCommand : TString;
      begin
        XtCDiscardCommand:=TString(@(XtShellStrings[1001]));
      end;

    function XtNenvironment : TString;
      begin
        XtNenvironment:=TString(@(XtShellStrings[1016]));
      end;

    function XtCEnvironment : TString;
      begin
        XtCEnvironment:=TString(@(XtShellStrings[1028]));
      end;

    function XtNinteractCallback : TString;
      begin
        XtNinteractCallback:=TString(@(XtShellStrings[1040]));
      end;

    function XtNjoinSession : TString;
      begin
        XtNjoinSession:=TString(@(XtShellStrings[1057]));
      end;

    function XtCJoinSession : TString;
      begin
        XtCJoinSession:=TString(@(XtShellStrings[1069]));
      end;

    function XtNprogramPath : TString;
      begin
        XtNprogramPath:=TString(@(XtShellStrings[1081]));
      end;

    function XtCProgramPath : TString;
      begin
        XtCProgramPath:=TString(@(XtShellStrings[1093]));
      end;

    function XtNresignCommand : TString;
      begin
        XtNresignCommand:=TString(@(XtShellStrings[1105]));
      end;

    function XtCResignCommand : TString;
      begin
        XtCResignCommand:=TString(@(XtShellStrings[1119]));
      end;

    function XtNrestartCommand : TString;
      begin
        XtNrestartCommand:=TString(@(XtShellStrings[1133]));
      end;

    function XtCRestartCommand : TString;
      begin
        XtCRestartCommand:=TString(@(XtShellStrings[1148]));
      end;

    function XtNrestartStyle : TString;
      begin
        XtNrestartStyle:=TString(@(XtShellStrings[1163]));
      end;

    function XtCRestartStyle : TString;
      begin
        XtCRestartStyle:=TString(@(XtShellStrings[1176]));
      end;

    function XtNsaveCallback : TString;
      begin
        XtNsaveCallback:=TString(@(XtShellStrings[1189]));
      end;

    function XtNsaveCompleteCallback : TString;
      begin
        XtNsaveCompleteCallback:=TString(@(XtShellStrings[1202]));
      end;

    function XtNsessionID : TString;
      begin
        XtNsessionID:=TString(@(XtShellStrings[1223]));
      end;

    function XtCSessionID : TString;
      begin
        XtCSessionID:=TString(@(XtShellStrings[1233]));
      end;

    function XtNshutdownCommand : TString;
      begin
        XtNshutdownCommand:=TString(@(XtShellStrings[1243]));
      end;

    function XtCShutdownCommand : TString;
      begin
        XtCShutdownCommand:=TString(@(XtShellStrings[1259]));
      end;

    function XtNerrorCallback : TString;
      begin
        XtNerrorCallback:=TString(@(XtShellStrings[1275]));
      end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xlocale.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Intrinsic.pp
// -------------------------------------------------

    function XtNumber(arr : longint) : TCardinal;
    begin
      XtNumber:=TCardinal((sizeof(arr))/(sizeof(arr[0])));
    end;

    function XtAllEvents : TEventMask;
      begin
        XtAllEvents:=TEventMask(-(1));
      end;

    function XtIsRectObj(object : longint) : longint;
    begin
      XtIsRectObj:=_XtCheckSubclassFlag(object,TXtEnum($02));
    end;

    function XtIsWidget(object : longint) : longint;
    begin
      XtIsWidget:=_XtCheckSubclassFlag(object,TXtEnum($04));
    end;

    function XtIsComposite(widget : longint) : longint;
    begin
      XtIsComposite:=_XtCheckSubclassFlag(widget,TXtEnum($08));
    end;

    function XtIsConstraint(widget : longint) : longint;
    begin
      XtIsConstraint:=_XtCheckSubclassFlag(widget,TXtEnum($10));
    end;

    function XtIsShell(widget : longint) : longint;
    begin
      XtIsShell:=_XtCheckSubclassFlag(widget,TXtEnum($20));
    end;

    function XtIsOverrideShell(widget : longint) : longint;
    begin
      XtIsOverrideShell:=_XtIsSubclassOf(widget,TWidgetClass(overrideShellWidgetClass),TWidgetClass(shellWidgetClass),TXtEnum($20));
    end;

    function XtIsWMShell(widget : longint) : longint;
    begin
      XtIsWMShell:=_XtCheckSubclassFlag(widget,TXtEnum($40));
    end;

    function XtIsVendorShell(widget : longint) : longint;
    begin
      XtIsVendorShell:=_XtIsSubclassOf(widget,TWidgetClass(vendorShellWidgetClass),TWidgetClass(wmShellWidgetClass),TXtEnum($40));
    end;

    function XtIsTransientShell(widget : longint) : longint;
    begin
      XtIsTransientShell:=_XtIsSubclassOf(widget,TWidgetClass(transientShellWidgetClass),TWidgetClass(wmShellWidgetClass),TXtEnum($40));
    end;

    function XtIsTopLevelShell(widget : longint) : longint;
    begin
      XtIsTopLevelShell:=_XtCheckSubclassFlag(widget,TXtEnum($80));
    end;

    function XtIsApplicationShell(widget : longint) : longint;
    begin
      XtIsApplicationShell:=_XtIsSubclassOf(widget,TWidgetClass(applicationShellWidgetClass),TWidgetClass(topLevelShellWidgetClass),TXtEnum($80));
    end;

    function XtIsSessionShell(widget : longint) : longint;
    begin
      XtIsSessionShell:=_XtIsSubclassOf(widget,TWidgetClass(sessionShellWidgetClass),TWidgetClass(topLevelShellWidgetClass),TXtEnum($80));
    end;

    function XtMapWidget(widget : longint) : longint;
    begin
      XtMapWidget:=XMapWindow(XtDisplay(widget),XtWindow(widget));
    end;

    function XtUnmapWidget(widget : longint) : longint;
    begin
      XtUnmapWidget:=XUnmapWindow(XtDisplay(widget),XtWindow(widget));
    end;

    function XtUnspecifiedPixmap : TPixmap;
      begin
        XtUnspecifiedPixmap:=TPixmap(2);
      end;

    function XtUnspecifiedWindow : TWindow;
      begin
        XtUnspecifiedWindow:=TWindow(2);
      end;

    function XtUnspecifiedWindowGroup : TWindow;
      begin
        XtUnspecifiedWindowGroup:=TWindow(3);
      end;

    function XtOffset(p_type,field : longint) : TCardinal;
    begin
      XtOffset:=TCardinal((pchar(@((Tp_type(NULL))^.field)))-(pchar(NULL)));
    end;

    function XtOffsetOf(s_type,field : longint) : longint;
    begin
      XtOffsetOf:=offsetof(s_type,field);
    end;

    function XtMalloc(size : longint) : longint;
    begin
      XtMalloc:=_XtMalloc(size,__FILE__,__LINE__);
    end;

    function XtRealloc(ptr,size : longint) : longint;
    begin
      XtRealloc:=_XtRealloc(ptr,size,__FILE__,__LINE__);
    end;

    function XtCalloc(num,size : longint) : longint;
    begin
      XtCalloc:=_XtCalloc(num,size,__FILE__,__LINE__);
    end;

    function XtFree(ptr : longint) : longint;
    begin
      XtFree:=_XtFree(ptr);
    end;

    function XtNew(_type : longint) : pTtype;
    begin
      XtNew:=pTtype(XtMalloc(dword(sizeof(_type))));
    end;

    function XtNewString(str : longint) : longint;
    var
       if_local1 : longint;
    (* result types are not known *)
    begin
      if NULL then
        if_local1:=strcpy(XtMalloc((dword(strlen(str)))+1),str)
      else
        if_local1:=NULL;
      XtNewString:=str<>(if_local1);
    end;

    function XT_CONVERT_FAIL : TAtom;
      begin
        XT_CONVERT_FAIL:=TAtom($80000001);
      end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/EventI.pp
// -------------------------------------------------

    function select(var a : _XtEventRec) : dword;
    begin
      select:=(a.flag0 and bm__XtEventRec_select) shr bp__XtEventRec_select;
    end;

    procedure set_select(var a : _XtEventRec; __select : dword);
    begin
      a.flag0:=a.flag0 or ((__select shl bp__XtEventRec_select) and bm__XtEventRec_select);
    end;

    function has_type_specifier(var a : _XtEventRec) : dword;
    begin
      has_type_specifier:=(a.flag0 and bm__XtEventRec_has_type_specifier) shr bp__XtEventRec_has_type_specifier;
    end;

    procedure set_has_type_specifier(var a : _XtEventRec; __has_type_specifier : dword);
    begin
      a.flag0:=a.flag0 or ((__has_type_specifier shl bp__XtEventRec_has_type_specifier) and bm__XtEventRec_has_type_specifier);
    end;

    function async(var a : _XtEventRec) : dword;
    begin
      async:=(a.flag0 and bm__XtEventRec_async) shr bp__XtEventRec_async;
    end;

    procedure set_async(var a : _XtEventRec; __async : dword);
    begin
      a.flag0:=a.flag0 or ((__async shl bp__XtEventRec_async) and bm__XtEventRec_async);
    end;

    function exclusive(var a : _XtGrabRec) : dword;
    begin
      exclusive:=(a.flag0 and bm__XtGrabRec_exclusive) shr bp__XtGrabRec_exclusive;
    end;

    procedure set_exclusive(var a : _XtGrabRec; __exclusive : dword);
    begin
      a.flag0:=a.flag0 or ((__exclusive shl bp__XtGrabRec_exclusive) and bm__XtGrabRec_exclusive);
    end;

    function spring_loaded(var a : _XtGrabRec) : dword;
    begin
      spring_loaded:=(a.flag0 and bm__XtGrabRec_spring_loaded) shr bp__XtGrabRec_spring_loaded;
    end;

    procedure set_spring_loaded(var a : _XtGrabRec; __spring_loaded : dword);
    begin
      a.flag0:=a.flag0 or ((__spring_loaded shl bp__XtGrabRec_spring_loaded) and bm__XtGrabRec_spring_loaded);
    end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Vendor.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/cursorfont.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/StringDefs.pp
// -------------------------------------------------

    function XtNaccelerators : TString;
      begin
        XtNaccelerators:=TString(@(XtStrings[0]));
      end;

    function XtNallowHoriz : TString;
      begin
        XtNallowHoriz:=TString(@(XtStrings[13]));
      end;

    function XtNallowVert : TString;
      begin
        XtNallowVert:=TString(@(XtStrings[24]));
      end;

    function XtNancestorSensitive : TString;
      begin
        XtNancestorSensitive:=TString(@(XtStrings[34]));
      end;

    function XtNbackground : TString;
      begin
        XtNbackground:=TString(@(XtStrings[52]));
      end;

    function XtNbackgroundPixmap : TString;
      begin
        XtNbackgroundPixmap:=TString(@(XtStrings[63]));
      end;

    function XtNbitmap : TString;
      begin
        XtNbitmap:=TString(@(XtStrings[80]));
      end;

    function XtNborderColor : TString;
      begin
        XtNborderColor:=TString(@(XtStrings[87]));
      end;

    function XtNborder : TString;
      begin
        XtNborder:=TString(@(XtStrings[99]));
      end;

    function XtNborderPixmap : TString;
      begin
        XtNborderPixmap:=TString(@(XtStrings[111]));
      end;

    function XtNborderWidth : TString;
      begin
        XtNborderWidth:=TString(@(XtStrings[124]));
      end;

    function XtNcallback : TString;
      begin
        XtNcallback:=TString(@(XtStrings[136]));
      end;

    function XtNchildren : TString;
      begin
        XtNchildren:=TString(@(XtStrings[145]));
      end;

    function XtNcolormap : TString;
      begin
        XtNcolormap:=TString(@(XtStrings[154]));
      end;

    function XtNdepth : TString;
      begin
        XtNdepth:=TString(@(XtStrings[163]));
      end;

    function XtNdestroyCallback : TString;
      begin
        XtNdestroyCallback:=TString(@(XtStrings[169]));
      end;

    function XtNeditType : TString;
      begin
        XtNeditType:=TString(@(XtStrings[185]));
      end;

    function XtNfile : TString;
      begin
        XtNfile:=TString(@(XtStrings[194]));
      end;

    function XtNfont : TString;
      begin
        XtNfont:=TString(@(XtStrings[199]));
      end;

    function XtNforceBars : TString;
      begin
        XtNforceBars:=TString(@(XtStrings[204]));
      end;

    function XtNforeground : TString;
      begin
        XtNforeground:=TString(@(XtStrings[214]));
      end;

    function XtNfunction : TString;
      begin
        XtNfunction:=TString(@(XtStrings[225]));
      end;

    function XtNheight : TString;
      begin
        XtNheight:=TString(@(XtStrings[234]));
      end;

    function XtNhighlight : TString;
      begin
        XtNhighlight:=TString(@(XtStrings[241]));
      end;

    function XtNhSpace : TString;
      begin
        XtNhSpace:=TString(@(XtStrings[251]));
      end;

    function XtNindex : TString;
      begin
        XtNindex:=TString(@(XtStrings[258]));
      end;

    function XtNinitialResourcesPersistent : TString;
      begin
        XtNinitialResourcesPersistent:=TString(@(XtStrings[264]));
      end;

    function XtNinnerHeight : TString;
      begin
        XtNinnerHeight:=TString(@(XtStrings[291]));
      end;

    function XtNinnerWidth : TString;
      begin
        XtNinnerWidth:=TString(@(XtStrings[303]));
      end;

    function XtNinnerWindow : TString;
      begin
        XtNinnerWindow:=TString(@(XtStrings[314]));
      end;

    function XtNinsertPosition : TString;
      begin
        XtNinsertPosition:=TString(@(XtStrings[326]));
      end;

    function XtNinternalHeight : TString;
      begin
        XtNinternalHeight:=TString(@(XtStrings[341]));
      end;

    function XtNinternalWidth : TString;
      begin
        XtNinternalWidth:=TString(@(XtStrings[356]));
      end;

    function XtNjumpProc : TString;
      begin
        XtNjumpProc:=TString(@(XtStrings[370]));
      end;

    function XtNjustify : TString;
      begin
        XtNjustify:=TString(@(XtStrings[379]));
      end;

    function XtNknobHeight : TString;
      begin
        XtNknobHeight:=TString(@(XtStrings[387]));
      end;

    function XtNknobIndent : TString;
      begin
        XtNknobIndent:=TString(@(XtStrings[398]));
      end;

    function XtNknobPixel : TString;
      begin
        XtNknobPixel:=TString(@(XtStrings[409]));
      end;

    function XtNknobWidth : TString;
      begin
        XtNknobWidth:=TString(@(XtStrings[419]));
      end;

    function XtNlabel : TString;
      begin
        XtNlabel:=TString(@(XtStrings[429]));
      end;

    function XtNlength : TString;
      begin
        XtNlength:=TString(@(XtStrings[435]));
      end;

    function XtNlowerRight : TString;
      begin
        XtNlowerRight:=TString(@(XtStrings[442]));
      end;

    function XtNmappedWhenManaged : TString;
      begin
        XtNmappedWhenManaged:=TString(@(XtStrings[453]));
      end;

    function XtNmenuEntry : TString;
      begin
        XtNmenuEntry:=TString(@(XtStrings[471]));
      end;

    function XtNname : TString;
      begin
        XtNname:=TString(@(XtStrings[481]));
      end;

    function XtNnotify : TString;
      begin
        XtNnotify:=TString(@(XtStrings[486]));
      end;

    function XtNnumChildren : TString;
      begin
        XtNnumChildren:=TString(@(XtStrings[493]));
      end;

    function XtNorientation : TString;
      begin
        XtNorientation:=TString(@(XtStrings[505]));
      end;

    function XtNparameter : TString;
      begin
        XtNparameter:=TString(@(XtStrings[517]));
      end;

    function XtNpixmap : TString;
      begin
        XtNpixmap:=TString(@(XtStrings[527]));
      end;

    function XtNpopupCallback : TString;
      begin
        XtNpopupCallback:=TString(@(XtStrings[534]));
      end;

    function XtNpopdownCallback : TString;
      begin
        XtNpopdownCallback:=TString(@(XtStrings[548]));
      end;

    function XtNresize : TString;
      begin
        XtNresize:=TString(@(XtStrings[564]));
      end;

    function XtNreverseVideo : TString;
      begin
        XtNreverseVideo:=TString(@(XtStrings[571]));
      end;

    function XtNscreen : TString;
      begin
        XtNscreen:=TString(@(XtStrings[584]));
      end;

    function XtNscrollProc : TString;
      begin
        XtNscrollProc:=TString(@(XtStrings[591]));
      end;

    function XtNscrollDCursor : TString;
      begin
        XtNscrollDCursor:=TString(@(XtStrings[602]));
      end;

    function XtNscrollHCursor : TString;
      begin
        XtNscrollHCursor:=TString(@(XtStrings[616]));
      end;

    function XtNscrollLCursor : TString;
      begin
        XtNscrollLCursor:=TString(@(XtStrings[630]));
      end;

    function XtNscrollRCursor : TString;
      begin
        XtNscrollRCursor:=TString(@(XtStrings[644]));
      end;

    function XtNscrollUCursor : TString;
      begin
        XtNscrollUCursor:=TString(@(XtStrings[658]));
      end;

    function XtNscrollVCursor : TString;
      begin
        XtNscrollVCursor:=TString(@(XtStrings[672]));
      end;

    function XtNselection : TString;
      begin
        XtNselection:=TString(@(XtStrings[686]));
      end;

    function XtNselectionArray : TString;
      begin
        XtNselectionArray:=TString(@(XtStrings[696]));
      end;

    function XtNsensitive : TString;
      begin
        XtNsensitive:=TString(@(XtStrings[711]));
      end;

    function XtNshown : TString;
      begin
        XtNshown:=TString(@(XtStrings[721]));
      end;

    function XtNspace : TString;
      begin
        XtNspace:=TString(@(XtStrings[727]));
      end;

    function XtNstring : TString;
      begin
        XtNstring:=TString(@(XtStrings[733]));
      end;

    function XtNtextOptions : TString;
      begin
        XtNtextOptions:=TString(@(XtStrings[740]));
      end;

    function XtNtextSink : TString;
      begin
        XtNtextSink:=TString(@(XtStrings[752]));
      end;

    function XtNtextSource : TString;
      begin
        XtNtextSource:=TString(@(XtStrings[761]));
      end;

    function XtNthickness : TString;
      begin
        XtNthickness:=TString(@(XtStrings[772]));
      end;

    function XtNthumb : TString;
      begin
        XtNthumb:=TString(@(XtStrings[782]));
      end;

    function XtNthumbProc : TString;
      begin
        XtNthumbProc:=TString(@(XtStrings[788]));
      end;

    function XtNtop : TString;
      begin
        XtNtop:=TString(@(XtStrings[798]));
      end;

    function XtNtranslations : TString;
      begin
        XtNtranslations:=TString(@(XtStrings[802]));
      end;

    function XtNunrealizeCallback : TString;
      begin
        XtNunrealizeCallback:=TString(@(XtStrings[815]));
      end;

    function XtNupdate : TString;
      begin
        XtNupdate:=TString(@(XtStrings[833]));
      end;

    function XtNuseBottom : TString;
      begin
        XtNuseBottom:=TString(@(XtStrings[840]));
      end;

    function XtNuseRight : TString;
      begin
        XtNuseRight:=TString(@(XtStrings[850]));
      end;

    function XtNvalue : TString;
      begin
        XtNvalue:=TString(@(XtStrings[859]));
      end;

    function XtNvSpace : TString;
      begin
        XtNvSpace:=TString(@(XtStrings[865]));
      end;

    function XtNwidth : TString;
      begin
        XtNwidth:=TString(@(XtStrings[872]));
      end;

    function XtNwindow : TString;
      begin
        XtNwindow:=TString(@(XtStrings[878]));
      end;

    function XtNx : TString;
      begin
        XtNx:=TString(@(XtStrings[885]));
      end;

    function XtNy : TString;
      begin
        XtNy:=TString(@(XtStrings[887]));
      end;

    function XtCAccelerators : TString;
      begin
        XtCAccelerators:=TString(@(XtStrings[889]));
      end;

    function XtCBackground : TString;
      begin
        XtCBackground:=TString(@(XtStrings[902]));
      end;

    function XtCBitmap : TString;
      begin
        XtCBitmap:=TString(@(XtStrings[913]));
      end;

    function XtCBoolean : TString;
      begin
        XtCBoolean:=TString(@(XtStrings[920]));
      end;

    function XtCBorderColor : TString;
      begin
        XtCBorderColor:=TString(@(XtStrings[928]));
      end;

    function XtCBorderWidth : TString;
      begin
        XtCBorderWidth:=TString(@(XtStrings[940]));
      end;

    function XtCCallback : TString;
      begin
        XtCCallback:=TString(@(XtStrings[952]));
      end;

    function XtCColormap : TString;
      begin
        XtCColormap:=TString(@(XtStrings[961]));
      end;

    function XtCColor : TString;
      begin
        XtCColor:=TString(@(XtStrings[970]));
      end;

    function XtCCursor : TString;
      begin
        XtCCursor:=TString(@(XtStrings[976]));
      end;

    function XtCDepth : TString;
      begin
        XtCDepth:=TString(@(XtStrings[983]));
      end;

    function XtCEditType : TString;
      begin
        XtCEditType:=TString(@(XtStrings[989]));
      end;

    function XtCEventBindings : TString;
      begin
        XtCEventBindings:=TString(@(XtStrings[998]));
      end;

    function XtCFile : TString;
      begin
        XtCFile:=TString(@(XtStrings[1012]));
      end;

    function XtCFont : TString;
      begin
        XtCFont:=TString(@(XtStrings[1017]));
      end;

    function XtCForeground : TString;
      begin
        XtCForeground:=TString(@(XtStrings[1022]));
      end;

    function XtCFraction : TString;
      begin
        XtCFraction:=TString(@(XtStrings[1033]));
      end;

    function XtCFunction : TString;
      begin
        XtCFunction:=TString(@(XtStrings[1042]));
      end;

    function XtCHeight : TString;
      begin
        XtCHeight:=TString(@(XtStrings[1051]));
      end;

    function XtCHSpace : TString;
      begin
        XtCHSpace:=TString(@(XtStrings[1058]));
      end;

    function XtCIndex : TString;
      begin
        XtCIndex:=TString(@(XtStrings[1065]));
      end;

    function XtCInitialResourcesPersistent : TString;
      begin
        XtCInitialResourcesPersistent:=TString(@(XtStrings[1071]));
      end;

    function XtCInsertPosition : TString;
      begin
        XtCInsertPosition:=TString(@(XtStrings[1098]));
      end;

    function XtCInterval : TString;
      begin
        XtCInterval:=TString(@(XtStrings[1113]));
      end;

    function XtCJustify : TString;
      begin
        XtCJustify:=TString(@(XtStrings[1122]));
      end;

    function XtCKnobIndent : TString;
      begin
        XtCKnobIndent:=TString(@(XtStrings[1130]));
      end;

    function XtCKnobPixel : TString;
      begin
        XtCKnobPixel:=TString(@(XtStrings[1141]));
      end;

    function XtCLabel : TString;
      begin
        XtCLabel:=TString(@(XtStrings[1151]));
      end;

    function XtCLength : TString;
      begin
        XtCLength:=TString(@(XtStrings[1157]));
      end;

    function XtCMappedWhenManaged : TString;
      begin
        XtCMappedWhenManaged:=TString(@(XtStrings[1164]));
      end;

    function XtCMargin : TString;
      begin
        XtCMargin:=TString(@(XtStrings[1182]));
      end;

    function XtCMenuEntry : TString;
      begin
        XtCMenuEntry:=TString(@(XtStrings[1189]));
      end;

    function XtCNotify : TString;
      begin
        XtCNotify:=TString(@(XtStrings[1199]));
      end;

    function XtCOrientation : TString;
      begin
        XtCOrientation:=TString(@(XtStrings[1206]));
      end;

    function XtCParameter : TString;
      begin
        XtCParameter:=TString(@(XtStrings[1218]));
      end;

    function XtCPixmap : TString;
      begin
        XtCPixmap:=TString(@(XtStrings[1228]));
      end;

    function XtCPosition : TString;
      begin
        XtCPosition:=TString(@(XtStrings[1235]));
      end;

    function XtCReadOnly : TString;
      begin
        XtCReadOnly:=TString(@(XtStrings[1244]));
      end;

    function XtCResize : TString;
      begin
        XtCResize:=TString(@(XtStrings[1253]));
      end;

    function XtCReverseVideo : TString;
      begin
        XtCReverseVideo:=TString(@(XtStrings[1260]));
      end;

    function XtCScreen : TString;
      begin
        XtCScreen:=TString(@(XtStrings[1273]));
      end;

    function XtCScrollProc : TString;
      begin
        XtCScrollProc:=TString(@(XtStrings[1280]));
      end;

    function XtCScrollDCursor : TString;
      begin
        XtCScrollDCursor:=TString(@(XtStrings[1291]));
      end;

    function XtCScrollHCursor : TString;
      begin
        XtCScrollHCursor:=TString(@(XtStrings[1305]));
      end;

    function XtCScrollLCursor : TString;
      begin
        XtCScrollLCursor:=TString(@(XtStrings[1319]));
      end;

    function XtCScrollRCursor : TString;
      begin
        XtCScrollRCursor:=TString(@(XtStrings[1333]));
      end;

    function XtCScrollUCursor : TString;
      begin
        XtCScrollUCursor:=TString(@(XtStrings[1347]));
      end;

    function XtCScrollVCursor : TString;
      begin
        XtCScrollVCursor:=TString(@(XtStrings[1361]));
      end;

    function XtCSelection : TString;
      begin
        XtCSelection:=TString(@(XtStrings[1375]));
      end;

    function XtCSensitive : TString;
      begin
        XtCSensitive:=TString(@(XtStrings[1385]));
      end;

    function XtCSelectionArray : TString;
      begin
        XtCSelectionArray:=TString(@(XtStrings[1395]));
      end;

    function XtCSpace : TString;
      begin
        XtCSpace:=TString(@(XtStrings[1410]));
      end;

    function XtCString : TString;
      begin
        XtCString:=TString(@(XtStrings[1416]));
      end;

    function XtCTextOptions : TString;
      begin
        XtCTextOptions:=TString(@(XtStrings[1423]));
      end;

    function XtCTextPosition : TString;
      begin
        XtCTextPosition:=TString(@(XtStrings[1435]));
      end;

    function XtCTextSink : TString;
      begin
        XtCTextSink:=TString(@(XtStrings[1448]));
      end;

    function XtCTextSource : TString;
      begin
        XtCTextSource:=TString(@(XtStrings[1457]));
      end;

    function XtCThickness : TString;
      begin
        XtCThickness:=TString(@(XtStrings[1468]));
      end;

    function XtCThumb : TString;
      begin
        XtCThumb:=TString(@(XtStrings[1478]));
      end;

    function XtCTranslations : TString;
      begin
        XtCTranslations:=TString(@(XtStrings[1484]));
      end;

    function XtCValue : TString;
      begin
        XtCValue:=TString(@(XtStrings[1497]));
      end;

    function XtCVSpace : TString;
      begin
        XtCVSpace:=TString(@(XtStrings[1503]));
      end;

    function XtCWidth : TString;
      begin
        XtCWidth:=TString(@(XtStrings[1510]));
      end;

    function XtCWindow : TString;
      begin
        XtCWindow:=TString(@(XtStrings[1516]));
      end;

    function XtCX : TString;
      begin
        XtCX:=TString(@(XtStrings[1523]));
      end;

    function XtCY : TString;
      begin
        XtCY:=TString(@(XtStrings[1525]));
      end;

    function XtRAcceleratorTable : TString;
      begin
        XtRAcceleratorTable:=TString(@(XtStrings[1527]));
      end;

    function XtRAtom : TString;
      begin
        XtRAtom:=TString(@(XtStrings[1544]));
      end;

    function XtRBitmap : TString;
      begin
        XtRBitmap:=TString(@(XtStrings[1549]));
      end;

    function XtRBool : TString;
      begin
        XtRBool:=TString(@(XtStrings[1556]));
      end;

    function XtRBoolean : TString;
      begin
        XtRBoolean:=TString(@(XtStrings[1561]));
      end;

    function XtRCallback : TString;
      begin
        XtRCallback:=TString(@(XtStrings[1569]));
      end;

    function XtRCallProc : TString;
      begin
        XtRCallProc:=TString(@(XtStrings[1578]));
      end;

    function XtRCardinal : TString;
      begin
        XtRCardinal:=TString(@(XtStrings[1587]));
      end;

    function XtRColor : TString;
      begin
        XtRColor:=TString(@(XtStrings[1596]));
      end;

    function XtRColormap : TString;
      begin
        XtRColormap:=TString(@(XtStrings[1602]));
      end;

    function XtRCursor : TString;
      begin
        XtRCursor:=TString(@(XtStrings[1611]));
      end;

    function XtRDimension : TString;
      begin
        XtRDimension:=TString(@(XtStrings[1618]));
      end;

    function XtRDisplay : TString;
      begin
        XtRDisplay:=TString(@(XtStrings[1628]));
      end;

    function XtREditMode : TString;
      begin
        XtREditMode:=TString(@(XtStrings[1636]));
      end;

    function XtREnum : TString;
      begin
        XtREnum:=TString(@(XtStrings[1645]));
      end;

    function XtRFile : TString;
      begin
        XtRFile:=TString(@(XtStrings[1650]));
      end;

    function XtRFloat : TString;
      begin
        XtRFloat:=TString(@(XtStrings[1655]));
      end;

    function XtRFont : TString;
      begin
        XtRFont:=TString(@(XtStrings[1661]));
      end;

    function XtRFontStruct : TString;
      begin
        XtRFontStruct:=TString(@(XtStrings[1666]));
      end;

    function XtRFunction : TString;
      begin
        XtRFunction:=TString(@(XtStrings[1677]));
      end;

    function XtRGeometry : TString;
      begin
        XtRGeometry:=TString(@(XtStrings[1686]));
      end;

    function XtRImmediate : TString;
      begin
        XtRImmediate:=TString(@(XtStrings[1695]));
      end;

    function XtRInitialState : TString;
      begin
        XtRInitialState:=TString(@(XtStrings[1705]));
      end;

    function XtRInt : TString;
      begin
        XtRInt:=TString(@(XtStrings[1718]));
      end;

    function XtRJustify : TString;
      begin
        XtRJustify:=TString(@(XtStrings[1722]));
      end;

    function XtRLongBoolean : TString;
      begin
        XtRLongBoolean:=TString(@(XtStrings[1730]));
      end;

    function XtRObject : TString;
      begin
        XtRObject:=TString(@(XtStrings[1735]));
      end;

    function XtROrientation : TString;
      begin
        XtROrientation:=TString(@(XtStrings[1742]));
      end;

    function XtRPixel : TString;
      begin
        XtRPixel:=TString(@(XtStrings[1754]));
      end;

    function XtRPixmap : TString;
      begin
        XtRPixmap:=TString(@(XtStrings[1760]));
      end;

    function XtRPointer : TString;
      begin
        XtRPointer:=TString(@(XtStrings[1767]));
      end;

    function XtRPosition : TString;
      begin
        XtRPosition:=TString(@(XtStrings[1775]));
      end;

    function XtRScreen : TString;
      begin
        XtRScreen:=TString(@(XtStrings[1784]));
      end;

    function XtRShort : TString;
      begin
        XtRShort:=TString(@(XtStrings[1791]));
      end;

    function XtRString : TString;
      begin
        XtRString:=TString(@(XtStrings[1797]));
      end;

    function XtRStringArray : TString;
      begin
        XtRStringArray:=TString(@(XtStrings[1804]));
      end;

    function XtRStringTable : TString;
      begin
        XtRStringTable:=TString(@(XtStrings[1816]));
      end;

    function XtRUnsignedChar : TString;
      begin
        XtRUnsignedChar:=TString(@(XtStrings[1828]));
      end;

    function XtRTranslationTable : TString;
      begin
        XtRTranslationTable:=TString(@(XtStrings[1841]));
      end;

    function XtRVisual : TString;
      begin
        XtRVisual:=TString(@(XtStrings[1858]));
      end;

    function XtRWidget : TString;
      begin
        XtRWidget:=TString(@(XtStrings[1865]));
      end;

    function XtRWidgetClass : TString;
      begin
        XtRWidgetClass:=TString(@(XtStrings[1872]));
      end;

    function XtRWidgetList : TString;
      begin
        XtRWidgetList:=TString(@(XtStrings[1884]));
      end;

    function XtRWindow : TString;
      begin
        XtRWindow:=TString(@(XtStrings[1895]));
      end;

    function XtEoff : TString;
      begin
        XtEoff:=TString(@(XtStrings[1902]));
      end;

    function XtEfalse : TString;
      begin
        XtEfalse:=TString(@(XtStrings[1906]));
      end;

    function XtEno : TString;
      begin
        XtEno:=TString(@(XtStrings[1912]));
      end;

    function XtEon : TString;
      begin
        XtEon:=TString(@(XtStrings[1915]));
      end;

    function XtEtrue : TString;
      begin
        XtEtrue:=TString(@(XtStrings[1918]));
      end;

    function XtEyes : TString;
      begin
        XtEyes:=TString(@(XtStrings[1923]));
      end;

    function XtEvertical : TString;
      begin
        XtEvertical:=TString(@(XtStrings[1927]));
      end;

    function XtEhorizontal : TString;
      begin
        XtEhorizontal:=TString(@(XtStrings[1936]));
      end;

    function XtEtextRead : TString;
      begin
        XtEtextRead:=TString(@(XtStrings[1947]));
      end;

    function XtEtextAppend : TString;
      begin
        XtEtextAppend:=TString(@(XtStrings[1952]));
      end;

    function XtEtextEdit : TString;
      begin
        XtEtextEdit:=TString(@(XtStrings[1959]));
      end;

    function XtExtdefaultbackground : TString;
      begin
        XtExtdefaultbackground:=TString(@(XtStrings[1964]));
      end;

    function XtExtdefaultforeground : TString;
      begin
        XtExtdefaultforeground:=TString(@(XtStrings[1984]));
      end;

    function XtExtdefaultfont : TString;
      begin
        XtExtdefaultfont:=TString(@(XtStrings[2004]));
      end;

    function XtNfontSet : TString;
      begin
        XtNfontSet:=TString(@(XtStrings[2018]));
      end;

    function XtRFontSet : TString;
      begin
        XtRFontSet:=TString(@(XtStrings[2026]));
      end;

    function XtCFontSet : TString;
      begin
        XtCFontSet:=TString(@(XtStrings[2034]));
      end;

    function XtRGravity : TString;
      begin
        XtRGravity:=TString(@(XtStrings[2042]));
      end;

    function XtNcreateHook : TString;
      begin
        XtNcreateHook:=TString(@(XtStrings[2050]));
      end;

    function XtNchangeHook : TString;
      begin
        XtNchangeHook:=TString(@(XtStrings[2061]));
      end;

    function XtNconfigureHook : TString;
      begin
        XtNconfigureHook:=TString(@(XtStrings[2072]));
      end;

    function XtNgeometryHook : TString;
      begin
        XtNgeometryHook:=TString(@(XtStrings[2086]));
      end;

    function XtNdestroyHook : TString;
      begin
        XtNdestroyHook:=TString(@(XtStrings[2099]));
      end;

    function XtNshells : TString;
      begin
        XtNshells:=TString(@(XtStrings[2111]));
      end;

    function XtNnumShells : TString;
      begin
        XtNnumShells:=TString(@(XtStrings[2118]));
      end;

    function XtRCommandArgArray : TString;
      begin
        XtRCommandArgArray:=TString(@(XtStrings[2128]));
      end;

    function XtRDirectoryString : TString;
      begin
        XtRDirectoryString:=TString(@(XtStrings[2144]));
      end;

    function XtREnvironmentArray : TString;
      begin
        XtREnvironmentArray:=TString(@(XtStrings[2160]));
      end;

    function XtRRestartStyle : TString;
      begin
        XtRRestartStyle:=TString(@(XtStrings[2177]));
      end;

    function XtRSmcConn : TString;
      begin
        XtRSmcConn:=TString(@(XtStrings[2190]));
      end;

    function XtHcreate : TString;
      begin
        XtHcreate:=TString(@(XtStrings[2198]));
      end;

    function XtHsetValues : TString;
      begin
        XtHsetValues:=TString(@(XtStrings[2207]));
      end;

    function XtHmanageChildren : TString;
      begin
        XtHmanageChildren:=TString(@(XtStrings[2219]));
      end;

    function XtHunmanageChildren : TString;
      begin
        XtHunmanageChildren:=TString(@(XtStrings[2236]));
      end;

    function XtHmanageSet : TString;
      begin
        XtHmanageSet:=TString(@(XtStrings[2255]));
      end;

    function XtHunmanageSet : TString;
      begin
        XtHunmanageSet:=TString(@(XtStrings[2267]));
      end;

    function XtHrealizeWidget : TString;
      begin
        XtHrealizeWidget:=TString(@(XtStrings[2281]));
      end;

    function XtHunrealizeWidget : TString;
      begin
        XtHunrealizeWidget:=TString(@(XtStrings[2297]));
      end;

    function XtHaddCallback : TString;
      begin
        XtHaddCallback:=TString(@(XtStrings[2315]));
      end;

    function XtHaddCallbacks : TString;
      begin
        XtHaddCallbacks:=TString(@(XtStrings[2329]));
      end;

    function XtHremoveCallback : TString;
      begin
        XtHremoveCallback:=TString(@(XtStrings[2344]));
      end;

    function XtHremoveCallbacks : TString;
      begin
        XtHremoveCallbacks:=TString(@(XtStrings[2361]));
      end;

    function XtHremoveAllCallbacks : TString;
      begin
        XtHremoveAllCallbacks:=TString(@(XtStrings[2379]));
      end;

    function XtHaugmentTranslations : TString;
      begin
        XtHaugmentTranslations:=TString(@(XtStrings[2400]));
      end;

    function XtHoverrideTranslations : TString;
      begin
        XtHoverrideTranslations:=TString(@(XtStrings[2422]));
      end;

    function XtHuninstallTranslations : TString;
      begin
        XtHuninstallTranslations:=TString(@(XtStrings[2445]));
      end;

    function XtHsetKeyboardFocus : TString;
      begin
        XtHsetKeyboardFocus:=TString(@(XtStrings[2469]));
      end;

    function XtHsetWMColormapWindows : TString;
      begin
        XtHsetWMColormapWindows:=TString(@(XtStrings[2488]));
      end;

    function XtHsetMappedWhenManaged : TString;
      begin
        XtHsetMappedWhenManaged:=TString(@(XtStrings[2511]));
      end;

    function XtHmapWidget : TString;
      begin
        XtHmapWidget:=TString(@(XtStrings[2534]));
      end;

    function XtHunmapWidget : TString;
      begin
        XtHunmapWidget:=TString(@(XtStrings[2546]));
      end;

    function XtHpopup : TString;
      begin
        XtHpopup:=TString(@(XtStrings[2560]));
      end;

    function XtHpopupSpringLoaded : TString;
      begin
        XtHpopupSpringLoaded:=TString(@(XtStrings[2568]));
      end;

    function XtHpopdown : TString;
      begin
        XtHpopdown:=TString(@(XtStrings[2588]));
      end;

    function XtHconfigure : TString;
      begin
        XtHconfigure:=TString(@(XtStrings[2598]));
      end;

    function XtHpreGeometry : TString;
      begin
        XtHpreGeometry:=TString(@(XtStrings[2610]));
      end;

    function XtHpostGeometry : TString;
      begin
        XtHpostGeometry:=TString(@(XtStrings[2624]));
      end;

    function XtHdestroy : TString;
      begin
        XtHdestroy:=TString(@(XtStrings[2639]));
      end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Sunkeysym.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/CompositeP.pp
// -------------------------------------------------

    function XtInheritGeometryManager : TXtGeometryHandler;
      begin
        XtInheritGeometryManager:=TXtGeometryHandler(_XtInherit);
      end;

    function XtInheritChangeManaged : TXtWidgetProc;
      begin
        XtInheritChangeManaged:=TXtWidgetProc(_XtInherit);
      end;

    function XtInheritInsertChild : TXtWidgetProc;
      begin
        XtInheritInsertChild:=TXtWidgetProc(_XtInherit);
      end;

    function XtInheritDeleteChild : TXtWidgetProc;
      begin
        XtInheritDeleteChild:=TXtWidgetProc(_XtInherit);
      end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/XKBlib.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/RectObjP.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/DECkeysym.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xprotostr.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/ThreadsI.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xlib-xcb.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xthreads.pp
// -------------------------------------------------

function xthread_init : longint;
begin
  xthread_init:=cthread_init;
end;

function xthread_fork(func,closure : longint) : longint;
begin
  xthread_fork:=cthread_fork(func,closure);
end;

function xthread_yield : longint;
begin
  xthread_yield:=cthread_yield;
end;

function xthread_exit(v : longint) : longint;
begin
  xthread_exit:=cthread_exit(v);
end;

function xthread_set_name(t,str : longint) : longint;
begin
  xthread_set_name:=cthread_set_name(t,str);
end;

function xmutex_init(m : longint) : longint;
begin
  xmutex_init:=mutex_init(m);
end;

function xmutex_clear(m : longint) : longint;
begin
  xmutex_clear:=mutex_clear(m);
end;

function xmutex_lock(m : longint) : longint;
begin
  xmutex_lock:=mutex_lock(m);
end;

function xmutex_unlock(m : longint) : longint;
begin
  xmutex_unlock:=mutex_unlock(m);
end;

function xmutex_set_name(m,str : longint) : longint;
begin
  xmutex_set_name:=mutex_set_name(m,str);
end;

function xcondition_init(cv : longint) : longint;
begin
  xcondition_init:=condition_init(cv);
end;

function xcondition_clear(cv : longint) : longint;
begin
  xcondition_clear:=condition_clear(cv);
end;

function xcondition_wait(cv,m : longint) : longint;
begin
  xcondition_wait:=condition_wait(cv,m);
end;

function xcondition_signal(cv : longint) : longint;
begin
  xcondition_signal:=condition_signal(cv);
end;

function xcondition_broadcast(cv : longint) : longint;
begin
  xcondition_broadcast:=condition_broadcast(cv);
end;

function xcondition_set_name(cv,str : longint) : longint;
begin
  xcondition_set_name:=condition_set_name(cv,str);
end;

function xthread_fork(func,closure : longint) : longint;
begin
  xthread_fork:=thr_create(NULL,0,func,closure,THR_NEW_LWP or THR_DETACHED,NULL);
end;

function xthread_yield : longint;
begin
  xthread_yield:=thr_yield;
end;

function xthread_exit(v : longint) : longint;
begin
  xthread_exit:=thr_exit(v);
end;

function xthread_key_create(kp,d : longint) : longint;
begin
  xthread_key_create:=thr_keycreate(kp,d);
end;

function xthread_key_delete(k : longint) : longint;
begin
  xthread_key_delete:=0;
end;

function xthread_key_delete(k : longint) : longint;
begin
  xthread_key_delete:=thr_keydelete(k);
end;

function xthread_set_specific(k,v : longint) : longint;
begin
  xthread_set_specific:=thr_setspecific(k,v);
end;

function xthread_get_specific(k,vp : longint) : longint;
begin
  xthread_get_specific:=thr_getspecific(k,vp);
end;

function xmutex_init(m : longint) : longint;
begin
  xmutex_init:=mutex_init(m,USYNC_THREAD,0);
end;

function xmutex_clear(m : longint) : longint;
begin
  xmutex_clear:=mutex_destroy(m);
end;

function xmutex_lock(m : longint) : longint;
begin
  xmutex_lock:=mutex_lock(m);
end;

function xmutex_unlock(m : longint) : longint;
begin
  xmutex_unlock:=mutex_unlock(m);
end;

function xcondition_init(cv : longint) : longint;
begin
  xcondition_init:=cond_init(cv,USYNC_THREAD,0);
end;

function xcondition_clear(cv : longint) : longint;
begin
  xcondition_clear:=cond_destroy(cv);
end;

function xcondition_wait(cv,m : longint) : longint;
begin
  xcondition_wait:=cond_wait(cv,m);
end;

function xcondition_signal(cv : longint) : longint;
begin
  xcondition_signal:=cond_signal(cv);
end;

function xcondition_broadcast(cv : longint) : longint;
begin
  xcondition_broadcast:=cond_broadcast(cv);
end;

function xthread_init : longint;
begin
  xthread_init:=_Xthread_init;
end;

    function xthread_exit(v : longint) : longint;
    begin
      xthread_exit:=ExitThread(TDWORD(v));
    end;

    function xthread_key_delete(k : longint) : longint;
    begin
      xthread_key_delete:=TlsFree(k);
    end;

    function xthread_set_specific(k,v : longint) : longint;
    begin
      xthread_set_specific:=TlsSetValue(k,v);
    end;

    function xthread_get_specific(k,vp : longint) : longint;
    begin
      xthread_get_specific:=TlsGetValue(k);
    end;

    function xmutex_init(m : longint) : longint;
    begin
      xmutex_init:=InitializeCriticalSection(m);
    end;

    function xmutex_clear(m : longint) : longint;
    begin
      xmutex_clear:=DeleteCriticalSection(m);
    end;

    function xmutex_lock(m : longint) : longint;
    begin
      xmutex_lock:=EnterCriticalSection(m);
    end;

    function xmutex_unlock(m : longint) : longint;
    begin
      xmutex_unlock:=LeaveCriticalSection(m);
    end;

    function xthread_exit(v : longint) : longint;
    begin
      xthread_exit:=pthread_exit(v);
    end;

    function xthread_key_create(kp,d : longint) : longint;
    begin
      xthread_key_create:=tis_key_create(kp,d);
    end;

    function xthread_key_delete(k : longint) : longint;
    begin
      xthread_key_delete:=tis_key_delete(k);
    end;

    function xthread_set_specific(k,v : longint) : longint;
    begin
      xthread_set_specific:=tis_setspecific(k,v);
    end;

    function xmutex_init(m : longint) : longint;
    begin
      xmutex_init:=tis_mutex_init(m);
    end;

    function xmutex_clear(m : longint) : longint;
    begin
      xmutex_clear:=tis_mutex_destroy(m);
    end;

    function xmutex_lock(m : longint) : longint;
    begin
      xmutex_lock:=tis_mutex_lock(m);
    end;

    function xmutex_unlock(m : longint) : longint;
    begin
      xmutex_unlock:=tis_mutex_unlock(m);
    end;

    function xcondition_init(c : longint) : longint;
    begin
      xcondition_init:=tis_cond_init(c);
    end;

    function xcondition_clear(c : longint) : longint;
    begin
      xcondition_clear:=tis_cond_destroy(c);
    end;

    function xcondition_wait(c,m : longint) : longint;
    begin
      xcondition_wait:=tis_cond_wait(c,m);
    end;

    function xcondition_signal(c : longint) : longint;
    begin
      xcondition_signal:=tis_cond_signal(c);
    end;

    function xcondition_broadcast(c : longint) : longint;
    begin
      xcondition_broadcast:=tis_cond_broadcast(c);
    end;

    function xthread_exit(v : longint) : longint;
    begin
      xthread_exit:=thr_exit(v);
    end;

    function xthread_key_create(kp,d : longint) : longint;
    begin
      xthread_key_create:=thr_keycreate(kp,d);
    end;

    function xthread_key_delete(k : longint) : longint;
    begin
      xthread_key_delete:=thr_keydelete(k);
    end;

    function xthread_set_specific(k,v : longint) : longint;
    begin
      xthread_set_specific:=thr_setspecific(k,v);
    end;

    function xmutex_init(m : longint) : longint;
    begin
      xmutex_init:=mutex_init(m,0);
    end;

    function xmutex_clear(m : longint) : longint;
    begin
      xmutex_clear:=mutex_destroy(m);
    end;

    function xmutex_lock(m : longint) : longint;
    begin
      xmutex_lock:=mutex_lock(m);
    end;

    function xmutex_unlock(m : longint) : longint;
    begin
      xmutex_unlock:=mutex_unlock(m);
    end;

    function xcondition_init(c : longint) : longint;
    begin
      xcondition_init:=cond_init(c,0,0);
    end;

    function xcondition_clear(c : longint) : longint;
    begin
      xcondition_clear:=cond_destroy(c);
    end;

    function xcondition_wait(c,m : longint) : longint;
    begin
      xcondition_wait:=cond_wait(c,m);
    end;

    function xcondition_signal(c : longint) : longint;
    begin
      xcondition_signal:=cond_signal(c);
    end;

    function xcondition_broadcast(c : longint) : longint;
    begin
      xcondition_broadcast:=cond_broadcast(c);
    end;

    function xthread_yield : longint;
    begin
      xthread_yield:=pthread_yield;
    end;

    function xthread_exit(v : longint) : longint;
    begin
      xthread_exit:=pthread_exit(v);
    end;

    function xthread_set_specific(k,v : longint) : longint;
    begin
      xthread_set_specific:=pthread_setspecific(k,v);
    end;

    function xmutex_clear(m : longint) : longint;
    begin
      xmutex_clear:=pthread_mutex_destroy(m);
    end;

    function xmutex_lock(m : longint) : longint;
    begin
      xmutex_lock:=pthread_mutex_lock(m);
    end;

    function xmutex_unlock(m : longint) : longint;
    begin
      xmutex_unlock:=pthread_mutex_unlock(m);
    end;

    function xthread_key_create(kp,d : longint) : longint;
    begin
      xthread_key_create:=pthread_key_create(kp,d);
    end;

    function xthread_key_delete(k : longint) : longint;
    begin
      xthread_key_delete:=pthread_key_delete(k);
    end;

    function xmutex_init(m : longint) : longint;
    begin
      xmutex_init:=pthread_mutex_init(m,NULL);
    end;

    function xcondition_init(c : longint) : longint;
    begin
      xcondition_init:=pthread_cond_init(c,NULL);
    end;

    function xthread_key_create(kp,d : longint) : longint;
    begin
      xthread_key_create:=pthread_keycreate(kp,d);
    end;

    function xthread_key_delete(k : longint) : longint;
    begin
      xthread_key_delete:=0;
    end;

    function xthread_get_specific(k,vp : longint) : longint;
    begin
      xthread_get_specific:=pthread_getspecific(k,vp);
    end;

    function xcondition_init(c : longint) : longint;
    begin
      xcondition_init:=pthread_cond_init(c,pthread_condattr_default);
    end;

    function xcondition_clear(c : longint) : longint;
    begin
      xcondition_clear:=pthread_cond_destroy(c);
    end;

    function xcondition_wait(c,m : longint) : longint;
    begin
      xcondition_wait:=pthread_cond_wait(c,m);
    end;

    function xcondition_signal(c : longint) : longint;
    begin
      xcondition_signal:=pthread_cond_signal(c);
    end;

    function xcondition_broadcast(c : longint) : longint;
    begin
      xcondition_broadcast:=pthread_cond_broadcast(c);
    end;

    function xthread_have_id(id : longint) : longint;
    begin
      xthread_have_id:= not (pthread_equal(id,_X_no_thread_id));
    end;

    function xthread_equal(id1,id2 : longint) : longint;
    begin
      xthread_equal:=pthread_equal(id1,id2);
    end;

    function xthread_have_id(id : longint) : longint;
    begin
      xthread_have_id:= not (pthread_equal(id,0));
    end;

    function xthread_equal(id1,id2 : longint) : longint;
    begin
      xthread_equal:=pthread_equal(id1,id2);
    end;

    function xcondition_malloc : Txcondition_t;
    begin
      xcondition_malloc:=Txcondition_t(xmalloc(sizeof(xcondition_rec)));
    end;

    function xcondition_free(c : longint) : longint;
    begin
      xcondition_free:=xfree(pchar(c));
    end;

    function xmutex_malloc : Txmutex_t;
    begin
      xmutex_malloc:=Txmutex_t(xmalloc(sizeof(xmutex_rec)));
    end;

    function xmutex_free(m : longint) : longint;
    begin
      xmutex_free:=xfree(pchar(m));
    end;

    function xthread_have_id(id : longint) : longint;
    begin
      xthread_have_id:=id;
    end;

    function xthread_equal(id1,id2 : longint) : longint;
    begin
      xthread_equal:=id1=id2;
    end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xdmcp.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/SM/SMlib.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/SM/SMproto.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/SM/SM.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/xtestproto.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/xcmiscproto.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/XKBgeom.pp
// -------------------------------------------------

function XkbBoundsWidth(b : longint) : longint;
begin
  XkbBoundsWidth:=(b^.x2)-(b^.x1);
end;

function XkbBoundsHeight(b : longint) : longint;
begin
  XkbBoundsHeight:=(b^.y2)-(b^.y1);
end;

function XkbOutlineIndex(s,o : longint) : longint;
begin
  XkbOutlineIndex:=longint(To(-(@(s^.(outlines[0])))));
end;

function XkbShapeDoodadColor(g,d : longint) : longint;
begin
  XkbShapeDoodadColor:=@(g^.(colors[d^.color_ndx]));
end;

function XkbShapeDoodadShape(g,d : longint) : longint;
begin
  XkbShapeDoodadShape:=@(g^.(shapes[d^.shape_ndx]));
end;

function XkbSetShapeDoodadColor(g,d,c : longint) : longint;
begin
  XkbSetShapeDoodadColor:=(d^.color_ndx):=(Tc(-(@(g^.(colors[0])))));
end;

function XkbSetShapeDoodadShape(g,d,s : longint) : longint;
begin
  XkbSetShapeDoodadShape:=(d^.shape_ndx):=(Ts(-(@(g^.(shapes[0])))));
end;

function XkbTextDoodadColor(g,d : longint) : longint;
begin
  XkbTextDoodadColor:=@(g^.(colors[d^.color_ndx]));
end;

function XkbSetTextDoodadColor(g,d,c : longint) : longint;
begin
  XkbSetTextDoodadColor:=(d^.color_ndx):=(Tc(-(@(g^.(colors[0])))));
end;

function XkbIndicatorDoodadShape(g,d : longint) : longint;
begin
  XkbIndicatorDoodadShape:=@(g^.(shapes[d^.shape_ndx]));
end;

function XkbIndicatorDoodadOnColor(g,d : longint) : longint;
begin
  XkbIndicatorDoodadOnColor:=@(g^.(colors[d^.on_color_ndx]));
end;

function XkbIndicatorDoodadOffColor(g,d : longint) : longint;
begin
  XkbIndicatorDoodadOffColor:=@(g^.(colors[d^.off_color_ndx]));
end;

function XkbSetIndicatorDoodadOnColor(g,d,c : longint) : longint;
begin
  XkbSetIndicatorDoodadOnColor:=(d^.on_color_ndx):=(Tc(-(@(g^.(colors[0])))));
end;

function XkbSetIndicatorDoodadOffColor(g,d,c : longint) : longint;
begin
  XkbSetIndicatorDoodadOffColor:=(d^.off_color_ndx):=(Tc(-(@(g^.(colors[0])))));
end;

function XkbSetIndicatorDoodadShape(g,d,s : longint) : longint;
begin
  XkbSetIndicatorDoodadShape:=(d^.shape_ndx):=(Ts(-(@(g^.(shapes[0])))));
end;

function XkbLogoDoodadColor(g,d : longint) : longint;
begin
  XkbLogoDoodadColor:=@(g^.(colors[d^.color_ndx]));
end;

function XkbLogoDoodadShape(g,d : longint) : longint;
begin
  XkbLogoDoodadShape:=@(g^.(shapes[d^.shape_ndx]));
end;

function XkbSetLogoDoodadColor(g,d,c : longint) : longint;
begin
  XkbSetLogoDoodadColor:=(d^.color_ndx):=(Tc(-(@(g^.(colors[0])))));
end;

function XkbSetLogoDoodadShape(g,d,s : longint) : longint;
begin
  XkbSetLogoDoodadShape:=(d^.shape_ndx):=(Ts(-(@(g^.(shapes[0])))));
end;

function XkbKeyShape(g,k : longint) : longint;
begin
  XkbKeyShape:=@(g^.(shapes[k^.shape_ndx]));
end;

function XkbKeyColor(g,k : longint) : longint;
begin
  XkbKeyColor:=@(g^.(colors[k^.color_ndx]));
end;

function XkbSetKeyShape(g,k,s : longint) : longint;
begin
  XkbSetKeyShape:=(k^.shape_ndx):=(Ts(-(@(g^.(shapes[0])))));
end;

function XkbSetKeyColor(g,k,c : longint) : longint;
begin
  XkbSetKeyColor:=(k^.color_ndx):=(Tc(-(@(g^.(colors[0])))));
end;

function XkbGeomColorIndex(g,c : longint) : longint;
begin
  XkbGeomColorIndex:=longint(Tc(-(@(g^.(colors[0])))));
end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/dpmsproto.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/presentproto.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/render.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/agproto.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/xf86dgastr.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/shapestr.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/Xrandr.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/Xvproto.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/XInput2.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/xf86bigfont.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/dpmsconst.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/Xinerama.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/cup.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/xf86dga1.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/security.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/syncconst.pp
// -------------------------------------------------

    function _XSyncValueEqual(a,b : longint) : longint;
    begin
      _XSyncValueEqual:=((a.lo)=((b.lo) and (@(a.hi))))=(b.hi);
    end;

    function _XSyncValueIsNegative(v : longint) : longint;
    var
       if_local1 : longint;
    (* result types are not known *)
    begin
      if (v.hi) and $80000000 then
        if_local1:=1
      else
        if_local1:=0;
      _XSyncValueIsNegative:=if_local1;
    end;

    function _XSyncValueIsZero(a : longint) : longint;
    begin
      _XSyncValueIsZero:=((a.lo)=(0 and (@(a.hi))))=0;
    end;

    function _XSyncValueIsPositive(v : longint) : longint;
    var
       if_local1 : longint;
    (* result types are not known *)
    begin
      if (v.hi) and $80000000 then
        if_local1:=0
      else
        if_local1:=1;
      _XSyncValueIsPositive:=if_local1;
    end;

    function _XSyncValueLow32(v : longint) : longint;
    begin
      _XSyncValueLow32:=v.lo;
    end;

    function _XSyncValueHigh32(v : longint) : longint;
    begin
      _XSyncValueHigh32:=v.hi;
    end;

    function XSyncIntToValue(pv,i : longint) : longint;
    begin
      XSyncIntToValue:=_XSyncIntToValue(pv,i);
    end;

    function XSyncIntsToValue(pv,l,h : longint) : longint;
    begin
      XSyncIntsToValue:=_XSyncIntsToValue(pv,l,h);
    end;

    function XSyncValueGreaterThan(a,b : longint) : longint;
    begin
      XSyncValueGreaterThan:=_XSyncValueGreaterThan(a,b);
    end;

    function XSyncValueLessThan(a,b : longint) : longint;
    begin
      XSyncValueLessThan:=_XSyncValueLessThan(a,b);
    end;

    function XSyncValueGreaterOrEqual(a,b : longint) : longint;
    begin
      XSyncValueGreaterOrEqual:=_XSyncValueGreaterOrEqual(a,b);
    end;

    function XSyncValueLessOrEqual(a,b : longint) : longint;
    begin
      XSyncValueLessOrEqual:=_XSyncValueLessOrEqual(a,b);
    end;

    function XSyncValueEqual(a,b : longint) : longint;
    begin
      XSyncValueEqual:=_XSyncValueEqual(a,b);
    end;

    function XSyncValueIsNegative(v : longint) : longint;
    begin
      XSyncValueIsNegative:=_XSyncValueIsNegative(v);
    end;

    function XSyncValueIsZero(a : longint) : longint;
    begin
      XSyncValueIsZero:=_XSyncValueIsZero(a);
    end;

    function XSyncValueIsPositive(v : longint) : longint;
    begin
      XSyncValueIsPositive:=_XSyncValueIsPositive(v);
    end;

    function XSyncValueLow32(v : longint) : longint;
    begin
      XSyncValueLow32:=_XSyncValueLow32(v);
    end;

    function XSyncValueHigh32(v : longint) : longint;
    begin
      XSyncValueHigh32:=_XSyncValueHigh32(v);
    end;

    function XSyncValueAdd(presult,a,b,poverflow : longint) : longint;
    begin
      XSyncValueAdd:=_XSyncValueAdd(presult,a,b,poverflow);
    end;

    function XSyncValueSubtract(presult,a,b,poverflow : longint) : longint;
    begin
      XSyncValueSubtract:=_XSyncValueSubtract(presult,a,b,poverflow);
    end;

    function XSyncMaxValue(pv : longint) : longint;
    begin
      XSyncMaxValue:=_XSyncMaxValue(pv);
    end;

    function XSyncMinValue(pv : longint) : longint;
    begin
      XSyncMinValue:=_XSyncMinValue(pv);
    end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/securproto.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/shapeconst.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/panoramiXproto.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/Xcomposite.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/dbeproto.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/XI.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/shmproto.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/XTest.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/xtestext1.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/damagewire.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/sync.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/XShm.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/mitmiscconst.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/secur.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/dbe.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/panoramiXext.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/XLbx.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/xf86dgaproto.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/bigreqstr.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/recordconst.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/dmxproto.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/dpms.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/EVI.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/xf86dga.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/xf86vmstr.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/composite.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/xfixesproto.pp
// -------------------------------------------------

function sz_xXFixesHideCursorReq : longint; { return type might be wrong }
  begin
    sz_xXFixesHideCursorReq:=sizeof(xXFixesHideCursorReq);
  end;

function sz_xXFixesShowCursorReq : longint; { return type might be wrong }
  begin
    sz_xXFixesShowCursorReq:=sizeof(xXFixesShowCursorReq);
  end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/dri3proto.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/recordstr.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/xf86dga1const.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/presenttokens.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/multibufconst.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/xf86bigfproto.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/applewmconst.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/xfixeswire.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/Xvlib.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/dri2proto.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/randrproto.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/xtestconst.pp
// -------------------------------------------------

function XTestCurrentCursor : TCursor;
  begin
    XTestCurrentCursor:=TCursor(1);
  end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/xf86dgaconst.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/xf86bigfstr.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/XKBstr.pp
// -------------------------------------------------

function XkbCharToInt(v : longint) : longint;
var
   if_local1 : longint;
(* result types are not known *)
begin
  if Tv(@($80)) then
    if_local1:=longint(v or ( not ($ff)))
  else
    if_local1:=longint(Tv(@($7f)));
  XkbCharToInt:=if_local1;
end;

    function Xkb2CharsToInt(h,l : longint) : smallint;
    begin
      Xkb2CharsToInt:=smallint((h shl 8) or l);
    end;

    function XkbModLocks(s : longint) : longint;
    begin
      XkbModLocks:=s^.locked_mods;
    end;

    function XkbStateMods(s : longint) : longint;
    begin
      XkbStateMods:=((s^.base_mods) or (s^.latched_mods)) or (XkbModLocks(s));
    end;

    function XkbGroupLock(s : longint) : longint;
    begin
      XkbGroupLock:=s^.locked_group;
    end;

    function XkbStateGroup(s : longint) : longint;
    begin
      XkbStateGroup:=((s^.base_group)+(s^.latched_group))+(XkbGroupLock(s));
    end;

    function XkbStateFieldFromRec(s : longint) : longint;
    begin
      XkbStateFieldFromRec:=XkbBuildCoreState(s^.lookup_mods,s^.group);
    end;

    function XkbGrabStateFromRec(s : longint) : longint;
    begin
      XkbGrabStateFromRec:=XkbBuildCoreState(s^.grab_mods,s^.group);
    end;

    function XkbNumGroups(g : longint) : Tg;
    begin
      XkbNumGroups:=Tg(@($0f));
    end;

    function XkbOutOfRangeGroupInfo(g : longint) : Tg;
    begin
      XkbOutOfRangeGroupInfo:=Tg(@($f0));
    end;

    function XkbOutOfRangeGroupAction(g : longint) : Tg;
    begin
      XkbOutOfRangeGroupAction:=Tg(@($c0));
    end;

    function XkbOutOfRangeGroupNumber(g : longint) : longint;
    begin
      XkbOutOfRangeGroupNumber:=(Tg(@($30))) shr 4;
    end;

    function XkbSetGroupInfo(g,w,n : longint) : longint;
    begin
      XkbSetGroupInfo:=((Tw(@($c0))) or ((Tn(@(3))) shl 4)) or (Tg(@($0f)));
    end;

    function XkbSetNumGroups(g,n : longint) : longint;
    begin
      XkbSetNumGroups:=(Tg(@($f0))) or (Tn(@($0f)));
    end;

    function XkbModActionVMods(a : longint) : smallint;
    begin
      XkbModActionVMods:=smallint(((a^.vmods1) shl 8) or (a^.vmods2));
    end;

    function XkbSAGroup(a : longint) : longint;
    begin
      XkbSAGroup:=XkbCharToInt(a^.group_XXX);
    end;

    function XkbSASetGroup(a,g : longint) : longint;
    begin
      XkbSASetGroup:=(a^.group_XXX):=g;
    end;

    function XkbPtrActionX(a : longint) : longint;
    begin
      XkbPtrActionX:=Xkb2CharsToInt(a^.high_XXX,a^.low_XXX);
    end;

    function XkbPtrActionY(a : longint) : longint;
    begin
      XkbPtrActionY:=Xkb2CharsToInt(a^.high_YYY,a^.low_YYY);
    end;

    function XkbSetPtrActionX(a,x : longint) : longint;
    begin
      XkbSetPtrActionX:=XkbIntTo2Chars(x,a^.high_XXX,a^.low_XXX);
    end;

    function XkbSetPtrActionY(a,y : longint) : longint;
    begin
      XkbSetPtrActionY:=XkbIntTo2Chars(y,a^.high_YYY,a^.low_YYY);
    end;

    function XkbSAPtrDfltValue(a : longint) : longint;
    begin
      XkbSAPtrDfltValue:=XkbCharToInt(a^.valueXXX);
    end;

    function XkbSASetPtrDfltValue(a,c : longint) : longint;
    begin
      XkbSASetPtrDfltValue:=(a^.valueXXX):=(Tc(@($ff)));
    end;

    function XkbSAScreen(a : longint) : longint;
    begin
      XkbSAScreen:=XkbCharToInt(a^.screenXXX);
    end;

    function XkbSASetScreen(a,s : longint) : longint;
    begin
      XkbSASetScreen:=(a^.screenXXX):=(Ts(@($ff)));
    end;

    function XkbActionCtrls(a : longint) : longint;
    begin
      XkbActionCtrls:=((((dword(a^.ctrls3)) shl 24) or ((dword(a^.ctrls2)) shl 16)) or ((dword(a^.ctrls1)) shl 8)) or (dword(a^.ctrls0));
    end;

    function XkbSARedirectVMods(a : longint) : longint;
    begin
      XkbSARedirectVMods:=((dword(a^.vmods1)) shl 8) or (dword(a^.vmods0));
    end;

    function XkbSARedirectVModsMask(a : longint) : longint;
    begin
      XkbSARedirectVModsMask:=((dword(a^.vmods_mask1)) shl 8) or (dword(a^.vmods_mask0));
    end;

    function XkbAX_AnyFeedback(c : longint) : longint;
    begin
      XkbAX_AnyFeedback:=(c^.enabled_ctrls) and XkbAccessXFeedbackMask;
    end;

    function XkbAX_NeedOption(c,w : longint) : longint;
    begin
      XkbAX_NeedOption:=(c^.ax_options) and w;
    end;

    function XkbAX_NeedFeedback(c,w : longint) : longint;
    begin
      XkbAX_NeedFeedback:=(XkbAX_AnyFeedback(c)) and (@(XkbAX_NeedOption(c,w)));
    end;

    function XkbSMKeyActionsPtr(m,k : longint) : longint;
    begin
      XkbSMKeyActionsPtr:=@(m^.(acts[m^.(key_acts[k])]));
    end;

    function XkbCMKeyGroupInfo(m,k : longint) : longint;
    begin
      XkbCMKeyGroupInfo:=m^.((key_sym_map[k]).group_info);
    end;

    function XkbCMKeyNumGroups(m,k : longint) : longint;
    begin
      XkbCMKeyNumGroups:=XkbNumGroups(m^.((key_sym_map[k]).group_info));
    end;

    function XkbCMKeyGroupWidth(m,k,g : longint) : longint;
    begin
      XkbCMKeyGroupWidth:=(XkbCMKeyType(m,k,g))^.num_levels;
    end;

    function XkbCMKeyGroupsWidth(m,k : longint) : longint;
    begin
      XkbCMKeyGroupsWidth:=m^.((key_sym_map[k]).width);
    end;

    function XkbCMKeyTypeIndex(m,k,g : longint) : longint;
    begin
      XkbCMKeyTypeIndex:=m^.((key_sym_map[k]).(kt_index[g and $3]));
    end;

    function XkbCMKeyType(m,k,g : longint) : longint;
    begin
      XkbCMKeyType:=@(m^.(types[XkbCMKeyTypeIndex(m,k,g)]));
    end;

    function XkbCMKeyNumSyms(m,k : longint) : longint;
    begin
      XkbCMKeyNumSyms:=(XkbCMKeyGroupsWidth(m,k))*(XkbCMKeyNumGroups(m,k));
    end;

    function XkbCMKeySymsOffset(m,k : longint) : longint;
    begin
      XkbCMKeySymsOffset:=m^.((key_sym_map[k]).offset);
    end;

    function XkbCMKeySymsPtr(m,k : longint) : longint;
    begin
      XkbCMKeySymsPtr:=@(m^.(syms[XkbCMKeySymsOffset(m,k)]));
    end;

    function XkbKeyKeyTypeIndex(d,k,g : longint) : longint;
    begin
      XkbKeyKeyTypeIndex:=XkbCMKeyTypeIndex(d^.map,k,g);
    end;

    function XkbKeyKeyType(d,k,g : longint) : longint;
    begin
      XkbKeyKeyType:=XkbCMKeyType(d^.map,k,g);
    end;

    function XkbKeyGroupWidth(d,k,g : longint) : longint;
    begin
      XkbKeyGroupWidth:=XkbCMKeyGroupWidth(d^.map,k,g);
    end;

    function XkbKeyGroupsWidth(d,k : longint) : longint;
    begin
      XkbKeyGroupsWidth:=XkbCMKeyGroupsWidth(d^.map,k);
    end;

    function XkbKeyGroupInfo(d,k : longint) : longint;
    begin
      XkbKeyGroupInfo:=XkbCMKeyGroupInfo(d^.map,k);
    end;

    function XkbKeyNumGroups(d,k : longint) : longint;
    begin
      XkbKeyNumGroups:=XkbCMKeyNumGroups(d^.map,k);
    end;

    function XkbKeyNumSyms(d,k : longint) : longint;
    begin
      XkbKeyNumSyms:=XkbCMKeyNumSyms(d^.map,k);
    end;

    function XkbKeySymsPtr(d,k : longint) : longint;
    begin
      XkbKeySymsPtr:=XkbCMKeySymsPtr(d^.map,k);
    end;

    function XkbKeySymEntry(d,k,sl,g : longint) : longint;
    begin
      XkbKeySymEntry:=XkbKeySym(d,k,((XkbKeyGroupsWidth(d,k))*g)+sl);
    end;

    function XkbKeyActionEntry(d,k,sl,g : longint) : longint;
    var
       if_local1 : longint;
    (* result types are not known *)
    begin
      if XkbKeyHasActions(d,k) then
        if_local1:=XkbKeyAction(d,k,((XkbKeyGroupsWidth(d,k))*g)+sl)
      else
        if_local1:=NULL;
      XkbKeyActionEntry:=if_local1;
    end;

    function XkbKeyHasActions(d,k : longint) : longint;
    begin
      XkbKeyHasActions:=(d^.(server^.(key_acts[k])))<>0;
    end;

    function XkbKeyNumActions(d,k : longint) : longint;
    var
       if_local1 : longint;
    (* result types are not known *)
    begin
      if XkbKeyHasActions(d,k) then
        if_local1:=XkbKeyNumSyms(d,k)
      else
        if_local1:=1;
      XkbKeyNumActions:=if_local1;
    end;

    function XkbKeyActionsPtr(d,k : longint) : longint;
    begin
      XkbKeyActionsPtr:=XkbSMKeyActionsPtr(d^.server,k);
    end;

    function XkbKeycodeInRange(d,k : longint) : longint;
    begin
      XkbKeycodeInRange:=(k>=(d^.min_key_code)) and (@(k<=(d^.max_key_code)));
    end;

    function XkbNumKeys(d : longint) : longint;
    begin
      XkbNumKeys:=((d^.max_key_code)-(d^.min_key_code))+1;
    end;

    function XkbXI_DevHasBtnActs(d : longint) : longint;
    begin
      XkbXI_DevHasBtnActs:=((d^.num_btns)>0) and (@((d^.btn_acts)<>NULL));
    end;

    function XkbXI_LegalDevBtn(d,b : longint) : longint;
    begin
      XkbXI_LegalDevBtn:=(XkbXI_DevHasBtnActs(d)) and (@(b<(d^.num_btns)));
    end;

    function XkbXI_DevHasLeds(d : longint) : longint;
    begin
      XkbXI_DevHasLeds:=((d^.num_leds)>0) and (@((d^.leds)<>NULL));
    end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/xtestext1proto.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/ag.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/recordproto.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/MITMisc.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/Xxf86dga.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/record.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/geproto.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/shapeproto.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/renderproto.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/xtestext1const.pp
// -------------------------------------------------

    function XTestPackDeviceID(x : longint) : longint;
    begin
      XTestPackDeviceID:=(Tx(@(XTestMAX_DEVICE_ID))) shl 4;
    end;

    function XTestUnpackDeviceID(x : longint) : longint;
    begin
      XTestUnpackDeviceID:=(Tx(@(XTestDEVICE_ID_MASK))) shr 4;
    end;

    function XTestPackXMotionValue(x : longint) : Tx;
    begin
      XTestPackXMotionValue:=Tx(@(XTestX_MOTION_MASK));
    end;

    function XTestPackYMotionValue(x : longint) : longint;
    begin
      XTestPackYMotionValue:=(x shl 4) and XTestY_MOTION_MASK;
    end;

    function XTestUnpackXMotionValue(x : longint) : Tx;
    begin
      XTestUnpackXMotionValue:=Tx(@(XTestX_MOTION_MASK));
    end;

    function XTestUnpackYMotionValue(x : longint) : longint;
    begin
      XTestUnpackYMotionValue:=(Tx(@(XTestY_MOTION_MASK))) shr 4;
    end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/syncproto.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/XI2.pp
// -------------------------------------------------

    function XIMaskLen(event : longint) : longint;
    begin
      XIMaskLen:=(event shr 3)+1;
    end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/xf86vmode.pp
// -------------------------------------------------

function XF86VidModeSelectNextMode(disp,scr : longint) : longint;
begin
  XF86VidModeSelectNextMode:=XF86VidModeSwitchMode(disp,scr,1);
end;

function XF86VidModeSelectPrevMode(disp,scr : longint) : longint;
begin
  XF86VidModeSelectPrevMode:=XF86VidModeSwitchMode(disp,scr,-(1));
end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/damageproto.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/syncstr.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/XKB.pp
// -------------------------------------------------

    function XkbExplicitXIDevice(c : longint) : longint;
    begin
      XkbExplicitXIDevice:=(Tc(@( not ($ff))))=0;
    end;

    function XkbExplicitXIClass(c : longint) : longint;
    begin
      XkbExplicitXIClass:=(Tc(@( not ($ff))))=0;
    end;

    function XkbExplicitXIId(c : longint) : longint;
    begin
      XkbExplicitXIId:=(Tc(@( not ($ff))))=0;
    end;

    function XkbBuildCoreState(m,g : longint) : longint;
    begin
      XkbBuildCoreState:=((Tg(@($3))) shl 13) or (Tm(@($ff)));
    end;

    function XkbGroupForCoreState(s : longint) : longint;
    begin
      XkbGroupForCoreState:=(s shr 13) and $3;
    end;

    function XkbIsLegalGroup(g : longint) : longint;
    begin
      XkbIsLegalGroup:=(g>=0) and (@(g<XkbNumKbdGroups));
    end;

    function XkbSA_ValOp(a : longint) : Ta;
    begin
      XkbSA_ValOp:=Ta(@(XkbSA_ValOpMask));
    end;

    function XkbSA_ValScale(a : longint) : Ta;
    begin
      XkbSA_ValScale:=Ta(@(XkbSA_ValScaleMask));
    end;

    function XkbIsModAction(a : longint) : longint;
    begin
      XkbIsModAction:=((a^._type)>=Xkb_SASetMods) and (@((a^._type)<=XkbSA_LockMods));
    end;

    function XkbIsGroupAction(a : longint) : longint;
    begin
      XkbIsGroupAction:=((a^._type)>=XkbSA_SetGroup) and (@((a^._type)<=XkbSA_LockGroup));
    end;

    function XkbIsPtrAction(a : longint) : longint;
    begin
      XkbIsPtrAction:=((a^._type)>=XkbSA_MovePtr) and (@((a^._type)<=XkbSA_SetPtrDflt));
    end;

    function XkbIsLegalKeycode(k : longint) : longint;
    begin
      XkbIsLegalKeycode:=k>=XkbMinLegalKeyCode;
    end;

    function XkbShiftLevel(n : longint) : Tn;
    begin
      XkbShiftLevel:=Tn(-(1));
    end;

    function XkbShiftLevelMask(n : longint) : longint;
    begin
      XkbShiftLevelMask:=1 shl (Tn(-(1)));
    end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/xcmiscstr.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/compositeproto.pp
// -------------------------------------------------

function sz_xCompositeGetOverlayWindowReq : longint; { return type might be wrong }
  begin
    sz_xCompositeGetOverlayWindowReq:=sizeof(xCompositeGetOverlayWindowReq);
  end;

function sz_xCompositeGetOverlayWindowReply : longint; { return type might be wrong }
  begin
    sz_xCompositeGetOverlayWindowReply:=sizeof(xCompositeGetOverlayWindowReply);
  end;

function sz_xCompositeReleaseOverlayWindowReq : longint; { return type might be wrong }
  begin
    sz_xCompositeReleaseOverlayWindowReq:=sizeof(xCompositeReleaseOverlayWindowReq);
  end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/Xext.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/xf86vmproto.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/XIproto.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/dri2tokens.pp
// -------------------------------------------------

function DRI2DriverPrimeId(x : longint) : longint;
begin
  DRI2DriverPrimeId:=(x shr DRI2DriverPrimeShift) and DRI2DriverPrimeMask;
end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/lbx.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/applewmproto.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/XKBproto.pp
// -------------------------------------------------

function XkbPaddedSize(n : longint) : longint;
begin
  XkbPaddedSize:=((dword(Tn(+(3)))) shr 2) shl 2;
end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/mitmiscproto.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/XEVI.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/XvMCproto.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/randr.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/XResproto.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/multibufproto.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/bigreqsproto.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/Xfixes.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/ge.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/Xdamage.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/XvMC.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/XInput.pp
// -------------------------------------------------

    function DeviceKeyRelease(d,_type,_class : longint) : longint;
    begin
      DeviceKeyRelease:=FindTypeAndClass(d,_type,_class,KeyClass,_deviceKeyRelease);
    end;

    function DeviceButtonPress(d,_type,_class : longint) : longint;
    begin
      DeviceButtonPress:=FindTypeAndClass(d,_type,_class,ButtonClass,_deviceButtonPress);
    end;

    function DeviceButtonRelease(d,_type,_class : longint) : longint;
    begin
      DeviceButtonRelease:=FindTypeAndClass(d,_type,_class,ButtonClass,_deviceButtonRelease);
    end;

    function DeviceMotionNotify(d,_type,_class : longint) : longint;
    begin
      DeviceMotionNotify:=FindTypeAndClass(d,_type,_class,ValuatorClass,_deviceMotionNotify);
    end;

    function DeviceFocusIn(d,_type,_class : longint) : longint;
    begin
      DeviceFocusIn:=FindTypeAndClass(d,_type,_class,FocusClass,_deviceFocusIn);
    end;

    function DeviceFocusOut(d,_type,_class : longint) : longint;
    begin
      DeviceFocusOut:=FindTypeAndClass(d,_type,_class,FocusClass,_deviceFocusOut);
    end;

    function ProximityIn(d,_type,_class : longint) : longint;
    begin
      ProximityIn:=FindTypeAndClass(d,_type,_class,ProximityClass,_proximityIn);
    end;

    function ProximityOut(d,_type,_class : longint) : longint;
    begin
      ProximityOut:=FindTypeAndClass(d,_type,_class,ProximityClass,_proximityOut);
    end;

    function DeviceStateNotify(d,_type,_class : longint) : longint;
    begin
      DeviceStateNotify:=FindTypeAndClass(d,_type,_class,OtherClass,_deviceStateNotify);
    end;

    function DeviceMappingNotify(d,_type,_class : longint) : longint;
    begin
      DeviceMappingNotify:=FindTypeAndClass(d,_type,_class,OtherClass,_deviceMappingNotify);
    end;

    function ChangeDeviceNotify(d,_type,_class : longint) : longint;
    begin
      ChangeDeviceNotify:=FindTypeAndClass(d,_type,_class,OtherClass,_changeDeviceNotify);
    end;

    function DevicePropertyNotify(d,_type,_class : longint) : longint;
    begin
      DevicePropertyNotify:=FindTypeAndClass(d,_type,_class,OtherClass,_propertyNotify);
    end;

    function BadClass(dpy,error : longint) : longint;
    begin
      BadClass:=_xibadclass(dpy,@(error));
    end;

    function BadEvent(dpy,error : longint) : longint;
    begin
      BadEvent:=_xibadevent(dpy,@(error));
    end;

    function BadMode(dpy,error : longint) : longint;
    begin
      BadMode:=_xibadmode(dpy,@(error));
    end;

    function DeviceBusy(dpy,error : longint) : longint;
    begin
      DeviceBusy:=_xidevicebusy(dpy,@(error));
    end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/xf86dga1str.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/XI2proto.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/saverproto.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/dmx.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/Xdbe.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/Xv.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/lbxproto.pp
// -------------------------------------------------

function LBX_MASK_BITS(val,n : longint) : dword;
begin
  LBX_MASK_BITS:=dword(Tval(@((1 shl n)-1)));
end;

function GFXdCacheEnt(e : longint) : Te;
begin
  GFXdCacheEnt:=Te(@($f));
end;

function GFXgCacheEnt(e : longint) : longint;
begin
  GFXgCacheEnt:=(e shr 4) and $f;
end;

function GFXCacheEnts(d,g : longint) : longint;
begin
  GFXCacheEnts:=(Td(@($f))) or ((Tg(@($f))) shl 4);
end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/Xcup.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/multibuf.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/shm.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/extutil.pp
// -------------------------------------------------

function XextHasExtension(i : longint) : Ti;
begin
  XextHasExtension:=Ti(@(@(i^.codes)));
end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/Xag.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/xf86vm.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/XKBsrv.pp
// -------------------------------------------------

    function XkbSetCauseXkbReq(c,e,cl : longint) : longint;
    begin
      XkbSetCauseXkbReq:=XkbSetCauseReq(c,XkbReqCode,e,cl);
    end;

    function XkbSetCauseUnknown(c : longint) : longint;
    begin
      XkbSetCauseUnknown:=XkbSetCauseKey(c,0,0);
    end;

    function XKBDEVICEINFO(dev : longint) : TxkbDeviceInfoPtr;
    begin
      XKBDEVICEINFO:=TxkbDeviceInfoPtr(dev^.((devPrivates[xkbDevicePrivateIndex]).ptr));
    end;

    function _XkbAlloc(s : longint) : longint;
    begin
      _XkbAlloc:=xalloc(s);
    end;

    function _XkbCalloc(n,s : longint) : longint;
    begin
      _XkbCalloc:=Xcalloc(n*s);
    end;

    function _XkbRealloc(o,s : longint) : longint;
    begin
      _XkbRealloc:=Xrealloc(o,s);
    end;

    function _XkbTypedAlloc(t : longint) : pTt;
    begin
      _XkbTypedAlloc:=pTt(xalloc(sizeof(t)));
    end;

    function _XkbTypedCalloc(n,t : longint) : pTt;
    begin
      _XkbTypedCalloc:=pTt(Xcalloc(n*(sizeof(t))));
    end;

    function _XkbTypedRealloc(o,n,t : longint) : longint;
    var
       if_local1 : longint;
    (* result types are not known *)
    begin
      if o then
        if_local1:=pTt(Xrealloc(o,n*(sizeof(t))))
      else
        if_local1:=_XkbTypedCalloc(n,t);
      _XkbTypedRealloc:=if_local1;
    end;

    function _XkbFree(p : longint) : longint;
    begin
      _XkbFree:=Xfree(p);
    end;

    function _XkbErrCode3(a,b,c : longint) : longint;
    begin
      _XkbErrCode3:=_XkbErrCode2(a,((dword(b)) shl 16) or c);
    end;

    function _XkbErrCode4(a,b,c,d : longint) : longint;
    begin
      _XkbErrCode4:=_XkbErrCode3(a,b,((dword(c)) shl 8) or d);
    end;

    function _XkbIsPressEvent(t : longint) : longint;
    begin
      _XkbIsPressEvent:=t=KeyPress;
    end;

    function _XkbIsReleaseEvent(t : longint) : longint;
    begin
      _XkbIsReleaseEvent:=t=KeyRelease;
    end;

    function _XkbCoreKeycodeInRange(c,k : longint) : longint;
    begin
      _XkbCoreKeycodeInRange:=(k>=(c^.(curKeySyms.minKeyCode))) and (@(k<=(c^.(curKeySyms.maxKeyCode))));
    end;

    function _XkbCoreNumKeys(c : longint) : longint;
    begin
      _XkbCoreNumKeys:=((c^.(curKeySyms.maxKeyCode))-(c^.(curKeySyms.minKeyCode)))+1;
    end;

    function XConvertCase(s,l,u : longint) : longint;
    begin
      XConvertCase:=XkbConvertCase(s,l,u);
    end;

    function IsKeypadKey(s : longint) : longint;
    begin
      IsKeypadKey:=XkbKSIsKeypad(s);
    end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/shape.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/shmstr.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/cupproto.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/EVIproto.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/xf86dga1proto.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/Xge.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/scrnsaver.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/Xrender.pp
// -------------------------------------------------

function XDoubleToFixed(f : longint) : TXFixed;
begin
  XDoubleToFixed:=TXFixed(f*65536);
end;

function XFixedToDouble(f : longint) : longint;
begin
  XFixedToDouble:=(TXDouble(f))/65536;
end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/extensions/saver.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/ICE/ICEproto.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/ICE/ICE.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/ICE/ICEutil.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/ICE/ICEconn.pp
// -------------------------------------------------

function io_ok(var a : T_IceConn) : dword;
begin
  io_ok:=(a.flag0 and bm_T_IceConn_io_ok) shr bp_T_IceConn_io_ok;
end;

procedure set_io_ok(var a : T_IceConn; __io_ok : dword);
begin
  a.flag0:=a.flag0 or ((__io_ok shl bp_T_IceConn_io_ok) and bm_T_IceConn_io_ok);
end;

function swap(var a : T_IceConn) : dword;
begin
  swap:=(a.flag0 and bm_T_IceConn_swap) shr bp_T_IceConn_swap;
end;

procedure set_swap(var a : T_IceConn; __swap : dword);
begin
  a.flag0:=a.flag0 or ((__swap shl bp_T_IceConn_swap) and bm_T_IceConn_swap);
end;

function waiting_for_byteorder(var a : T_IceConn) : dword;
begin
  waiting_for_byteorder:=(a.flag0 and bm_T_IceConn_waiting_for_byteorder) shr bp_T_IceConn_waiting_for_byteorder;
end;

procedure set_waiting_for_byteorder(var a : T_IceConn; __waiting_for_byteorder : dword);
begin
  a.flag0:=a.flag0 or ((__waiting_for_byteorder shl bp_T_IceConn_waiting_for_byteorder) and bm_T_IceConn_waiting_for_byteorder);
end;

function skip_want_to_close(var a : T_IceConn) : dword;
begin
  skip_want_to_close:=(a.flag0 and bm_T_IceConn_skip_want_to_close) shr bp_T_IceConn_skip_want_to_close;
end;

procedure set_skip_want_to_close(var a : T_IceConn; __skip_want_to_close : dword);
begin
  a.flag0:=a.flag0 or ((__skip_want_to_close shl bp_T_IceConn_skip_want_to_close) and bm_T_IceConn_skip_want_to_close);
end;

function want_to_close(var a : T_IceConn) : dword;
begin
  want_to_close:=(a.flag0 and bm_T_IceConn_want_to_close) shr bp_T_IceConn_want_to_close;
end;

procedure set_want_to_close(var a : T_IceConn; __want_to_close : dword);
begin
  a.flag0:=a.flag0 or ((__want_to_close shl bp_T_IceConn_want_to_close) and bm_T_IceConn_want_to_close);
end;

function free_asap(var a : T_IceConn) : dword;
begin
  free_asap:=(a.flag0 and bm_T_IceConn_free_asap) shr bp_T_IceConn_free_asap;
end;

procedure set_free_asap(var a : T_IceConn; __free_asap : dword);
begin
  a.flag0:=a.flag0 or ((__free_asap shl bp_T_IceConn_free_asap) and bm_T_IceConn_free_asap);
end;

function unused1(var a : T_IceConn) : dword;
begin
  unused1:=(a.flag0 and bm_T_IceConn_unused1) shr bp_T_IceConn_unused1;
end;

procedure set_unused1(var a : T_IceConn; __unused1 : dword);
begin
  a.flag0:=a.flag0 or ((__unused1 shl bp_T_IceConn_unused1) and bm_T_IceConn_unused1);
end;

function unused2(var a : T_IceConn) : dword;
begin
  unused2:=(a.flag0 and bm_T_IceConn_unused2) shr bp_T_IceConn_unused2;
end;

procedure set_unused2(var a : T_IceConn; __unused2 : dword);
begin
  a.flag0:=a.flag0 or ((__unused2 shl bp_T_IceConn_unused2) and bm_T_IceConn_unused2);
end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/ICE/ICElib.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/ICE/ICEmsg.pp
// -------------------------------------------------

    function IceValidIO(_iceConn : longint) : longint;
    begin
      IceValidIO:=_iceConn^.io_ok;
    end;

    function IceWriteData32(_iceConn,_bytes,_data : longint) : longint;
    begin
      IceWriteData32:=IceWriteData(_iceConn,_bytes,pchar(_data));
    end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/AsciiSinkP.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/AllWidgets.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/FormP.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/SmeLine.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/DialogP.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Panner.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/SmeBSB.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Sme.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Cardinals.pp
// -------------------------------------------------

function ZERO : TCardinal;
  begin
    ZERO:=TCardinal(0);
  end;

function ONE : TCardinal;
  begin
    ONE:=TCardinal(1);
  end;

function TWO : TCardinal;
  begin
    TWO:=TCardinal(2);
  end;

function THREE : TCardinal;
  begin
    THREE:=TCardinal(3);
  end;

function FOUR : TCardinal;
  begin
    FOUR:=TCardinal(4);
  end;

function FIVE : TCardinal;
  begin
    FIVE:=TCardinal(5);
  end;

function SIX : TCardinal;
  begin
    SIX:=TCardinal(6);
  end;

function SEVEN : TCardinal;
  begin
    SEVEN:=TCardinal(7);
  end;

function EIGHT : TCardinal;
  begin
    EIGHT:=TCardinal(8);
  end;

function NINE : TCardinal;
  begin
    NINE:=TCardinal(9);
  end;

function TEN : TCardinal;
  begin
    TEN:=TCardinal(10);
  end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Toggle.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/TipP.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Simple.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/SimpleMenP.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/AsciiTextP.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/StripChart.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/TextSrcP.pp
// -------------------------------------------------

function XtInheritInput : T_XawTextPositionFunc;
  begin
    XtInheritInput:=T_XawTextPositionFunc(_XtInherit);
  end;

function XtInheritRead : T_XawTextPositionFunc;
  begin
    XtInheritRead:=T_XawTextPositionFunc(_XtInherit);
  end;

function XtInheritReplace : T_XawIntFunc;
  begin
    XtInheritReplace:=T_XawIntFunc(_XtInherit);
  end;

function XtInheritScan : T_XawTextPositionFunc;
  begin
    XtInheritScan:=T_XawTextPositionFunc(_XtInherit);
  end;

function XtInheritSearch : T_XawTextPositionFunc;
  begin
    XtInheritSearch:=T_XawTextPositionFunc(_XtInherit);
  end;

function XtInheritSetSelection : T_XawTextVoidFunc;
  begin
    XtInheritSetSelection:=T_XawTextVoidFunc(_XtInherit);
  end;

function XtInheritConvertSelection : T_XawBooleanFunc;
  begin
    XtInheritConvertSelection:=T_XawBooleanFunc(_XtInherit);
  end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/MultiSrc.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/BoxP.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/ViewportP.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/MultiSink.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/TemplateP.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/AsciiSrcP.pp
// -------------------------------------------------

function MAGIC_VALUE : TXawTextPosition;
  begin
    MAGIC_VALUE:=TXawTextPosition(-(1));
  end;

function streq(a,b : longint) : longint;
begin
  streq:=(strcmp(a,b))=0;
end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Command.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Viewport.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/LayoutP.pp
// -------------------------------------------------

function GlueEqual(a,b : longint) : longint;
begin
  GlueEqual:=((a.order)=((b.order) and (@(a.value))))=(b.value);
end;

    function IsZeroGlue(g : longint) : longint;
    begin
      IsZeroGlue:=(g.value)=0;
    end;

    function New(t : longint) : pTt;
    begin
      _New:=pTt(XtCalloc(1,sizeof(t)));
    end;

    function Dispose(p : longint) : longint;
    begin
      _Dispose:=XtFree(pchar(p));
    end;

    function Some(t,n : longint) : pTt;
    begin
      Some:=pTt(XtMalloc((sizeof(t))*n));
    end;

    function SubInfo(w : longint) : longint;
    begin
      SubInfo:=@((TLayoutConstraints(w^.(core.constraints)))^.layout);
    end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/MenuButtoP.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/TextSinkP.pp
// -------------------------------------------------

function XtInheritDisplayText : T_XawSinkVoidFunc;
  begin
    XtInheritDisplayText:=T_XawSinkVoidFunc(_XtInherit);
  end;

function XtInheritInsertCursor : T_XawSinkVoidFunc;
  begin
    XtInheritInsertCursor:=T_XawSinkVoidFunc(_XtInherit);
  end;

function XtInheritClearToBackground : T_XawSinkVoidFunc;
  begin
    XtInheritClearToBackground:=T_XawSinkVoidFunc(_XtInherit);
  end;

function XtInheritFindPosition : T_XawSinkVoidFunc;
  begin
    XtInheritFindPosition:=T_XawSinkVoidFunc(_XtInherit);
  end;

function XtInheritFindDistance : T_XawSinkVoidFunc;
  begin
    XtInheritFindDistance:=T_XawSinkVoidFunc(_XtInherit);
  end;

function XtInheritResolve : T_XawSinkVoidFunc;
  begin
    XtInheritResolve:=T_XawSinkVoidFunc(_XtInherit);
  end;

function XtInheritMaxLines : T_XawSinkIntFunc;
  begin
    XtInheritMaxLines:=T_XawSinkIntFunc(_XtInherit);
  end;

function XtInheritMaxHeight : T_XawSinkIntFunc;
  begin
    XtInheritMaxHeight:=T_XawSinkIntFunc(_XtInherit);
  end;

function XtInheritSetTabs : T_XawSinkVoidFunc;
  begin
    XtInheritSetTabs:=T_XawSinkVoidFunc(_XtInherit);
  end;

function XtInheritGetCursorBounds : T_XawSinkVoidFunc;
  begin
    XtInheritGetCursorBounds:=T_XawSinkVoidFunc(_XtInherit);
  end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/CommandP.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/ThreeD.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/TextP.pp
// -------------------------------------------------

function GETLASTPOS : longint; { return type might be wrong }
  begin
    GETLASTPOS:=XawTextSourceScan(ctx^.(text.source),0,XawstAll,XawsdRight,1,_TRUE);
  end;

function zeroPosition : TXawTextPosition;
  begin
    zeroPosition:=TXawTextPosition(0);
  end;

function DEFAULT_TEXT_HEIGHT : TDimension;
  begin
    DEFAULT_TEXT_HEIGHT:=TDimension( not (0));
  end;

function VMargins(ctx : longint) : longint;
begin
  VMargins:=(ctx^.(text.(margin.top)))+(ctx^.(text.(margin.bottom)));
end;

function HMargins(ctx : longint) : longint;
begin
  HMargins:=(ctx^.(text.(margin.left)))+(ctx^.(text.(margin.right)));
end;

function IsPositionVisible(ctx,pos : longint) : longint;
begin
  IsPositionVisible:=(pos>=((ctx^.(text.(lt.((info[0]).position)))) and (@(pos))))<(ctx^.(text.(lt.((info[ctx^.(text.(lt.lines))]).position))));
end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/SimpleP.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/MenuButton.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/XawImP.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/AsciiSink.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Form.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Repeater.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/TextSink.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/SmeP.pp
// -------------------------------------------------

function XtInheritHighlight : T_XawEntryVoidFunc;
  begin
    XtInheritHighlight:=T_XawEntryVoidFunc(_XtInherit);
  end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Grip.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Xaw3dP.pp
// -------------------------------------------------

function XtX(w : longint) : longint;
begin
  XtX:=(TRectObj(w))^.(rectangle.x);
end;

function XtY(w : longint) : longint;
begin
  XtY:=(TRectObj(w))^.(rectangle.y);
end;

function XtWidth(w : longint) : longint;
begin
  XtWidth:=(TRectObj(w))^.(rectangle.width);
end;

function XtHeight(w : longint) : longint;
begin
  XtHeight:=(TRectObj(w))^.(rectangle.height);
end;

function XtBorderWidth(w : longint) : longint;
begin
  XtBorderWidth:=(TRectObj(w))^.(rectangle.border_width);
end;

function grayPixel(p,dpy,scn : longint) : longint;
begin
  grayPixel:=p;
end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Label.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Layout.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/SmeThreeDP.pp
// -------------------------------------------------

function XtInheritXawSme3dShadowDraw : TXawSme3dShadowDrawProc;
  begin
    XtInheritXawSme3dShadowDraw:=TXawSme3dShadowDrawProc(_XtInherit);
  end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/PanedP.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/GripP.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Dialog.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/StripCharP.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Box.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/ScrollbarP.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/SimpleMenu.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/ListP.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/SmeLineP.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Template.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/AsciiSrc.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/SmeThreeD.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Scrollbar.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Tree.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Porthole.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Reports.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/ThreeDP.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/MultiSinkP.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/VendorEP.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/LabelP.pp
// -------------------------------------------------

function LEFT_OFFSET(lw : longint) : longint;
var
   if_local1 : longint;
(* result types are not known *)
begin
  if None then
    if_local1:=(lw^.(_label.lbm_width))+(lw^.(_label.internal_width))
  else
    if_local1:=0;
  LEFT_OFFSET:=((lw^.(_label.left_bitmap)) and (@(lw^.(_label.pixmap))))=(if_local1);
end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/ToggleP.pp
// -------------------------------------------------

function streq(a,b : longint) : longint;
begin
  streq:=(strcmp(a,b))=0;
end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/MultiSrcP.pp
// -------------------------------------------------

function MAGIC_VALUE : TXawTextPosition;
  begin
    MAGIC_VALUE:=TXawTextPosition(-(1));
  end;

function streq(a,b : longint) : longint;
begin
  streq:=(strcmp(a,b))=0;
end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/PannerP.pp
// -------------------------------------------------

function PANNER_HSCALE(pw,val : longint) : longint;
begin
  PANNER_HSCALE:=(pw^.(panner.haspect))*(Tdouble(val));
end;

function PANNER_VSCALE(pw,val : longint) : longint;
begin
  PANNER_VSCALE:=(pw^.(panner.vaspect))*(Tdouble(val));
end;

function PANNER_DSCALE(pw,val : longint) : TDimension;
begin
  PANNER_DSCALE:=TDimension(((dword(val))*(dword(pw^.(panner.default_scale))))/100);
end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Text.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/RepeaterP.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/TreeP.pp
// -------------------------------------------------

function TREE_CONSTRAINT(w : longint) : TTreeConstraints;
begin
  TREE_CONSTRAINT:=TTreeConstraints(w^.(core.constraints));
end;


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Tip.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/PortholeP.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/TextSrc.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/List.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/AsciiText.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/Paned.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/SmeBSBP.pp
// -------------------------------------------------


// --------- Implementation ------------------------
// /tmp/Xaw-Konverter-header/Xaw3d/XawInit.pp
// -------------------------------------------------




end.
