
unit Shell;
interface

{
  Automatically converted by H2Pas 1.0.0 from Shell.h
  The following command line parameters were used:
    -p
    -T
    -d
    -c
    -e
    Shell.h
}

{ Pointers to basic pascal types, inserted by h2pas conversion program.}
Type
  PLongint  = ^Longint;
  PSmallInt = ^SmallInt;
  PByte     = ^Byte;
  PWord     = ^Word;
  PDWord    = ^DWord;
  PDouble   = ^Double;

Type
PApplicationShellClassRec  = ^ApplicationShellClassRec;
PApplicationShellWidgetClass  = ^ApplicationShellWidgetClass;
Pchar  = ^char;
POverrideShellClassRec  = ^OverrideShellClassRec;
POverrideShellWidgetClass  = ^OverrideShellWidgetClass;
PSessionShellClassRec  = ^SessionShellClassRec;
PSessionShellWidgetClass  = ^SessionShellWidgetClass;
PShellClassRec  = ^ShellClassRec;
PShellWidgetClass  = ^ShellWidgetClass;
PTopLevelShellClassRec  = ^TopLevelShellClassRec;
PTopLevelShellWidgetClass  = ^TopLevelShellWidgetClass;
PTransientShellClassRec  = ^TransientShellClassRec;
PTransientShellWidgetClass  = ^TransientShellWidgetClass;
PWMShellClassRec  = ^WMShellClassRec;
PWMShellWidgetClass  = ^WMShellWidgetClass;
{$IFDEF FPC}
{$PACKRECORDS C}
{$ENDIF}


{**********************************************************

Copyright 1987, 1988, 1994, 1998  The Open Group

Permission to use, copy, modify, distribute, and sell this software and its
documentation for any purpose is hereby granted without fee, provided that
the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation.

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of The Open Group shall not be
used in advertising or otherwise to promote the sale, use or other dealings
in this Software without prior written authorization from The Open Group.


Copyright 1987, 1988 by Digital Equipment Corporation, Maynard, Massachusetts.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name of Digital not be
used in advertising or publicity pertaining to distribution of the
software without specific, written prior permission.

DIGITAL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
DIGITAL BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

***************************************************************** }
{$ifndef _XtShell_h}
{$define _XtShell_h}
{$include <X11/SM/SMlib.h>}
{$include <X11/Intrinsic.h>}
{**********************************************************************
 *
 * Shell Widget
 *
 ********************************************************************** }
{
 * Shell-specific resources names, classes, and a representation type.
  }
{#ifndef XTSTRINGDEFINES }
{#define _XtShell_h_Const const }
{#endif }
{ $Xorg: makestrs.c,v 1.6 2001/02/09 02:03:17 xorgcvs Exp $  }
{ This file is automatically generated.  }
{ Default ABI version -- Do not edit  }
{$ifdef XTSTRINGDEFINES}

const
  XtNiconName = 'iconName';  
  XtCIconName = 'IconName';  
  XtNiconPixmap = 'iconPixmap';  
  XtCIconPixmap = 'IconPixmap';  
  XtNiconWindow = 'iconWindow';  
  XtCIconWindow = 'IconWindow';  
  XtNiconMask = 'iconMask';  
  XtCIconMask = 'IconMask';  
  XtNwindowGroup = 'windowGroup';  
  XtCWindowGroup = 'WindowGroup';  
  XtNvisual = 'visual';  
  XtCVisual = 'Visual';  
  XtNtitleEncoding = 'titleEncoding';  
  XtCTitleEncoding = 'TitleEncoding';  
  XtNsaveUnder = 'saveUnder';  
  XtCSaveUnder = 'SaveUnder';  
  XtNtransient = 'transient';  
  XtCTransient = 'Transient';  
  XtNoverrideRedirect = 'overrideRedirect';  
  XtCOverrideRedirect = 'OverrideRedirect';  
  XtNtransientFor = 'transientFor';  
  XtCTransientFor = 'TransientFor';  
  XtNiconNameEncoding = 'iconNameEncoding';  
  XtCIconNameEncoding = 'IconNameEncoding';  
  XtNallowShellResize = 'allowShellResize';  
  XtCAllowShellResize = 'AllowShellResize';  
  XtNcreatePopupChildProc = 'createPopupChildProc';  
  XtCCreatePopupChildProc = 'CreatePopupChildProc';  
  XtNtitle = 'title';  
  XtCTitle = 'Title';  
{$ifndef XtRAtom}

const
  XtRAtom = 'Atom';  
{$endif}

const
  XtNargc = 'argc';  
  XtCArgc = 'Argc';  
  XtNargv = 'argv';  
  XtCArgv = 'Argv';  
  XtNiconX = 'iconX';  
  XtCIconX = 'IconX';  
  XtNiconY = 'iconY';  
  XtCIconY = 'IconY';  
  XtNinput = 'input';  
  XtCInput = 'Input';  
  XtNiconic = 'iconic';  
  XtCIconic = 'Iconic';  
  XtNinitialState = 'initialState';  
  XtCInitialState = 'InitialState';  
  XtNgeometry = 'geometry';  
  XtCGeometry = 'Geometry';  
  XtNbaseWidth = 'baseWidth';  
  XtCBaseWidth = 'BaseWidth';  
  XtNbaseHeight = 'baseHeight';  
  XtCBaseHeight = 'BaseHeight';  
  XtNwinGravity = 'winGravity';  
  XtCWinGravity = 'WinGravity';  
  XtNminWidth = 'minWidth';  
  XtCMinWidth = 'MinWidth';  
  XtNminHeight = 'minHeight';  
  XtCMinHeight = 'MinHeight';  
  XtNmaxWidth = 'maxWidth';  
  XtCMaxWidth = 'MaxWidth';  
  XtNmaxHeight = 'maxHeight';  
  XtCMaxHeight = 'MaxHeight';  
  XtNwidthInc = 'widthInc';  
  XtCWidthInc = 'WidthInc';  
  XtNheightInc = 'heightInc';  
  XtCHeightInc = 'HeightInc';  
  XtNminAspectY = 'minAspectY';  
  XtCMinAspectY = 'MinAspectY';  
  XtNmaxAspectY = 'maxAspectY';  
  XtCMaxAspectY = 'MaxAspectY';  
  XtNminAspectX = 'minAspectX';  
  XtCMinAspectX = 'MinAspectX';  
  XtNmaxAspectX = 'maxAspectX';  
  XtCMaxAspectX = 'MaxAspectX';  
  XtNwmTimeout = 'wmTimeout';  
  XtCWmTimeout = 'WmTimeout';  
  XtNwaitForWm = 'waitforwm';  
  XtCWaitForWm = 'Waitforwm';  
  XtNwaitforwm = 'waitforwm';  
  XtCWaitforwm = 'Waitforwm';  
  XtNclientLeader = 'clientLeader';  
  XtCClientLeader = 'ClientLeader';  
  XtNwindowRole = 'windowRole';  
  XtCWindowRole = 'WindowRole';  
  XtNurgency = 'urgency';  
  XtCUrgency = 'Urgency';  
  XtNcancelCallback = 'cancelCallback';  
  XtNcloneCommand = 'cloneCommand';  
  XtCCloneCommand = 'CloneCommand';  
  XtNconnection = 'connection';  
  XtCConnection = 'Connection';  
  XtNcurrentDirectory = 'currentDirectory';  
  XtCCurrentDirectory = 'CurrentDirectory';  
  XtNdieCallback = 'dieCallback';  
  XtNdiscardCommand = 'discardCommand';  
  XtCDiscardCommand = 'DiscardCommand';  
  XtNenvironment = 'environment';  
  XtCEnvironment = 'Environment';  
  XtNinteractCallback = 'interactCallback';  
  XtNjoinSession = 'joinSession';  
  XtCJoinSession = 'JoinSession';  
  XtNprogramPath = 'programPath';  
  XtCProgramPath = 'ProgramPath';  
  XtNresignCommand = 'resignCommand';  
  XtCResignCommand = 'ResignCommand';  
  XtNrestartCommand = 'restartCommand';  
  XtCRestartCommand = 'RestartCommand';  
  XtNrestartStyle = 'restartStyle';  
  XtCRestartStyle = 'RestartStyle';  
  XtNsaveCallback = 'saveCallback';  
  XtNsaveCompleteCallback = 'saveCompleteCallback';  
  XtNsessionID = 'sessionID';  
  XtCSessionID = 'SessionID';  
  XtNshutdownCommand = 'shutdownCommand';  
  XtCShutdownCommand = 'ShutdownCommand';  
  XtNerrorCallback = 'errorCallback';  
{$else}
(* Const before type ignored *)
  var
    XtShellStrings : Pchar;cvar;external;
{$ifndef XtNiconName}

{ was #define dname def_expr }
function XtNiconName : TString;  

{$endif}
{$ifndef XtCIconName}

{ was #define dname def_expr }
function XtCIconName : TString;  

{$endif}
{$ifndef XtNiconPixmap}

{ was #define dname def_expr }
function XtNiconPixmap : TString;  

{$endif}
{$ifndef XtCIconPixmap}

{ was #define dname def_expr }
function XtCIconPixmap : TString;  

{$endif}
{$ifndef XtNiconWindow}

{ was #define dname def_expr }
function XtNiconWindow : TString;  

{$endif}
{$ifndef XtCIconWindow}

{ was #define dname def_expr }
function XtCIconWindow : TString;  

{$endif}
{$ifndef XtNiconMask}

{ was #define dname def_expr }
function XtNiconMask : TString;  

{$endif}
{$ifndef XtCIconMask}

{ was #define dname def_expr }
function XtCIconMask : TString;  

{$endif}
{$ifndef XtNwindowGroup}

{ was #define dname def_expr }
function XtNwindowGroup : TString;  

{$endif}
{$ifndef XtCWindowGroup}

{ was #define dname def_expr }
function XtCWindowGroup : TString;  

{$endif}
{$ifndef XtNvisual}

{ was #define dname def_expr }
function XtNvisual : TString;  

{$endif}
{$ifndef XtCVisual}

{ was #define dname def_expr }
function XtCVisual : TString;  

{$endif}
{$ifndef XtNtitleEncoding}

{ was #define dname def_expr }
function XtNtitleEncoding : TString;  

{$endif}
{$ifndef XtCTitleEncoding}

{ was #define dname def_expr }
function XtCTitleEncoding : TString;  

{$endif}
{$ifndef XtNsaveUnder}

{ was #define dname def_expr }
function XtNsaveUnder : TString;  

{$endif}
{$ifndef XtCSaveUnder}

{ was #define dname def_expr }
function XtCSaveUnder : TString;  

{$endif}
{$ifndef XtNtransient}

{ was #define dname def_expr }
function XtNtransient : TString;  

{$endif}
{$ifndef XtCTransient}

{ was #define dname def_expr }
function XtCTransient : TString;  

{$endif}
{$ifndef XtNoverrideRedirect}

{ was #define dname def_expr }
function XtNoverrideRedirect : TString;  

{$endif}
{$ifndef XtCOverrideRedirect}

{ was #define dname def_expr }
function XtCOverrideRedirect : TString;  

{$endif}
{$ifndef XtNtransientFor}

{ was #define dname def_expr }
function XtNtransientFor : TString;  

{$endif}
{$ifndef XtCTransientFor}

{ was #define dname def_expr }
function XtCTransientFor : TString;  

{$endif}
{$ifndef XtNiconNameEncoding}

{ was #define dname def_expr }
function XtNiconNameEncoding : TString;  

{$endif}
{$ifndef XtCIconNameEncoding}

{ was #define dname def_expr }
function XtCIconNameEncoding : TString;  

{$endif}
{$ifndef XtNallowShellResize}

{ was #define dname def_expr }
function XtNallowShellResize : TString;  

{$endif}
{$ifndef XtCAllowShellResize}

{ was #define dname def_expr }
function XtCAllowShellResize : TString;  

{$endif}
{$ifndef XtNcreatePopupChildProc}

{ was #define dname def_expr }
function XtNcreatePopupChildProc : TString;  

{$endif}
{$ifndef XtCCreatePopupChildProc}

{ was #define dname def_expr }
function XtCCreatePopupChildProc : TString;  

{$endif}
{$ifndef XtNtitle}

{ was #define dname def_expr }
function XtNtitle : TString;  

{$endif}
{$ifndef XtCTitle}

{ was #define dname def_expr }
function XtCTitle : TString;  

{$endif}
{$ifndef XtRAtom}

{ was #define dname def_expr }
function XtRAtom : TString;  

{$endif}
{$ifndef XtNargc}

{ was #define dname def_expr }
function XtNargc : TString;  

{$endif}
{$ifndef XtCArgc}

{ was #define dname def_expr }
function XtCArgc : TString;  

{$endif}
{$ifndef XtNargv}

{ was #define dname def_expr }
function XtNargv : TString;  

{$endif}
{$ifndef XtCArgv}

{ was #define dname def_expr }
function XtCArgv : TString;  

{$endif}
{$ifndef XtNiconX}

{ was #define dname def_expr }
function XtNiconX : TString;  

{$endif}
{$ifndef XtCIconX}

{ was #define dname def_expr }
function XtCIconX : TString;  

{$endif}
{$ifndef XtNiconY}

{ was #define dname def_expr }
function XtNiconY : TString;  

{$endif}
{$ifndef XtCIconY}

{ was #define dname def_expr }
function XtCIconY : TString;  

{$endif}
{$ifndef XtNinput}

{ was #define dname def_expr }
function XtNinput : TString;  

{$endif}
{$ifndef XtCInput}

{ was #define dname def_expr }
function XtCInput : TString;  

{$endif}
{$ifndef XtNiconic}

{ was #define dname def_expr }
function XtNiconic : TString;  

{$endif}
{$ifndef XtCIconic}

{ was #define dname def_expr }
function XtCIconic : TString;  

{$endif}
{$ifndef XtNinitialState}

{ was #define dname def_expr }
function XtNinitialState : TString;  

{$endif}
{$ifndef XtCInitialState}

{ was #define dname def_expr }
function XtCInitialState : TString;  

{$endif}
{$ifndef XtNgeometry}

{ was #define dname def_expr }
function XtNgeometry : TString;  

{$endif}
{$ifndef XtCGeometry}

{ was #define dname def_expr }
function XtCGeometry : TString;  

{$endif}
{$ifndef XtNbaseWidth}

{ was #define dname def_expr }
function XtNbaseWidth : TString;  

{$endif}
{$ifndef XtCBaseWidth}

{ was #define dname def_expr }
function XtCBaseWidth : TString;  

{$endif}
{$ifndef XtNbaseHeight}

{ was #define dname def_expr }
function XtNbaseHeight : TString;  

{$endif}
{$ifndef XtCBaseHeight}

{ was #define dname def_expr }
function XtCBaseHeight : TString;  

{$endif}
{$ifndef XtNwinGravity}

{ was #define dname def_expr }
function XtNwinGravity : TString;  

{$endif}
{$ifndef XtCWinGravity}

{ was #define dname def_expr }
function XtCWinGravity : TString;  

{$endif}
{$ifndef XtNminWidth}

{ was #define dname def_expr }
function XtNminWidth : TString;  

{$endif}
{$ifndef XtCMinWidth}

{ was #define dname def_expr }
function XtCMinWidth : TString;  

{$endif}
{$ifndef XtNminHeight}

{ was #define dname def_expr }
function XtNminHeight : TString;  

{$endif}
{$ifndef XtCMinHeight}

{ was #define dname def_expr }
function XtCMinHeight : TString;  

{$endif}
{$ifndef XtNmaxWidth}

{ was #define dname def_expr }
function XtNmaxWidth : TString;  

{$endif}
{$ifndef XtCMaxWidth}

{ was #define dname def_expr }
function XtCMaxWidth : TString;  

{$endif}
{$ifndef XtNmaxHeight}

{ was #define dname def_expr }
function XtNmaxHeight : TString;  

{$endif}
{$ifndef XtCMaxHeight}

{ was #define dname def_expr }
function XtCMaxHeight : TString;  

{$endif}
{$ifndef XtNwidthInc}

{ was #define dname def_expr }
function XtNwidthInc : TString;  

{$endif}
{$ifndef XtCWidthInc}

{ was #define dname def_expr }
function XtCWidthInc : TString;  

{$endif}
{$ifndef XtNheightInc}

{ was #define dname def_expr }
function XtNheightInc : TString;  

{$endif}
{$ifndef XtCHeightInc}

{ was #define dname def_expr }
function XtCHeightInc : TString;  

{$endif}
{$ifndef XtNminAspectY}

{ was #define dname def_expr }
function XtNminAspectY : TString;  

{$endif}
{$ifndef XtCMinAspectY}

{ was #define dname def_expr }
function XtCMinAspectY : TString;  

{$endif}
{$ifndef XtNmaxAspectY}

{ was #define dname def_expr }
function XtNmaxAspectY : TString;  

{$endif}
{$ifndef XtCMaxAspectY}

{ was #define dname def_expr }
function XtCMaxAspectY : TString;  

{$endif}
{$ifndef XtNminAspectX}

{ was #define dname def_expr }
function XtNminAspectX : TString;  

{$endif}
{$ifndef XtCMinAspectX}

{ was #define dname def_expr }
function XtCMinAspectX : TString;  

{$endif}
{$ifndef XtNmaxAspectX}

{ was #define dname def_expr }
function XtNmaxAspectX : TString;  

{$endif}
{$ifndef XtCMaxAspectX}

{ was #define dname def_expr }
function XtCMaxAspectX : TString;  

{$endif}
{$ifndef XtNwmTimeout}

{ was #define dname def_expr }
function XtNwmTimeout : TString;  

{$endif}
{$ifndef XtCWmTimeout}

{ was #define dname def_expr }
function XtCWmTimeout : TString;  

{$endif}
{$ifndef XtNwaitForWm}

{ was #define dname def_expr }
function XtNwaitForWm : TString;  

{$endif}
{$ifndef XtCWaitForWm}

{ was #define dname def_expr }
function XtCWaitForWm : TString;  

{$endif}
{$ifndef XtNwaitforwm}

{ was #define dname def_expr }
function XtNwaitforwm : TString;  

{$endif}
{$ifndef XtCWaitforwm}

{ was #define dname def_expr }
function XtCWaitforwm : TString;  

{$endif}
{$ifndef XtNclientLeader}

{ was #define dname def_expr }
function XtNclientLeader : TString;  

{$endif}
{$ifndef XtCClientLeader}

{ was #define dname def_expr }
function XtCClientLeader : TString;  

{$endif}
{$ifndef XtNwindowRole}

{ was #define dname def_expr }
function XtNwindowRole : TString;  

{$endif}
{$ifndef XtCWindowRole}

{ was #define dname def_expr }
function XtCWindowRole : TString;  

{$endif}
{$ifndef XtNurgency}

{ was #define dname def_expr }
function XtNurgency : TString;  

{$endif}
{$ifndef XtCUrgency}

{ was #define dname def_expr }
function XtCUrgency : TString;  

{$endif}
{$ifndef XtNcancelCallback}

{ was #define dname def_expr }
function XtNcancelCallback : TString;  

{$endif}
{$ifndef XtNcloneCommand}

{ was #define dname def_expr }
function XtNcloneCommand : TString;  

{$endif}
{$ifndef XtCCloneCommand}

{ was #define dname def_expr }
function XtCCloneCommand : TString;  

{$endif}
{$ifndef XtNconnection}

{ was #define dname def_expr }
function XtNconnection : TString;  

{$endif}
{$ifndef XtCConnection}

{ was #define dname def_expr }
function XtCConnection : TString;  

{$endif}
{$ifndef XtNcurrentDirectory}

{ was #define dname def_expr }
function XtNcurrentDirectory : TString;  

{$endif}
{$ifndef XtCCurrentDirectory}

{ was #define dname def_expr }
function XtCCurrentDirectory : TString;  

{$endif}
{$ifndef XtNdieCallback}

{ was #define dname def_expr }
function XtNdieCallback : TString;  

{$endif}
{$ifndef XtNdiscardCommand}

{ was #define dname def_expr }
function XtNdiscardCommand : TString;  

{$endif}
{$ifndef XtCDiscardCommand}

{ was #define dname def_expr }
function XtCDiscardCommand : TString;  

{$endif}
{$ifndef XtNenvironment}

{ was #define dname def_expr }
function XtNenvironment : TString;  

{$endif}
{$ifndef XtCEnvironment}

{ was #define dname def_expr }
function XtCEnvironment : TString;  

{$endif}
{$ifndef XtNinteractCallback}

{ was #define dname def_expr }
function XtNinteractCallback : TString;  

{$endif}
{$ifndef XtNjoinSession}

{ was #define dname def_expr }
function XtNjoinSession : TString;  

{$endif}
{$ifndef XtCJoinSession}

{ was #define dname def_expr }
function XtCJoinSession : TString;  

{$endif}
{$ifndef XtNprogramPath}

{ was #define dname def_expr }
function XtNprogramPath : TString;  

{$endif}
{$ifndef XtCProgramPath}

{ was #define dname def_expr }
function XtCProgramPath : TString;  

{$endif}
{$ifndef XtNresignCommand}

{ was #define dname def_expr }
function XtNresignCommand : TString;  

{$endif}
{$ifndef XtCResignCommand}

{ was #define dname def_expr }
function XtCResignCommand : TString;  

{$endif}
{$ifndef XtNrestartCommand}

{ was #define dname def_expr }
function XtNrestartCommand : TString;  

{$endif}
{$ifndef XtCRestartCommand}

{ was #define dname def_expr }
function XtCRestartCommand : TString;  

{$endif}
{$ifndef XtNrestartStyle}

{ was #define dname def_expr }
function XtNrestartStyle : TString;  

{$endif}
{$ifndef XtCRestartStyle}

{ was #define dname def_expr }
function XtCRestartStyle : TString;  

{$endif}
{$ifndef XtNsaveCallback}

{ was #define dname def_expr }
function XtNsaveCallback : TString;  

{$endif}
{$ifndef XtNsaveCompleteCallback}

{ was #define dname def_expr }
function XtNsaveCompleteCallback : TString;  

{$endif}
{$ifndef XtNsessionID}

{ was #define dname def_expr }
function XtNsessionID : TString;  

{$endif}
{$ifndef XtCSessionID}

{ was #define dname def_expr }
function XtCSessionID : TString;  

{$endif}
{$ifndef XtNshutdownCommand}

{ was #define dname def_expr }
function XtNshutdownCommand : TString;  

{$endif}
{$ifndef XtCShutdownCommand}

{ was #define dname def_expr }
function XtCShutdownCommand : TString;  

{$endif}
{$ifndef XtNerrorCallback}

{ was #define dname def_expr }
function XtNerrorCallback : TString;  

{$endif}
{$endif}
{ XTSTRINGDEFINES  }
{$ifndef XTSTRINGDEFINES}
{$undef _XtShell_h_Const}
{$endif}
{ Class record constants  }
type
  PShellWidgetClass = ^TShellWidgetClass;
  TShellWidgetClass = PShellClassRec;

  POverrideShellWidgetClass = ^TOverrideShellWidgetClass;
  TOverrideShellWidgetClass = POverrideShellClassRec;

  PWMShellWidgetClass = ^TWMShellWidgetClass;
  TWMShellWidgetClass = PWMShellClassRec;

  PTransientShellWidgetClass = ^TTransientShellWidgetClass;
  TTransientShellWidgetClass = PTransientShellClassRec;

  PTopLevelShellWidgetClass = ^TTopLevelShellWidgetClass;
  TTopLevelShellWidgetClass = PTopLevelShellClassRec;

  PApplicationShellWidgetClass = ^TApplicationShellWidgetClass;
  TApplicationShellWidgetClass = PApplicationShellClassRec;

  PSessionShellWidgetClass = ^TSessionShellWidgetClass;
  TSessionShellWidgetClass = PSessionShellClassRec;
{$ifndef SHELL}
  var
    shellWidgetClass : TWidgetClass;cvar;external;
    overrideShellWidgetClass : TWidgetClass;cvar;external;
    wmShellWidgetClass : TWidgetClass;cvar;external;
    transientShellWidgetClass : TWidgetClass;cvar;external;
    topLevelShellWidgetClass : TWidgetClass;cvar;external;
    applicationShellWidgetClass : TWidgetClass;cvar;external;
    sessionShellWidgetClass : TWidgetClass;cvar;external;
{$endif}
{$endif}
{ _XtShell_h  }
{ DON'T ADD STUFF AFTER THIS #endif  }

implementation

{ was #define dname def_expr }
function XtNiconName : TString;
  begin
    XtNiconName:=TString(@(XtShellStrings[0]));
  end;

{ was #define dname def_expr }
function XtCIconName : TString;
  begin
    XtCIconName:=TString(@(XtShellStrings[9]));
  end;

{ was #define dname def_expr }
function XtNiconPixmap : TString;
  begin
    XtNiconPixmap:=TString(@(XtShellStrings[18]));
  end;

{ was #define dname def_expr }
function XtCIconPixmap : TString;
  begin
    XtCIconPixmap:=TString(@(XtShellStrings[29]));
  end;

{ was #define dname def_expr }
function XtNiconWindow : TString;
  begin
    XtNiconWindow:=TString(@(XtShellStrings[40]));
  end;

{ was #define dname def_expr }
function XtCIconWindow : TString;
  begin
    XtCIconWindow:=TString(@(XtShellStrings[51]));
  end;

{ was #define dname def_expr }
function XtNiconMask : TString;
  begin
    XtNiconMask:=TString(@(XtShellStrings[62]));
  end;

{ was #define dname def_expr }
function XtCIconMask : TString;
  begin
    XtCIconMask:=TString(@(XtShellStrings[71]));
  end;

{ was #define dname def_expr }
function XtNwindowGroup : TString;
  begin
    XtNwindowGroup:=TString(@(XtShellStrings[80]));
  end;

{ was #define dname def_expr }
function XtCWindowGroup : TString;
  begin
    XtCWindowGroup:=TString(@(XtShellStrings[92]));
  end;

{ was #define dname def_expr }
function XtNvisual : TString;
  begin
    XtNvisual:=TString(@(XtShellStrings[104]));
  end;

{ was #define dname def_expr }
function XtCVisual : TString;
  begin
    XtCVisual:=TString(@(XtShellStrings[111]));
  end;

{ was #define dname def_expr }
function XtNtitleEncoding : TString;
  begin
    XtNtitleEncoding:=TString(@(XtShellStrings[118]));
  end;

{ was #define dname def_expr }
function XtCTitleEncoding : TString;
  begin
    XtCTitleEncoding:=TString(@(XtShellStrings[132]));
  end;

{ was #define dname def_expr }
function XtNsaveUnder : TString;
  begin
    XtNsaveUnder:=TString(@(XtShellStrings[146]));
  end;

{ was #define dname def_expr }
function XtCSaveUnder : TString;
  begin
    XtCSaveUnder:=TString(@(XtShellStrings[156]));
  end;

{ was #define dname def_expr }
function XtNtransient : TString;
  begin
    XtNtransient:=TString(@(XtShellStrings[166]));
  end;

{ was #define dname def_expr }
function XtCTransient : TString;
  begin
    XtCTransient:=TString(@(XtShellStrings[176]));
  end;

{ was #define dname def_expr }
function XtNoverrideRedirect : TString;
  begin
    XtNoverrideRedirect:=TString(@(XtShellStrings[186]));
  end;

{ was #define dname def_expr }
function XtCOverrideRedirect : TString;
  begin
    XtCOverrideRedirect:=TString(@(XtShellStrings[203]));
  end;

{ was #define dname def_expr }
function XtNtransientFor : TString;
  begin
    XtNtransientFor:=TString(@(XtShellStrings[220]));
  end;

{ was #define dname def_expr }
function XtCTransientFor : TString;
  begin
    XtCTransientFor:=TString(@(XtShellStrings[233]));
  end;

{ was #define dname def_expr }
function XtNiconNameEncoding : TString;
  begin
    XtNiconNameEncoding:=TString(@(XtShellStrings[246]));
  end;

{ was #define dname def_expr }
function XtCIconNameEncoding : TString;
  begin
    XtCIconNameEncoding:=TString(@(XtShellStrings[263]));
  end;

{ was #define dname def_expr }
function XtNallowShellResize : TString;
  begin
    XtNallowShellResize:=TString(@(XtShellStrings[280]));
  end;

{ was #define dname def_expr }
function XtCAllowShellResize : TString;
  begin
    XtCAllowShellResize:=TString(@(XtShellStrings[297]));
  end;

{ was #define dname def_expr }
function XtNcreatePopupChildProc : TString;
  begin
    XtNcreatePopupChildProc:=TString(@(XtShellStrings[314]));
  end;

{ was #define dname def_expr }
function XtCCreatePopupChildProc : TString;
  begin
    XtCCreatePopupChildProc:=TString(@(XtShellStrings[335]));
  end;

{ was #define dname def_expr }
function XtNtitle : TString;
  begin
    XtNtitle:=TString(@(XtShellStrings[356]));
  end;

{ was #define dname def_expr }
function XtCTitle : TString;
  begin
    XtCTitle:=TString(@(XtShellStrings[362]));
  end;

{ was #define dname def_expr }
function XtRAtom : TString;
  begin
    XtRAtom:=TString(@(XtShellStrings[368]));
  end;

{ was #define dname def_expr }
function XtNargc : TString;
  begin
    XtNargc:=TString(@(XtShellStrings[373]));
  end;

{ was #define dname def_expr }
function XtCArgc : TString;
  begin
    XtCArgc:=TString(@(XtShellStrings[378]));
  end;

{ was #define dname def_expr }
function XtNargv : TString;
  begin
    XtNargv:=TString(@(XtShellStrings[383]));
  end;

{ was #define dname def_expr }
function XtCArgv : TString;
  begin
    XtCArgv:=TString(@(XtShellStrings[388]));
  end;

{ was #define dname def_expr }
function XtNiconX : TString;
  begin
    XtNiconX:=TString(@(XtShellStrings[393]));
  end;

{ was #define dname def_expr }
function XtCIconX : TString;
  begin
    XtCIconX:=TString(@(XtShellStrings[399]));
  end;

{ was #define dname def_expr }
function XtNiconY : TString;
  begin
    XtNiconY:=TString(@(XtShellStrings[405]));
  end;

{ was #define dname def_expr }
function XtCIconY : TString;
  begin
    XtCIconY:=TString(@(XtShellStrings[411]));
  end;

{ was #define dname def_expr }
function XtNinput : TString;
  begin
    XtNinput:=TString(@(XtShellStrings[417]));
  end;

{ was #define dname def_expr }
function XtCInput : TString;
  begin
    XtCInput:=TString(@(XtShellStrings[423]));
  end;

{ was #define dname def_expr }
function XtNiconic : TString;
  begin
    XtNiconic:=TString(@(XtShellStrings[429]));
  end;

{ was #define dname def_expr }
function XtCIconic : TString;
  begin
    XtCIconic:=TString(@(XtShellStrings[436]));
  end;

{ was #define dname def_expr }
function XtNinitialState : TString;
  begin
    XtNinitialState:=TString(@(XtShellStrings[443]));
  end;

{ was #define dname def_expr }
function XtCInitialState : TString;
  begin
    XtCInitialState:=TString(@(XtShellStrings[456]));
  end;

{ was #define dname def_expr }
function XtNgeometry : TString;
  begin
    XtNgeometry:=TString(@(XtShellStrings[469]));
  end;

{ was #define dname def_expr }
function XtCGeometry : TString;
  begin
    XtCGeometry:=TString(@(XtShellStrings[478]));
  end;

{ was #define dname def_expr }
function XtNbaseWidth : TString;
  begin
    XtNbaseWidth:=TString(@(XtShellStrings[487]));
  end;

{ was #define dname def_expr }
function XtCBaseWidth : TString;
  begin
    XtCBaseWidth:=TString(@(XtShellStrings[497]));
  end;

{ was #define dname def_expr }
function XtNbaseHeight : TString;
  begin
    XtNbaseHeight:=TString(@(XtShellStrings[507]));
  end;

{ was #define dname def_expr }
function XtCBaseHeight : TString;
  begin
    XtCBaseHeight:=TString(@(XtShellStrings[518]));
  end;

{ was #define dname def_expr }
function XtNwinGravity : TString;
  begin
    XtNwinGravity:=TString(@(XtShellStrings[529]));
  end;

{ was #define dname def_expr }
function XtCWinGravity : TString;
  begin
    XtCWinGravity:=TString(@(XtShellStrings[540]));
  end;

{ was #define dname def_expr }
function XtNminWidth : TString;
  begin
    XtNminWidth:=TString(@(XtShellStrings[551]));
  end;

{ was #define dname def_expr }
function XtCMinWidth : TString;
  begin
    XtCMinWidth:=TString(@(XtShellStrings[560]));
  end;

{ was #define dname def_expr }
function XtNminHeight : TString;
  begin
    XtNminHeight:=TString(@(XtShellStrings[569]));
  end;

{ was #define dname def_expr }
function XtCMinHeight : TString;
  begin
    XtCMinHeight:=TString(@(XtShellStrings[579]));
  end;

{ was #define dname def_expr }
function XtNmaxWidth : TString;
  begin
    XtNmaxWidth:=TString(@(XtShellStrings[589]));
  end;

{ was #define dname def_expr }
function XtCMaxWidth : TString;
  begin
    XtCMaxWidth:=TString(@(XtShellStrings[598]));
  end;

{ was #define dname def_expr }
function XtNmaxHeight : TString;
  begin
    XtNmaxHeight:=TString(@(XtShellStrings[607]));
  end;

{ was #define dname def_expr }
function XtCMaxHeight : TString;
  begin
    XtCMaxHeight:=TString(@(XtShellStrings[617]));
  end;

{ was #define dname def_expr }
function XtNwidthInc : TString;
  begin
    XtNwidthInc:=TString(@(XtShellStrings[627]));
  end;

{ was #define dname def_expr }
function XtCWidthInc : TString;
  begin
    XtCWidthInc:=TString(@(XtShellStrings[636]));
  end;

{ was #define dname def_expr }
function XtNheightInc : TString;
  begin
    XtNheightInc:=TString(@(XtShellStrings[645]));
  end;

{ was #define dname def_expr }
function XtCHeightInc : TString;
  begin
    XtCHeightInc:=TString(@(XtShellStrings[655]));
  end;

{ was #define dname def_expr }
function XtNminAspectY : TString;
  begin
    XtNminAspectY:=TString(@(XtShellStrings[665]));
  end;

{ was #define dname def_expr }
function XtCMinAspectY : TString;
  begin
    XtCMinAspectY:=TString(@(XtShellStrings[676]));
  end;

{ was #define dname def_expr }
function XtNmaxAspectY : TString;
  begin
    XtNmaxAspectY:=TString(@(XtShellStrings[687]));
  end;

{ was #define dname def_expr }
function XtCMaxAspectY : TString;
  begin
    XtCMaxAspectY:=TString(@(XtShellStrings[698]));
  end;

{ was #define dname def_expr }
function XtNminAspectX : TString;
  begin
    XtNminAspectX:=TString(@(XtShellStrings[709]));
  end;

{ was #define dname def_expr }
function XtCMinAspectX : TString;
  begin
    XtCMinAspectX:=TString(@(XtShellStrings[720]));
  end;

{ was #define dname def_expr }
function XtNmaxAspectX : TString;
  begin
    XtNmaxAspectX:=TString(@(XtShellStrings[731]));
  end;

{ was #define dname def_expr }
function XtCMaxAspectX : TString;
  begin
    XtCMaxAspectX:=TString(@(XtShellStrings[742]));
  end;

{ was #define dname def_expr }
function XtNwmTimeout : TString;
  begin
    XtNwmTimeout:=TString(@(XtShellStrings[753]));
  end;

{ was #define dname def_expr }
function XtCWmTimeout : TString;
  begin
    XtCWmTimeout:=TString(@(XtShellStrings[763]));
  end;

{ was #define dname def_expr }
function XtNwaitForWm : TString;
  begin
    XtNwaitForWm:=TString(@(XtShellStrings[773]));
  end;

{ was #define dname def_expr }
function XtCWaitForWm : TString;
  begin
    XtCWaitForWm:=TString(@(XtShellStrings[783]));
  end;

{ was #define dname def_expr }
function XtNwaitforwm : TString;
  begin
    XtNwaitforwm:=TString(@(XtShellStrings[793]));
  end;

{ was #define dname def_expr }
function XtCWaitforwm : TString;
  begin
    XtCWaitforwm:=TString(@(XtShellStrings[803]));
  end;

{ was #define dname def_expr }
function XtNclientLeader : TString;
  begin
    XtNclientLeader:=TString(@(XtShellStrings[813]));
  end;

{ was #define dname def_expr }
function XtCClientLeader : TString;
  begin
    XtCClientLeader:=TString(@(XtShellStrings[826]));
  end;

{ was #define dname def_expr }
function XtNwindowRole : TString;
  begin
    XtNwindowRole:=TString(@(XtShellStrings[839]));
  end;

{ was #define dname def_expr }
function XtCWindowRole : TString;
  begin
    XtCWindowRole:=TString(@(XtShellStrings[850]));
  end;

{ was #define dname def_expr }
function XtNurgency : TString;
  begin
    XtNurgency:=TString(@(XtShellStrings[861]));
  end;

{ was #define dname def_expr }
function XtCUrgency : TString;
  begin
    XtCUrgency:=TString(@(XtShellStrings[869]));
  end;

{ was #define dname def_expr }
function XtNcancelCallback : TString;
  begin
    XtNcancelCallback:=TString(@(XtShellStrings[877]));
  end;

{ was #define dname def_expr }
function XtNcloneCommand : TString;
  begin
    XtNcloneCommand:=TString(@(XtShellStrings[892]));
  end;

{ was #define dname def_expr }
function XtCCloneCommand : TString;
  begin
    XtCCloneCommand:=TString(@(XtShellStrings[905]));
  end;

{ was #define dname def_expr }
function XtNconnection : TString;
  begin
    XtNconnection:=TString(@(XtShellStrings[918]));
  end;

{ was #define dname def_expr }
function XtCConnection : TString;
  begin
    XtCConnection:=TString(@(XtShellStrings[929]));
  end;

{ was #define dname def_expr }
function XtNcurrentDirectory : TString;
  begin
    XtNcurrentDirectory:=TString(@(XtShellStrings[940]));
  end;

{ was #define dname def_expr }
function XtCCurrentDirectory : TString;
  begin
    XtCCurrentDirectory:=TString(@(XtShellStrings[957]));
  end;

{ was #define dname def_expr }
function XtNdieCallback : TString;
  begin
    XtNdieCallback:=TString(@(XtShellStrings[974]));
  end;

{ was #define dname def_expr }
function XtNdiscardCommand : TString;
  begin
    XtNdiscardCommand:=TString(@(XtShellStrings[986]));
  end;

{ was #define dname def_expr }
function XtCDiscardCommand : TString;
  begin
    XtCDiscardCommand:=TString(@(XtShellStrings[1001]));
  end;

{ was #define dname def_expr }
function XtNenvironment : TString;
  begin
    XtNenvironment:=TString(@(XtShellStrings[1016]));
  end;

{ was #define dname def_expr }
function XtCEnvironment : TString;
  begin
    XtCEnvironment:=TString(@(XtShellStrings[1028]));
  end;

{ was #define dname def_expr }
function XtNinteractCallback : TString;
  begin
    XtNinteractCallback:=TString(@(XtShellStrings[1040]));
  end;

{ was #define dname def_expr }
function XtNjoinSession : TString;
  begin
    XtNjoinSession:=TString(@(XtShellStrings[1057]));
  end;

{ was #define dname def_expr }
function XtCJoinSession : TString;
  begin
    XtCJoinSession:=TString(@(XtShellStrings[1069]));
  end;

{ was #define dname def_expr }
function XtNprogramPath : TString;
  begin
    XtNprogramPath:=TString(@(XtShellStrings[1081]));
  end;

{ was #define dname def_expr }
function XtCProgramPath : TString;
  begin
    XtCProgramPath:=TString(@(XtShellStrings[1093]));
  end;

{ was #define dname def_expr }
function XtNresignCommand : TString;
  begin
    XtNresignCommand:=TString(@(XtShellStrings[1105]));
  end;

{ was #define dname def_expr }
function XtCResignCommand : TString;
  begin
    XtCResignCommand:=TString(@(XtShellStrings[1119]));
  end;

{ was #define dname def_expr }
function XtNrestartCommand : TString;
  begin
    XtNrestartCommand:=TString(@(XtShellStrings[1133]));
  end;

{ was #define dname def_expr }
function XtCRestartCommand : TString;
  begin
    XtCRestartCommand:=TString(@(XtShellStrings[1148]));
  end;

{ was #define dname def_expr }
function XtNrestartStyle : TString;
  begin
    XtNrestartStyle:=TString(@(XtShellStrings[1163]));
  end;

{ was #define dname def_expr }
function XtCRestartStyle : TString;
  begin
    XtCRestartStyle:=TString(@(XtShellStrings[1176]));
  end;

{ was #define dname def_expr }
function XtNsaveCallback : TString;
  begin
    XtNsaveCallback:=TString(@(XtShellStrings[1189]));
  end;

{ was #define dname def_expr }
function XtNsaveCompleteCallback : TString;
  begin
    XtNsaveCompleteCallback:=TString(@(XtShellStrings[1202]));
  end;

{ was #define dname def_expr }
function XtNsessionID : TString;
  begin
    XtNsessionID:=TString(@(XtShellStrings[1223]));
  end;

{ was #define dname def_expr }
function XtCSessionID : TString;
  begin
    XtCSessionID:=TString(@(XtShellStrings[1233]));
  end;

{ was #define dname def_expr }
function XtNshutdownCommand : TString;
  begin
    XtNshutdownCommand:=TString(@(XtShellStrings[1243]));
  end;

{ was #define dname def_expr }
function XtCShutdownCommand : TString;
  begin
    XtCShutdownCommand:=TString(@(XtShellStrings[1259]));
  end;

{ was #define dname def_expr }
function XtNerrorCallback : TString;
  begin
    XtNerrorCallback:=TString(@(XtShellStrings[1275]));
  end;


end.
